<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker 容器</title>
      <link href="/2023/08/05/linux/linux-docker/"/>
      <url>/2023/08/05/linux/linux-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- <span class="string">`linux`</span> 内核本身支持容器技术 <span class="string">`LXC`</span>，市面上很多基于<span class="string">`LXC`</span>开发的容器管理软件，<span class="string">`docker`</span>作为代表</span><br><span class="line">-可以操作系统层面创建一个个独立的空间<span class="string">`namespace`</span>，和隔离的环境(拥有自己的进程、网络、文件系统)</span><br><span class="line">-可以对资源进行限制</span><br><span class="line">-容器<span class="string">`直接使用`</span>宿主机<span class="string">`硬件配置`</span>(每个容器不需要单独的操作系统，共用一套内个，而虚拟机需要独立的操作系统)</span><br><span class="line">-  <span class="string">`docker`</span> 就是一个对容器增删改查的工具</span><br><span class="line">-基于 <span class="string">`golang`</span> 开发，初期就是调用 <span class="string">`LXC`</span>提供的api，对容器进行管理</span><br><span class="line">    -就是宿主机上的一个进程（<span class="string">`containerd`</span>）</span><br><span class="line">-运维开发基于这些容器部署应用</span><br><span class="line">-每个容器内的应用端口可以相同，服务版本路径相同，不冲突</span><br><span class="line">-实现了开发、测试、生产的部署<span class="string">`一致性`</span>。极大减少运维成本</span><br><span class="line">    -用<span class="string">`docker`</span>前，开发直接发布代码，测试或正试环境需要配置符合代码要求的环境，依赖程序版本。</span><br><span class="line">-用<span class="string">`docker`</span>后，开发本地测好了环境，将 <span class="string">`dockerfile 镜像`</span> 给出去，<span class="string">`linux`</span>各个环境就能直接运行</span><br><span class="line">    -从 git 拿源码</span><br><span class="line">-从 docker hub/docker harbor 等 docker 仓库拿自己上传的镜像</span><br><span class="line">-后来 <span class="string">`docker`</span> 不用 <span class="string">`LXC`</span>，而使用 <span class="string">`go`</span> 自己开发的容器技术<span class="string">`Libcontainer`</span></span><br></pre></td></tr></table></figure><h3 id="docker-核心组件"><a href="#docker-核心组件" class="headerlink" title="docker 核心组件"></a>docker 核心组件</h3><ul><li><p>通过描述脚步 Dockerfile构建 image 镜像</p></li><li><p>通过 image 镜像构建容器 （我们将应用程序运行所需要的环境，打包为镜像文件）</p></li><li><p>容器 Container ，运行应用程序</p></li><li><p>进行仓库，保存、上传、下载 image 镜像</p></li></ul><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><p><a href="https://docs.docker.com/engine/install/centos/">官网</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、OS requirements 确认版本 centos7 以上 `<span class="built_in">cat</span> /etc/redhat-release`</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、Uninstall old versions (卸载旧版本)</span></span><br><span class="line"> sudo yum remove docker \</span><br><span class="line">         docker-client \</span><br><span class="line">         docker-client-latest \</span><br><span class="line">         docker-common \</span><br><span class="line">         docker-latest \</span><br><span class="line">         docker-latest-logrotate \</span><br><span class="line">         docker-logrotate \</span><br><span class="line">         docker-engine</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、安装 gcc gcc-c++</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、Set up the repository (第一次需要安装 docker源，设置docker镜像仓库)</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo （慢）</span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、Install Docker Engine （正式开始安装docker相关）</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、启动</span></span><br><span class="line">sudo systemctl start docker </span><br><span class="line">docker version （包含客户端和服务端）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、运行镜像</span></span><br><span class="line">docker login  (账号密码lzoxun/l26)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里云加速，登录阿里云品台 =&gt; 找到容器镜像服务 =&gt; 做菜单镜像工具 =&gt; 镜像加速器（选择对应系统）</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://isfdtj2p.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">华为云 镜像资源，进行中心，镜像加速器按钮</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、运行镜像（本地没有就会远程拉取，确保改镜像真实存在）</span></span><br><span class="line">sudo docker run chenlicn163/hello-word</span><br><span class="line">sudo docker images # 查看本地镜像</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9、卸载</span></span><br><span class="line">sudo systemctl stop docker </span><br><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras</span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><h3 id="docker-管理"><a href="#docker-管理" class="headerlink" title="docker 管理"></a>docker 管理</h3><blockquote><p>常用命令</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">-启动类与帮助命令</span><br><span class="line">-<span class="string">`systemctl start/stop/enable/status/restat docker`</span></span><br><span class="line">    -<span class="string">`docker info`</span> 查看docker信息</span><br><span class="line">    -<span class="string">`docker --help`</span></span><br><span class="line">-镜像命令 <span class="string">`【image】`</span></span><br><span class="line">-<span class="string">`docker images`</span> 【查】查看镜像列表（<span class="string">`-a`</span> 含历史镜像,<span class="string">`-q`</span> 只显示镜像<span class="variable constant_">ID</span>）</span><br><span class="line">    -<span class="string">`docker search &lt;image-name&gt;`</span> 搜索镜像是否在远程库</span><br><span class="line">    -<span class="string">`docker search --limit 5 &lt;image-name&gt;`</span></span><br><span class="line">   -<span class="string">`docker pull &lt;image-name:TAG&gt;`</span> 【增】</span><br><span class="line">    -<span class="string">`docker pull &lt;image-name&gt;`</span> 默认最新</span><br><span class="line">    -<span class="string">`docker system df `</span> 查看镜像占用的空间</span><br><span class="line">    -<span class="string">`docker rmi &lt;image-name&gt;`</span> 【删】</span><br><span class="line">    -<span class="string">`docker rmi -f &lt;image-name&gt;`</span> 强制删除</span><br><span class="line">        -<span class="string">`docker rmi -f &lt;image-name&gt; &lt;image-name2&gt;`</span></span><br><span class="line">        -<span class="string">`docker rmi -f $(docker images -qa)`</span> 删除全部</span><br><span class="line">-容器命令<span class="string">`【container】`</span>（必须基于一个linux发行版先 <span class="string">`docker pull centos/ubuntu`</span>）</span><br><span class="line">-<span class="string">`docker run ubuntu`</span> 通过<span class="string">`Ubuntu`</span> 通过<span class="string">`ubuntu`</span>镜像创建一个独立容器</span><br><span class="line">    -<span class="string">`docker run -it --name=centos1 centos`</span></span><br><span class="line">    -   <span class="string">`docker run -it --name=centos1 centos /bin/bash`</span> 指定bash</span><br><span class="line">    -<span class="string">`--name`</span> 为容器指定名字，否则随机生成容器名字</span><br><span class="line">       -<span class="string">`-i`</span>交互模式运行容器(如:centos)</span><br><span class="line">        -<span class="string">`-t`</span>返回一个伪终端,<span class="string">`-it`</span> 就相当于进入<span class="string">`Ubuntu`</span>这个容器系统里了</span><br><span class="line">        -<span class="string">`-p 8000:80/-P`</span>端口映射小p指定端口，大p系统分配随机端口</span><br><span class="line">        -<span class="string">`-p`</span>:开启指定容器内启动<span class="number">80</span>端口，暴露出来映射到外部主机的<span class="number">8000</span></span><br><span class="line">        -<span class="string">`-d`</span> 守护模式运行的容器(如:redis)，后台运行并返回<span class="string">`&lt;container-id&gt;`</span> （非守护类型镜像，这样运行后会自动退出）</span><br><span class="line">        -<span class="string">`-v`</span> 数据卷</span><br><span class="line">        -<span class="string">`--privileged=true`</span> 容器内部授权,给予root用户权限</span><br><span class="line">    -<span class="string">`docker ps`</span> 列出所有正在运行的<span class="string">`docker容器`</span></span><br><span class="line">    -<span class="string">`-a`</span> </span><br><span class="line">-<span class="string">`-l`</span> 显示最近创建的的容器</span><br><span class="line">        -<span class="string">`-q`</span> 只显示容器<span class="variable constant_">ID</span></span><br><span class="line">        -<span class="string">`-n number`</span> 显示上次创建的number个容器（包括所有状态）</span><br><span class="line">    -退出</span><br><span class="line">-<span class="string">`exit`</span> -it 进入容器，<span class="string">`exit`</span> 退出，容器停止</span><br><span class="line">        -<span class="string">`ctrl+q+p`</span> -it 进入容器，<span class="string">`ctrl+q+p`</span>退出，容器不会停止</span><br><span class="line">    -重新启动<span class="string">`停止`</span>的容器</span><br><span class="line">    -<span class="string">`docker ps -a`</span> 查看存活与已停止的容器，得到<span class="string">`&lt;container-id&gt;`</span></span><br><span class="line">        -<span class="string">`docker start &lt;container-id&gt;`</span></span><br><span class="line">    -停止</span><br><span class="line">-<span class="string">`docker stop &lt;container-id&gt;`</span></span><br><span class="line">    -删除</span><br><span class="line">-<span class="string">`docker rm &lt;container-id&gt;`</span> 删除<span class="string">`已停止`</span>的容器</span><br><span class="line">        -<span class="string">`docker kill &lt;container-id&gt;`</span> 删除<span class="string">`存活`</span>的容器(强制删除)</span><br><span class="line">-<span class="string">`docker rm -f $(docker ps -aq)`</span> 或 <span class="string">`docker ps -aq |  xargs docker rm`</span>  删除所有容器</span><br><span class="line">-对某个容器的操作(任何容器都是一个简易的linux环境，)</span><br><span class="line">    -查看容器的日志</span><br><span class="line">-<span class="string">`docker logs &lt;container-id&gt;`</span></span><br><span class="line">    -查看容器内进程</span><br><span class="line">-<span class="string">`docker top &lt;container-id&gt;`</span></span><br><span class="line">    -细致的查看容器情况</span><br><span class="line">-<span class="string">`docker inspect &lt;container-id&gt;`</span></span><br><span class="line">    -重新进入活动状态的容器</span><br><span class="line">-<span class="string">`docker exec -it &lt;container-id&gt; /bin/bash`</span> 进入后，<span class="string">`可以启动`</span>新进程，exit退出<span class="string">`不会导致`</span>容器停止</span><br><span class="line">        -<span class="string">`docker attach &lt;container-id&gt;`</span>             进入后，<span class="string">`不会启动`</span>新进程，exit退出<span class="string">`会导致`</span>容器停止</span><br><span class="line">    -容器文件复制到主机【备份】</span><br><span class="line">-<span class="string">`docker cp &lt;container-id&gt;:容器文件位置 主机文件位置`</span></span><br><span class="line">        -<span class="string">`docker cp test.txt mycontainer:/xxx/test.txt`</span> 容器外的文件复制到容器内</span><br><span class="line">    -容器的导入导出【备份】</span><br><span class="line">-<span class="string">`docker export &lt;container-id&gt; &gt; new-name.tar`</span> 指定容器导出到当前目录下的<span class="string">`new-name.tar`</span>中</span><br><span class="line">        -<span class="string">`cat new-name.tar | docker import - 用户名/包名:版本号`</span> 用户名/包名:版本号 这三个随便写</span><br><span class="line">-容器加强</span><br><span class="line">-<span class="string">`docker commit`</span> 提交容器副本，使我们自己的操作成为**新的一层镜像**</span><br><span class="line">        -<span class="string">`docker commit -m=&#x27;描述信息&#x27; -a=&#x27;作者&#x27; &lt;container-id&gt;  用户名/包名:版本号`</span></span><br><span class="line">    -容器开机自启</span><br><span class="line">-<span class="string">`docker update --restart=always &lt;container-id&gt;`</span></span><br></pre></td></tr></table></figure><h3 id="docker-容器数据卷"><a href="#docker-容器数据卷" class="headerlink" title="docker 容器数据卷"></a>docker 容器数据卷</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote><p>每次修改容器内配置需要进入很麻烦，我们可以在容器外不提供一个映射路径，达到容器外修改配置文件，容器内自动修改的技术，<strong>容器数据卷</strong>可以将容器内的目录挂在到主机上(但是它时同步过来的) 做到<strong>容器内外数据共享</strong>，容器间也可以</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>方式一: 通过命令挂载 -v （volume）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安全模块 selinux 把权限禁掉了，无法使用-v 命令进行挂载</span></span><br><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line">docker inspect &lt;容器 id&gt;  =&gt; Mounts 查看是否挂载成功</span><br></pre></td></tr></table></figure><h4 id="具名挂载与匿名挂载"><a href="#具名挂载与匿名挂载" class="headerlink" title="具名挂载与匿名挂载"></a>具名挂载与匿名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-v juming:/inner/dir  具名挂载</span><br><span class="line">-v /inner/der:rw    匿名挂载  rw可读限制容器内可写</span><br><span class="line">-v /out/dir:/inner/dir:ro  指定路径挂载，到指定路径 ro 限制容器内只读</span><br><span class="line"></span><br><span class="line">`docker volume ls`:查看卷名,匿名的就是自动生成的数据</span><br><span class="line">`docker volume inspect juname`：查看详细位置，相关信息等</span><br></pre></td></tr></table></figure><p>多个 mysql 或多个容器间数据共享</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里使用到了下面的 Dockerfile 的挂载 直接 -v也一样</span></span><br><span class="line">dockre run -it --name parent lzoxun/镜像名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dockre run -it --name child1 --volumes-from parent</span></span><br><span class="line">dockre run -it --name child3 --volumes-from parent 镜像2 /bin/bash  #child3 通过是镜像2的容器，并继承镜像1的卷</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">父子容器挂载目录下的文件相互共享，parent就是数据卷容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">父容器删除了，不会影响子容器</span></span><br></pre></td></tr></table></figure><h3 id="docker-镜像"><a href="#docker-镜像" class="headerlink" title="docker 镜像"></a>docker 镜像</h3><h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><blockquote><p> UnionFS（联合文件系统）</p></blockquote><p>​        是一个分层，轻量，高性能的文件系统，支持<strong>对文件系统的修改作为一次提交，一层层提交</strong>，是docker 镜像的基础，通过分层继承，基于基础镜像制作各种应用镜像</p><ul><li>资源共享（如果多个镜像都从base镜像构建而来，那么宿主机只<strong>保存一份base镜像</strong>就可以了）</li><li>每个镜像的每一层都可以被共享</li><li>镜像是只读的，只有容器才是可写的（平时操作的<strong>容器</strong>也是一层，位于最顶部，下面的都是镜像层）</li></ul><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><p><img src="/../..%5Cstatic%5Cimg%5Cdocker_images.png" alt="流程图"></p><blockquote><p> <code>docker image镜像</code> 只包含linux发行版，以及依赖的东西，很小，内核与宿主机共用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-基于 <span class="string">`Dockerfile`</span> 构建 <span class="string">`docker 镜像`</span> 上传</span><br><span class="line">-基于容器 <span class="string">`docker commit`</span> 构建</span><br><span class="line">-<span class="string">`docker pull 下载镜像`</span></span><br><span class="line">-运行镜像，启动<span class="string">`docker`</span>容器 </span><br><span class="line">-docker run &lt;images-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>重新打包commit，build，等操作没指定镜像名与标签，images列表中出现 none 的情况叫<strong>虚悬镜像</strong>，有容器还去删除，也会</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images prune # 删除所有虚悬镜像</span><br></pre></td></tr></table></figure><h5 id="登录docker"><a href="#登录docker" class="headerlink" title="登录docker"></a>登录docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录到 docker hub</span></span><br><span class="line">docker login -u username -p password </span><br><span class="line">docker login --username=username --password=password</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录到其他平台需要加上仓库地址（如华为云，平台可以直接拿到指令）</span></span><br><span class="line">docker login -u username -p password swr.cn-north-4.myhuaweicloud.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出登录</span></span><br><span class="line">docker logout</span><br></pre></td></tr></table></figure><h5 id="传到公有云"><a href="#传到公有云" class="headerlink" title="传到公有云"></a>传到公有云</h5><blockquote><p>华为云、阿里云 找到容器进行服务</p></blockquote><p><strong>阿里云</strong>创建命名空间，创建镜像仓库，生成操作指南一堆指令运行就行</p><p><strong>华为云</strong>创建组织，登录指令登录，就可以<code>push/pull</code> 了</p><p>![](..&#x2F;..&#x2F;static\img\2023-08-06 105242.png)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保 docker login 成功</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接push自己本地的镜像名和版本号（swr.cn-north-4.myhuaweicloud.com/lzoxun/ 这一串自己去官网获取）</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个华为云的镜像版本</span></span><br><span class="line">docker tag e35a5ead7f7a swr.cn-north-4.myhuaweicloud.com/lzoxun/myubuntutohwy:v1.0.0 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">push 到华为云（docker search 是查不出来的）</span></span><br><span class="line">docker push swr.cn-north-4.myhuaweicloud.com/lzoxun/myubuntutohwy:v1.0.0  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pull 拉取</span></span><br><span class="line">docker pull swr.cn-north-4.myhuaweicloud.com/lzoxun/myubuntutohwy:v1.0.0</span><br></pre></td></tr></table></figure><h5 id="传到私有云-Docker-Registry"><a href="#传到私有云-Docker-Registry" class="headerlink" title="传到私有云(Docker Registry)"></a>传到私有云(Docker Registry)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">docker pull registry</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成一个容器（默认仓库创建在容器的 /var/lib/registry 中）</span></span><br><span class="line">docker run -d -p 5000:5000 -v /root/myregistry:/var/lib/registry --privileged=true --name=reg1 registry</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个自己的镜像</span></span><br><span class="line">docker commit -m=&#x27;描述信息测试提交&#x27; -a=&#x27;lzoxun&#x27; fcb503350948 mycentos:1.1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询私有库的镜像列表</span></span><br><span class="line">curl -XGET http://192.168.203.133:5000/v2/_catalog</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将自己的镜像修改成符合规范的tag名</span></span><br><span class="line">docker tag mycentos:1.1 192.168.203.133:5000/mycentos:1.1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认不支持 http 去 /etc/docker/daemon/json 配置</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://xxxx.mirror.aliyuncs.com&quot;],</span><br><span class="line">&quot;insecure-registries&quot;: [&quot;192.168.203.133:5000&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重庆docker</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送到私有服务器</span></span><br><span class="line">docker push 192.168.203.133:5000/mycentos:1.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展创建第二个容器继承reg1,通过<span class="built_in">id</span>和name都行</span></span><br><span class="line">docker run -d -p 5001:5000 --privileged=true --volumes-from &lt;container-id&gt; --name=&#x27;reg2&#x27; registry</span><br></pre></td></tr></table></figure><h3 id="常用服务"><a href="#常用服务" class="headerlink" title="常用服务"></a>常用服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker 私有库</span></span><br><span class="line">docker run -d -p 5000:5000 -v /opt/docker/registry:/var/lib/registry --privileged=true --name=reg1 registry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Tomcat</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat tomcat:8 # 直接就能通过 ip:8080 访问Tomcat了</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mysql</span></span><br><span class="line">docker run -p 3307:3306 --name mysql -v /opt/docker/mysql/conf:/etc/mysql/conf.d -v /opt/docker/mysql/logs:/logs -v /opt/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br><span class="line"></span><br><span class="line">exec 进入容器 mysql -uroot -p 进行登录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis-server /etc/redis/redis.conf 告诉Redis去 /etc/redis/redis.conf 下读取配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 redis.conf 把自己的配置复制进去</span></span><br><span class="line">docker run -p 6379:6379 --name redis --privileged=true -v /opt/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v /opt/docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><blockquote><p>用来<strong>构建Docker镜像</strong>的文本文件，由一条条构建镜像的指令和参数构成的脚本</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-docker脚本基础知识</span><br><span class="line">    -每条指令都必须大写字母</span><br><span class="line">    -指令从上往下顺序执行（<span class="string">`#`</span>号注释）</span><br><span class="line">    -每条指令都会创建一个新的镜像层，并对镜像层进行提交</span><br><span class="line">-执行<span class="string">`Dockerfile`</span>大致流程</span><br><span class="line">-<span class="number">1</span>、从基础镜像(基于现有的镜像) <span class="string">`run`</span> 一个容器</span><br><span class="line">    -<span class="number">2</span>、执行一条条指令，并对容器进行修改</span><br><span class="line">    -<span class="number">3</span>、执行类似 <span class="string">`docker commit `</span>操作，提交一个新的镜像层</span><br><span class="line">    -<span class="number">4</span>、<span class="string">`docker`</span> 再基于刚提交的镜像 <span class="string">`run`</span> 一个新的容器</span><br><span class="line">    -<span class="number">5</span>、执行 <span class="string">`Dockerfile`</span> 中的下一条指令，直到所有指令都提交完成</span><br></pre></td></tr></table></figure><h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-`FROM`        # 基础镜像,基于哪个现有镜像为模板开始构建，从这里开始构建</span><br><span class="line">-`MAINTAINER`  # 指定维护者信息 姓名+邮箱</span><br><span class="line">-`USER`</span><br><span class="line">-`ENV`   # 构建的时候设置环境变量(ENV MY_PATH /usr/local 通过 $MY_PATH 引用)</span><br><span class="line">-`RUN`         # 构建镜像时需要运行的命令</span><br><span class="line">-shell 格式: `RUN yum install vim`</span><br><span class="line">-exec 格式:  `RUN [&#x27;可执行文件或指令&#x27;,&#x27;参数1&#x27;，&#x27;参数2&#x27;]`</span><br><span class="line">-`WORKDIR`# 镜像工作目录，进入生成的容器时默认所在目录</span><br><span class="line">-`VOLUME`# 挂载目录</span><br><span class="line">-`ONBUILD`# 但构建一个被基础的 DockerFile 就会运行 onbuild 的指令</span><br><span class="line">-`ADD`     # 将宿主机下的文件拷贝进镜像，且会自动处理URL和解压tar压缩包</span><br><span class="line">-`COPY`    # 类似 ADD 将文件拷贝到镜像中</span><br><span class="line"></span><br><span class="line">-`EXPOSE`# 暴露端口配置 外面的-p</span><br><span class="line">-`CMD`# 指定容器启动后运行的命令，可以有多个，但是只有最后一个生效</span><br><span class="line"># CMD 指令会被 docker run 后面的参数替换</span><br><span class="line">-`ENTRYPOINT`# 类似 CMD，指定容器启动的时候运行的命令，可以追加命令，不会被 docker run 后面的参数替换，会追加上去</span><br><span class="line"># ENTRYPOINT 后面的 CMD 也会变成 它的参数</span><br></pre></td></tr></table></figure><p><img src="/../..%5Cstatic%5Cimg%5Cdocker_cmd.png"></p><h4 id="Dockerfile案例"><a href="#Dockerfile案例" class="headerlink" title="Dockerfile案例"></a>Dockerfile案例</h4><blockquote><p>再 centos 基础就那些添加 vim + ifconfig + java8</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、编写 Dockerfile 文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、编写脚本内容</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">继承基础镜像centos</span></span><br><span class="line">FROM centos:7  </span><br><span class="line"></span><br><span class="line">MAINTAINER lzoxun&lt;869664233@qq.com&gt; # 维护者信息</span><br><span class="line"></span><br><span class="line">ENV MY_PATH /usr/local</span><br><span class="line">WORKDIR $MY_PATH  # 定义工作路径，通过引入 ENV 的环境变量</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim  # 安装vim</span><br><span class="line">RUN yum -y install net-tools # 安装 ifconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装java8已经对应的lib库</span></span><br><span class="line">RUN yum -y install glibc.i686</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将tar包添加到容器中</span></span><br><span class="line">RUN mkdir /usr/local/java</span><br><span class="line">ADD jdk-11.0.1_linux-x64_bin.tar.gz /usr/local/java # 用到的文件必须与 DockerFile 文件放一起 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置java环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk-11.0.1</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre</span><br><span class="line">ENV CLASSPARH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPARH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">EXPOSE 80 </span><br><span class="line">CMD echo $MY_PATH</span><br><span class="line">CMD echo &quot;success ===== &quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、Dockerfile 所在目录下 docker build -t &lt;image-name:TAG&gt; . 构建镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、docker images 出现新镜像，测试 vim、ifconfig、java -version</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、后期发布jdk-11.0.1这个版本的java项目时，再次编写Dockerfile, from 自己build 存在 jdk-11.0.1环境的镜像就行</span></span><br></pre></td></tr></table></figure><p><img src="/../..%5Cstatic%5Cimg%5Cpublishcode.png"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> lzoxun&lt;<span class="number">869664233</span>@qq.com&gt; </span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MY_PATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MY_PATH</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install glibc.i686</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /usr/local/java</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-11.0.1_linux-x64_bin.tar.gz /usr/local/java </span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk-<span class="number">11.0</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPARH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPARH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MY_PATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;success ===== &quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><h3 id="docker-network"><a href="#docker-network" class="headerlink" title="docker network"></a>docker network</h3><blockquote><p>ifconfig  docker0 虚拟网桥</p></blockquote><img src="../..\static\img\2023-08-09 230645.png" style="zoom:80%;" /><h4 id="docker-network-–help"><a href="#docker-network-–help" class="headerlink" title="docker network –help"></a>docker network –help</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-命令：</span><br><span class="line">-<span class="string">`connect`</span> 将容器连接到网络</span><br><span class="line">-<span class="string">`create`</span> 创建网络</span><br><span class="line">-<span class="string">`disconnect`</span> 断开容器与网络的连接</span><br><span class="line">    -<span class="string">`inspect`</span> 显示一个或多个网络的详细信息</span><br><span class="line">    -<span class="string">`ls`</span> 列出网络</span><br><span class="line">    -<span class="string">`prune`</span> 删除所有未使用的网络</span><br><span class="line">    -<span class="string">`rm`</span> 删除一个或多个网络</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker network <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认创建三个网络模式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网络 ID      网络名     网络模式</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">cb9c6b1e41e8   bridge    bridge    local</span><br><span class="line">c84cb2ece990   host      host      local</span><br><span class="line">5343de829d6a   none      null      local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bridge 为每一个容器分配设置IP，并将容器连接到 docker0 网络（默认）（--netowrk bridge 指定）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">host 容器不会虚拟出自己的网卡、IP等，而是直接使用宿主机的IP和端口 (--netowrk host 指定)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">null</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">container</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">宿主机与容器，容器与容器的通过docker0网桥连通</span></span><br></pre></td></tr></table></figure><blockquote><p>容器内部ip是会变的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx config gui</title>
      <link href="/2023/08/05/githubpack/nginxconfig/"/>
      <url>/2023/08/05/githubpack/nginxconfig/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/digitalocean/nginxconfig.io">nginxconfig</a> gui 界面生成nginx配置</p></blockquote><p>下载项目安装运行，生成服务地址，直接访问</p><p><img src="/../..%5Cstatic%5Cimg%5Cnginxconfig.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git-pack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔 linux的图形界面管理工具</title>
      <link href="/2023/07/29/linux/linux-bt/"/>
      <url>/2023/07/29/linux/linux-bt/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bt.cn/new/download.html">官网</a></p><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos</span></span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Win 11 系统设置</title>
      <link href="/2023/07/26/window/win-11/"/>
      <url>/2023/07/26/window/win-11/</url>
      
        <content type="html"><![CDATA[<h3 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h3><h4 id="更改图标大小"><a href="#更改图标大小" class="headerlink" title="更改图标大小"></a>更改图标大小</h4><blockquote><p>打开注册表: <code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced</code><br>1、右键 Advanced，新增 DWORD 32 位值<br>2、编辑名称为 TaskbarSi 值 0 太小不好看<br>3、任务管理器重启 <strong>Window 资源管理器</strong></p></blockquote><h4 id="更改状态栏位置-无效"><a href="#更改状态栏位置-无效" class="headerlink" title="更改状态栏位置(无效)"></a>更改状态栏位置(无效)</h4><blockquote><p>打开注册表: <code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\StuckRects3</code></p></blockquote><p>1、编辑 Settings 文件<br>2、双击 FE 下的 03 改成 01<br>3、任务管理器重启 <strong>Window 资源管理器</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git bash</title>
      <link href="/2023/07/26/window/win-gitbash/"/>
      <url>/2023/07/26/window/win-gitbash/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6844903700775845895">‘参考’</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="git-prompt-sh"><a href="#git-prompt-sh" class="headerlink" title="git-prompt.sh"></a>git-prompt.sh</h3><blockquote><p>E:\install\Git\etc\profile.d\git-prompt.sh</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">if test -f /etc/profile.d/git-sdk.sh</span><br><span class="line">then</span><br><span class="line">TITLEPREFIX=SDK-$&#123;MSYSTEM#MINGW&#125;</span><br><span class="line">else</span><br><span class="line">TITLEPREFIX=$MSYSTEM</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if test -f ~/.config/git/git-prompt.sh</span><br><span class="line">then</span><br><span class="line">. ~/.config/git/git-prompt.sh</span><br><span class="line">else</span><br><span class="line">PS1=&#x27;\[\033]0;Bash\007\]&#x27;      # 窗口标题</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\n&#x27;                 # 换行</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\[\033[32;1m\]&#x27;     # 高亮绿色</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;➜  &#x27;</span>               <span class="comment"># unicode 字符，右箭头</span></span></span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;# &#x27;               # unicode 字符，右箭头</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\[\e[33;36m\]lzo \[\033[31m\]@ \[\e[0m\]\[\e[32;1m\]\h\[\e[0m\]\[\e[31;1m\]&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\e[34;1m\]\u@\[\e[0m\]\[\e[32;1m\]\h\[\e[0m\]\[\e[31;1m\]&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\e[0m\]\[\e[32;1m\]\h\[\e[0m\]\[\e[31;1m\]&#x27;</span></span></span><br><span class="line">PS1=&quot;$PS1&quot;&#x27; ~&#x27;</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\[\033[36m\]&#x27;       # 青色</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27; in &#x27;</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\[\033[33;1m\]&#x27;     # 高亮黄色</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\W&#x27;                 # 当前目录</span><br><span class="line"></span><br><span class="line">if test -z &quot;$WINELOADERNOEXEC&quot;</span><br><span class="line">then</span><br><span class="line">GIT_EXEC_PATH=&quot;$(git --exec-path 2&gt;/dev/null)&quot;</span><br><span class="line">COMPLETION_PATH=&quot;$&#123;GIT_EXEC_PATH%/libexec/git-core&#125;&quot;</span><br><span class="line">COMPLETION_PATH=&quot;$&#123;COMPLETION_PATH%/lib/git-core&#125;&quot;</span><br><span class="line">COMPLETION_PATH=&quot;$COMPLETION_PATH/share/git/completion&quot;</span><br><span class="line">if test -f &quot;$COMPLETION_PATH/git-prompt.sh&quot;</span><br><span class="line">then</span><br><span class="line">. &quot;$COMPLETION_PATH/git-completion.bash&quot;</span><br><span class="line">. &quot;$COMPLETION_PATH/git-prompt.sh&quot;</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\[\033[31m\]&#x27;   # 红色</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;`__git_ps1`&#x27;    # git 插件</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\[\033[30m\]&#x27;</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27; [\t]&#x27;</span><br><span class="line"></span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\n&#x27;                 # 换行</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;$&#x27;</span><br><span class="line">PS1=&quot;$PS1&quot;&#x27;\[\033[37m\] &#x27;      # 青色</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">MSYS2_PS1=&quot;$PS1&quot;</span><br></pre></td></tr></table></figure><h3 id="minttyrc"><a href="#minttyrc" class="headerlink" title=".minttyrc"></a>.minttyrc</h3><ul><li><code>~/.minttyrc</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Font=DejaVu Sans Mono for Powerline</span><br><span class="line">FontHeight=12</span><br><span class="line">Transparency=low</span><br><span class="line">FontSmoothing=default</span><br><span class="line">Locale=C</span><br><span class="line">Charset=UTF-8</span><br><span class="line">Columns=88</span><br><span class="line">Rows=26</span><br><span class="line">OpaqueWhenFocused=no</span><br><span class="line">Scrollbar=none</span><br><span class="line">Language=zh_CN</span><br><span class="line"></span><br><span class="line">ForegroundColour=131,148,150</span><br><span class="line">BackgroundColour=30,30,30</span><br><span class="line">CursorColour=220,130,71</span><br><span class="line"></span><br><span class="line">BoldBlack=128,128,128</span><br><span class="line">Red=255,64,40</span><br><span class="line">BoldRed=255,128,64</span><br><span class="line">Green=64,200,64</span><br><span class="line">BoldGreen=64,255,64</span><br><span class="line">Yellow=190,190,0</span><br><span class="line">BoldYellow=255,255,64</span><br><span class="line">Blue=0,128,255</span><br><span class="line">BoldBlue=128,160,255</span><br><span class="line">Magenta=211,54,130</span><br><span class="line">BoldMagenta=255,128,255</span><br><span class="line">Cyan=64,190,190</span><br><span class="line">BoldCyan=128,255,255</span><br><span class="line">White=200,200,200</span><br><span class="line">BoldWhite=255,255,255</span><br><span class="line"></span><br><span class="line">BellTaskbar=no</span><br><span class="line">Term=xterm</span><br><span class="line">FontWeight=400</span><br><span class="line">FontIsBold=no</span><br></pre></td></tr></table></figure><h3 id="bash-profile"><a href="#bash-profile" class="headerlink" title=".bash_profile"></a>.bash_profile</h3><blockquote><p>强化 ~&#x2F;.bash_profile</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">alias .=&#x27;cd ~&#x27;</span><br><span class="line">alias ..=&#x27;cd ..&#x27;</span><br><span class="line">alias ...=&#x27;cd ../..&#x27;</span><br><span class="line"></span><br><span class="line">alias gs=&#x27;git status&#x27;</span><br><span class="line">alias ga=&#x27;git add .&#x27;</span><br><span class="line">alias gc=&#x27;git commit -m&#x27;</span><br><span class="line">alias gP=&#x27;git push&#x27;</span><br><span class="line">alias gp=&#x27;git pull&#x27;</span><br><span class="line">alias g-p=&#x27;git add . &amp;&amp; git commit -m &quot;auto deploy&quot; &amp;&amp; git push&#x27;</span><br><span class="line"></span><br><span class="line">alias oe=&quot;exit&quot;</span><br><span class="line">alias oq=&quot;quit&quot;</span><br><span class="line">alias c-host=&#x27;code /mnt/c/Windows/System32/drivers/etc/hosts&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debain 类系统</span></span><br><span class="line">alias apt=&quot;sudo apt&quot;</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/liaozhongxun/my-git-bash.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> bash</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> tmux/bin/* /usr/bin</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> tmux/share/* /usr/share -r</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> tools/* /usr/bin</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/gpakosz/.tmux">tmux 配置文件插件</a></p><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\Git\\bin\\bash.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shellArgs.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;--login&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-i&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="终端输入-set-o-vi-开启-vim-模式"><a href="#终端输入-set-o-vi-开启-vim-模式" class="headerlink" title="终端输入 set -o vi 开启 vim 模式"></a>终端输入 set -o vi 开启 vim 模式</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>winget</title>
      <link href="/2023/07/25/window/winget/"/>
      <url>/2023/07/25/window/winget/</url>
      
        <content type="html"><![CDATA[<h2 id="winget"><a href="#winget" class="headerlink" title="winget"></a>winget</h2><blockquote><p>window的包管理工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">模糊搜索相关可安装的应用</span></span><br><span class="line">winget search ftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">人工安装，下载后人工下一步</span></span><br><span class="line">winget install &lt;app-name/id&gt; -i </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 win 上已安装的软件</span></span><br><span class="line">winget list</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除引用程序</span></span><br><span class="line">winget uninstall &lt;app-name/id&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">管理程序包的来源</span></span><br><span class="line">winget source list  # 查看源</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show       显示包的相关信息</span><br><span class="line">export     导出已安装程序包的列表</span><br><span class="line">import     安装文件中的所有程序包</span><br><span class="line"></span><br><span class="line">upgrade    显示并执行可用升级</span><br><span class="line">hash       哈希安装程序的帮助程序</span><br><span class="line">validate   验证清单文件</span><br><span class="line">settings   打开设置或设置管理员设置</span><br><span class="line">features   显示实验性功能的状态</span><br><span class="line">pin        管理包钉</span><br></pre></td></tr></table></figure><h3 id="zoxide"><a href="#zoxide" class="headerlink" title="zoxide"></a>zoxide</h3><blockquote><p>快速定位目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">winget install zoxide</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记住常用的目录</span></span><br><span class="line">z dist</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后台管理系统</title>
      <link href="/2023/07/23/web/web-admin/"/>
      <url>/2023/07/23/web/web-admin/</url>
      
        <content type="html"><![CDATA[<h2 id="管理系统的定位核心"><a href="#管理系统的定位核心" class="headerlink" title="管理系统的定位核心"></a>管理系统的定位核心</h2><blockquote><p>网上流行非官方词语<strong>大前端</strong></p></blockquote><ol><li>前端</li><li>移动端 IOS&#x2F;android 开发</li><li>桌面端（electron 只要能跑 node 的平台都可以使用 electron 开发的桌面程序）</li><li>其他平台(穿戴设备、车载系统)&#x2F;VR&#x2F;AR&#x2F;…..</li><li>web3 方向</li></ol><blockquote><p>都是与用户交互的过程中，产生各种各样的数据，都通过网络请求方式汇总到后端处理储存</p></blockquote><blockquote><p>有时这些数据需要人为的去控制管理，就需要通过<strong>后台管理系统</strong> 让管理员等不同权限的角色进行数据操作</p></blockquote><blockquote><p>总的来说后台管理系统就是<strong>不同角色人群</strong>对数据库数据的<strong>增删改查的操作</strong>、<strong>数据报表统计展示</strong>、<strong>产品的配置操作</strong></p></blockquote><h2 id="项目创建于配置"><a href="#项目创建于配置" class="headerlink" title="项目创建于配置"></a>项目创建于配置</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><blockquote><p>npm init vue@latest 内部使用 create-vue 创建 vite 版本脚手架</p></blockquote><p><img src="/../../static/img/2023-02-19_100830.jpg"></p><p>项目名称、TypeScript、JSX、路由、Pinia、单元测试、端对端测试、ESLint 语法检测、Prettier 格式化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>兼容问题</title>
      <link href="/2023/07/23/web/%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
      <url>/2023/07/23/web/%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>浏览器兼容问题：不同浏览器内核，用不同的方式出头代码，导致同一套代码在不同页面展示不一致<br>1、默认内外边距 （一般在重置 css 文件中，将全部块元素边距重置为 0）<br>2、图片加标签在 IE9 存在边框，图片下面有空隙 （一般在重置 css 文件中，将 img border 设置为 0，display：block）<br>3、a 标签蓝色边框 （outline：none）<br>4、ie 9 及一下不支持 h5 或 css3 的很多属性很方法，ie 9 好一点，回支持一下常用的<br>5、opcity，手势属性。。。</p><p>&#x3D;&#x3D;proto__ 原型链 、XMLHttpRequest&#x2F;ActiveXObject</p><p>6、主流浏览器，比较少遇到了，对 css3 新属性加特殊前缀就行，webpack postcss-loader 加载 autoprefixer 插件（-webkit-、-moz-、-ms-、-o-）<br>移动端兼容问题</p><p>移动端兼容问题：<br>1、overflow:scroll,auto: ios 滑动卡顿;</p><ul><li>-webkit-overflow-scrolling:touch</li></ul><p>2、点击延迟 300ms<br>FastClick.attach(document.body)</p><p>3、边框 1px 问题<br>伪元素，背景图片、缩放，实际上用 ui 夸奖给的组件就可以额</p><p>项目中遇到的难题<br>echarts 做可视化二次开发<br>gis、智慧城市<br>兼容 IE<br>没有设计稿情况下做出好看的界面</p><p>MVC、MVP、MVVM<br>1、MVC<br>M（Model）指数据模型层，V（View）指视图层，C（Controller）指控制层</p><ul><li>数据模型层（Model）：模型对象拥有最多的处理任务，是应用程序的主体部分，它负责数据逻辑（业务规则）的处理和实现数据操作（即在数据库中存取数据）。</li><li>视图层（View）：负责格式化数据并把它们呈现给用户，包括数据展示、用户交互、数据验证、界面设计等功能（后端通过 ejs 类似的模板）。</li><li>控制层（Controller）：负责接收并转发请求，对请求进行处理后，指定视图并将响应结果发送给客户端。</li></ul><p>前端的直接用 MVC<br>将数据遍历，改变成自己想要的格式（js 调用接口 触发 C）<br>通过接口请求到的数据，相当于数据库获取操作（M）<br>渲染到 html 页面中就是（V）</p><p>2、MVP<br>将 MVC 的控制层 C 变成中间人 P（ Persenter）<br>V 向 P 要东西，P 去 M 中获取并处理，返回给 V<br>P 与 V 和 M 对接，M 和 V 不通信息</p><p>3、MVVM（Model-View-ViewModel）<br>ViewModel 首先 @click 从 V 改变 M，操作 data 数据的时候，热跟新到 V</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ol><li>浏览器间的不兼容</li></ol><ul><li><p>localStorage 在 Chromeium 中无法保存永久储存</p></li><li><p>浏览器默认的 margin 和 padding 不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一</p><ul><li>*通配符对新能不友好，所有尽量将需要处理的列出来就好</li></ul></li><li><p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示(-webkit-text-size-adjust: none; 测试无效)</p></li><li><p>盒模型，Chrome 主流浏览器盒子宽度 &#x3D; content + padding + border,设置的 width 只是 content 的宽度，IE 设置的是 content + padding + border 的总宽度，<code>box-sizing: border-box; 同步</code></p></li><li><p>字体图标得兼容</p><ul><li>OpenType&#x2F;TrueType 类字体扩展名 .ttf .otf （两个兼容性好 除了 ie8）</li><li>Embedded OpenType 类字体扩展名 .eot (仅仅 IE 支持)</li><li>SVG 字体 扩展名 .svg .svgz (主要适配苹果那个浏览器)</li><li>WOFF 开放字体扩展名 .woff （兼容性好 除了 ie8） .woff2</li></ul></li></ul><ol start="2"><li>本地 与 线上 的不兼容</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同一个浏览器，本地好好的，发布服务器就成undefined了</span></span><br><span class="line">navigator.<span class="property">clipboard</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2023/07/23/web/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/07/23/web/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>设计模式就是<code>符合某种场景</code>下<code>某个问题</code>的解决方案，通过设计模式可以增加代码的可重用性，可扩展性，可维护性，最终使得我们的代码高内聚、低耦合<br><a href="https://juejin.cn/post/7072175210874535967">掘金</a></p><h4 id="五大原则"><a href="#五大原则" class="headerlink" title="五大原则"></a>五大原则</h4><h4 id="三种类型"><a href="#三种类型" class="headerlink" title="三种类型"></a>三种类型</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>性能优化问题</title>
      <link href="/2023/07/23/web/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/"/>
      <url>/2023/07/23/web/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><h3 id="dns-与解析"><a href="#dns-与解析" class="headerlink" title="dns 与解析"></a>dns 与解析</h3><blockquote><p>link 标签的 rel 属性设置 dns-prefetch，提前获取域名对应的 IP 地址(当浏览器从（第三方）服务器请求资源时，必须先将该跨域域名解析为 IP 地址，然后浏览器才能发出请求。此过程称为 DNS 解析。)</p></blockquote><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><blockquote><p>减轻服务端压力，快速得到数据<br><strong>强缓存</strong> (服务端指定时间段内，客户端不需要重新发送该请求)</p></blockquote><ul><li>响应头 <strong>Expires</strong>：值是一个绝时间，在这个时间前缓存有效，但是如果本地时间被修改，会导致缓存失效</li><li>响应头 <strong>Cache-control</strong>：值是一个相对时间，单位为秒，资源在这个时间内有效</li></ul><p><strong>协商缓存</strong>（协商缓存需要客户端向服务端发送请求，资源未过期则服务端返回 304 否则返回新的资源）</p><blockquote><p>强缓存过期之后生效</p></blockquote><p>实现方案一 (<code>Last-Modified</code> 和 <code>If-Modified-Since</code>)<br><strong>Last-Modified</strong> 储存这一个文件最后修改日期，<strong>If-Modified-Since</strong> 会将这个日期发送给服务器，询问服务器在该日期后资源是否有更新，来决定返回的是 304 还是新资源</p><p>实现法案二(优先级高) (<code>ETag</code> 和 <code>If-None-Match</code>)<br><strong>ETag</strong> 类似于文件指纹，<strong>If-None-Match</strong> 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。</p><h3 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h3><blockquote><p>很多地方设置 web 服务器，通过 ng 配置负载均衡，减短用户与服务器的物理距离，实现新能优化</p></blockquote><h3 id="压缩响应"><a href="#压缩响应" class="headerlink" title="压缩响应"></a>压缩响应</h3><p><strong>Content-Encoding:gzip</strong></p><h3 id="避免-src-为空"><a href="#避免-src-为空" class="headerlink" title="避免 src 为空"></a>避免 src 为空</h3><blockquote><p>存在 src 浏览器仍会发送一次请求 （实在需要可以直接写标签）</p></blockquote><h2 id="页面渲染优化"><a href="#页面渲染优化" class="headerlink" title="页面渲染优化"></a>页面渲染优化</h2><ul><li>Webkit 渲染引擎流程：<ul><li>处理 HTML 并构建 DOM 树</li><li>处理 CSS 构建 CSS 规则树(CSSOM)</li><li>DOM Tree 和 CSSOM Tree 合成一棵渲染树 Render Tree。</li><li>根据渲染树来布局，计算每个节点的位置</li><li>调用 GPU 绘制，合成图层，显示在屏幕上</li></ul></li></ul><ol><li>css 影响 renderTree 的构建，会阻塞页面的渲染,尽早将 css 放在 head 页面最前端</li><li>降低 css 选择器的复杂度（选择器的<strong>右边到左边</strong>读取）<ol><li>减少嵌套</li><li>避免使用通配符</li><li>多利用继承，避免重复定义属性</li></ol></li><li>避免 js 阻塞（js 可以修改 CSSOM 和 DOM，因此 js 会阻塞页面的解析和渲染，并且会等待 css 资源的加载。js 尽量放到最后面）</li><li>使用外链式的 js 和 css（外部文件可以被浏览器缓存起来，减少 HTML 文档大小）</li><li>字体图标 iconfont 代替图片图标（减少图标请求次数）</li><li>首屏加载优化（骨架屏或动画提升用户体验，资源按需加载，首页不需要的延迟加载）</li><li>减少重绘和回流<ol><li>添加多个节点，将新节点添加 <code>DocumentFragment</code> 然后一次性添加到 dom 树中（虚拟 dom 也是类似思路）</li><li>translate 代替 top ，因为 top 会触发回流，但是 translate 不会</li><li>将动画部分通过定位脱离文档流</li></ol></li></ol><h2 id="JS-优化"><a href="#JS-优化" class="headerlink" title="JS 优化"></a>JS 优化</h2><ol><li>使用事件委托</li><li>防抖和节流</li><li>尽量不要使用 JS 动画（css3、canvas、svg 动画）</li><li>减少 DOM 操作</li><li>webWorker 开启多线程，避免页面假死 ?</li></ol><h2 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h2><ol><li><p>雪碧图<br>借助减少 http 请求次数来进行优化</p></li><li><p>图片懒加载<br>在图片即将进入可视区域的时候进行加载</p></li><li><p>使用 CSS3 代替简单图片<br>有很多图片使用 CSS 效果（渐变、阴影等）就能画出来</p></li><li><p>图片压缩<br>直接使用压缩过的图片，或者 webpack 打包时压缩</p></li><li><p>使用渐进式 JPEG<br>Baseline JPEG（标准型，从上到下加载）和 Progressive JPEG（渐进式，从模糊到清晰加载）<br>渐进式 JPEG，可以让用户开始就看到图片大致轮廓（PS 保存图片时勾选<strong>连续</strong>，得到的就是这种）</p></li><li><p>webp 是一种新的图片文件格式，同样质量下，体积必 png 和 jpeg 更小</p></li></ol><h2 id="webpack-打包优化"><a href="#webpack-打包优化" class="headerlink" title="webpack 打包优化"></a>webpack 打包优化</h2><p><a href="https://juejin.cn/post/7194400984490049573#heading-30">https://juejin.cn/post/7194400984490049573#heading-30</a> （下次总结）</p><h2 id="React-优化"><a href="#React-优化" class="headerlink" title="React 优化"></a>React 优化</h2><p>map 循环展示添加 key<br>路由懒加载<br>第三方插件按需引入<br>使用 scu，memo 或者 pureComponent 避免不必要的渲染<br>合理使用 useMemo、memo、useCallback</p><h2 id="Vue-优化"><a href="#Vue-优化" class="headerlink" title="Vue 优化"></a>Vue 优化</h2><p>v-for 添加 key<br>路由懒加载<br>第三方插件按需引入<br>合理使用 computed 和 watch<br>v-for 的同时避免使用 v-if<br>beforeDestroy 时销毁事件：比如 addEventListener 添加的事件、setTimeout、setInterval、bus.$on 绑定的监听事件等</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webrtc</title>
      <link href="/2023/07/23/web/media-webrtc/"/>
      <url>/2023/07/23/web/media-webrtc/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API">mdn</a></p><p><strong>getUserMedia</strong><br>该方法提醒用户是否允许使用音视频设备（摄像头、屏幕共享、麦克风等）<br>如果允许则返回数据流，拒绝返回错误对象，不选择也是无法调用成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果需要兼容其他或老的浏览器</span></span><br><span class="line">navigator.<span class="property">mediaDevices</span> =</span><br><span class="line">  navigator.<span class="property">mediaDevices</span> ||</span><br><span class="line">  navigator.<span class="property">webkitGetUserMedia</span> ||</span><br><span class="line">  navigator.<span class="property">mozGetUserMedia</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// constraints 指定请求媒体类型</span></span><br><span class="line">navigator.<span class="property">mediaDevices</span></span><br><span class="line">  .<span class="title function_">getUserMedia</span>(constraints)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 成功获取视频流 直接播放</span></span><br><span class="line">    video.<span class="property">srcObject</span> = stream;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// PermissionDeniedError: 被用户或系统拒绝</span></span><br><span class="line">    <span class="comment">// NotFoundError: 找不到 constraints 类型</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br><strong>getUserMedia</strong><br>描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react</title>
      <link href="/2023/07/23/web/react/react-docs/"/>
      <url>/2023/07/23/web/react/react-docs/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://zh-hans.reactjs.org/">官网</a></p><p>声明式编程：（维护状态，根据状态改变更新熏染 UI 界面） UI&#x3D;f(state）</p><p>组件化开发：</p><h4 id="开发依赖"><a href="#开发依赖" class="headerlink" title="开发依赖"></a>开发依赖</h4><p>必须依赖三个包</p><ul><li><p><strong>react</strong>：包含<code>react</code>所有核心代码</p><ul><li>包含<code>react web</code> 和 <code>react-native</code>所共同拥有的核心代码</li></ul></li><li><p><strong>react-dom</strong>：<code>react</code> 熏染在不同平台所需要的核心代码</p><ul><li>针对<code>web</code> 和<code>native</code>所完成的事情不同</li><li>web 端：<code>reacte-dom</code>会将<code>jsx</code>最终渲染成真是 DOM,显示在浏览器中</li><li>native 端：<code>react-dom</code> 会将<code>jsx</code>最终渲染成原生控件</li></ul></li><li><p><strong>babel</strong>：将 jsx 转换成 React 代码的工具</p></li></ul><hr><h4 id="对比-vue"><a href="#对比-vue" class="headerlink" title="对比 vue"></a>对比 vue</h4><p>react：用户手动 setState 的时候 去重新执行 render 函数</p><p>vue：data 数据改变直接劫持重新渲染模板</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>将页面<strong>拆分</strong>为无数个<strong>小的组件</strong>，每个组件完成自己的<strong>独立功能</strong>，<strong>方便</strong>页面的<strong>关联</strong>与<strong>维护</strong> 与 <strong>复用</strong></p><p>每个<strong>单页面</strong>应用就是一棵<strong>组件树</strong>，么个组件都将 <strong>state 数据</strong> 、<strong>方法</strong>、<strong>render</strong> 关联起来</p><p>组件类型，前面的<strong>注重 UI</strong>， 后面的<strong>注重逻辑</strong></p><blockquote><p>根据组件<strong>定义方式</strong>：**函数组件 **和 <strong>类组件</strong></p></blockquote><blockquote><p>根据内部是否有<strong>状态需要维护</strong>：<strong>无状态组件</strong> 和 <strong>有状态组件</strong></p></blockquote><blockquote><p>根据组件<strong>职责</strong>：<strong>展示型 组件</strong> 和 <strong>容器型组件</strong></p></blockquote><h4 id="类组件-rpce"><a href="#类组件-rpce" class="headerlink" title="类组件 rpce"></a>类组件 rpce</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1、组件名称必须大写开头</span><br><span class="line"> * 2、类组件必须继承 React.Component</span><br><span class="line"> * 3、必须实现 render，也是唯一必须实现的</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // 组件数据，this.state 固定的，不能改变</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            message: &quot;Hello World&quot;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        // 对需要绑定的方法, 提前绑定好this，class下默认绑定的this是undefined，箭头函数就不需要了</span><br><span class="line">        this.btnClick = this.btnClick.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 组件方法(实例方法)</span><br><span class="line">    btnClick() &#123;</span><br><span class="line">        // setState 是 React.Component 继承的方法</span><br><span class="line">        // 内部完成了两件事情:</span><br><span class="line">        // 1.将state中message值修改掉 2.自动重新执行render函数函数</span><br><span class="line">        // 2.应用类型建议不要直接该，向浅拷贝，改完，再重新全部复制过去，改变引用</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            message: &quot;Hello React&quot;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  渲染内容 render方法，名称固定 不能改变</span><br><span class="line">     *  可以返回react元素、数组|字符串|数值、fragments(高级)、Portals(高级)</span><br><span class="line">     */</span><br><span class="line">    render() &#123; // 里面的this 都是正常指向组件的this</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;&#123;this.state.message&#125;&lt;/h2&gt;</span><br><span class="line">                &#123;/* 拿到 btnClick 指针，存到这里，没有调用，当用户点击才调用，所以默认拿不到this的*/&#125;</span><br><span class="line">                &lt;button onClick=&#123;this.btnClick&#125;&gt;修改文本&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// this绑定的问题</span><br><span class="line">// const app = new App()</span><br><span class="line">// const foo = app.btnClick</span><br><span class="line">// foo(); // 默认绑定 =&gt; window =&gt; 严格模式下 =&gt; undefined  (babel 转换的和class里默认都是严格模式)</span><br><span class="line"></span><br><span class="line">// function bar() &#123;</span><br><span class="line">//   console.log(&quot;bar:&quot;, this);</span><br><span class="line">// &#125;</span><br><span class="line">// bar()</span><br><span class="line"></span><br><span class="line">// 将组件渲染到界面上</span><br><span class="line">const root = ReactDOM.createRoot(document.querySelector(&quot;#root&quot;));</span><br><span class="line">// App根组件</span><br><span class="line">root.render(&lt;App /&gt;);</span><br></pre></td></tr></table></figure><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p>生命周期就是事物从<strong>创建</strong>到<strong>销毁</strong>的过程，了解生命周期，可以让我们在<strong>适合的地方</strong>做想<strong>要做的事情</strong></p><p>生命周期 和 生命周期函数的关系</p><ul><li>整个生命周期有很多个阶段，react 可以使<strong>程序</strong>走到<strong>指定阶段</strong>时<strong>自动触发</strong>（回调）相应的<strong>生命周期函数</strong><ul><li>装载阶段（Mount），组件第一层在 DOM 树种被渲染的过程，组件<strong>挂载到 DOM</strong>上就会触发<code>componentDidMount</code></li><li>更新阶段 (Update) , 组件状态发生变化，重新渲染的过程，组件<strong>状态发生更新</strong>触发 <code>componentDidUpdate</code></li><li>卸载阶段（Unmount），组件从 DOM 树中被移除的过程，就叫<strong>即将移除</strong>触发 <code>componentWillUnmount</code></li></ul></li></ul><p>react 生命周期的过程</p><p><img src="/../../../static/img/react-live.jpg"></p><ul><li><p>Mounting 挂载阶段</p><ul><li><p><strong>constructor</strong>：创建组件实例 第一个执行 构造方法 constructor</p><ul><li>组件 都是一个类，每使用移除 <HelloX/> 都会创建一个类的实例出来</li></ul></li><li><p><strong>render</strong>：第二个执行 render 方法渲染</p><ul><li><strong>render 完成</strong> React 更新<strong>DOM</strong> 和 <strong>Refs</strong></li></ul></li><li><p><strong>componentDidMount</strong>：进行挂载到 DOM 上，挂载好就会 触发 <strong>第一个生命周期函数</strong></p><ul><li>依赖 dom 的操作</li><li>网络请求操作</li><li>处理一些订阅</li></ul></li></ul></li><li><p>更新状态阶段</p><ul><li><strong>setState</strong>：修改状态，修改完成之后<strong>又执行 render</strong> 重新 更新<strong>DOM</strong> 和 <strong>Refs</strong></li><li><strong>componentDidUpdate</strong>：更新完成，触发<strong>第二个生命周期函数</strong></li></ul></li><li><p>卸载阶段</p><ul><li><strong>componentWillUnmount</strong>：将组件从 DOM 树中移除之后触发 <strong>第三个生命周期函数</strong><ul><li>取消一些订阅，清理操作</li></ul></li></ul></li><li><p>不常用的生命周期</p><ul><li><strong>shouldComponentUpdate</strong>：处于 <strong>setDate 到 render 之间</strong>，如果返回<strong>false</strong>，说明<strong>不需要重新渲染</strong>界面</li><li><strong>getSnapshotBeforeUpdate</strong>：处于 <strong>render 到 更新 DOM 之间</strong>，获取或保存一写 DOM 更新前的一些信息</li></ul></li></ul><h4 id="函数组件-rfce，rmc"><a href="#函数组件-rfce，rmc" class="headerlink" title="函数组件 rfce，rmc"></a>函数组件 rfce，rmc</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 与类组件的差异（不包含hook）</span><br><span class="line"> *     没有生命周期，没有生命周期函数，也会被更新并挂载</span><br><span class="line"> *     this 关键字不能指向组件实例</span><br><span class="line"> *     内部没有状态 state,</span><br><span class="line"> * 函数组件存在的缺陷</span><br><span class="line"> * 修改message之后，函数组件不知道自己要重新渲染</span><br><span class="line"> *      如果页面重新渲染，函数被重新执行，又会重新改变message</span><br><span class="line"> *      Hook 的出现时函数组件解决了没有state，没有生命周期等问题</span><br><span class="line"> */</span><br><span class="line">function App(props)&#123;</span><br><span class="line">    let message = &quot;lzoxun&quot;</span><br><span class="line">    // return 的东西与类组件的一致</span><br><span class="line">    return &lt;h1&gt;react元素 &#123;message&#125;&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><h4 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h4><h5 id="父子通信（props-由父到子）"><a href="#父子通信（props-由父到子）" class="headerlink" title="父子通信（props 由父到子）"></a>父子通信（props 由父到子）</h5><blockquote><p>组件存在<strong>嵌套关系</strong>，<strong>嵌进来</strong>的组件称为<strong>子组件</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// App.js</span><br><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import Headers from &quot;./components/Headers&quot;</span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            title: &#x27;首页&#x27;,</span><br><span class="line">            list: [1, 2, 3, 4, 5],</span><br><span class="line">            infos: &#123;</span><br><span class="line">                name: &#x27;lzo&#x27;,</span><br><span class="line">                height: &quot;380cm&quot;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            count: 0,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changeCount(num) &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            count: this.state.count + num</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;/* 父传子：向子组件传入一个title等数据 */&#125;</span><br><span class="line">                &#123;/* 子传父：向子组件传入回调，接收子组件发送的数据 childExec*/&#125;</span><br><span class="line">                &lt;Headers</span><br><span class="line">                    title=&#123;this.state.title&#125;</span><br><span class="line">                    infos=&#123;this.state.infos&#125;</span><br><span class="line">                    list=&#123;this.state.list&#125;</span><br><span class="line">                    childExec=&#123;(num) =&gt; this.changeCount(num)&#125;</span><br><span class="line">                    slotele=&#123;&lt;div&gt;传入React元素实现插槽&lt;/div&gt;&#125;</span><br><span class="line">                    sloteleArea=&#123;(text) =&gt; &lt;div&gt;&#123;text&#125;&lt;/div&gt;&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;div className=&#x27;children-1&#x27;&gt;通过子元素实现插槽效果&lt;/div&gt;</span><br><span class="line">                    &lt;div className=&#x27;children-2&#x27;&gt;通过 this.props.children 获取组件间的子元素&lt;/div&gt;</span><br><span class="line">                &lt;/Headers&gt;</span><br><span class="line">                &lt;div&gt;&#123;this.state.count&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/* App.js  =&gt;  Headers.js */</span><br><span class="line">import React from &quot;react&quot;; // imr</span><br><span class="line">import PropTypes from &#x27;prop-types&#x27; // impt 用来限制props数据类型</span><br><span class="line"></span><br><span class="line">class Headers extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        // props 接收父组件传入的所有数据</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        console.log(this.props); // 可以直接使用</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changeData() &#123;</span><br><span class="line">        this.props.childExec(3)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;父传子 =》 &#123;this.props.title&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div&gt;子传父 =》 &lt;button onClick=&#123;e =&gt; this.changeData()&#125;&gt;+3&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div className=&quot;slot&quot;&gt;</span><br><span class="line">                    &lt;span className=&quot;left&quot;&gt;子元素的使用 =》 left&lt;/span&gt;</span><br><span class="line">                        &#123;this.props.children[0]&#125; &#123;/* 弊端就是需要多个子元素的话，所有都在列表，位置无法固定 */&#125;</span><br><span class="line">                        &#123;this.props.slotele&#125;</span><br><span class="line">                        &#123;this.props.sloteleArea(&#x27;作用域插槽，内容自定&#x27;)&#125;</span><br><span class="line">                    &lt;span className=&quot;right&quot;&gt;right&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 如果需要限制类型的话，也可以用ts</span><br><span class="line">Headers.propTypes = &#123;</span><br><span class="line">    title: PropTypes.string.isRequired, // 字符串类型，并且必传</span><br><span class="line">    infos: PropTypes.object,</span><br><span class="line">    list: PropTypes.array,</span><br><span class="line">    slotele: PropTypes.element</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 设置默认值</span><br><span class="line">Headers.defaultProps = &#123;</span><br><span class="line">    list: [],</span><br><span class="line">    infos: &#123;&#125;,</span><br><span class="line">    slotele:&lt;div&gt;默认&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Headers;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="非父子隔层通信"><a href="#非父子隔层通信" class="headerlink" title="非父子隔层通信"></a>非父子隔层通信</h5><blockquote><p>官方提供的 Context ，数据共享，后期可以用 redux 代替</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* App.js  =&gt;  HeadersChild.js */</span><br></pre></td></tr></table></figure><blockquote><p>EventBus 事件总线，可以监听触发事件传值</p></blockquote><h4 id="setState-详细使用"><a href="#setState-详细使用" class="headerlink" title="setState 详细使用"></a>setState 详细使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/* 1、基本用法 */</span><br><span class="line">this.setState(&#123;</span><br><span class="line">message: &quot;hello word&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 2、回调函数 */</span><br><span class="line">this.setState((state,props)=&gt;&#123;</span><br><span class="line">    // 可以先处理 state,props</span><br><span class="line">    return &#123;</span><br><span class="line">        message: &quot;hello word&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 3、setState 在 react 事件处理中默认是异步调用</span><br><span class="line"> *    - 异步可以提升性能，获取同一阶段 多个setState改变，批量更新</span><br><span class="line"> *    - 如果是同步的，setState 后，render 还没有执行，state和要给子组件的props不能保存同步</span><br><span class="line"> *    -</span><br><span class="line"> *    - 第二个参数回调中可以拿到最终结果</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">this.setState(&#123;</span><br><span class="line">message: &quot;hello word&quot;</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">     console.log(&quot;++++++:&quot;, this.state.message) // 拿到更新后的数据</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 4、react 18 之前的同步做法，不是React事件的回调就能同步，之后全部setState做法都是异步的 */</span><br><span class="line"> setTimeout(() =&gt; &#123;</span><br><span class="line">     // 在react18之前, setTimeout中setState操作, 是同步操作</span><br><span class="line">     // 在react18之后, setTimeout中setState异步操作(批处理)</span><br><span class="line">     this.setState(&#123; message: &quot;hello word 111&quot; &#125;)</span><br><span class="line">     console.log(this.state.message)</span><br><span class="line"> &#125;, 0);</span><br><span class="line"></span><br><span class="line">/* 5、偏要实现同步效果，使用官方的 flushSync*/</span><br><span class="line">import &#123; flushSync &#125; from &#x27;react-dom&#x27;</span><br><span class="line">flushSync(() =&gt; &#123;</span><br><span class="line">    this.setState(&#123; message: &quot;你好啊, 李银河&quot; &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(this.state.message) // 设置后先执行render，再执行这里</span><br></pre></td></tr></table></figure><blockquote><p>数据不可变</p></blockquote><p>应用 类型数据不要去直接修改，如果有变化，解构出来，改好直接，全部替换过去，否则 <strong>PuerComponent</strong> 类组件里不会生效</p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><h5 id="更新机制"><a href="#更新机制" class="headerlink" title="更新机制"></a>更新机制</h5><p><img src="/../../../static/img/2022-12-19_075525.jpg"></p><ul><li>通过唯一的、不变的 key 对比新旧 DOM 树，尽量复用</li><li>dom 树中不会跨层比较</li></ul><h5 id="shouldComponentUpdate-（SCU）"><a href="#shouldComponentUpdate-（SCU）" class="headerlink" title="shouldComponentUpdate （SCU）"></a>shouldComponentUpdate （SCU）</h5><ul><li><p>阻止 render 函数被随意执行</p></li><li><p>父组件 <strong>setState</strong> 被调用，即使<strong>数据没变</strong>， <strong>render 函数</strong>会被<strong>重新执行</strong>，<strong>所有子组件</strong>都会重新渲染</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/* 原理通过生命周期 shouldComponentUpdate(nexeProps,newState) SCU拦截优化*/</span><br><span class="line">shouldComponentUpdate(newProps,newState)&#123;</span><br><span class="line">    if(this.state.message != newState.message)&#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 子组件 拦截*/</span><br><span class="line">shouldComponentUpdate(newProps,newState)&#123;</span><br><span class="line">    if(this.props.message != newProps.message)&#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 上面太繁琐，react提供的解决方案 */</span><br><span class="line"></span><br><span class="line">/* 类组件 Component 换成 PuerComponent 帮做我们浅层比较上面的朝操作*/</span><br><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import Headers from &quot;./components/Headers&quot;</span><br><span class="line">class App extends React.PuerComponent &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.state = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;&lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br><span class="line"></span><br><span class="line">/* 函数组件 通过memo处理上面的问题*/</span><br><span class="line">/* 正常情况下，通过memo包裹的组件，只有props发生改变，组件才会重新渲染 */</span><br><span class="line">const PropFile = memo(function(props)&#123;</span><br><span class="line">    return &lt;h2&gt;&#123;prop.message&#125;&lt;/h2&gt;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="React-Refs-获取-dom"><a href="#React-Refs-获取-dom" class="headerlink" title="React Refs 获取 dom"></a>React Refs 获取 dom</h5><blockquote><p>ref</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; createRef, forwardRef &#125; from &#x27;react&#x27;</span><br><span class="line">import Headers from &quot;./components/Headers&quot;</span><br><span class="line"></span><br><span class="line">// 通过 forwardRef 定义一个函数组件</span><br><span class="line">const Headers2 = forwardRef(function(props,ref)&#123;</span><br><span class="line">    retrun (</span><br><span class="line">        &lt;h1 ref=&#123;ref&#125;&gt;Headers2 h1&lt;/h1&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">class App extends React.PuerComponent &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.state = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        this.titleRef = createRef();</span><br><span class="line">        this.titleEl = null;</span><br><span class="line">        this.headRef = createRef();</span><br><span class="line">        this.headRef2 = createRef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getNatDom()&#123;</span><br><span class="line">        // 1、直接获取</span><br><span class="line">        console.log(this.refs.lzo);</span><br><span class="line"></span><br><span class="line">        // 2、提前创建好ref对象，绑定到元素上</span><br><span class="line">        console.log(this.titleRef.current)</span><br><span class="line"></span><br><span class="line">        // 3、通过回调得到元素 赋值给 this.titleEl</span><br><span class="line">        console.log(this.titleEl)</span><br><span class="line"></span><br><span class="line">        // 4、类组件：通过 ref 获取，函数组件没有实例所有无法获取</span><br><span class="line">        console.log(this.headRef.current)</span><br><span class="line"></span><br><span class="line">        // 5、函数组件，需要forwardRef,拿到 里面的某个节点，如 h1</span><br><span class="line">        console.log(this.headRef2.current) // 得到 &lt;h1&gt;Headers2 h1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div ref=&#x27;lzo&#x27;&gt;1&lt;/div&gt;</span><br><span class="line">            &lt;div ref=&#123;this.titleRef&#125;&gt;2&lt;/div&gt;</span><br><span class="line">            &lt;div ref=&#123;el =&gt; this.titleEl = el&#125;&gt;3&lt;/div&gt;</span><br><span class="line">            &lt;Headers ref=&#123;this.headRef&#125;/&gt;</span><br><span class="line">            &lt;Headers2 ref=&#123;this.headRef2&#125;/&gt;</span><br><span class="line">            &lt;button onClick=&#123;e =&gt; this.getNatDom()&#125;&gt;&lt;/button&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h5 id="受控组件与非受控组件"><a href="#受控组件与非受控组件" class="headerlink" title="受控组件与非受控组件"></a>受控组件与非受控组件</h5><blockquote><p>react 没有双向搬到，当表单元素绑定 value 属性后就变成了 <strong>受控组件</strong>，值交给 react 控制</p><p>受控组件是<strong>无法输入</strong>的，只能通过 <strong>onChange</strong> 事件来操作，通过事件对象拿到最新 value，赋值到到 state 上</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export class BrotherOne extends Component &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super()</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            name: &quot;default&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changeInput(e) &#123;</span><br><span class="line">        console.log(e.target.value)</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            name: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">        // 或 批量写法</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            [e.target.name]: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &lt;input value=&#123;this.state.name&#125; name=&#x27;name&#x27; onChange=&#123;e =&gt; this.changeInput(e)&#125; /&gt;</span><br><span class="line">                &#123;/* 非受控组件 */&#125;</span><br><span class="line">                &lt;input defaultValue=&#123;this.state.name&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default BrotherOne</span><br></pre></td></tr></table></figure><h4 id="高阶组件（HOC）"><a href="#高阶组件（HOC）" class="headerlink" title="高阶组件（HOC）"></a>高阶组件（HOC）</h4><blockquote><p>高阶函数：接收<strong>另外一个函数</strong>作为<strong>参数</strong> 或 <strong>返回一个函数</strong>作为<strong>返回值</strong> 的函数</p><p>高阶组件：本身就是一个函数，接收一个<strong>组件</strong>作为<strong>参数</strong> 并且 <strong>返回一个新的组件</strong>，在渲染之前<strong>拦截</strong>，处理到新组件后返回</p></blockquote><p>应用场景</p><ul><li><p>代替了<strong>Mixin</strong>混入</p></li><li><p>对组件注入数据</p></li><li><p>封装隔代传值的 Context</p></li><li><p><strong>memo</strong>就是一个高阶函数，性能优化也是通过高阶组件方式实现的</p></li><li><p>使用大量 HOC，包裹太多层嵌套，也不好，然后出现了<strong>Hooks</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 高阶组件,给使用的组件添加上 title</span><br><span class="line">export default function setTitle(WarpperComponent) &#123;</span><br><span class="line">    return function (props) &#123; // 函数组件中操作</span><br><span class="line">        console.log(&#123;...props&#125;); // 将父级本来就有的props 和 我们要新增的数据 一起传递给子组件将</span><br><span class="line">        return &lt;WarpperComponent &#123;...props&#125; title=&#x27;成功使用高阶组件 setTitle&#x27; /&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">import React, &#123; PureComponent &#125; from &#x27;react&#x27;</span><br><span class="line">import setTitle from &#x27;./my-hoc/setTitle&#x27;</span><br><span class="line"></span><br><span class="line">export class App extends PureComponent &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123; title &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;&gt;</span><br><span class="line">                &lt;div&gt;App - &#123;title&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default setTitle(App)</span><br></pre></td></tr></table></figure><h4 id="高阶应用"><a href="#高阶应用" class="headerlink" title="高阶应用"></a>高阶应用</h4><h5 id="createPortal-vue3-Teleport"><a href="#createPortal-vue3-Teleport" class="headerlink" title="createPortal (vue3 Teleport)"></a>createPortal (vue3 Teleport)</h5><blockquote><p><strong>createPortal</strong>：将 React 元素挂载到 root 外的其他位置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPortal &#125; from &#x27;react-dom&#x27;</span><br><span class="line"></span><br><span class="line">// jsx中</span><br><span class="line">export class CreatePortal extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        createPortal(&lt;div&gt;createPortal&lt;/div&gt;,document.querySelector(&quot;#lzo&quot;))</span><br><span class="line">        &#123;/* lzo元素必须提前存在 */&#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Fragment-vue3-Fragment"><a href="#Fragment-vue3-Fragment" class="headerlink" title="Fragment (vue3 Fragment)"></a>Fragment (vue3 Fragment)</h5><blockquote><p><strong>Fragment</strong>：包裹一段代码而不渲染到页面上，存在类<strong>似 key 的属性</strong>无法使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Fragment &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">// jsx中</span><br><span class="line">rendel()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Fragment&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;下面是 Fragment 语法糖，&lt;/div&gt;</span><br><span class="line">                &lt;&gt;</span><br><span class="line">                &lt;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Fragment&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h5><blockquote><p>异步加载未加载出来时，先使用 fallback 中的组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">root.render(</span><br><span class="line">    &lt;HashRouter&gt;</span><br><span class="line">        &lt;Suspense fallback=&#123;&lt;h3&gt;Loading...&lt;/h3&gt;&#125;&gt;</span><br><span class="line">            &lt;App /&gt;</span><br><span class="line">        &lt;/Suspense&gt;</span><br><span class="line">    &lt;/HashRouter&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="StrictMode"><a href="#StrictMode" class="headerlink" title="StrictMode"></a>StrictMode</h5><blockquote><p>StrictMode：仅在开发模式下生效的严格模式，也不会渲染到页面上</p></blockquote><p>检测范围，检测到报错提示</p><ul><li>识别不安全不推荐生命周期</li><li>废弃 API</li><li>第一种过期的 refs 用法</li><li>检测一些意外副作用<ul><li><strong>开发环境</strong>中 <strong>constructor</strong>，<strong>生命周期</strong> 会被<strong>故意调用两次</strong>，查看你的代码执行多次时是否会产生一些问题（如事件没有移除）</li></ul></li></ul><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><blockquote><p>认识 JSX</p></blockquote><p>概念</p><ul><li>JSX 是一种 JavaScript 的语法扩展，或称为 <code>JavaScript XML</code></li><li>它用于描述<strong>UI 界面 view,</strong> 并且<strong>完全</strong>可以和 J<strong>avaScript 融合在一起</strong></li><li>它不同于 vue 的模板语法，<strong>不需要</strong>专门学习模块语法中的<strong>一些指令</strong>（比如 v-for，v-if）</li><li>React 认为 <strong>逻辑渲染</strong>本质上与其他<strong>UI 逻辑</strong>存在很强的<strong>内在耦合</strong>（关联性强），所以选择 JSX<ul><li>UI 中绑定事件</li><li>展示数据状态</li><li>状态改变又要改变 UI</li></ul></li></ul><p>位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">    retrun (); // 这里面 或 放到这里使用的，就是jsx,运行会被bable转成js代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>书写规范 <code>retrun () 中</code></p></blockquote><ul><li>只能有<strong>一个根元素</strong></li><li><strong>小括号</strong>，使 JSX 可以换行书写，方便阅读</li><li>单标签必须 <code>/&gt;</code>结尾</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>作为子元素<code>&#123;&#125;</code>插入内容 <strong>Number</strong>、<strong>String</strong>、<strong>Array</strong> 可以直接显示，<strong>undefined</strong>、<strong>null</strong>、<strong>boll ** 不显示，</strong>Object 对象** 不能直接插入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">// 1.定义App根组件</span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            message:&#x27;note&#x27;,</span><br><span class="line">            count:0,</span><br><span class="line">            arr:[1,2,3,4],</span><br><span class="line">            isReady:true</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.btnClick = this.btnClick.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btnClick()&#123;console.log(this)&#125;</span><br><span class="line">    btn2Click = ()=&gt; console.log(this);</span><br><span class="line">    btn3Click()&#123;console.log(this)&#125;;</span><br><span class="line">    btn4Click(event, name, age) &#123;console.log(event, name, age)&#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123;message,count,arr,isReady &#125; = this.state;</span><br><span class="line">        const countAdd = count + 1;</span><br><span class="line"></span><br><span class="line">        let ele = null;</span><br><span class="line">        if(isReady)&#123;</span><br><span class="line">            ele = &lt;h1&gt;h1&lt;/h1&gt;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            ele = &lt;h2&gt;h2&lt;/h2&gt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return (</span><br><span class="line">            &#123; /* 注释 */ &#125;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123; /* 1、注释 */ &#125;</span><br><span class="line">                &#123; /* 2、插入内容变量 */ &#125;</span><br><span class="line">                &lt;h2&gt;&#123;message&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">                &#123; /* 3、插入表达式 没有计算属性，可以直接通过js完成*/ &#125;</span><br><span class="line">                &lt;h2&gt;&#123;1+2&#125;&lt;/h2&gt;</span><br><span class="line">                &lt;h2&gt;&#123;countAdd&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">                &#123; /* 4、调用方法 */ &#125;</span><br><span class="line">                &lt;ul&gt;&#123;arr.map(item=&gt; &lt;li&gt;&#123;item&#125;&lt;/li&gt;)&#125;&lt;/ul&gt;</span><br><span class="line">                &lt;ul&gt;&#123;this.getItem&#125;&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">                &#123; /* 5、绑定属性 */ &#125;</span><br><span class="line">                &lt;img title=&#123;message&#125; src=&#123;xxx&#125;&gt;&lt;/img&gt;</span><br><span class="line">                &lt;h2 className=&quot;box&quot; &gt;绑定类&lt;/h2&gt; &#123; /* class 是关键字，bable解析可能会产生误解 */ &#125;</span><br><span class="line">&lt;h2 className=&#123;`box1 box2 $&#123;countAdd==2?&#x27;box3&#x27;:&#x27;box4&#x27;&#125;`&#125; &gt;绑定类&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">                &#123; /* 6、绑定样式 */ &#125;</span><br><span class="line">                 &lt;h2 style=&#123;&#123;color: &quot;red&quot;, fontSize: &quot;30px&quot;&#125;&#125;&gt;呵呵呵呵&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">                &#123; /* 7、绑定事件 小驼峰*/ &#125;</span><br><span class="line">                 &lt;button onClick=&#123;this.btnClick&#125;&gt;修改文本&lt;/button&gt;</span><br><span class="line">                 &lt;button onClick=&#123;this.btn2Click&#125;&gt;按钮2&lt;/button&gt;</span><br><span class="line">                 &lt;button onClick=&#123;() =&gt; this.btn3Click()&#125;&gt;需要执行&lt;/button&gt;</span><br><span class="line">                 &lt;button onClick=&#123;(event) =&gt; this.btn4Click(event, &quot;why&quot;, 18)&#125;&gt;按钮4&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">                &#123; /* 8、条件渲染 js怎样就怎样 */ &#125;</span><br><span class="line">                &lt;div&gt;&#123;ele&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div&gt;&#123; isReady?&lt;h1&gt;h1&lt;/h1&gt;:&lt;h2&gt;h2&lt;/h2&gt;  &#125;&lt;/div&gt;</span><br><span class="line">                &lt;div style=&#123;&#123;display:isReady ? &#x27;block&#x27;: &#x27;none&#x27;&#125;&#125;&gt;v-show &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &#123; /* 9、列表渲染 ，如果添加限制，向把arr处理一下再遍历 */ &#125;</span><br><span class="line">                &lt;div&gt;&#123;arr.map(item=&gt; &lt;div className=&#x27;item&#x27;&gt;item&lt;/div&gt;)&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getItem()&#123;</span><br><span class="line">        &#123; /* 如果复杂的逻辑 */ &#125;</span><br><span class="line">        retrun this.state.arr.map(item=&gt; &lt;li&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const root = ReactDOM.createRoot(document.querySelector(&quot;#root&quot;));</span><br><span class="line">root.render(&lt;App /&gt;);</span><br></pre></td></tr></table></figure><blockquote><p>Bable 解析 JSX</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;/*</span><br><span class="line">React.createElement(type,config,children)</span><br><span class="line"></span><br><span class="line">1、bable 将每一个 div 转换为 React.createElement(&quot;div&quot;,null,null)</span><br><span class="line">通过 createElement 组成一个 JavaScript对象树，形成虚拟DOM</span><br><span class="line"></span><br><span class="line">2、再通过 document.createElement(&quot;dov&quot;) 转真实DOM</span><br><span class="line"></span><br><span class="line">有一个从 jsx -&gt; 虚拟DOM（js对象 ） -&gt; 真实DOM的过程</span><br><span class="line">  （jsx没有v-for，事件绑定这些，比较简单，bable可以直接解析，vue比较麻烦，template 通过v-loader来解析）</span><br><span class="line"></span><br><span class="line"> 虚拟DOM的好处</span><br><span class="line"> - 可以在家js中通过diff算法对比新旧虚拟dom，部分更新</span><br><span class="line"> - 动态判断是渲染成web端可以用的DOM结构，或渲染成其他各个平台认识的结构，实现跨平台</span><br><span class="line"> - 通过root.render 让虚拟DOM和真实DOM同步起来，这个过程叫做协调</span><br><span class="line"> - 只需要告诉react让ui展示什么状态，react去匹配，你不需要手动操作dom、属性、事件，实现声明式编程</span><br><span class="line">*/&#125;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">            &lt;li className=&#x27;item&#x27;&gt;Text&lt;/li&gt;</span><br><span class="line">            &lt;li className=&#x27;item&#x27;&gt;Text&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 转换后</span><br><span class="line">React.createElement(&quot;div&quot;,null,</span><br><span class="line">React.createElement(&quot;ul&quot;,null,</span><br><span class="line">    React.createElement(&quot;li&quot;,&#123;className:&#x27;item&#x27;&#125;,Text)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><blockquote><p>React 社区维护的动画库 <code>react-transition-group</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 1、需要额外安装  npm install react-transition-group -S</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * CSSTransition：常用这个来完成过度动画</span><br><span class="line"> *  动画进入的三个阶段</span><br><span class="line"> *        1、开始状态初始化 xxxx-enter   如 opacity:0</span><br><span class="line"> *        2、执行动画阶段 xxxx-enter-active    如 opacity:1</span><br><span class="line"> *        3、执行完成阶段 xxxx-enter-done</span><br><span class="line"> *    动画离开的三个阶段</span><br><span class="line"> *        1、开始状态初始化 xxxx-exit         如 opacity:1</span><br><span class="line"> *        2、执行动画阶段 xxxx-exit-active    如 opacity:0</span><br><span class="line"> *        3、执行完成阶段 xxxx-exit-done</span><br><span class="line"> * SwitchTransition：两个组件显示和隐藏</span><br><span class="line"> * TransitionGroup：包裹多个动画组件，一般用于列表中元素动画</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="React-中的-CSS"><a href="#React-中的-CSS" class="headerlink" title="React 中的 CSS"></a>React 中的 CSS</h3><p>组件化的是<strong>局部的</strong>，而 CSS 的设<strong>计是全局</strong>的，所有组件化项目中，需要一个<strong>CSS 的解决方案</strong></p><ol><li>编写局部 CSS：让 CSS 具备自己的<strong>作用域</strong>，不会<strong>随意污染</strong>其他组件内的元素</li><li>编写动态 CSS：获取当前组件的一些<strong>状态</strong>，<strong>根据不同的状态</strong> 来 <strong>生成不同的 CSS</strong></li></ol><h4 id="常用编写方案"><a href="#常用编写方案" class="headerlink" title="常用编写方案"></a>常用编写方案</h4><h5 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h5><blockquote><p>在 jsx 中通过 style 接收一个小驼峰命名属性的样式表对象，并且可以应用 state 中的状态来设置相关样式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 style=&#123;&#123;color: &quot;red&quot;, fontSize: `$&#123;titleSize&#125;px`&#125;&#125;&gt;呵呵呵呵&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h5 id="普通-css"><a href="#普通-css" class="headerlink" title="普通 css"></a>普通 css</h5><blockquote><p>编写普通 css 文件，通过 import “xx&#x2F;xx&#x2F;xx.css” 映入到组件，缺点：一个组件引入过，其他组件也会生效</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./index.css&#x27;</span><br></pre></td></tr></table></figure><h5 id="CSS-modules"><a href="#CSS-modules" class="headerlink" title="CSS modules"></a>CSS modules</h5><blockquote><p>CSS modules 并不是 react 特有的解决方案，而是<strong>webpack 提供</strong>的，webpacd.config.js 中的 modules:true</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import CssIndex from &#x27;./index.module.css&#x27; // 无论是css/scss/less 在正常名字上添加.module就可以</span><br><span class="line"></span><br><span class="line"> &lt;h2 className=&#123;CssIndex.title&#125;&gt;呵呵呵呵&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">不能使用index-header 横杆写法</span><br><span class="line">不方便动态修改</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h5 id="css-in-js"><a href="#css-in-js" class="headerlink" title="css in js"></a>css in js</h5><blockquote><p>CSS 由 JavaScript 生成，而不是外部引入，由第三方库提供</p></blockquote><p>优点</p><ul><li>赋予 CSS 一些能力，样式嵌套、函数定义、逻辑复用动态修改</li><li>CSS 预处理器功能类似，这个<strong>动态状态</strong>更方便</li><li>常见实现<code>css in js</code>库：<code>styled-components</code>、<code>emotion</code>、<code>glamorous</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// 1、安装: npm install styled-components -S</span><br><span class="line"></span><br><span class="line">// 2、常见 style 组件</span><br><span class="line">import styled from &quot;styled-components&quot;</span><br><span class="line">import &#123; largeSize &#125; from &quot;./style/variables&quot; // 引入入全局变量,假设有 export const largeSize = &quot;18px&quot;</span><br><span class="line"></span><br><span class="line">// 2.1 标签模板字符串，调用styled的div方法，得到一个div组件</span><br><span class="line">// 2.2 可以接收外部传入的props</span><br><span class="line">// 2.3 styled.div.attrs(&#123;&#125;)``</span><br><span class="line">// 2.4 从变量文件导入全局的变量 largeSize ，并使用</span><br><span class="line">export const AppWrapper = styled.div`</span><br><span class="line">.select&#123;</span><br><span class="line">color:#f00;</span><br><span class="line">font-size:$&#123;largeSize&#125;</span><br><span class="line">&#125;</span><br><span class="line">.title&#123;</span><br><span class="line">font-size:$&#123;props =&gt; props.size&#125;px;</span><br><span class="line">.left&#123;</span><br><span class="line">color:#f0f</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">// 3、jsx 中使用</span><br><span class="line">import &#123; AppWarpper &#125; from &quot;./style&quot;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            size:30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123; size &#125; = this.state;</span><br><span class="line">        retrun(</span><br><span class="line">            &#123;/* div组件 会渲染成一个div标签，样式组件可以层层嵌套 */&#125;</span><br><span class="line">            &#123;/* 状态改变，样式自动更新 */&#125;</span><br><span class="line">            &lt;AppWarpper size=&#123;size&#125;&gt;</span><br><span class="line">                &lt;div className=&#x27;select&#x27;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div className=&#x27;title&#x27;&gt;</span><br><span class="line">                    &lt;div className=&#x27;left&#x27;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/AppWarpper&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4、vscode 安装 vscode-styled-components 插件高亮</span><br></pre></td></tr></table></figure><blockquote><p>标签模板字符串，函数的其他调用方式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tagTmpStr</span>(<span class="params">...arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> tag = <span class="string">&quot;学习&quot;</span>;</span><br><span class="line"><span class="title function_">tagTmpStr</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">tagTmpStr<span class="string">`this is <span class="subst">$&#123;num&#125;</span> 个 <span class="subst">$&#123;tag&#125;</span>`</span>; <span class="comment">// [[&#x27;this is&#x27;,&#x27;个&#x27;,&#x27;&#x27;], 10, 学习]</span></span><br></pre></td></tr></table></figure><h4 id="classnames-动态添加类"><a href="#classnames-动态添加类" class="headerlink" title="classnames 动态添加类"></a>classnames 动态添加类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import classNames from &#x27;classnames&#x27;</span><br><span class="line"></span><br><span class="line">classNames(&#x27;foo&#x27;, &#x27;bar&#x27;); // =&gt; &#x27;foo bar&#x27;</span><br><span class="line">classNames(&#x27;foo&#x27;, &#123; bar: true &#125;); // =&gt; &#x27;foo bar&#x27;</span><br><span class="line">classNames(&#123; &#x27;foo-bar&#x27;: true &#125;); // =&gt; &#x27;foo-bar&#x27;</span><br><span class="line">classNames(&#x27;a&#x27;, [&#x27;b&#x27;, &#123; c: true, d: false &#125;]); // =&gt; &#x27;a b c&#x27;</span><br></pre></td></tr></table></figure><h3 id="Redux-状态管理"><a href="#Redux-状态管理" class="headerlink" title="Redux 状态管理"></a>Redux 状态管理</h3><blockquote><p>纯函数</p></blockquote><p><strong>函数式编程</strong>非常重要的概念<strong>纯函数</strong>，<strong>组件</strong>、<strong>redux 的 reducer</strong> 也必须是纯函数</p><p><strong>纯函数：</strong></p><ul><li>相同的<strong>输入</strong>，得到的<strong>返回值一定相同</strong><ul><li>所有函数不能依赖外部变量</li></ul></li><li>函数内部的操作<strong>不能影响外部的数据</strong></li><li>优点：写纯函数的时候，<strong>只需要</strong>关心业务逻辑，<strong>不需要</strong>考虑<strong>传入的内容</strong>是怎么获得，或<strong>依赖的外部变量</strong>是否已经<strong>发生修改</strong></li></ul><blockquote><p>作用</p></blockquote><p>Redux 就是帮助我们<strong>管理 State 的容器</strong>，Redux 是 JavaScript 的状态容器，提供了<strong>可预测的状态管理</strong></p><p>Redux 必须通过 <strong>派发（dispatch）action</strong>来<strong>更新数据</strong></p><blockquote><p>三大原则</p></blockquote><p><strong>单一数据源</strong>：一般一个项目只创建一个 store，方便 state 的<strong>维护、追踪、修改</strong></p><p><strong>State 是只读的</strong>：唯一修改的方法是<strong>触发 action</strong>，通过 reducer 产生，视图和网络请求也只能通过 action 描述自己想要修改的 state，保证所有修改集中化处理，并按照严格书序来执行</p><p><strong>使用纯函数来执行修改</strong>：通过 reducer 将就的 state，和新的 action 联系在一起，返回新的 state</p><blockquote><p>基础流程图</p></blockquote><p><img src="/../../../static/img/2022-12-28_080604.jpg"></p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// yarn add redux  //node 16.10.0 或 &gt;=18.0.0</span><br><span class="line"></span><br><span class="line">// 一般结构</span><br><span class="line">store/index.js</span><br><span class="line"></span><br><span class="line">store/reducer.js</span><br><span class="line"></span><br><span class="line">store/actionCreators.js</span><br><span class="line"></span><br><span class="line">store.constants.js</span><br></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><blockquote><p>reducer 是一个纯函数，作用是将传入的 state 和 action 结合起来生成一个新 的 state</p></blockquote><h4 id="toolkit"><a href="#toolkit" class="headerlink" title="toolkit"></a>toolkit</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure><blockquote><p>Toolkit 核心 API</p></blockquote><ul><li><strong>configureStore</strong>：包装<code>createStore</code>，提供<strong>简化的配置选项</strong>和<strong>良好的默认值</strong> ，自动组合 <code>slice reducer</code>、添加任何<strong>Redux 中间件</strong>、<code>redux-thunk</code>默认包含、启用<code>Redux DevTools Extension</code></li><li><strong>createSlice</strong>：接收 reducer 函数的对象、切片名称和初始状态。并自动生成 reducer，并带有相应 actions</li><li><strong>createAsyncThunk</strong>：异步数据操作</li></ul><h4 id="Redux-中间件如何实现"><a href="#Redux-中间件如何实现" class="headerlink" title="Redux 中间件如何实现"></a>Redux 中间件如何实现</h4><blockquote><p>派发 actions 之前拦截，做一些事情（redux-thunk 拦截 actions，判断内容是不是一个函数，如果是，就执行得到结果，再继续）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 中间件原理，对每次派发的action进行拦截，打印日志案例</span><br><span class="line">export default function log(store)&#123;</span><br><span class="line">    // 保存我们 拦截操作前的 dispatch</span><br><span class="line">    const next = store.dispatch;</span><br><span class="line"></span><br><span class="line">    function logAndDispatch(action)&#123;</span><br><span class="line">        console.log(&#x27;派发前：&#x27;,action);</span><br><span class="line"></span><br><span class="line">        // 操作完进行它原本的派发操作</span><br><span class="line">        next(action);</span><br><span class="line"></span><br><span class="line">        console.log(&#x27;派发后：&#x27;,store.getState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Monkey Patching：猴补丁 =&gt; 篡改现有代码，对整体逻辑进行修改</span><br><span class="line">    // 任何地方执行dispatch 其实是执行 logAndDispatch</span><br><span class="line">    store.dispatch = logAndDispatch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="开发中如何管理-state-好"><a href="#开发中如何管理-state-好" class="headerlink" title="开发中如何管理 state 好"></a>开发中如何管理 state 好</h4><ol><li>有些人，将所有状态放到 redux，状态管理库中<strong>方便追踪和共享</strong></li><li>有些人，将某些组件<strong>自己的状态</strong>放到组件内部进行关联</li><li>建议组件 ui 相关的一些状态，或自己的状态放到组件内部管理，共享状态，包括请求的数据可以交给 redux 维护</li><li>…具体情况具体评估</li></ol><h4 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h4><blockquote><p>React Developer Tools</p></blockquote><blockquote><p>Redux DevTools</p></blockquote><p>控制台 redux 数据默认是看不到的，建议开发环境开启，生产环境关闭</p><h3 id="React-Router-6-x"><a href="#React-Router-6-x" class="headerlink" title="React Router 6.x"></a>React Router 6.x</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-router-dom # react 社区维护</span><br></pre></td></tr></table></figure><blockquote><p>基本使用</p></blockquote><ol><li>配置路由类型 <strong>BrowserRouter</strong> 和 <strong>HashRouter</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom/client&#x27;;</span><br><span class="line">import &#123; HashRouter &#125; from &#x27;react-router-dom&#x27;; // 使用配置 HashRouter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">root.render(</span><br><span class="line">&lt;HashRouter&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/HashRouter&gt;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>路由映射路径，与路由传参</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; Link, NavLink, Navigate, Route, Routes &#125; from &#x27;react-router-dom&#x27;</span><br><span class="line">import Home from &#x27;./pages/Home&#x27;</span><br><span class="line">import About from &#x27;./pages/About&#x27;</span><br><span class="line">import Login from &#x27;./pages/Login&#x27;</span><br><span class="line">import NotFound from &#x27;./pages/NotFound&#x27;</span><br><span class="line">import HomeChild1 from &#x27;./pages/HomeChild1&#x27;</span><br><span class="line">import HomeChild2 from &#x27;./pages/HomeChild2&#x27;</span><br><span class="line"></span><br><span class="line">export class index extends PureComponent &#123;</span><br><span class="line">    // constructor() &#123;</span><br><span class="line">    //     super();</span><br><span class="line">    // &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;div&gt;header&lt;/div&gt;</span><br><span class="line">                    &lt;div className=&#x27;nav&#x27;&gt;</span><br><span class="line">                        &#123;/* 1、不重要 */&#125;</span><br><span class="line">                        &lt;Link to=&quot;/home&quot;&gt;首页&lt;/Link&gt;</span><br><span class="line">                        &lt;Link to=&quot;/about&quot;&gt;关于&lt;/Link&gt;</span><br><span class="line">                        &lt;Link to=&quot;/login&quot;&gt;登陆&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">                        &#123;/* 2、不重要  激活自动添加 active 类,动态加style 和 className */&#125;</span><br><span class="line">                        &lt;NavLink to=&quot;/home&quot; style=&#123;(&#123; isActive &#125;) =&gt; (&#123; color: isActive ? &quot;#f00&quot; : &quot;&quot; &#125;)&#125;&gt;首页&lt;/NavLink&gt;</span><br><span class="line">                        &lt;NavLink to=&quot;/about&quot; style=&#123;(&#123; isActive &#125;) =&gt; (&#123; color: isActive ? &quot;#f00&quot; : &quot;&quot; &#125;)&#125;&gt;关于&lt;/NavLink&gt;</span><br><span class="line">                        &lt;NavLink to=&quot;/login&quot; style=&#123;(&#123; isActive &#125;) =&gt; (&#123; color: isActive ? &quot;#f00&quot; : &quot;&quot; &#125;)&#125;&gt;登陆&lt;/NavLink&gt;</span><br><span class="line"></span><br><span class="line">                        &#123;/* 3、Navigator 一出现，就会立刻跳转对应路径(配合逻辑判断使用) */&#125;</span><br><span class="line">                        &#123;/* &lt;div&gt;&#123;isToLogin ? &lt;Navigate to=&quot;/Login&quot; /&gt; : &quot;暂不跳转&quot;&#125;&lt;/div&gt; */&#125;</span><br><span class="line"></span><br><span class="line">                        &#123;/* 4、自己或通过js实现跳转 6.x版本类组件无法使用 hook useNavigate ,需要通过高阶组件*/&#125;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;hr /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div className=&#x27;content&#x27;&gt;</span><br><span class="line">                    &#123;/* router2、映射关系表：path =&gt; Component */&#125;</span><br><span class="line"></span><br><span class="line">                    &lt;Routes&gt;</span><br><span class="line">                        &lt;Route path=&#x27;/&#x27; element=&#123;&lt;Navigate to=&quot;/home&quot; /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                        &#123;/* 5.x  用 component 代替 element，还需要用属性 exact 精准匹配 */&#125;</span><br><span class="line">                        &lt;Route path=&#x27;/home&#x27; element=&#123;&lt;Home&gt;&lt;/Home&gt;&#125;&gt;</span><br><span class="line">                            &lt;Route path=&#x27;/home&#x27; element=&#123;&lt;Navigate to=&quot;/home/c1/456&quot; /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                            &#123;/*动态路由传参*/&#125;</span><br><span class="line">                            &lt;Route path=&#x27;/home/c1/:id&#x27; element=&#123;&lt;HomeChild1&gt;&lt;/HomeChild1&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line"></span><br><span class="line">                            &#123;/*用于query传参*/&#125;</span><br><span class="line">                            &lt;Route path=&#x27;/home/c2&#x27; element=&#123;&lt;HomeChild2&gt;&lt;/HomeChild2&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                        &lt;/Route&gt;</span><br><span class="line">                        &lt;Route path=&#x27;/about&#x27; element=&#123;&lt;About&gt;&lt;/About&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                        &lt;Route path=&#x27;/login&#x27; element=&#123;&lt;Login&gt;&lt;/Login&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                        &lt;Route path=&#x27;*&#x27; element=&#123;&lt;NotFound&gt;&lt;/NotFound&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                    &lt;/Routes&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div&gt;footer&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default index</span><br></pre></td></tr></table></figure><ol start="3"><li>封装高阶组件，时类组件也能用 react-router-dom 库提供的 hook</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// withRouter.js</span><br><span class="line">import &#123; useLocation, useNavigate, useParams, useSearchParams &#125; from &#x27;react-router-dom&#x27;</span><br><span class="line"></span><br><span class="line">// 高阶组件</span><br><span class="line">export default function withRouter(WarpperComponent) &#123;</span><br><span class="line">    return function (props) &#123;</span><br><span class="line">        // 导航跳转</span><br><span class="line">        const navigate = useNavigate();</span><br><span class="line"></span><br><span class="line">        // 获取动态路由参数</span><br><span class="line">        const params = useParams();</span><br><span class="line"></span><br><span class="line">        // 获取query参数(未解析)</span><br><span class="line">        const location = useLocation();</span><br><span class="line"></span><br><span class="line">        // 获取解析好的query参数</span><br><span class="line">        const [searchParams] = useSearchParams() // 返回一个数组，数组里有一些方法</span><br><span class="line">        /**</span><br><span class="line">         *   URLSearchParams 接口定义了一些实用的方法来处理 URL 的查询字符串。</span><br><span class="line">         *      searchParams.get(&#x27;a&#x27;) 得到对象a属性的值</span><br><span class="line">         *      将 Object.fromEntries(searchParams.entries()) 数据转成对象</span><br><span class="line">         */</span><br><span class="line">        const query = Object.fromEntries(searchParams.entries());</span><br><span class="line"></span><br><span class="line">        const router = &#123; navigate, params, location, query &#125;;</span><br><span class="line">        return &lt;WarpperComponent &#123;...props&#125; router=&#123;router&#125; /&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 使用</span><br><span class="line">import React, &#123; PureComponent &#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; Link, Outlet &#125; from &#x27;react-router-dom&#x27;</span><br><span class="line">import &#123; withRouter &#125; from &#x27;../hoc&#x27;</span><br><span class="line">export class Home extends PureComponent &#123;</span><br><span class="line">    navigateTo(path) &#123;</span><br><span class="line">        let &#123; navigate &#125; = this.props.router; // useNavigate 类组件不能用，通过高阶函数返回函数组件，传递过来</span><br><span class="line">        navigate(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div className=&#x27;home-header&#x27;&gt;</span><br><span class="line">                    &lt;Link to=&quot;/home/c1/123&quot;&gt;子路由1&lt;/Link&gt;</span><br><span class="line">                    &lt;Link to=&quot;/home/c2?a=1&amp;b=2&quot;&gt;子路由2&lt;/Link&gt;</span><br><span class="line">                    &lt;button onClick=&#123;e =&gt; this.navigateTo(&quot;/about&quot;)&#125;&gt;js跳转&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div className=&#x27;home-centert&#x27;&gt;</span><br><span class="line">                    &#123;/* 占位组件 类似vue的 router-view */&#125;</span><br><span class="line">                    &lt;Outlet&gt;&lt;/Outlet&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default withRouter(Home)</span><br></pre></td></tr></table></figure><ol start="3"><li>路由配置</li><li>router5.x 需要安装<strong>react-router-config</strong>才能提取单独配置文件，6.x 直接就能用</li></ol><h3 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h3><blockquote><p>hook ( hook into ) 钩入，意思是可以从其他地方，将保存好的状态钩入进来（如 useState 钩入状态）</p></blockquote><ol><li>Hook 解决了<strong>类组件复杂的</strong>的问题，弥补了 <strong>函数组件</strong>一些不足的地方</li><li>可以在不编写 class 的情况下使用 state 状态管理，什么周期以及其他 React 特性</li><li>是否使用 Hook 是可选的，完全向下兼容，不需要将旧代码重构成 hook</li></ol><blockquote><p>注意事项</p></blockquote><ol><li>Hook 能在<strong>函数组件</strong>中，并且是<strong>最外顶层</strong>使用，不能在<strong>类组件</strong> 或者 <strong>函数组件之外的地方</strong>使用</li><li>Hook 也能在自定义 hook 中使用（React 中必须是 useXxx 格式的函数名）</li></ol><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><blockquote><p>设置与获取函数组件状态，从 react 中导入，是一个 hook</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  useState</span><br><span class="line"> *      参数：只有一个参数，初始化值，不设置位undefined</span><br><span class="line"> *      返回值：数组，包含两个元素 [状态单前值，设置值的函数]</span><br><span class="line"> *      作用和 类组件的 this.state 是</span><br><span class="line"> *</span><br><span class="line"> *  点击button后做两件事情，通过 setCounter 重新设置值，同时将新的值返回过来，渲染到页面上</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function CountHook() &#123;</span><br><span class="line">    const [counter, setCounter] = useState(0); // 首次 counter 变量 默认为0</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                counterVal: &#123;counter&#125;</span><br><span class="line">                &lt;button onClick=&#123;e =&gt; setCounter(counter + 1)&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">                &lt;button onClick=&#123;e =&gt; setCounter(counter - 1)&#125;&gt;-1&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default CountHook</span><br></pre></td></tr></table></figure><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><blockquote><p>由于生命周期中某阶段<strong>网路请求</strong>、<strong>手动更新 DOM</strong>、<strong>事件监听</strong>，都是<strong>React 更新 DOM</strong>的<strong>副作用</strong>（Dide Effects）</p></blockquote><blockquote><p>所有完成这些功能的 Hook 官方称为 Effect Hook</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// useEffect 主要是为了处理 以前生命周期的很多逻辑</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">    // 当前回调函数绘制组件被渲染完成后，自动执行 （网络请求、DOM操作、事件监听）</span><br><span class="line">    document.title = counter;</span><br><span class="line"></span><br><span class="line">    // 返回值，需要返回一个回调函数 ==&gt; 组件被重新渲染，或者组件被卸载的时候执行</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        // 清除机制，做一些取消定时器，销毁的操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; &#123;&#125;)  // 可以多个 按顺序执行</span><br></pre></td></tr></table></figure><blockquote><p>每次渲染组件，默认情况下都会走 effect，所以需要 effect 性能优化</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 参数二 ，第二次渲染是，只有在数组中的状态发生改变，才会再次执行 回调(空数组说明，永远不会再次执行了)</span><br><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;只执行一次，发生网络请求&#x27;)</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        console.log(&#x27;只有组件被卸载才会执行&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[])</span><br><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;counter 发生变化就会执行&#x27;)</span><br><span class="line">&#125;,[counter]) // 有点像vue watch的 监听counter,状态发生改变就做一些事情</span><br></pre></td></tr></table></figure><h4 id="特殊场景使用的-hook"><a href="#特殊场景使用的-hook" class="headerlink" title="特殊场景使用的 hook"></a>特殊场景使用的 hook</h4><blockquote><p>useContext (子子孙孙传参)</p></blockquote><blockquote><p>useImperativeHandle(作用子组件暴露一些方法，给父组件通过 ref 使用)</p></blockquote><blockquote><p>useLayoutEffect ( <strong>useEffect</strong> 组件<strong>渲染完成</strong>之后执行里面，这个是在渲染 DOM 更新之前（阻塞），先做一些事情，再更新 DOM)</p></blockquote><h4 id="性能优化-hook"><a href="#性能优化-hook" class="headerlink" title="性能优化 hook"></a>性能优化 hook</h4><blockquote><p>useRef（总是返回同一个对象，操作 dom）、useCallback 和 useMemo</p></blockquote><h4 id="自定义-hook"><a href="#自定义-hook" class="headerlink" title="自定义 hook"></a>自定义 hook</h4><blockquote><p>本质上只是<strong>函数代码逻辑的抽取</strong></p></blockquote><h4 id="React18-新增-hook"><a href="#React18-新增-hook" class="headerlink" title="React18 新增 hook"></a>React18 新增 hook</h4><blockquote><p>useId （只有早 SSR 同构应用中使用，生成横跨客户端和服务端的唯一 ID,并且避免 hydration 不匹配的问题）</p></blockquote><blockquote><p>useTransition （）</p></blockquote><h4 id="redux-hook"><a href="#redux-hook" class="headerlink" title="redux hook"></a>redux hook</h4><blockquote><p>以前必须通过 react-redux 的 connect 编写 mapStateToProps 和 mapDispatchToProps 管理 react 和 redux</p></blockquote><h5 id="useSelector"><a href="#useSelector" class="headerlink" title="useSelector"></a>useSelector</h5><blockquote><p>可以将 state 映射到组件中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// useSelector 代替 mapStateToProps</span><br><span class="line">// 默认情况下useSelect监听的是整个state，当某个组件状态发生改变时，所有使用useSelector的子组件都会重新渲染</span><br><span class="line">const &#123; homename, banners &#125; = useSelector((state) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        homename: state.home.homename,</span><br><span class="line">        banners: state.home.banners</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// shallowEqual 比较数据是否发生改变，不受其他组件状态变化影响，比较自己的状态如果没变化，就不需要重新渲染</span><br><span class="line">const &#123; homename, banners &#125; = useSelector((state) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        homename: state.home.homename,</span><br><span class="line">        banners: state.home.banners</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,shallowEqual)</span><br></pre></td></tr></table></figure><h5 id="useDispatch"><a href="#useDispatch" class="headerlink" title="useDispatch"></a>useDispatch</h5><blockquote><p>直接获取 dispatch 函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// useDispatch 代替 mapDispatchToProps</span><br><span class="line">const dispatch = useDispatch();</span><br><span class="line"></span><br><span class="line">function view_change_name(name) &#123;</span><br><span class="line">    dispatch(changeHomeNameAction(name))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React-ClI"><a href="#React-ClI" class="headerlink" title="React ClI"></a>React ClI</h3><blockquote><p>建筑学的概念，表示搭建建筑物时，<strong>临时搭建</strong>出来的<strong>一个框架</strong>，处理里一些问题，</p></blockquote><ul><li>目录机构组织</li><li>管理文件直接的相互依赖</li><li>管理第三方依赖</li><li>发布前的压缩打包。。。</li><li>浏览器不认识的代码转换</li><li>所有 webpack 相关的都存到 <code>react-scripts</code> 中了，<code>执行 npm run </code>就可以弹出，就能看到了，<strong>不可逆</strong></li></ul><blockquote><p>PWA</p></blockquote><ul><li><code>Progressive Web App</code> 渐进式 WEB 应用</li><li>首先是一个<strong>网页</strong>，通过<strong>Web 技术编写</strong>出一个<strong>网页应用</strong></li><li>随后添加<strong>App Manifest</strong> 和 <strong>Service Worker</strong> 来实现<strong>安装和离线缓存</strong>等功能<ul><li>App Manifest：手机上某些浏览器（如 Google）右上角更多里面，将页面添加到桌面，看上去就跟 app 差不多</li><li>Service Worker：当没网的时候打开这个 Web App，还能看到上一次浏览的一些东西</li></ul></li><li>这种 Web 存在的形式 称为 <strong>Web App</strong></li><li>作用: 添加到<strong>主屏幕</strong>、<strong>离线缓存</strong>、<strong>消息推送</strong>等 一系列 NativeApp 的相关功能</li></ul><h4 id="create-react-app-CRA"><a href="#create-react-app-CRA" class="headerlink" title="create-react-app(CRA)"></a>create-react-app(CRA)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、全局安装 npm install create-react-app -g</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、创建 create-react-app &lt;object-name&gt;    - 不允许存在大写字母</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、 <span class="built_in">cd</span>   yarn start</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录结构</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    public 一些静态文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        index.html、favicon.ico 入口文件，标题图标</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        两个logo.png、manifest.json 都是配置 PWA的一些资源样式配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        robots.txt 告诉搜索引擎哪些东西可以被爬虫爬</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    src  源码</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># eject 后多出</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    scripts</span></span><br></pre></td></tr></table></figure><h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><blockquote><p>服务端渲染，Vue&#x2F;React &#x3D;&gt; nuxt&#x2F;next</p></blockquote><p>xxx &#x3D;&gt; 前后端分离 &#x3D;&gt; SPA:单页面富应用</p><p>SPA 应用存在的问题</p><p>1、首屏的渲染速度</p><p>早期 SSR 页面(JSP 那种)，在服务器将整个网站都渲染好，请求的时候拿到的就是完整的页面，有利于 SEO 优化</p><p>SPA 页面: 加载页面 –&gt;下载页面中引入的 bundle.js –&gt; 浏览器执行下载的代码 –&gt; 执行完成才能渲染处理 ，导致速度慢</p><p>2、SEO 优化问题</p><p>当页面应用的数据都是通过 js 文件生成的，搜索引擎收入的只有 index.html 页面 ，只有数据顶级挂载点，和一些基础信息，SPA 网站的内容是爬取不到的，所有被匹配到的东西很少，导致排名很靠后</p><blockquote><p>SSR 解决了 SPA 的这些问题</p></blockquote><p>借助 node 生成 html 页面，浏览器直接显示，浏览器不需要下载执行的步骤了</p><blockquote><p>实现步骤</p></blockquote><ul><li><p>SSR 同构应用(可以运行在服务器，也能运行在客户端)</p><pre><code>    -在服务器获取网络资源，生成dom字符串（无法交互）    -客户端也会运行一次，将交互的操作匹配到服务器生成的dom字符串中（**hydration**）</code></pre></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>sass 直接 <code>npm i sass</code> 安装就能使用</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web安全</title>
      <link href="/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/web-safety/"/>
      <url>/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/web-safety/</url>
      
        <content type="html"><![CDATA[<p><a href="https://owasp.org/www-project-top-ten/">漏洞排名</a></p><h3 id="session、cookie-和-XSS-跨站脚本攻击"><a href="#session、cookie-和-XSS-跨站脚本攻击" class="headerlink" title="session、cookie 和 XSS 跨站脚本攻击"></a>session、cookie 和 XSS 跨站脚本攻击</h3><ul><li><p>HTTP</p><ul><li><p><code>请求式应答</code> (有请求才有返回)</p></li><li><p><code>灵活可扩展</code> (可传输各种类型数据,请求头 响应头可自定义，只要相互认识)</p></li><li><p><code>可靠传输</code></p></li><li><p><code>无状态</code></p><ul><li><p>弊端</p><ul><li>发送请求服务器默认是不知道谁在访问的</li><li>每次访问都是独立的，无法保持会话</li></ul></li><li><p>解决方案<code>cookie</code></p><ul><li>http 扩展功能</li><li>Set-Cookie:<code>第一次访问</code>服务器<code>主动响应</code>给客户端，<code>种cookie</code></li><li>Cookie:之后请求，客户端<code>自动携带Cookie</code>去访问服务</li><li>方式:访问域名 -&gt; 携带 cookie 到客户端 -&gt; 客户端存储 cookie -&gt; 在访问时通过请求头携带到服务器<ul><li>再次访问服务器就知道谁在访问自己了</li></ul></li><li>格式:<ul><li>键值对(必须)</li><li><code>expires</code>:设置过期时间</li><li><code>max-age</code>:多久过期(秒，优先级高于 expires)</li><li><code>domain</code>:对哪个域名生效</li><li><code>path</code>:匹配的路径(如果是<code>path=/</code>代表域名所有子域名及下所有路径都能使用)</li><li><code>secure</code>: 是否只允许 HTTPS,才发送 Cookie 到服务器</li><li><code>httponly</code>:不允许通过<code>document.cookie</code>去修改此 cookie</li></ul></li><li>保存位置:<ul><li><code>没有设置</code>过期时间则<code>保存在内存</code>，浏览器<code>关闭即失效</code></li><li><code>设置expires</code>就是持久的，保存在磁盘，<code>各个浏览器</code>保存的<code>位置</code>和<code>方式</code>都不一样</li></ul></li><li>特点:<ul><li><code>明文</code></li><li><code>用户可修改</code></li><li><code>大小受限</code></li><li><code>臃肿</code>:每次请求头都要携带，所有需要的 cookie</li></ul></li><li>作用<ul><li>记录登录状态，打开网址，发现 cookie 存在表示已登入</li><li>跟踪用户行为</li></ul></li></ul></li><li><p>session</p><ul><li>session 信息是保存在服务端的，每次还是要<code>通过cookie</code>携带<code>sessionId</code>的</li><li>工作流程<ul><li>进入页面判断是否能达到用户信息</li><li>不能进入登录窗口</li><li>登录成功 session 保存用户信息</li><li>后端只有判断是否能拿到用户信息，可以显示内容，否则显示登录窗口</li><li>退出清除 session，否则一直是登录状态</li></ul></li><li><code>sessionId</code>还是通过 cookie 与客户端交流的</li><li>问题<ul><li>别人找到你某个网站的 sessionId，没退出的，复制到自己的浏览器上，因为服务点保存了你的状态，那么理论上就能直接登录你的账户了</li></ul></li></ul></li><li><p>远程操作 cookie</p><ul><li>操作<ul><li>获取 document.cookie</li><li>修改 document.cookie&#x3D;”name&#x3D;xxx”</li></ul></li><li>攻击方式<ul><li>XSS:Cross Site Script<ul><li>利用 web 漏洞插入恶意代码，用户访问的时候，执行代码，获取用户身份从而达到攻击的目的</li><li>获取哪个网站的信息就要将脚本注入到哪个网站</li><li>漏洞<ul><li>页面直接将 query 拿来直接执行</li><li>页面直接将 input 的值拿来执行</li></ul></li><li>反射形 XSS<ul><li>一次性的，用户操作一次攻击一次那种，如果点击 query 传入的链接</li><li>需要诱导用户去操作<br><img src="/../../../../static/img/XSS1.png" alt="反射型XSS"></li></ul></li><li>存储型 XSS<ul><li>通过<code>评论、留言、注册恶意用户名</code>等方式将<code>恶意代码</code>提交到你的数据库，别人访问恶意用户或恶意用户的消息，就从数据库查出来恶意代码，就自动执行恶意代码</li><li>恶意代码可以是自动访问，第三方 js,或恶意链接,直接拿到你在这个网站的信息<br><img src="/../../../../static/img/XSS2.png" alt="存储型XSS"></li></ul></li><li>作用<ul><li>冒充身份</li><li>刷点击</li><li>弹广告</li><li>传播蠕虫病毒(通过访问发送，一传十。。。)</li></ul></li><li>防止<ul><li>输入<ul><li>识别恶意脚本，定义恶意脚本格式</li><li>脚本格式扩展变形 如:<code>&lt;scri&lt;script&gt;pt&gt;</code></li><li>通过正则找出来后干掉或静止此用户操作</li></ul></li><li>输出<ul><li>将一些特殊符号如<code>&lt;&gt;&quot;&#39;%</code>等符号进行转义</li></ul></li><li>个人的处理不全,用插件 WAF 来安全防护服务器<ul><li>第三方规则引擎，waf 规则仓<ul><li>硬件、云产品、开源库如:Apath 的 mod_security，modsecurity.cn</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF 跨站请求伪造"></a>CSRF 跨站请求伪造</h3><ul><li>流程<ul><li>打开<code>登录</code>重要的网站,或者某个重要网站的 cookie 还在本地</li><li>本地储存重要网站的信息</li><li><code>访问乱七八糟</code>的网站 -&gt; 返回<code>包含恶意请求</code>的页面如<code>&lt;img width=0 height=0 src=&quot;调用重要网站的某个接口&quot; /&gt;</code></li><li>如果<code>调用的重要网站地址</code>正好是你<code>刚刚登入的</code>，就调用成功了<br><img src="/../../../../static/img/CSRF.png" alt="CSRF"></li></ul></li><li>恶意请求方式<ul><li>加载图片请求、点击 a 链接请求，隐藏的可自动提交的表达—后面 js 自动提交表单</li></ul></li><li>预防<ul><li>如何确定一个接口地址是否拥有 CSRF 漏洞?<ul><li>我自己没有输入账号密码，没有产生我的 cookie，发起对一个接口的请求，只要正常响应了，那么这个接口是存在 CSRF 漏洞的</li><li>需要登录的接口，公开的一些接口就没有意义了</li></ul></li><li>具体操作<ul><li>判断来源<ul><li>请求头的 referer 表示用户从哪个页面来访问的</li><li>后端通过判断 referer 来防止 CSRF，但是可以伪造，并不可信</li></ul></li><li>加密<ul><li>客户端对 cookie 进行加密，发送到服务端，服务端以同样方式进行加密，与客户端的进行对比</li><li>因为 CSRF 拿不到 cookie 明文，所以这是可以防止的，如果用 XSS 偷到 cookie，那么这也不安全</li></ul></li><li>token</li><li>验证码、支付输入密码、选择出所以自行车、将图片选择正等操作，时重要接口变成交互性的二次验证</li></ul></li><li>第三方工具发现漏洞<ul><li>Blot, blot.py -u url,测试这个接口是否存在 CSRF 漏洞</li><li>T-Sec 漏洞扫描收费服务</li></ul></li></ul></li><li>与 XSS 的差别<ul><li>利用你保存的 cookie，拿不到对方的 cookie</li><li>需要自己准备第三方网站，或将代码通过 XSS 方式注入到其他网站让你点，不要直接把代码注入到要攻击的网站</li></ul></li></ul><h3 id="sql-注入、弱密码"><a href="#sql-注入、弱密码" class="headerlink" title="sql 注入、弱密码"></a>sql 注入、弱密码</h3><p><a href="https://www.coolshell.cn/">https://www.coolshell.cn/</a></p><h3 id="referer-与-Referrer-Policy-详解"><a href="#referer-与-Referrer-Policy-详解" class="headerlink" title="referer 与 Referrer Policy 详解"></a>referer 与 Referrer Policy 详解</h3><blockquote><p>请求的报头中，会包含一个 Referrer，用以指定该请求是<code>从哪个页面跳转</code>来的，常被用于<code>分析用户来源</code>等信息。但是也有成为用户的一个不安全因素，比如有些网站直接将 <code>sessionid</code> 或是 <code>token</code> 放在地址栏里传递的，会原样不动地当作 Referrer 报头的内容传递给第三方网站。</p></blockquote><blockquote><p>所以就有了 <code>Referrer Policy</code>，用于<code>过滤 Referrer</code> 报头内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum ReferrerPolicy &#123;</span><br><span class="line">  &quot;&quot;,</span><br><span class="line">  &quot;no-referrer&quot;,</span><br><span class="line">  &quot;no-referrer-when-downgrade&quot;,</span><br><span class="line">  &quot;same-origin&quot;,</span><br><span class="line">  &quot;origin&quot;,</span><br><span class="line">  &quot;strict-origin&quot;,</span><br><span class="line">  &quot;origin-when-cross-origin&quot;,</span><br><span class="line">  &quot;strict-origin-when-cross-origin&quot;,</span><br><span class="line">  &quot;unsafe-url&quot;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">很多种过滤类型</span></span><br></pre></td></tr></table></figure><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><ul><li>原理<ul><li>上传一个可以执行的脚本文件如 php，里面有类似 eval 的语句将某些代码包裹,从而获得了可执行服务端命令的能力</li><li>当通过路径访问自己上传的文件时，eval 就好解析出里面的代码</li></ul></li><li>如何绕过？</li><li>安全人员如何避免？<ul><li>静止指定类型文件上传，必要的化可以传压缩包</li><li>文件路径不要被用户获取</li><li>限制上传的文件的权限</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 垃圾桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webRTC 直播功能</title>
      <link href="/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/h5-model-webRTC/"/>
      <url>/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/h5-model-webRTC/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API">参考资料</a></p><h2 id="webRTC-链接"><a href="#webRTC-链接" class="headerlink" title="webRTC 链接"></a>webRTC 链接</h2><ol><li>呼叫者通过 navigator.mediaDevices.getUserMedia() 捕获本地媒体</li><li>呼叫者创建一个 RTCPeerConnection 并调用 RTCPeerConnection.addTrack() (注： addStream 已经过时。)</li><li>呼叫者调用 (“RTCPeerConnection.createOffer()”)来创建一个提议(offer).</li><li>呼叫者调用 (“RTCPeerConnection.setLocalDescription()”) 将提议(Offer) 设置为本地描述 (即，连接的本地描述).</li><li>setLocalDescription()之后, 呼叫者请求 STUN 服务创建 ice 候选(ice candidates)</li><li>呼叫者通过信令服务器将提议(offer)传递至 本次呼叫的预期的接受者.</li><li>接受者收到了提议(offer) 并调用 (“RTCPeerConnection.setRemoteDescription()”) 将其记录为远程描述 (也就是连接的另一端的描述).</li><li>接受者做一些可能需要的步骤结束本次呼叫：捕获本地媒体，然后通过 RTCPeerConnection.addTrack()添加到连接中。</li><li>接受者通过(“RTCPeerConnection.createAnswer()”)创建一个应答。</li><li>接受者调用 (“RTCPeerConnection.setLocalDescription()”) 将应答(answer) 设置为本地描述. 此时，接受者已经获知连接双方的配置了.</li><li>接受者通过信令服务器将应答传递到呼叫者.</li><li>呼叫者接受到应答.</li><li>呼叫者调用 (“RTCPeerConnection.setRemoteDescription()”) 将应答设定为远程描述. 如此，呼叫者已经获知连接双方的配置了.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 垃圾桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器知识点</title>
      <link href="/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/script-model-browser/"/>
      <url>/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/script-model-browser/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器输入-url-后"><a href="#浏览器输入-url-后" class="headerlink" title="浏览器输入 url 后"></a>浏览器输入 url 后</h2><blockquote><p>一、从浏览器接收 url 到开启网络请求线程</p></blockquote><p>这一部分可以展开浏览器的机制以及进程与线程之间的关系</p><ul><li>浏览器是<strong>多进程</strong>的，有一个主控进程，以及<strong>每一个 tab 页面</strong>都会新开一个进程</li><li><strong>tab 页面</strong>都可以看作是浏览器的内核进程 ( 包括 <strong>GUI 线程</strong>、<strong>JS 引擎线程</strong>、<strong>事件触发线程</strong>、<strong>定时器线程</strong>、<strong>网络请求线程</strong>等多个线程 )</li><li>解析 URL ( 协议&#x2F;&#x2F;主机:端口号&#x2F;目录路径?查询参数#hash)</li><li>解析协议 : 浏览器会根据解析出的<strong>协议</strong>，开辟一个<strong>网络线程</strong>，<strong>前往</strong>请求资源</li></ul><blockquote><p>二、开启网络线程到发出一个完整的 http 请求</p></blockquote><p>这一部分涉及到 dns 查询，tcp&#x2F;ip 请求，五层因特网协议栈等知识</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、解析主机 : 如果输入主机的是域名，需要进行 dns 解析成 IP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1-1、如果浏览器有缓存，直接使用浏览器缓存，否则使用本机缓存，再没有的话就是用host</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1-2、如果本地没有，就向dns域名服务器查询，查询到对应的IP</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、连接主机 : tcp/ip 请求(三次握手建立连接发送请求,四次挥手断开连接)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2-1、3次过程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2-1-1、</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2-1-2、</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2-1-3、</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2-2、4次过程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2-2-1、</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2-2-2、</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2-2-3、</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2-2-4、</span></span><br></pre></td></tr></table></figure><blockquote><p>三、从服务器接收到请求后的处理</p></blockquote><p>这一部分可能涉及到<strong>负载均衡</strong>，<strong>安全拦截</strong>以及<strong>后台内部的处理</strong>等等</p><p>1、<strong>负载均衡：</strong>对于大型的项目，由于并发访问量很大，所以往往一台服务器是吃不消的，所需要的处理方案称为负载均衡<br>2、<strong>步骤</strong><br>2-1、一般有的后端是有统一的验证的，如安全拦截，跨域验证<br>2-2、如果这一步不符合规则，就直接返回了相应的 http 报文（如拒绝请求等）<br>2-3、然后当验证通过后，才会进入实际的后台代码，此时是程序接收到请求，然后执行（譬如查询数据库，大量计算等等）<br>2-4、等程序执行完毕后，就会返回一个 http 响应包（一般这一步也会经过多层封装）<br>2-5、然后就是将这个包从后端发送到前端，完成交互</p><blockquote><p>四、后台和前台的 http 交互</p></blockquote><p>这一部分包括 <strong>http 响应头</strong>、<strong>响应码</strong>、<strong>报文结构</strong>、<strong>cookie</strong>、<strong>token</strong> 等，编码解码，如 gzip 压缩等</p><p>1、 http 报文(http 报文作为信息的载体)<br>响应报文报文分为<strong>响应行、响应头、和响应体</strong>;请求报文分为<strong>请求行、请求头、和请求体</strong> ，get 请求无请求体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1-1、通用头部(General)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    1-1-1、Request Url:      <span class="comment"># 请求的web服务器地址</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    1-1-1、Request Method:   <span class="comment"># 请求方式（http:1.1 -&gt; Get、POST、OPTIONS、PUT、HEAD、DELETE、CONNECT、TRACEd等）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    1-1-1、Status Code:      <span class="comment"># 请求的返回状态码，如200代表成功</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        1xx——指示信息，表示请求已接收，继续处理</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        2xx——成功，表示请求已被成功接收、理解、接受</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        3xx——重定向，要完成请求必须进行更进一步的操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        4xx——客户端错误，请求有语法错误或请求无法实现</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        5xx——服务器端错误，服务器未能实现合法的请求</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#         200——表明该请求被成功地完成，所请求的资源发送回客户端</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        304——自从上次请求后，请求的网页未修改过，请客户端使用本地缓存</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        400——客户端请求有错（譬如可以是安全模块拦截）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        401——请求未经授权</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        403——禁止访问（譬如可以是未登录时禁止）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        404——资源未找到</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        500——服务器内部错误</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        503——服务不可用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        .....</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#     1-1-1、Remote Address: 请求的远程服务器地址</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 1-2、请求头(Request headers) [view source 请求行: POST /url HTTP/1.1]</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Accept:      <span class="comment"># 接收类型，表示浏览器支持的MIME类型（对标服务端返回的Content-Type）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Accept-Encoding：     <span class="comment"># 浏览器支持的压缩类型,如gzip等,超出类型不能接收</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Content-Type：     <span class="comment"># 客户端发送出去请求体内容的类型</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>: <span class="string">&#x27;URLSearchParams:name=username&amp;age=20&#x27;</span> 表单格式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&#x27;application/json&#x27;</span>: <span class="string">&quot;&#123;name:&#x27;username&#x27;,age:20&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&#x27;multipart/form-data&#x27;</span>: <span class="string">&quot;FormData 对象&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&#x27;Blob/BufferSource&#x27;</span>: <span class="string">&quot;二进制数据&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#              # 服务器返回</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&#x27;text/plain;charset=UTF-8&#x27;</span>:<span class="string">&#x27;普通文本&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>:<span class="string">&#x27;html标签&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">             <span class="comment"># 对照表 https:     # tool.oschina.net/commons)</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#     Cache-Control:      # 指定请求和响应遵循的缓存机制，如no-cache</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    If-Modified-Since：     <span class="comment"># 对应服务端的Last-Modified，用来匹配看文件是否变动，只能精确到1s之内，http1.0中</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Expires：     <span class="comment"># 缓存控制，在这个时间内不会请求，直接使用缓存，http1.0，而且是服务端时间</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Max-age：     <span class="comment"># 代表资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存，http1.1中</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    If-None-Match：     <span class="comment"># 对应服务端的ETag，用来匹配文件内容是否改变（非常精确），http1.1中</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Cookie:      <span class="comment"># 有cookie并且同域访问时会自动带上</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Connection:      <span class="comment"># 当浏览器与服务器通信时对于长连接如何进行处理,如keep-alive</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Host：     <span class="comment"># 请求的服务器URL</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Origin：     <span class="comment"># 最初的请求是从哪里发起的（只会精确到端口）,Origin比Referer更尊重隐私</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Referer：     <span class="comment"># 该页面的来源URL(适用于所有类型的请求，会精确到详细页面地址，csrf拦截常用到这个字段)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    User-Agent：     <span class="comment"># 用户客户端的一些必要信息，如UA头部等</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1-3、响应头(Response headers) [view <span class="built_in">source</span> 响应行:HTTP/1.1 200]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Access-Control-Allow-Headers:      <span class="comment"># 服务器端允许的请求Headers</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Access-Control-Allow-Methods:      <span class="comment"># 服务器端允许的请求方法</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Access-Control-Allow-Origin:      <span class="comment"># 服务器端允许的请求Origin头部（譬如为*）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Content-Type：     <span class="comment"># 服务端返回的响应体内容的类型</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Date：     <span class="comment"># 数据从服务器发送的时间</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Cache-Control：     <span class="comment"># 告诉浏览器或其他客户，什么环境可以安全的缓存文档</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Last-Modified：     <span class="comment"># 请求资源的最后修改时间</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Expires：     <span class="comment"># 应该在什么时候认为文档已经过期,从而不再缓存它</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Max-age：     <span class="comment"># 客户端的本地资源应该缓存多少秒，开启了Cache-Control后有效</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    ETag：     <span class="comment"># 请求变量的实体标签的当前值</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Set-Cookie：     <span class="comment"># 设置和页面关联的cookie，服务器通过这个头部把cookie传给客户端</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Keep-Alive：     <span class="comment"># 如果客户端有keep-alive，服务端也会有响应（如timeout=38）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    Server：     <span class="comment"># 服务器的一些相关信息</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#      # 譬如，请求头部的Accept要和响应头部的Content-Type匹配，否则会报错</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     <span class="comment"># 譬如，跨域请求时，请求头部的Origin要匹配响应头部的Access-Control-Allow-Origin，否则会报跨域错误。。。</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1-4、请求/响应体</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>2、 长连接与短连接</p><p><strong>长连接：</strong>一个 tcp&#x2F;ip 连接上可以连续发送多个数据包，在 tcp 连接保持期间，如果没有数据包发送，需要双方发检测包以维持此连接，一般需要自己做在线维持（类似于心跳包）http1.1 起，默认使用长连接，使用长连接会有这一行 Connection: keep-alive<br><strong>短连接：</strong>通信双方有数据交互时，就建立一个 tcp 连接，数据发送完成后，则断开此 tcp 连接(http1.0 默认短连接)</p><blockquote><p>https</p></blockquote><ul><li>https 就是安全版本的 http，譬如一些支付等操作基本都是基于 https 的，因为 http 请求的安全系数太低了。</li><li>简单来看，https 与 http 的区别就是： 在请求前，<strong>会建立 ssl 链接，确保接下来的通信都是加密的</strong>，无法被轻易截取分析</li><li>一般来说，如果要将网站升级成 https，需要后端支持（后端需要申请证书等），然后 https 的开销也比 http 要大（因为需要额外建立安全链接以及加密等），所以*一般来说 http2.0 配合 https 的体验更佳（因为 http2.0 更快了）</li></ul><blockquote><p>http 2.0</p></blockquote><p>6-1、http2.0 不是 https，它相当于是 http 的下一代规范<br>6-2、然后简述下 http2.0 与 http1.1 的显著不同点：<br>http1.1 中，每请求一个资源，都是需要开启一个 tcp&#x2F;ip 连接的，所以对应的结果是，每一个资源对应一个 tcp&#x2F;ip 请求，由于 tcp&#x2F;ip 本身有并发数限制，所以当资源一多，速度就显著慢下来<br>http2.0 中，一个 tcp&#x2F;ip 请求可以请求多个资源，也就是说，只要一次 tcp&#x2F;ip 请求，就可以请求若干个资源，分割成更小的帧请求，速度明显提升。<br>所以，如果 http2.0 全面应用，很多 http1.1 中的优化方案就无需用到了（譬如打包成精灵图，静态资源多域名拆分等）<br>6-3、然后简述下 http2.0 的一些特性：<br>多路复用（即一个 tcp&#x2F;ip 连接可以请求多个资源）<br>首部压缩（http 头部压缩，减少体积）<br>二进制分帧（在应用层跟传送层之间增加了一个二进制分帧层，改进传输性能，实现低延迟和高吞吐量）<br>服务器端推送（服务端可以对客户端的一个请求发出多个响应，可以主动通知客户端）<br>请求优先级（如果流被赋予了优先级，它就会基于这个优先级来处理，由服务器决定需要多少资源来处理该请求。）</p><hr><blockquote><p>五、缓存</p></blockquote><p>5-1、强缓存(200 from cache)与弱缓存(304)</p><ul><li>强缓存（200 from cache）时，浏览器如果判断本地缓存未过期，就直接使用，无需发起 http 请求</li><li>协商缓存（304）时，浏览器会向服务端发起 http 请求，然后服务端告诉浏览器文件未改变，让浏览器使用本地缓存</li><li>对于协商缓存，使用 Ctrl + F5 强制刷新可以使得缓存无效</li><li>但是对于强缓存，在未过期时，必须更新资源路径才能发起新的请求（更改了路径相当于是另一个资源了，这也是前端工程化中常用到的技巧）</li></ul><p>5-2、相关头部</p><blockquote><p>If-None-Match&#x2F;E-tag、If-Modified-Since&#x2F;Last-Modified、Cache-Control&#x2F;Max-Age、Pragma&#x2F;Expires</p></blockquote><p>http1.0 中的缓存控制：</p><ul><li>Pragma</li><li>Expires 用的是服务器时间</li><li>请求头(浏览器端)If-Modified-Since 与 响应头(服务器端) Last-Modifie 相匹配,说明内容未变(协商缓存)</li></ul><p>http1.1 中的缓存控制：</p><ul><li>Cache-Control：缓存控制头部，有 no-cache、max-age 等多种取值</li><li>max-age&#x3D;’xxx’：服务端配置的，用来控制强缓存，在规定的时间之内，浏览器无需发出请求，直接使用本地缓存</li><li>请求头(浏览器端)If-None-Match 与 响应头(服务器端) E-tag 相匹配,说明内容未变(协商缓存)</li></ul><p>E-tag 相比 Last-Modified？</p><pre><code>Last-Modified：表明服务端的文件最后何时改变的它有一个缺陷就是只能精确到1s，然后还有一个问题就是有的服务端的文件会周期性的改变，导致缓存失效E-tag：是一种指纹机制，代表文件相关指纹只有文件变才会变，也只要文件变就会变，也没有精确时间的限制，只要文件一遍，立马E-tag就不一样了如果同时带有E-tag和Last-Modified，服务端会优先检查E-tag</code></pre><blockquote><p>六、 浏览器接收到 http 数据包后的解析流程</p></blockquote><p><img src="/../../../../static/img/2022-12-06_225757.jpg"></p><p>1、 解析 <code>HTML</code>，构建 <code>DOM</code> 树<br>生产 DOM 树之前如果与到 js 代码会先执行 js，再继续渲染，否则如果 js 有操作 dom 的话会渲染频繁</p><p>2、 解析 <code>CSS</code>，生成 <code>CSSOM</code> 树</p><p>3、 合并 <code>DOM</code> 树和 <code>CSSOM</code> 树，生成 <code>render</code> 树</p><p>4、 布局 <code>render</code> 树（<code>Layout/reflow</code>），负责各元素尺寸、位置的计算</p><ul><li><code>Layout</code> 也称为 <code>Reflow</code>，即<strong>回流</strong>,一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树</li><li><code>Repaint</code> 也称为即<strong>重绘</strong>。意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就可以了</li></ul><p>回流的成本开销要高于重绘，而且一个节点的回流往往回导致子节点以及同级节点的回流，<br>所以优化方案中一般都包括，尽量避免回流。</p><p>引起回流重绘的条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.页面渲染初始化</span></span><br><span class="line"><span class="comment"> * 2.DOM结构改变，比如删除了某个节点</span></span><br><span class="line"><span class="comment"> * 3.render树变化，比如减少了padding</span></span><br><span class="line"><span class="comment"> * 4.窗口resize</span></span><br><span class="line"><span class="comment"> * 5.最复杂的一种：获取某些属性，引发回流,DOM操作</span></span><br><span class="line"><span class="comment"> *很多浏览器会对回流做优化，会等到数量足够时做一次批处理回流</span></span><br><span class="line"><span class="comment"> *      但是除了render树的直接变化，当获取一些属性时，浏览器为了获得正确的值也会触发回流，这样使得浏览器优化无效，包括</span></span><br><span class="line"><span class="comment"> *         （1）offset(Top/Left/Width/Height)</span></span><br><span class="line"><span class="comment"> *          (2) scroll(Top/Left/Width/Height)</span></span><br><span class="line"><span class="comment"> *          (3) cilent(Top/Left/Width/Height)</span></span><br><span class="line"><span class="comment"> *          (4) width,height</span></span><br><span class="line"><span class="comment"> *          (5) 调用了getComputedStyle()或者IE的currentStyle</span></span><br><span class="line"><span class="comment"> * 6、改变字体大小会引发回流</span></span><br><span class="line"><span class="comment"> *    一般dom结构发生变化引发回流加重绘,样色变化只会发生重绘, 回流一定伴随着重绘，重绘却可以单独出现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>5、绘制（paint)，将可将元素绘制到屏幕中</p><p> 默认标准流是在<strong>同一层绘制</strong>，一些特殊属性(<strong>如定位</strong>) <strong>会创建新的层</strong>绘制，被称为**渲染层 **</p><p> 不影响布局的<strong>CSS 修改</strong>也会导致<strong>渲染层重绘（Repaint）</strong>，<strong>回流必然导致重绘</strong></p><p>6、<strong>Composite 合成层</strong></p><p> 一些特殊属性（<code>transform 3d</code>属性）会创建一个新的合成层，并可以利用<strong>GPU 来加速绘制</strong>，这时浏览器的优化手段</p><p> 合成层以<strong>消耗内存</strong>为代价提高<strong>页面性能</strong>，动画更加顺畅，<strong>过度使用 GPU 不够电脑会卡</strong></p><blockquote><p>七、 CSS 的可视化格式模型</p></blockquote><p>元素的渲染规则，如包含块，控制框，BFC，IFC 等概念</p><blockquote><p>八、 JS 引擎</p></blockquote><p><strong>作用：</strong>将 js 转汇编转二进制最终变为 cpu 可以认识的数据<br>JS 的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等</p><ul><li>常见的 JS 引擎<ul><li><code>SpiderMonkey</code>:第一款，也是作者<code>Brendan Eich</code>开发的</li><li><code>Chakra</code>:微软开发主要<code>IE</code>浏览器</li><li><code>JavaScriptCore</code>:浏览器引擎(WebKit)中的内置 JS 引擎，Apply 公司开发(小程序的 JsCore)<ul><li>WebKit &#x3D; 渲染工作的(WebCore) 与 JS 引擎(JavaScriptCore) 组成</li></ul></li><li><code>V8</code>:Google 开发<ul><li><code>在Chrome中，只有Html的渲染采用了WebKit的WebCore代码，而在JavaScript上，重新搭建了一个NB哄哄的V8引</code></li><li><code>谷歌浏览器体验好的原因之一</code></li><li><code>V8</code><ul><li>C++编写，作为 js 引擎的话主要用于 Google 浏览器与 NodeJs</li><li>也有作为其他语言的引擎，如<code>WebAssembly</code></li><li>可以独立运行，也能嵌入 C++应用程序中</li><li>工作过程：<ul><li>js 引擎中的<code>Parse模块</code>，将 js 中有用到的代码转换成<code>AST（抽象语法树）</code>，引擎中的<code>Ignition(解释器)</code>才能认识解析</li><li><code>Ignition(解释器)</code>将<code>AST</code>转成<code>ByteCode(字节码)</code>，同时收集<code>TurboFan</code>优化需要的信息</li><li><code>TurboFan(编译器)</code>可以将字节码编译成 CPU 可以直接执行的机器码<ul><li>如果函数被多次调用，会被标记为热点函数，<code>直接</code>通过<code>TurboFan</code>转为机器码</li><li>但是函数后续执行时，如类型发生变化等等，机器码不能正确处理运算，就会被逆向还原为<code>字节码</code>（所以类型不固定很耗性能）</li></ul></li><li><code>Orinoco</code> V8 内存回收模块</li></ul></li></ul></li></ul></li></ul></li></ul><blockquote><p>九、所有浏览器 userAgent 都是 Mozilla?</p></blockquote><blockquote><p>最初浏览器 NCSA Mosaic，简称 Mosaic,<br>后面出现另外一款浏览器 Mozilla( Mosaic + Killer)，–&gt; Mozilla 更名为 Netscape，也就是网景<br><code>网站管理员探测 user agent，对 Mozilla 浏览器发送含有框架的页面，对非 Mozilla 浏览器发送没有框架的页面。</code><br>后面软开发了自己的浏览器，Internet Explorer –&gt; (开始只有 Mozilla 支持框架（frame），为了快速收到含有框架的页面了)微软宣布 IE 是兼容 Mozilla，并且模仿 Netscape 称 IE 为“Mozilla&#x2F;1.22“<br>后面微软与网景的浏览器大众，网景失败退出<br>Netscape 居然以 Mozilla(后面更名 Firefox)的名义重生了，并且开发了 <code>Gecko渲染引擎</code>（Mozilla&#x2F;5.0(Windows; U; Windows NT 5.0; en-US; rv:1.1) Gecko&#x2F;20020826）<br>Mozilla 后来变成了 Firefox，并自称“Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; sv-SE; rv:1.7.5) Gecko&#x2F;20041108 Firefox&#x2F;1.0”<br>很多浏览器使用了它的代码，每一个都将自己装作 Mozilla，而它们全都使用 Gecko。<br><code>Gecko 很出色,因此 user agent 探测规则变了，使用 Gecko 的浏览器被发送了更好的代码</code><br>linux Konqueror 浏览器<code>KHTML渲染引擎</code> 伪装 Gecko <code>like Gecko</code>(Mozilla&#x2F;5.0 (compatible; Konqueror&#x2F;3.2; FreeBSD) (KHTML, like Gecko))<br>Opera<br>后来苹果开发了 Safari 浏览器，并使用 KHTML 作为渲染引擎<br>但苹果加入了许多新的特性，于是苹果从 KHTML 另辟分支称之为 <code>WebKit</code><br>但它又不想抛弃那些为 KHTML 编写的页面，于是 Safari 自称为“Mozilla&#x2F;5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit&#x2F;85.7 (KHTML, like Gecko) Safari&#x2F;85.5”<br>再后来，谷歌开发了 Chrome 浏览器，Chrome 使用 Webkit 作为渲染引擎(后面渲染引擎改用 Blink(基于 Webkit 开发)，V8 是 js 引擎不是渲染引擎)<br>和 Safari 之前一样，它想要那些为 Safari 编写的页面，于是它伪装成了 Safari<br>于是 Chrome 使用 WebKit，并将自己伪装成 Safari，WebKit 伪装成 KHTML，KHTML 伪装成 Gecko，最后所有的浏览器都伪装成了 Mozilla<br><code>因为网站开发者可能会因为你是某浏览器（这里是 Mozilla），所以输出一些特殊功能的程序代码（这里指好的特殊功能），所以当其它浏览器也支持这种好功能时，就试图去模仿 Mozilla 浏览器让网站输出跟 Mozilla 一样的内容，而不是输出被阉割功能的程序代码。大家都为了让网站输出最好的内容，都试图假装自己是 Mozilla，一个已经不存在的浏览器……</code></p></blockquote><ul><li>渲染引擎之间关系(内核也叫做排版引擎、渲染引擎、浏览器引擎等) - Gecko(Firefox) - KHTML(linux Konqueror) - KHTML –&gt; Webkit(Safari) - KHTML –&gt; Webkit –&gt; Blink(chrome) - Presto(欧鹏) -&gt; 欧鹏 Presto 后期被 Blink 代替 - Trident(IE) - EdgeHTML(Edge 浏览器) –&gt; 后期被 Blink 代替<blockquote><p>十、 其它</p></blockquote></li></ul><p>可以拓展不同的知识模块，如跨域，web 安全，hybrid 模式等等内容</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="https://segmentfault.com/a/1190000013662126#articleHeader10">from</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 垃圾桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器请求</title>
      <link href="/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/script-model-request/"/>
      <url>/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/script-model-request/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ul><li>AJAX 是特殊的 http 请求(对于服务器来说没有什么区别)<!-- - 浏览器端只用XHR与fetch发出的才是AJAX请求 --></li></ul><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><blockquote><p>AJAX :Asynchronous JavaScript and XML(异步的 JavaScript 和 XML);</p></blockquote><p>特点:</p><ul><li>无刷新获取数据</li><li>可通过事件更新部分页面<br>缺点:</li><li>无浏览历史，不能回退</li><li>默认存在跨域问题</li><li>seo 不友好，因为数据是后面 js 动态创建到页面上的，爬虫抓取不到</li></ul><h3 id="原生-Ajax"><a href="#原生-Ajax" class="headerlink" title="原生 Ajax"></a>原生 Ajax</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getData()&quot;</span>&gt;</span>get data<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">//创建</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// xhr.abort() 外部手动停止xhr请求，添加一个标志可以禁止重复发送请求</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置响应数据类型</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>; <span class="comment">//如果返回的是json字符串直接解析</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 超时设置</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">timeout</span> = <span class="number">2000</span>; <span class="comment">//两秒数据没回来就算超时</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求超时,请稍后重试&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//网络异常回调</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;网络异常&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 参数t用于IE调用接口缓存</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// xhr.open(&#x27;GET&#x27;,&#x27;http://127.0.0.1:8000/geturl?params=100&amp;age=30&amp;t=&#x27;+new Date(),async);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// async 默认true异步,设置false 同步</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// async代表异步,去掉a变成sync就是同步</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000/posturl&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//设置请求头</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//发送</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//xhr.send();</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">send</span>(<span class="string">&quot;&#123;param:100,age:30&#125;&quot;</span>); <span class="comment">//post传参 格式不固定</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">当状态发生改变的时候 处理服务端返回结果</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">xhr.readyState:0  没发请求(初始)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">               1  open()之后</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   2  send()之后</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   3  请求中</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   4  所有结果全部返回  === XMLHttpRequest.DONE </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//当readyState发生改变时触发</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//状态码</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//响应行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">statusText</span>); <span class="comment">//状态字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getResponseHeaders</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">//指定名称的响应头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getAllResponseHeaders</span>()); <span class="comment">//响应头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>); <span class="comment">//响应体</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Axios-请求"><a href="#Axios-请求" class="headerlink" title="Axios 请求"></a>Axios 请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Axios请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.0/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getData()&quot;</span>&gt;</span>get data<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//对原生axios的封装</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1:8000/posturl&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//url参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">params</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//请求体参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;ab&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">headers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;val&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 实现</span></span></span><br><span class="line"><span class="language-javascript">          functioFn <span class="title function_">myAxios</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">              url,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">              method=<span class="string">&quot;GET&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">              params=&#123;&#125;,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">              body=&#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">          &#125;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//1.通过xhr 创建 ajax</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//创建xhr</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//打开连接</span></span></span><br><span class="line"><span class="language-javascript">                  request.<span class="title function_">open</span>(method,url,<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">                  request.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//2.1 成功了调用resolve</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//2.2 失败了调用 reject</span></span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Jquery-Ajax"><a href="#Jquery-Ajax" class="headerlink" title="Jquery Ajax"></a>Jquery Ajax</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Jquery Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getData()&quot;</span>&gt;</span>get data<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//对原生ajax的封装</span></span></span><br><span class="line"><span class="language-javascript">      $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1:8000/posturl&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>, <span class="comment">//自动解析json数据,如果不是json会报错</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">timoout</span>: <span class="number">2000</span>, <span class="comment">//设置超时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">cache</span>: <span class="literal">false</span>, <span class="comment">//不需要缓存 默认true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">processData</span>: <span class="literal">true</span>, <span class="comment">//默认对数据做格式化处理,图片上传不需要则要手动设置false</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败回调&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">key</span>: <span class="string">&quot;val&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><blockquote><p>可扩展标记语言,外观与 HTML 类似，主要作用是用来传输存储数据的，并且全部标签都是自定义的(后期基本用 json 很少用 XML 了)</p></blockquote><hr><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><blockquote><p>Fetch API 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的部分,这种功能以前是使用 XMLHttpRequest 实现的。Fetch 提供了一个更好的替代方法</p></blockquote><p><a href="https://zh.javascript.info/fetch">参考文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fetch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getData()&quot;</span>&gt;</span>get data<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fetch</span>(<span class="string">&quot;http://127.0.0.1:8888/posturl&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">body</span>: <span class="string">&quot;name=ab&amp;age=20&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//这些 header 保证了 HTTP 的正确性和安全性，所以它们仅由浏览器控制</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">key</span>: <span class="string">&quot;val&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//Response 提供了多种基于 promise 的方法，来以不同的格式访问 body,每次只能用一种</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// res.text() —— 读取 res，并以文本形式返回 res</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// res.json() —— 将 res 解析为 JSON</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// res.formData() —— 以 FormData 对象（在 下一章 有解释）的形式返回 res</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// res.blob() —— 以 Blob（具有类型的二进制数据）形式返回 res</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// res.arrayBuffer() —— 以 ArrayBuffer（低级别的二进制数据）形式返回 res</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;Content-Type&quot;</span>)); <span class="comment">//获取响应头</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> res.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Express-服务"><a href="#Express-服务" class="headerlink" title="Express 服务"></a>Express 服务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、创建应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、创建路由规则</span></span><br><span class="line"><span class="comment">// req 请求报文</span></span><br><span class="line"><span class="comment">// res 响应报文</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/geturl&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;get成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/posturl&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">//允许跨域</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">//接收客户端设置任何请求头</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;lzo-xun&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)); <span class="comment">//只能是字符串或二进制</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、监听</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务 8000 已启动&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Axios-源码与封装"><a href="#Axios-源码与封装" class="headerlink" title="Axios 源码与封装"></a>Axios 源码与封装</h2><p>…<br><a href="https://www.bilibili.com/video/BV1H5411L7FU?p=2">链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 垃圾桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/script-model-websocket/"/>
      <url>/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/script-model-websocket/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>websocket 是一个能主动向前端发送消息的长链接,实时更新数据<br>长短连接指的是客户端和服务端建立和保持 TCP 连接的机制。</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>前端得到数据的方式一般有两类</p><ul><li>长链接（可以复用 TCP 连接）(h5 websocket,socket.io…)<ul><li>链接周期长，服务端主动推送消息,实时更新数据</li><li>socket.io 兼容性较好</li></ul></li><li>短连接（不可以复用 TCP 连接）<br>http1.0 获取一次数据，建立一条 TCP 链接，得到数据，断开</li></ul><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><h3 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h3><blockquote><p>SSE 支持短轮询、长轮询和 HTTP 流，而且能在断开连接时自动确定何时重新连接。</p></blockquote><p><a href="https://juejin.cn/post/7036317857239695373">https://juejin.cn/post/7036317857239695373</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 垃圾桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS 认证</title>
      <link href="/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/web-library-https/"/>
      <url>/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/web-library-https/</url>
      
        <content type="html"><![CDATA[<h2 id="认证方法一"><a href="#认证方法一" class="headerlink" title="认证方法一"></a>认证方法一</h2><p><a href="http://slproweb.com/products/Win32OpenSSL.html">SSL 下载地址</a></p><h3 id="本地认证"><a href="#本地认证" class="headerlink" title="本地认证"></a>本地认证</h3><p>步骤</p><ol><li>进入找到 ssl 下载页面找到适应版本下载：<code>Win64</code> OpenSSL v1.1.1i Light<br>EXE | MSI -&gt; 下载 EXE</li><li>打开安装目录下 <code>/OpenSSL-Win64/start.bat</code> 进入</li><li>进入文件输出目录:运行 <code>openssl genrsa -out privkey.key 2048</code> 生成秘钥 (#生产 2048 位长度的 rsa 密钥)</li><li>运行 <code>openssl req -new -x509 -key  privkey.key -out cacert.pem -days 1095</code> 生成证书<br>或指定 openssl.cnf 路径: <code>openssl req -new -x509 -config &quot;C:\Program Files\OpenSSL-Win64\bin\cnf\openssl.cnf&quot;  -key privkey.key -out cacert.pem -days 1095</code></li><li>连续回车 直到 <code>Common name</code> 输入要签名的 IP 直接回车</li><li>完成</li></ol><p>node 中开启 https 服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sslOptions = &#123;</span><br><span class="line">  <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;C:/privkey.key&quot;</span>), <span class="comment">//生成秘钥路径</span></span><br><span class="line">  <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;C:/cacert.pen&quot;</span>), <span class="comment">//生成证书路径</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>).<span class="title class_">Server</span>(sslOptions, app);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 垃圾桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mockjs</title>
      <link href="/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/web-library-mockjs/"/>
      <url>/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/web-library-mockjs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模拟接口数据前后端分离开发<br><a href="http://mockjs.com/">Mock 官网</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs -D //项目中安装</span><br></pre></td></tr></table></figure><h2 id="vue-中使用"><a href="#vue-中使用" class="headerlink" title="vue 中使用"></a>vue 中使用</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mock/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&quot;mockjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Mock.mock(url?,type?,template|function(option))</span></span><br><span class="line"><span class="comment">    参数一:可选，表示要拦截的URL地址(发送一个请求,如果请求地址Mock过了,直接拦截不回去服务器请求了)</span></span><br><span class="line"><span class="comment">    参数二:可选，请求类型</span></span><br><span class="line"><span class="comment">    参数三:回调</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Mock构造数据</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span>; <span class="comment">//占位符生成随机数</span></span><br><span class="line"><span class="comment">//@符号只能在Mock.mock中使用</span></span><br><span class="line"><span class="comment">//Random的自定义随机数</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">selfrandom</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> selfrandoms = [<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;str3&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">pick</span>(selfrandoms);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;/api/mockget&quot;</span>, <span class="string">&quot;get&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;获取成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data|5-10&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//生成5到10条</span></span><br><span class="line">      <span class="string">&quot;id0|+1&quot;</span>: <span class="number">0</span>, <span class="comment">//id自增</span></span><br><span class="line">      <span class="attr">step1</span>: <span class="title class_">Random</span>.<span class="title function_">increment</span>(<span class="number">2</span>), <span class="comment">//生成值步长2</span></span><br><span class="line">      <span class="attr">step2</span>: <span class="string">&quot;@increment(2)&quot;</span>,</span><br><span class="line">      <span class="attr">text2</span>: <span class="title class_">Random</span>.<span class="title function_">csentence</span>(<span class="number">2</span>, <span class="number">8</span>), <span class="comment">//生成2到8个文字</span></span><br><span class="line">      <span class="attr">text1</span>: <span class="string">&quot;@csentence(2,8)&quot;</span>,</span><br><span class="line">      <span class="attr">img1</span>: <span class="title class_">Random</span>.<span class="title function_">dataImage</span>(<span class="string">&quot;50x50&quot;</span>, <span class="string">&quot;text 图片文字&quot;</span>), <span class="comment">//生成图片</span></span><br><span class="line">      <span class="attr">img2</span>: <span class="string">&#x27;@dataImage(&quot;50x50&quot;)&#x27;</span>,</span><br><span class="line">      <span class="attr">self</span>: <span class="string">&quot;@selfrandom&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;/api/mockpost&quot;</span>, <span class="string">&quot;post&quot;</span>, <span class="keyword">function</span> (<span class="params">option</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(option);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;提交成功&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="regexp">/\/api\/mockpostexp/</span>, <span class="string">&quot;post&quot;</span>, <span class="keyword">function</span> (<span class="params">option</span>) &#123;</span><br><span class="line">  <span class="comment">//只要调用的接口地址匹配正则就拦截</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mainjs</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./mock&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Mockjs</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;getdata&#x27;</span>&gt;</span>获取get数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;postdata&#x27;</span>&gt;</span>获取post数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">async</span> <span class="title function_">getdata</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/mockget&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">async</span> <span class="title function_">postdata</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/api/mockpost&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;post提交参数&#x27;</span>&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 垃圾桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h5 本地摄像头视频采集</title>
      <link href="/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/h5-model-localvideo/"/>
      <url>/2023/07/23/web/JavaScript/%E5%9E%83%E5%9C%BE%E6%A1%B6/h5-model-localvideo/</url>
      
        <content type="html"><![CDATA[<h2 id="获取本地视频流"><a href="#获取本地视频流" class="headerlink" title="获取本地视频流"></a>获取本地视频流</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            获取本地视频流</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. 需要一个接口提供当前方法调用的一些功能</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                navigation:提供视频流注册的一些活动</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 获取相机权限、开启摄像头</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                mediaDevices:提供访问链接媒体输入的设备(相机、麦克风、视频等)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. 得到用户设备,使用户同意开启摄像头权限</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                getUserMedia</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">4. 得到用户的视频媒体流,输出到video</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">注意:http协议无法通过ip形式获取getUserMedia,只能通过localhost或改https</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> constraints = &#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">false</span> &#125;; <span class="comment">//video: true 使用户可以同意开启</span></span></span><br><span class="line"><span class="language-javascript">    navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(constraints).<span class="title function_">then</span>(<span class="function">(<span class="params">mediaStream</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//调用设备成功后执行的回调</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//输出到video</span></span></span><br><span class="line"><span class="language-javascript">      video.<span class="property">srcObject</span> = mediaStream;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//视频流加载成功后播放</span></span></span><br><span class="line"><span class="language-javascript">      video.<span class="property">onloadedmetadata</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        video.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 垃圾桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>work project save</title>
      <link href="/2023/07/22/work/"/>
      <url>/2023/07/22/work/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="f9bda26a851e107158f748724f15a0fe093546993729ba34af5a8ae3624b8b53"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Encrypt </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日报</title>
      <link href="/2023/07/22/daywork/"/>
      <url>/2023/07/22/daywork/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="870f781af45d6e5ed8b5faa6d694f6e76e09bbf44fcadf702cfd28f4c74a2111"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Encrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echarts</title>
      <link href="/2023/07/22/echarts-1/"/>
      <url>/2023/07/22/echarts-1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 饼图线</span></span><br><span class="line">属性: label、labelLine</span><br><span class="line"></span><br><span class="line"><span class="attr">xAxis</span>: &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">//是否显示x轴</span></span><br><span class="line">  <span class="attr">gridIndex</span>: <span class="number">0</span>, <span class="comment">//轴所在grid索引，默认位于第一个grid</span></span><br><span class="line">  <span class="attr">alignTicks</span>: <span class="literal">false</span>, <span class="comment">//在多个轴为数值轴的时候，可以开启该配置项自动对齐刻度。只对&#x27;value&#x27;和&#x27;log&#x27;类型的轴有效</span></span><br><span class="line">  <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span>, <span class="comment">//轴的位置（top/bottom）</span></span><br><span class="line">  <span class="attr">offset</span>: <span class="number">0</span>, <span class="comment">//轴相对于默认位置的偏移，在相同的position上有多个轴时有用</span></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>, <span class="comment">//坐标轴类型，值category/value，与y轴呼应，若x轴配置category则y轴配置value</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//坐标轴名称</span></span><br><span class="line">  <span class="attr">nameLocation</span>: <span class="string">&#x27;end&#x27;</span>, <span class="comment">//坐标轴名称显示位置，可选值start/middle[或者center]/end</span></span><br><span class="line">  <span class="attr">nameTextStyle</span>: &#123;&#125;, <span class="comment">//一般样式也很少直接修改且内容过多待更新... ...</span></span><br><span class="line">  <span class="attr">nameGap</span>: <span class="number">15</span>, <span class="comment">//坐标轴名称与轴线间距离</span></span><br><span class="line">  <span class="attr">nameRotate</span>: <span class="number">10</span>, <span class="comment">//坐标轴名字旋转，角度值</span></span><br><span class="line">  <span class="attr">inverse</span>: <span class="literal">false</span>, <span class="comment">//是否是反向坐标轴</span></span><br><span class="line">  <span class="attr">boundaryGap</span>: [<span class="string">&#x27;20%&#x27;</span>, <span class="string">&#x27;20%&#x27;</span>],    <span class="comment">// 坐标轴两边留白策略，也可以使用布尔值，true居中</span></span><br><span class="line">  <span class="attr">min</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//刻度最小值</span></span><br><span class="line">  <span class="attr">max</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//刻度最大值</span></span><br><span class="line">  <span class="attr">scale</span>: <span class="literal">false</span>, <span class="comment">//只在数值轴中type: &#x27;value&#x27;有效, 设置min和max后无效。是否是脱离 0 值比例。设置成true后坐标刻度不会强制包含零刻度。在双数值轴的散点图中较有用</span></span><br><span class="line">  <span class="attr">splitNumber</span>: <span class="number">5</span>, <span class="comment">//坐标轴的分割段数（预估值）</span></span><br><span class="line">  <span class="attr">minInterval</span>: <span class="number">0</span>, <span class="comment">//自动计算坐标轴最小间隔，例：设置成1，刻度没有小数</span></span><br><span class="line">  <span class="attr">maxInterval</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//自动计算坐标轴最大间隔</span></span><br><span class="line">  <span class="attr">axisLine</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>,    <span class="comment">// 是否显示坐标轴轴线</span></span><br><span class="line">    <span class="attr">symbol</span>: [<span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;arrow&#x27;</span>],     <span class="comment">// 轴线两端箭头，两个值，none表示没有箭头，arrow表示有箭头</span></span><br><span class="line">    <span class="attr">symbolSize</span>: [<span class="number">10</span>, <span class="number">15</span>],     <span class="comment">// 轴线两端箭头大小，数值一表示宽度，数值二表示高度</span></span><br><span class="line">    <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span>,    <span class="comment">// 坐标轴线线的颜色</span></span><br><span class="line">      <span class="attr">width</span>: <span class="string">&#x27;5&#x27;</span>,    <span class="comment">// 坐标轴线线宽</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;solid&#x27;</span>,    <span class="comment">// 坐标轴线线的类型（solid实线类型；dashed虚线类型；dotted点状类型）</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">axisTick</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>,    <span class="comment">// 是否显示坐标轴刻度</span></span><br><span class="line">    <span class="attr">inside</span>: <span class="literal">true</span>,     <span class="comment">// 坐标轴刻度是否朝内，默认朝外</span></span><br><span class="line">    <span class="attr">length</span>: <span class="number">5</span>,    <span class="comment">//坐标轴刻度的长度</span></span><br><span class="line">    <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#FFF&#x27;</span>,     <span class="comment">//刻度线的颜色</span></span><br><span class="line">      <span class="attr">width</span>: <span class="number">10</span>,    <span class="comment">//坐标轴刻度线宽</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;solid&#x27;</span>,    <span class="comment">//坐标轴线线的类型（solid实线类型；dashed虚线类型；dotted点状类型）</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">//是否显示刻度标签</span></span><br><span class="line">    <span class="attr">interval</span>: <span class="string">&#x27;0&#x27;</span>,  <span class="comment">//坐标轴刻度标签的显示间隔，在类目轴中有效.0显示所有</span></span><br><span class="line">    <span class="attr">inside</span>: <span class="literal">true</span>, <span class="comment">//刻度标签是否朝内，默认朝外</span></span><br><span class="line">    <span class="attr">rotate</span>: <span class="number">90</span>, <span class="comment">//刻度标签旋转的角度，在类目轴的类目标签显示不下的时候可以通过旋转防止标签之间重叠；旋转的角度从-90度到90度</span></span><br><span class="line">    <span class="attr">margin</span>: <span class="number">10</span>,  <span class="comment">//刻度标签与轴线之间的距离</span></span><br><span class="line">    <span class="comment">// formatter 刻度标签的内容格式器，支持字符串模板和回调函数两种形式</span></span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#FFF&#x27;</span>,   <span class="comment">// 刻度标签文字的颜色</span></span><br><span class="line">    <span class="attr">fontStyle</span>: <span class="string">&#x27;normal&#x27;</span>,  <span class="comment">// 字体的风格（normal无样式；italic斜体；oblique倾斜字体）</span></span><br><span class="line">    <span class="attr">fontWeight</span>: <span class="string">&#x27;normal&#x27;</span>,  <span class="comment">// 字体的粗细（normal无样式；bold加粗；bolder加粗再加粗；lighter变细；数字定义粗细也可以取值范围100至700）</span></span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;20&#x27;</span>, <span class="comment">//文字字体大小</span></span><br><span class="line">    <span class="attr">align</span>: <span class="string">&#x27;left&#x27;</span>,     <span class="comment">// 文字水平对齐方式，默认自动（left/center/right）</span></span><br><span class="line">    <span class="attr">verticalAlign</span>: <span class="string">&#x27;left&#x27;</span>,    <span class="comment">// 文字垂直对齐方式，默认自动（top/middle/bottom)</span></span><br><span class="line">    <span class="attr">lineHeight</span>: <span class="string">&#x27;50&#x27;</span>,    <span class="comment">// 行高</span></span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;red&#x27;</span>, <span class="comment">// 文字块背景色，例：#123234, red, rgba(0,23,11,0.3)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">splitLine</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>,    <span class="comment">// 是否显示分隔线。默认数值轴显示，类目轴不显示</span></span><br><span class="line">    <span class="attr">interval</span>: <span class="string">&#x27;0&#x27;</span>,    <span class="comment">// 坐标轴刻度标签的显示间隔，在类目轴中有效.0显示所有</span></span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&#x27;#ccc&#x27;</span>], <span class="comment">//color分隔线颜色，可设置单个颜色，也可设置颜色数组，分隔线会按数组中颜色顺序依次循环设置颜色</span></span><br><span class="line">    <span class="attr">width</span>: <span class="number">3</span>, <span class="comment">// 分隔线线宽</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;solid&#x27;</span>, <span class="comment">// 坐标轴线线的类型（solid实线类型；dashed虚线类型；dotted点状类型）</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">splitArea</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">// 是否显示分隔区域</span></span><br><span class="line">    <span class="attr">interval</span>: <span class="string">&#x27;0&#x27;</span>, <span class="comment">// 坐标轴刻度标签的显示间隔，在类目轴中有效.0显示所有</span></span><br><span class="line">    <span class="attr">areaStyle</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: [<span class="string">&#x27;rgba(250,250,250,0.3)&#x27;</span>,<span class="string">&#x27;rgba(200,200,200,0.3)&#x27;</span>], <span class="comment">//color分隔区域颜色。分隔区会按数组中颜色顺序依次循环设置颜色。默认是一个深浅的间隔色</span></span><br><span class="line">      <span class="attr">opacity</span>: <span class="number">1</span>, <span class="comment">// 图形透明度。支持从0到1的数字，为0时不绘制该图形</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">textStyle</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#FFF&#x27;</span>, <span class="comment">// 文字的颜色</span></span><br><span class="line">      <span class="attr">fontStyle</span>: <span class="string">&#x27;normal&#x27;</span>, <span class="comment">// 文字字体的风格（normal无样式；italic斜体；oblique倾斜字体）</span></span><br><span class="line">      <span class="attr">fontWeight</span>: <span class="string">&#x27;normal&#x27;</span>, <span class="comment">//字体的粗细（normal无样式；bold加粗；bolder加粗再加粗；lighter变细；数字定义粗细也可以取值范围100至700）</span></span><br><span class="line">      <span class="attr">fontSize</span>: <span class="string">&#x27;20&#x27;</span>, <span class="comment">// 文字字体大小</span></span><br><span class="line">      <span class="attr">align</span>: <span class="string">&#x27;left&#x27;</span>, <span class="comment">// 文字水平对齐方式，默认自动（left/center/right）</span></span><br><span class="line">      <span class="attr">verticalAlign</span>: <span class="string">&#x27;left&#x27;</span>, <span class="comment">// 文字垂直对齐方式，默认自动（top/middle/bottom）</span></span><br><span class="line">      <span class="attr">lineHeight</span>: <span class="string">&#x27;50&#x27;</span>,  <span class="comment">// 行高</span></span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;red&#x27;</span>, <span class="comment">// 文字块背景色，例：#123234, red, rgba(0,23,11,0.3)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl</title>
      <link href="/2023/07/22/window/win-wsl/"/>
      <url>/2023/07/22/window/win-wsl/</url>
      
        <content type="html"><![CDATA[<h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置 1"></a>配置 1</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">商店安装 Windows Subsystem <span class="keyword">for</span> Linux</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、出现无法解析服务器的名称或地址，需要配置DNS114.114.114.114 / 备用 8.8.8.8</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、查看wsl环境是否就绪，否则需要去 启用或关闭Window功能那里，勾选Linux子系统和虚拟化平台</span></span><br><span class="line">wsl --install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、查看可使用的Linux系统，</span></span><br><span class="line">wsl --list --online</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、安装，win11之前只能去微软商店安装</span></span><br><span class="line">wsl --install -d &lt;DistroName&gt;</span><br><span class="line">wsl --install -d kali-linux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、查看 分发的系统，以及wsl版本</span></span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、将某个Linux版本设置为 wsl2</span></span><br><span class="line">wsl --set-version &lt;distro name&gt; 2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、重启终端，自动添加到win11 Windows终端</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>win <code>\\wsl$\kali-linux</code> :直接范围 wsl 文件</li><li>wsl <code>code //wsl$/kali-linux</code> :直接通过 win 编辑器操作 wsl 文件</li></ul><h3 id="window-普通使用"><a href="#window-普通使用" class="headerlink" title="window 普通使用"></a>window 普通使用</h3><ul><li>WSL 升级 WSL2<ul><li><code>winver</code>:查看 win 版本</li><li><code>wsl -l -v</code>:查看 wsl 版本以及平台</li><li>先 <code>wsl --set-version Ubuntu-18.04 2</code> 才能转<code>wsl --set-default-version 2</code></li><li>dos 可以通过<code>wsl grep xxx</code> 使用子系统命令</li><li>sudo passwd root 设置 root 密码</li></ul></li><li>终端切换<ul><li>普通终端 wsl 进入打开子系统终端</li><li>子系统<code>cmd.exe</code> 直接进入 cmd 终端</li><li>子系统 <code>/mnt/d/Scoop/apps/git/current/bin/bash.exe</code>(自己 git 路径)进入 git 终端</li><li>子系统 <code>powershell.exe</code>进入 powershell 终端</li><li>exit 推出进入父及终端</li></ul></li><li>wslconfig<ul><li><code>wslconfig /u kali-linux</code>:注销子系统</li><li><code>wslconfig /l</code>:查看系统列表</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">wsl wsl与git、powerShell相互切换</span></span><br><span class="line">alias git-bash=&quot;/mnt/d/Scoop/apps/git/current/bin/bash.exe&quot;</span><br><span class="line">alias powershell=&quot;powershell.exe&quot;</span><br><span class="line">alias cmd=&quot;cmd.exe&quot;</span><br></pre></td></tr></table></figure><!--### 自定义安装- [下载离线包](https://docs.microsoft.com/en-us/windows/wsl/install-manual)- 通过`scoop`安装 或 [下载LxRunOffline](https://github.com/DDoSolitary/LxRunOffline/releases)- 解压得到的LxRunOffline.exe就是可执行程序- 安装WSL    - 1.在windows10控制面板-卸载程序-安装功能 中添加windows10子系统功能 打勾    - 2.直接解压或将下载的linux包的后缀由.Appx改为.zip，并进行解压。    - 3.安装        - 打开cmd，输入 LxRunOffline i -n <安装名称> -d <安装路径> -f <安装.exe文件>        - 直接双击解压目录中的.exe可执行文件进行安装,会自动安装到当前目录中 --><h3 id="升级-wsl2"><a href="#升级-wsl2" class="headerlink" title="升级 wsl2"></a><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">升级 wsl2</a></h3><ul><li>dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart</li></ul><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kali</span></span><br><span class="line">sudo apt install nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看状态</span></span><br><span class="line">service --status-all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">sudo service nginx start</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序总结</title>
      <link href="/2023/07/22/web/wechat-applet/wechat-mini-app-2023/"/>
      <url>/2023/07/22/web/wechat-applet/wechat-mini-app-2023/</url>
      
        <content type="html"><![CDATA[<h2 id="开启微信小程序"><a href="#开启微信小程序" class="headerlink" title="开启微信小程序"></a>开启微信小程序</h2><h3 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h3><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h3><blockquote><p>  页面配置文件，路由、页面标题、窗口信息、页面样式 </p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span> <span class="comment">// 没style，页面的私有配置在 index.json 中配置</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 配置公共窗口信息</span></span><br><span class="line">    <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span>   <span class="comment">// 窗口背景颜色</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小程序版本&quot;</span><span class="punctuation">,</span>   <span class="comment">// 窗口标题</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span>   <span class="comment">// 窗口标题颜色</span></span><br><span class="line">    <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;light&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/static/images/icos/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/static/images/icos/home_active.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/groupchat/groupchat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;群聊&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/static/images/icos/friends.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/static/images/icos/friends_active.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/user/user&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/static/images/icos/my.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/static/images/icos/my_active.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;van-button&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/miniprogram_npm/@vant/weapp/button/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;van-dialog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/miniprogram_npm/@vant/weapp/dialog/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;van-toast&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/toast/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;van-notify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/notify/index&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;van-field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/field/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;van-radio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/radio/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;van-radio-group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/radio-group/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;van-cell&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/cell/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;van-cell-group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/cell-group/index&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sitemapLocation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sitemap.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lazyCodeLoading&quot;</span><span class="punctuation">:</span> <span class="string">&quot;requiredComponents&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><ul><li>程序的生命周期 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">文档</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须再app.js中调用，且只能调用一次</span></span><br><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">    <span class="title function_">onLaunch</span>(<span class="params">options</span>)&#123; <span class="comment">// 只执行1次</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小程序生命周期，初始化&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. 执行登录等业务逻辑</span></span><br><span class="line">        wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 发送 res.code 到后台换取 openId, sessionKey, unionId</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//1.1 如果登录成功就将获取的数据储存到 store</span></span><br><span class="line">        <span class="comment">//1.2 只有一个，且是全局共享的，所以 共享数据可以放这里 this.globalData </span></span><br><span class="line"></span><br><span class="line">         wx.<span class="title function_">onAppRoute</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125; <span class="comment">// 监听全局路由跳转</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onShow</span>(<span class="params">options</span>)&#123; <span class="comment">// 执行多次</span></span><br><span class="line">        <span class="comment">// 判断用户进入小程序的场景（群聊，扫一扫）</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(options.<span class="property">scene</span>) <span class="comment">// 场景编码 主入口1001</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小程序生命周期，切换到前台&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onHide</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小程序生命周期，切换到后台&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>全局数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">    <span class="attr">globalData</span>: &#123; <span class="comment">// 自定义随机对象，储存全局属性</span></span><br><span class="line">       <span class="attr">name</span>:<span class="string">&#x27;lzo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pages 中获取</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">getApp</span>(); <span class="comment">// 通过app使用全局方法和全局数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">globalData</span>.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><ul><li>全局样式 app.wxss（uni 可以在 App.vue页面的style中）</li></ul><h3 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h3><blockquote><p>  页面存放位置</p></blockquote><h4 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转tabBar页面 并关闭其他非tabBar页面</span></span><br><span class="line">wx.<span class="title function_">switchTab</span>(&#123;  </span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pages/test/test&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保留单前页面，跳转到应用某个页面</span></span><br><span class="line">wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;url?a=1&amp;b=2&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭所有页面，打开程序内的某个页面（经过多个页面时，经过的页面都关闭）</span></span><br><span class="line">wx.<span class="title function_">reLaunch</span>(&#123;</span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回上一个页面</span></span><br><span class="line">wx.<span class="title function_">navigateBack</span>(number); <span class="comment">// number 默认 1，最多返回到首页 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、跳转通过?传的参数 url 页面 onLoad（options）中获取参数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/2023/07/22/web/wechat-applet/wechat-mini-app/"/>
      <url>/2023/07/22/web/wechat-applet/wechat-mini-app/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原生微信小程序(官方weui)</p></blockquote><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html">官方文档</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>1、开发环境：一般网页运行浏览器中，小程序运行微信环境中<br>2、API差异：小程序无法调用浏览器的DOM BOM API，但是有微信环境提供的各种API<br>3、开发模式：账号 + 微信开发者工具 （开发设置获取AppID，创建项目需要用到）</p><ul><li>vscode开发 <ul><li>wxml 插件</li><li>小程序开发助手</li><li>wechat-snippit</li><li>vscode编辑代码，还是微信开发者工具展示(模拟器可以分离)</li></ul></li></ul><h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><p> 传统程序需要打包到应用商店，通过审核才能上线，小程序可以动态添加功能，无需下载，安装（绕过苹果应用商店）<br>介于H5（前端）和原生App（移动开发工程师）的产品，基本前端来开发<br>主要技术<br>    小程序原生：WXML\WXSS\JavaScript\WexinScript（只有微信能用的一些脚本）<br>    Vue开发：uni-app 跨平台选型方案（不同平台可能会有一些适配问题）<br>    React&#x2F;Vue&#x2F;Nerv：taro 京东团队的跨端跨框架技术<br>    其他开发app技术: ReactNative、Flutter(好用比较原生)。。。</p><h4 id="小程序-MVVM-架构思想"><a href="#小程序-MVVM-架构思想" class="headerlink" title="小程序 MVVM 架构思想"></a>小程序 MVVM 架构思想</h4><blockquote><p>view（.wxml）&lt;&#x3D;&gt;  ViewModel（小程序内部框架） &lt;&#x3D;&gt;  model（.js） </p></blockquote><p>小程序的架构模型(双线程模型)<br>    宿主环境（微信）为了执行小程序，将 WXML模块和WXSS样式，运行与<code>渲染层</code>，使用<code>WebView线程</code>（多个页面会有多个WebView线程）<br>    使用<code>JsCore</code>线程运行JS脚本<br>    两个线程都由<code>微信客户端（Native）</code>进行中转交互<br>    <img src="/../../../static/img/wx-model.jpeg" alt="双线程模型"></p><p>为了接近原生体验，后期可能会用 <code>flutter</code> 的 <code>Skyline 渲染引擎</code>,<code>WebView</code>渲染的最终还是一个网页</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li>openId:openid相当重要，它是用户的唯一标识id</li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id="page-文件夹"><a href="#page-文件夹" class="headerlink" title="page 文件夹"></a>page 文件夹</h3><blockquote><p>小程序页面, 快捷创建方式: <code>app.json</code> -&gt; <code>pages</code> -&gt; <code>直接添加路径保存</code>，就能直接生成<code>整个页面文件</code>了</p></blockquote><p>相关文件</p><ul><li><h2 id="index-js-某页面js逻辑-每个页面自己的-js"><a href="#index-js-某页面js逻辑-每个页面自己的-js" class="headerlink" title="index.js  (某页面js逻辑) -   每个页面自己的 js"></a>index.js  (某页面js逻辑)<br> -   每个页面自己的 js</h2></li><li><p>index.json  (某页面数据)</p></li><li><p>index.wxml  (某页面html)</p><ul><li><p>与 html 的差异</p></li><li><p>标签名称不同、属性节点不同</p></li><li><p>提供类似vue的模板语法   </p></li><li><p>wxml 采用 Mustause 语法</p><ul><li>绑定内容 : <code>&#123;&#123;xxx&#125;&#125;</code>、<code>&#123;&#123;num > 10 ? "大于十":"小于等于十"&#125;&#125;</code>、<code>&#123;&#123;num * 10&#125;&#125;</code>   绑定内容</li><li>绑定属性 : <code>src=&quot;&#123;&#123;xxx&#125;&#125;&quot;</code> <ul><li><code>hidden=&quot;&#123;&#123;bool&#125;&#125;&quot;</code> 是否隐藏元素（hidden 与 wx:if  &#x3D;&#x3D; 反 v-show 与 v-if）</li></ul></li></ul></li><li><p>判断语句 : <code>wx:if    wx:elif   wx:else</code></p></li><li><p>列表渲染 : <code>wx:for=&quot;&#123;&#123;List&#125;&#125;&quot;</code></p><ul><li>索引   每一项   </li><li><code>wx:for-index=&quot;idx&quot;</code> 重命名索引</li><li><code>wx:for-item=&quot;itm&quot;</code> 重命名每一项</li><li><code>wx:key=&quot;id&quot;</code> 自动去取item的id</li><li><code>wx:key=&quot;*this&quot;</code> item自身作为key</li></ul></li><li><p>绑定事件 : </p><ul><li>点击触发 <code>bindtap 或 bind:tap</code></li><li>输入触发 <code>bindinput 或 bind:input</code></li><li>状态改变 <code>bindchange 或 bind:change</code></li><li>事件对象属性<ul><li>target：指向触发事件的源头组件(类似 ul 事件委托的 li)</li><li>currentTarget：绑定事件的组件(类似 ul 事件委托的 ul)</li></ul></li></ul></li><li><p>事件传参</p><ul><li><p>传递参数xxx，值为123 ：<code>data-xxx=&quot;123&quot;</code></p></li><li><p>获取 <code>event.currentTarget.dataset.xxx</code></p></li><li><p>input bindinput 的最新值 <code>e.detail.value</code></p></li><li><p>传递参数xxx，值为123 ：<code>mark:xxx=&quot;123&quot;</code></p></li><li><p>获取 <code>event.mark.xxx</code></p></li></ul></li><li><p>捕获与冒泡</p><ul><li>点击后，向内捕获 到达底点击对象 向外冒泡<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认就是冒泡 v3tap v2tap v1tap 这样执行的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里设置成捕获执行v1tap v2tap v3tap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;v1&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;v1tap&#x27;</span> <span class="attr">capture-bind:tap</span>=<span class="string">&quot;v1tap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;v2&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;v2tap&#x27;</span> <span class="attr">capture-bind:tap</span>=<span class="string">&quot;v2tap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;v3&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;v3tap&#x27;</span> <span class="attr">capture-bind:tap</span>=<span class="string">&quot;v3tap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--到达捕获的 v2tap 时直接终止，不继续捕获和后面的向上冒泡了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;v1&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;v1tap&#x27;</span> <span class="attr">capture-bind:tap</span>=<span class="string">&quot;v1tap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;v2&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;v2tap&#x27;</span> <span class="attr">capture-catch:tap</span>=<span class="string">&quot;v2tap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;v3&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;v3tap&#x27;</span> <span class="attr">capture-bind:tap</span>=<span class="string">&quot;v3tap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>独特标签</p><ul><li>block 包裹多个标签，渲染后不会该标签不存在</li></ul></li><li><p>动态绑定class</p></li></ul></li><li><p>index.wxss  (某页面css)</p><ul><li>仅支持大部分css属性，常用的基本都支持，也有<code>自己的东西</code><ul><li><h2 id="rpx-适配-将宽度分为-750-份，屏幕总宽度为-750rpx-换算px-px转rpx-750-屏幕【设计稿】宽度-750屏幕-1px-1rpx-375屏幕-1px-2rpx-375和750屏幕，满屏都是750rpx-250屏幕-1px-3rpx-50屏幕-1px-15rpx-都是750rpx满屏-当拿到设计稿250的设计稿，设置设计稿上50px的盒子，就需要设置（50-3）rpx-所以屏幕越小，1px对应的rpx就越大，所以不同大小设备显示在屏幕上的比例都是一样的-rpx转px-屏幕或设计稿宽度-750"><a href="#rpx-适配-将宽度分为-750-份，屏幕总宽度为-750rpx-换算px-px转rpx-750-屏幕【设计稿】宽度-750屏幕-1px-1rpx-375屏幕-1px-2rpx-375和750屏幕，满屏都是750rpx-250屏幕-1px-3rpx-50屏幕-1px-15rpx-都是750rpx满屏-当拿到设计稿250的设计稿，设置设计稿上50px的盒子，就需要设置（50-3）rpx-所以屏幕越小，1px对应的rpx就越大，所以不同大小设备显示在屏幕上的比例都是一样的-rpx转px-屏幕或设计稿宽度-750" class="headerlink" title="rpx 适配-   将宽度分为 750 份，屏幕总宽度为 750rpx-   换算px-   px转rpx(750&#x2F;屏幕【设计稿】宽度)  &#x3D;&gt; 750屏幕 1px&#x3D;&#x3D;1rpx  &#x3D;&gt; 375屏幕 1px&#x3D;&#x3D;2rpx  &#x3D;&gt; 375和750屏幕，满屏都是750rpx-                                      250屏幕 1px&#x3D;&#x3D;3rpx &#x3D;&gt; 50屏幕 1px&#x3D;&#x3D;15rpx  &#x3D;&gt; 都是750rpx满屏-                                      当拿到设计稿250的设计稿，设置设计稿上50px的盒子，就需要设置（50*3）rpx-                                      所以屏幕越小，1px对应的rpx就越大，所以不同大小设备显示在屏幕上的比例都是一样的-   rpx转px(屏幕或设计稿宽度&#x2F;750)"></a>rpx 适配<br>-   将宽度分为 <code>750</code> 份，屏幕总宽度为 <code>750rpx</code><br>-   换算px<br>-   px转rpx(750&#x2F;屏幕【设计稿】宽度)  &#x3D;&gt; 750屏幕 1px&#x3D;&#x3D;1rpx  &#x3D;&gt; 375屏幕 1px&#x3D;&#x3D;2rpx  &#x3D;&gt; 375和750屏幕，满屏都是750rpx<br>-                                      250屏幕 1px&#x3D;&#x3D;3rpx &#x3D;&gt; 50屏幕 1px&#x3D;&#x3D;15rpx  &#x3D;&gt; 都是750rpx满屏<br>-                                      当拿到设计稿250的设计稿，设置设计稿上50px的盒子，就需要设置（50*3）rpx<br>-                                      所以屏幕越小，1px对应的rpx就越大，所以不同大小设备显示在屏幕上的比例都是一样的<br>-   rpx转px(屏幕或设计稿宽度&#x2F;750)</h2></li><li>@import 样式导入<ul><li><code>@import &quot;xxxx.wxss&quot;</code></li></ul></li></ul></li><li>app.wxss 全局样式表 页面中 自己的私有样式表<ul><li>局部权重(鼠标移入wxss类时显示权重 )大于等于全局时，就近原则，局部样式覆盖全局</li></ul></li></ul></li><li><p>微信的WexinScript</p><ul><li>里面的方法可以直接在双大括号中使用</li><li>页面中直接写 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wxml 页面中使用</span></span><br><span class="line">&lt;wxs <span class="variable language_">module</span>=<span class="string">&#x27;count&#x27;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;  <span class="comment">//只能用原生js</span></span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须使用 CommonJs导出才能使用</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        <span class="attr">addvalue</span>:add</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/wxs&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;count.addvalue(1,2)&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>封装到文件</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// count.wxs</span></span><br><span class="line">&lt;wxs <span class="variable language_">module</span>=<span class="string">&#x27;count&#x27;</span> src=<span class="string">&#x27;/xx/xx/xx/count.wxs&#x27;</span>&gt;&lt;/wxs&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><h4 id="小程序的生命周期"><a href="#小程序的生命周期" class="headerlink" title="小程序的生命周期"></a>小程序的生命周期</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须再app.js中调用，且只能调用一次</span></span><br><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">    <span class="title function_">onLaunch</span>(<span class="params">options</span>)&#123; <span class="comment">// 只执行1次</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小程序生命周期，初始化&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. 执行登录等业务逻辑</span></span><br><span class="line">        wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 发送 res.code 到后台换取 openId, sessionKey, unionId</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//1.1 如果登录成功就将获取的数据储存到 store</span></span><br><span class="line">        <span class="comment">//1.2 只有一个，且是全局共享的，所以 共享数据可以放这里 this.globalData </span></span><br><span class="line"></span><br><span class="line">         wx.<span class="title function_">onAppRoute</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125; <span class="comment">// 监听全局路由跳转</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onShow</span>(<span class="params">options</span>)&#123; <span class="comment">// 执行多次</span></span><br><span class="line">        <span class="comment">// 判断用户进入小程序的场景（群聊，扫一扫）</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(options.<span class="property">scene</span>) <span class="comment">// 场景编码 主入口1001</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小程序生命周期，切换到前台&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onHide</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小程序生命周期，切换到后台&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">globalData</span>: &#123; <span class="comment">// 自定义随机对象，储存全局属性</span></span><br><span class="line">        <span class="attr">token</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="attr">userInfo</span>:<span class="string">&#x27;12&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="comment">// 页面加载时候执行</span></span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 获取 App 实例的共享数据</span></span><br><span class="line">        <span class="keyword">const</span> app = <span class="title function_">getApp</span>();</span><br><span class="line">        <span class="keyword">const</span> token = app.<span class="property">globalData</span>.<span class="property">token</span>; <span class="comment">// 123456</span></span><br><span class="line">        <span class="keyword">const</span> userInfo = app.<span class="property">globalData</span>.<span class="property">userInfo</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;&#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 渲染数据</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="组件和组件的生命周期"><a href="#组件和组件的生命周期" class="headerlink" title="组件和组件的生命周期"></a>组件和组件的生命周期</h4><p>组件的创建 components<br>    组件的 <code>.json</code> 文件  <code>component:true</code><br>    组件必须被引用，否则会报错<br>    页面的 <code>.json</code> 文件需要引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;my-banner&quot;</span>:<span class="string">&quot;/components/banner/banner&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​组件间可以<code>相互引用app.json</code> 里注册就是<code>全局注册</code> </p><p>组件的wxss样式<br>    组件中不能使用<code>id选择器</code>,<code>属性选择器</code>,<code>标签选择器</code> （这些选择器会影响外面页面的样式）<br>    <code>class</code> 不会影响到外面，所有尽量用class<br>    外面的处理 <code>标签</code>选择器，默认都不会影响到组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Components</span>(&#123;</span><br><span class="line">    <span class="attr">options</span>:&#123;</span><br><span class="line">        <span class="attr">styleIsolation</span>: <span class="string">&quot;isolated&quot;</span>， <span class="comment">// 默认</span></span><br><span class="line">        <span class="attr">styleIsolation</span>: <span class="string">&quot;apply-shared&quot;</span>， <span class="comment">// 组件中让页面样式影响到我</span></span><br><span class="line">        <span class="attr">styleIsolation</span>: <span class="string">&quot;shared&quot;</span>， <span class="comment">// 组件中让页面样式影响到我，让自己样式影响到页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件通信</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过组件的 properties 接收  </span></span><br><span class="line"><span class="attr">properties</span>: &#123; </span><br><span class="line">    <span class="attr">title</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//null 不限制类型 </span></span><br><span class="line">        <span class="attr">value</span>:<span class="string">&quot;默认标题&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 组件发出自定义事件</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">cpmClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;传出数据到外部&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&quot;titleclick&quot;</span>,<span class="string">&#x27;datastrval&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 外面 bind:titleclick=&quot;xxxxx&quot; 接收</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收外面传进来的累</span></span><br><span class="line"><span class="attr">externalClasses</span>:[<span class="string">&#x27;info&#x27;</span>], </span><br></pre></td></tr></table></figure><p>组件的生命周期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">lifetimes</span>:&#123; <span class="comment">// 组件自身的生命周期</span></span><br><span class="line">        <span class="title function_">created</span>(<span class="params"></span>) &#123; <span class="comment">// created</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件被创建created&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">attached</span>(<span class="params"></span>) &#123; <span class="comment">// mounted</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件被添加到组件树种attached&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">ready</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在组件视图层布局完成 ready&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">detached</span>(<span class="params"></span>) &#123; </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件从组件树种被移除detached&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">moved</span>(<span class="params"></span>)&#123;&#125;, <span class="comment">// 组件实例被移动到家节点树的其他位置</span></span><br><span class="line">        <span class="title function_">error</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 组件方法排除错误时候  v2.4.1</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">pageLifetimes</span>:&#123; <span class="comment">// 引入组件的页面的生命周期</span></span><br><span class="line">        <span class="title function_">show</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="小程序的登录流程"><a href="#小程序的登录流程" class="headerlink" title="小程序的登录流程"></a>小程序的登录流程</h3><p>code</p><ul><li>wx.login({success:(res)&#x3D;&gt;{res.code}) 获取</li><li>后端通过 code，appsecret，appid 去小程序服务器获取 openId, sessionKey, unionId </li><li>通过openId生成token返回给客户端</li></ul><p>openId</p><blockquote><p>用户在我的小程序中的唯一标识<br>静默登录后如果需要网页登录，需要让openid与用户账号关联</p></blockquote><p>unionId（账号同时注册小程序和公众号就会有 ）</p><blockquote><p>同一个用户在微信不同产品的唯一标识（小程序、公众号。。。）</p></blockquote><h3 id="API调用"><a href="#API调用" class="headerlink" title="API调用"></a>API调用</h3><blockquote><p>微信提供了专属API接口，用于网络请求: wx.request({})</p></blockquote><ul><li>合法域名<ul><li>如果小程序想要给任意服务器发送请求，需要先设置<strong>通讯域名</strong>，设置的才能通讯（开发管理-开发设置-服务器域名）</li><li>通讯域名（合法，ICP备案，https的域名）否则某个小程序从乱七八糟地方拿到乱七八糟的数据，影响微信用户体验</li><li>调试阶段可以勾选不校验合法域名，暂时使用</li></ul></li></ul><h3 id="util-文件夹"><a href="#util-文件夹" class="headerlink" title="util 文件夹"></a>util 文件夹</h3><blockquote><p>存放一些工具方法</p></blockquote><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>app.js  (全局js逻辑)<ul><li>app.js 项目入口文件</li></ul></li><li>app.json  (全局配置文件)<ul><li><code>pages</code>:小程序所有页面路径存放</li><li><code>windnow</code>:小程序全局窗口外观（默认标题栏，手机wifi栏，窗口背景等）</li><li><code>tabBar</code>: 设置底部tabBar 菜单 </li><li><code>&quot;style&quot;:&quot;v2&quot;</code> 用v2版本样式</li></ul></li><li>app.wxss  (全局css)</li><li>project.config.json (一些配置项目配置信息)<ul><li>一般不做修改</li><li>appid (网上的项目需要把这个appid换成自己的)</li></ul></li><li>project.private.config.json，（私有配置 可以放到.gitxxx里 ）覆盖 project.config.json 相同属性的值<ul><li>setting (详情-&gt;本地设置的操作 会更新到这里)</li></ul></li><li>sitemap.json (设置爬虫文件权限)</li></ul><p><a href="https://www.bilibili.com/video/BV19r4y1N7Br?p=3&spm_id_from=pageDriver">https://www.bilibili.com/video/BV19r4y1N7Br?p=3&amp;spm_id_from=pageDriver</a></p><h3 id="小程序宿主环境-微信"><a href="#小程序宿主环境-微信" class="headerlink" title="小程序宿主环境 微信"></a>小程序宿主环境 微信</h3><ul><li>通信模型支持<ul><li>逻辑层 通过 微信客户端与选如此通信</li><li>逻辑层 通过 微信客户端与第三方服务通信 获取数据</li></ul></li><li>运行机制支持<ul><li>程序 下载代码包 -&gt; 解析 app.json 全局配置文件 -&gt; 执行app.json 小程序入口文件 -&gt; 渲染首页 启动完成</li><li>页面 加载解析页面的 .json 配置文件 -&gt; 加载 wxml wxss 渲染层文件 -&gt; 执行 .js 文件</li></ul></li><li>组件支持<ul><li>视图容器<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view  <span class="comment">&lt;!--类似div--&gt;</span></span><br><span class="line">scroll-view + scroll-y属性 <span class="comment">&lt;!--可滚动的视图区域--&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>API支持<ul><li>事件监听API<ul><li>以 on 开头 监听事件触发。wx. &#x3D;&#x3D; window.</li></ul></li><li>同步API<ul><li>以 Sync 结尾的</li><li>结果可以直接获取，异常也会直接排除</li></ul></li><li>异步API<ul><li>通过回调接收结果</li></ul></li></ul></li></ul><h3 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h3><p><code>开发版本</code>用于程序自测，添加的测试人员都可以访问，修改完美在发布到<code>正式版本</code><br>开发者工具上传代码<br>开发版本(可以设置成体验版本)  -&gt; 审核中版本 -&gt; 线上版本</p><p>物料下载  - 设置 基本设置 可下载小程序二维码<br>运营数据  - 统计 或 数据助手查看(扫描右上角手机数据)</p><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><ul><li>AppData  查看页面的所有数据</li></ul><h3 id="第三方包"><a href="#第三方包" class="headerlink" title="第三方包"></a>第三方包</h3><p>安装完成之后还需要 选择构建，构建npm 生成 miniprogram_npm 才能正常使用</p><h3 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h3><ul><li>将页面新增到编译模式，不用将页面路径移到最前面，就能直接调试指定页面了</li></ul><h2 id="小程序-云开发"><a href="#小程序-云开发" class="headerlink" title="小程序-云开发"></a>小程序-云开发</h2><ul><li>必须要appId</li><li>开发者工具新建项目(建议都选择不使用云服务)</li><li>进入左上角头像旁边的云开发按钮，随便输入一个合格的环境名称，提交(每个用户能申请两个，用掉后想继续用需要收费的)</li><li>设置权限所有用户可读</li></ul><h3 id="云数据库"><a href="#云数据库" class="headerlink" title="云数据库"></a>云数据库</h3><blockquote><p>采用NoSQL类型数据库</p></blockquote><h3 id="云存储"><a href="#云存储" class="headerlink" title="云存储"></a>云存储</h3><blockquote><p>微信小程序最大限制两M，如果有大的资源可以使用云存储解决<br>点击资源查看详情，可看到资源的id与路径</p></blockquote><h3 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h3><blockquote><p>云函数可以调用云数据库的数据，能做一些前端做不到的事情<br>客户端通过db查询有20条限制，最好通过云函数(基于nodejs)操作<br>云函数可以图片用户权限获取数据 </p></blockquote><p>操作:</p><ul><li>在根目录(pages同级)新建任意名称文件夹，如:cloudFunc</li><li>配置文件 project.config.json 第一级添加 “cloudfunctionRoot”:”cloudFunc”, </li><li>如果成功 cloudFunc会变成白云图标</li><li>右键新建nodejs云函数 </li><li>然后客户端的数据库操作都能进云函数使用</li><li>函数写好后，在文件夹中右键部署并上传(如果没有node_module，就选不上传node_module的)</li></ul><h4 id="内容管理"><a href="#内容管理" class="headerlink" title="内容管理"></a>内容管理</h4><blockquote><p>小程序数据库管理系统<br>位置:云服务 -&gt; 更多 -&gt; 内容管理 -&gt; 开通 -&gt; 得到管理系统网址<br>使用:打开网址 -&gt; 创建项目 -&gt; 进入找到内容模型(模型与数据库表对应) -&gt; 添加模板与记录 -&gt; 开发者工具数据库直接刷新</p></blockquote><h3 id="生物认证"><a href="#生物认证" class="headerlink" title="生物认证"></a>生物认证</h3><blockquote><p>生物认证是指通过<strong>指纹</strong>、<strong>手型</strong>、<strong>脸型</strong>、<strong>声音</strong>、<strong>虹膜和视网腊扫描</strong>等物理特征识别人的一种认证方式<br>微信目前仅支持指纹和人脸识别</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信支付</title>
      <link href="/2023/07/22/web/wechat-applet/wechat-play/"/>
      <url>/2023/07/22/web/wechat-applet/wechat-play/</url>
      
        <content type="html"><![CDATA[<p>小程序前期设置<br>1、企业小程序才有支付相关功能，个人的不支持(企业小程序需要300认证)</p><p>微信商务号前期设置<br>1、微信支付平台注册收款账号，需要营业执照<br>2、小程序关联商户号(登录商务账号，绑定小程序的APPID)<br>3、小程序需要进入小程序后台 或 云开发控制台 -&gt; 设置 -&gt; 其他设置 -&gt; 关联商务号进行授权</p><p>开发设置<br>通过 云函数 cloudPay.unifiedOrder() 生成预支付交易单 得到res返回到web端<br>web端接口得到 正确的预支付交易后 通过wx.requestPayment调起支付</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用云函数 得到res ，success回调内 </span></span><br><span class="line">wx.<span class="title function_">requestPayment</span>(&#123;</span><br><span class="line">    ...res.<span class="property">result</span>.<span class="property">payment</span>,</span><br><span class="line">    <span class="title function_">sucess</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;支付成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2023/07/22/web/web-css/"/>
      <url>/2023/07/22/web/web-css/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><blockquote><p>  层叠样式表 , 给标签添加样式</p></blockquote><p><code>内联样式</code> <code>内部样式</code> <code>link href 外部样式</code> <code>选择器</code> <code>布局</code> <code>定位</code> <code>文档流</code> <code>伪类</code> <code>伪元素</code>  <code>单位</code> <code>继承</code> <code>盒子模型</code> <code>图标 字体图标</code></p><p><a href="https://www.w3.org/TR/?tag=css">官方文档</a>   <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">MDN文档</a>  <a href="https://caniuse.com/">兼容性</a></p><h4 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* link href 引入到 html*/</span></span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;xxxx.css&quot;</span>); <span class="comment">/*css 文件 引入其他样式文件*/</span></span><br></pre></td></tr></table></figure><h3 id="CSS-属性"><a href="#CSS-属性" class="headerlink" title="CSS 属性"></a>CSS 属性</h3><h4 id="一些属性"><a href="#一些属性" class="headerlink" title="一些属性"></a>一些属性</h4><ol><li><p>定位(position) 和布局(Layout)</p></li><li><p>展示(display:none 不占位置)和可见(Visivbility:none 任占据位置)</p></li><li><p>盒子模型</p></li><li><p>背景设置</p><ol><li>颜色的表示方法 （red 、#f00、 RGB(255,0,0)、RGBA）</li><li><code>background-color</code> 设置背景色 ,  <code>color</code>设置的是前景色，下划线删除线的颜色也会改变</li></ol></li><li><p>字体、文本</p><ol><li><p><code>text-decoration</code> 装饰线</p></li><li><p><code>text-align</code> 设置 <code>行内元素或内容</code>相对 <code>块父元素的</code> 水平对齐方式，块元素居中需要 <code>margin 0 auto</code></p><ol><li><code>justify</code> 两端对齐，中间平均分配 (最后一行不生效, 一段文字如果最后一行只有两个词，一个做一个右不好看)</li><li><code>text-align-last:justify</code> 这样最后一行就能生效了</li><li><code>letter-spacing   word-spacing</code>  字母或单词间距</li></ol></li><li><p>单位</p><ol><li>px</li><li>em<ol><li>相对<code>父元素字体大小</code>的倍数</li><li>或者说<code>通过继承</code>得到一个<code>默认大小</code>，<code>em 相对自己字体大小</code> 的倍数进行设置</li></ol></li><li>百分比%<ol><li>不同地方用百分比相对的东西都是不同的，比较混乱</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size">MDN</a>  找搜索 font-size 到 <code>Percentages (百分比)</code> 查询 得到 <code>refer to the parent element&#39;s font size</code><ol><li>font-size - 父级字体大小  ，width - 父级容器宽度 ，padding，margin - 父级容器宽度</li></ol></li></ol></li><li>rem</li><li>vw&#x2F;vh</li><li>小程序 rpx</li></ol></li><li><p>font-family</p><ol><li>尽量设置多个，防止用户系统找不到相应字体而用 不可控的默认字体</li></ol></li><li><p>line-height</p><ol><li><p>设置一行文本所占用的高度，准确说是 <code>两行文本基线(baseline)之间的距离</code></p><p><img src="/../../static/img/2022-09-04_075115.jpg"></p></li><li><p>系统会将<code>行高大小 - 文字大小</code> ，剩下的<code>行距</code>  上面一半下面一半，可以起到居中的作用</p></li><li><p>为什么行高与文字大小相等，上下还是会有一点距离  (可能因为 <code>font-size 设置顶线到底线</code>的距离，里面的<code>字距离顶线与底线</code>距离总是有一点距离的)</p></li></ol></li><li><p>font-weight</p><ol><li>w3c  100 ~ 900</li><li>400 <code>默认</code></li><li>700 <code>bold</code></li><li>1 ，100.6 ，123， 1000  也可以</li></ol></li><li><p>font-style</p><ol><li>italic : 适用字体中设计方案中自带的斜体，不支持的就没用</li><li>oblique: 让文本进行倾斜</li></ol></li><li><p>font-variant: small-caps   将小写字母显示成<code>缩小的大写字母</code></p></li><li><p>font 缩写 <code>font:style weight variant size/line-height family;</code></p><ol><li>style weight variant 位置不限制,可以省略</li><li>line-height，位置必须在size 后面，也可以省略，不写单位代表前面的倍数</li><li>size family 位置在最后不能变，也不能省略</li></ol></li></ol></li><li><p>其他属性</p></li></ol><h4 id="属性的特性"><a href="#属性的特性" class="headerlink" title="属性的特性"></a>属性的特性</h4><ol><li>属性的继承<ol><li>默认继承<ol><li>某元素设置<code>具备继承性的属性</code>，那么它的<code>所有后代元素</code>都<code>默认拥有该属性</code>，后代重新设置优先级高<code>可以覆盖</code></li></ol></li><li>常见可继承的属性<ol><li><code>font-size</code> font-family font-weight line-height color text-align …</li><li>一般<code>文本相关</code>属性默认可继承</li><li>通过Google控制台，<code>Style -&gt; Inherited from xxx</code> 可以指定某些属性是否可继承</li></ol></li><li>继承的注意事项<ol><li>继承的是计算后的值，不一定是设置时手写上去那些字符；<code>font-size:2em  -&gt; 继承后 font-size:32px</code></li></ol></li><li>强制继承<ol><li>子元素 <code>border:inherit</code> 强制继承父元素的 border</li></ol></li></ol></li><li>层叠，<ol><li>对于<code>同一个</code>操作对象，它的样式可以通过<code>任何样式表</code>或<code>不同选择器</code>进行设置，最终<code>通过优先级</code>，拿到<code>优先级最高的设置</code></li><li>优先级: <code>!important&#123;1000&#125; &gt; 内联样式&#123;1000&#125; &gt; ID&#123;100&#125; &gt; Class|伪类|属性 &#123;10&#125; &gt; 元素|伪元素 &#123;1&#125; &gt; * &#123;0&#125;</code></li><li>权重可以累加 <code>p.xxx &#123;11&#125; &gt; .xxx&#123;10&#125;</code></li></ol></li></ol><h3 id="块元素的盒子模型"><a href="#块元素的盒子模型" class="headerlink" title="块元素的盒子模型"></a>块元素的盒子模型</h3><ul><li>块级元素<ul><li>单独占据一整行</li><li>设置宽度后，块元素仍然占据一整行，浏览器将默认的margin-right:auto 设置成认为是剩下所有</li></ul></li><li>普通行内元素<ul><li>宽高只有内容决定 ，无法通过宽高设置</li></ul></li><li>行内替换元素( inline-replaces )   ,并不是行内块(display:inline-block)元素<ul><li>不占据一整，但是可以设置宽高</li><li>img 、video 、input</li></ul></li><li>注意事项<ul><li>display 改变元素类型</li><li>行内元素里面不要放块元素</li><li>一般情况块可以包含任何元素，但是<code>p元素</code>不能包含其他块元素 (不会报错，但是浏览器解析处理，会单独创建多个p元素处理)</li></ul></li><li><code>内容 Content</code> <code>内边距 padding</code> <code>边框 border</code> <code>外边距 margin</code><ul><li><p><strong>margin传递</strong> : 如果<code>块元素顶部</code>和<code>父级顶部线</code>重叠，那么子元素设置的 m-t 会变成父元素的 m-t（除非父自己也设了，并且更大）</p><ul><li>1、<code>父元素</code>设置<code>边框</code>可以解决</li><li>2、触发父级盒子 <code>BFC</code></li><li>3、这种需求最好不要用子元素margin (设置兄弟之间的距离)，应该用父元素padding (设置父子之间的距离)</li><li>4、父元素 height:auto; 的话，margin-bottom 也会传递</li></ul></li><li><p><strong>margin折叠</strong></p><ul><li>上下两个盒子，上下<code>都设置margin</code>，浏览器<code>会取更大的那个</code>，左右margin不会，上下才会折叠</li></ul></li><li><p><strong>margin:0 auto</strong> 可以居中的原因</p><ul><li>块元素的宽度 &#x3D; <code>width + padding + border + margin</code> </li><li>块元素一定占据整行，设置宽度后，剩下的会<code>分配给margin-right值</code> (没设置时，默认margin是0的)</li><li>当 <code>margin-left</code> 和 <code>margin-right</code>  都为 auto 时，浏览器会<code>自动分配剩余</code>的部分，就居中了，只能水平居中</li></ul></li><li><p>这些不适合用于行内非替换元素，会有很多奇怪的问题</p><ul><li>比如给 span 设置padding，只要左右和下面有效果，并且<code>左右占据空间</code>，下面是<code>不占据空间</code>的</li><li>比如给span 设置margiin，左右生效，上下不生效</li></ul></li></ul></li></ul><h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><ul><li><p><code>外轮廓 outline</code></p><ul><li>语法和border一样 ，默认显示 boder 外面，<code>但不占据空间</code></li></ul></li><li><p><code>盒子阴影 box-shadow</code></p><ul><li>X偏移值 Y偏移值 模糊 扩散? 颜色 inset内阴影, xxx 阴影2</li></ul></li><li><p><code>文字阴影 text-shadow</code></p><ul><li>没有扩散</li></ul></li><li><p><code>文本属性</code></p><ul><li>单行省略<ul><li><code>white-space:nowrap</code> 强制不换行，<code>overflow:hidden</code> 隐藏超出，·<code>text-overflow:ellipsis</code> 文本超出则涉略号显示</li><li>flex:1 的容器中会有问题</li></ul></li></ul></li><li><p><code>设置背景</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* */</span></span><br><span class="line"><span class="attribute">background-color</span>:<span class="number">#f00</span>;</span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">a.jpg</span>),<span class="built_in">url</span>(<span class="string">2.jpg</span>);</span><br><span class="line"><span class="comment">/* 平铺 */</span></span><br><span class="line"><span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line"><span class="comment">/* 尺寸 cover 缩放 铺满 保持比例裁剪 ，contain 缩放 宽或者高铺满 保持比例 无需裁剪*/</span></span><br><span class="line"><span class="attribute">background-size</span>:auto|cover|contain|<span class="number">100%</span> <span class="number">100%</span>|<span class="number">100px</span> <span class="number">100px</span>:</span><br><span class="line"><span class="comment">/* 背景位置 */</span></span><br><span class="line">background-position:<span class="number">100px</span> -<span class="number">100px</span>|top left|top <span class="string">&quot;不设置bottom默认永远保持居中&quot;</span>;</span><br><span class="line"><span class="comment">/* 滚动 默认scroll不滚动，local跟随容器滚动，fixed相对浏览器窗口固定，滚动页面，容器向上，背景却停留原来位置*/</span></span><br><span class="line"><span class="attribute">background-attachment</span>:scroll|local|fixed;</span><br><span class="line"><span class="comment">/* background */</span></span><br><span class="line"><span class="attribute">background</span>:color url 定位/尺寸 repeat local;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对比img */</span></span><br><span class="line"><span class="selector-tag">img</span> 是一个元素 占用空间 右键可看地址 不支持精灵图(CSS Sprite) 对搜索引擎友好</span><br><span class="line"><span class="attribute">background</span> 相反</span><br><span class="line"></span><br><span class="line">图片作为网站重要组成部分，像logo，产品图等最好用<span class="selector-tag">img</span></span><br><span class="line">修饰美观的部分可以用 <span class="attribute">background</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><h4 id="边框图标"><a href="#边框图标" class="headerlink" title="边框图标"></a>边框图标</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>:border-box; <span class="comment">/* 设置主内容包括边框 ，放大边框可以挤掉所有盒子的位置*/</span></span><br><span class="line"><span class="comment">/* 三个边框 color 设置 transparent 透明，产生三角图标 */</span></span><br><span class="line"><span class="comment">/* https://css-tricks.com/the-shapes-of-css/#top-of-site*/</span></span><br></pre></td></tr></table></figure><h4 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h4><ol><li><p>font-family:””; 使用的字体，默认是系统中储存的字体 </p></li><li><p>自定义网络字体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 引用字体 */</span></span><br><span class="line"><span class="keyword">@font-face</span>&#123; </span><br><span class="line">  <span class="attribute">font-family</span>:YH;</span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">http://domain/fonts/MSYH.TTF</span>); <span class="comment">/* 一般回下载到本地 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span>&#123; </span><br><span class="line">  <span class="attribute">font-family</span>:YH;</span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&quot;./fonts/xxx.eot&quot;</span>); <span class="comment">/* 专门为了兼容IE */</span></span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&quot;./fonts/xxx.eot?#iefix&quot;</span><span class="string"> format(&quot;embedded-opentype&quot;</span>)), <span class="comment">/* format 帮助浏览器快速识别字体 */</span></span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&quot;./fonts/xxx.woff&quot;</span><span class="string"> format(&quot;woff&quot;</span>)),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&quot;./fonts/xxx.ttf&quot;</span><span class="string"> format(&quot;truetype&quot;</span>)),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&quot;./fonts/xxx.svg&quot;</span><span class="string"> format(&quot;svg&quot;</span>)),</span><br><span class="line">   ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 普通使用字体 */</span></span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;YH&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字体可以说设置成各种形状，所有也能设置成图标的样子 https://www.iconfont.cn */</span></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123; <span class="comment">/* 希望使用字体图标的地方 必须用有类 iconfont ，*/</span></span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;YH&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">i</span> class=&#x27;iconfont icotype&#x27;  编码 /<span class="selector-tag">i</span></span><br><span class="line"><span class="comment">/* 也可以写到样式中, 通过给 icotype 就能直接使用某个图标了*/</span></span><br><span class="line"><span class="selector-class">.icotype</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;编码&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 兼容处理 */</span></span><br><span class="line">OpenType/TrueType 类字体扩展名 <span class="selector-class">.ttf</span> <span class="selector-class">.otf</span>  （两个兼容性好 除了ie8）</span><br><span class="line">Embedded OpenType 类字体扩展名 <span class="selector-class">.eot</span>  (仅仅IE支持)</span><br><span class="line">SVG字体 扩展名 <span class="selector-class">.svg</span> <span class="selector-class">.svgz</span> (主要适配苹果那个浏览器)</span><br><span class="line">WOFF 开放字体扩展名 <span class="selector-class">.woff</span> （兼容性好 除了ie8）  <span class="selector-class">.woff2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* https://www.fonts.net.cn/  有包括有版权的 免费的多种字体 */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="精灵图-CSS-Sprite"><a href="#精灵图-CSS-Sprite" class="headerlink" title="精灵图 CSS Sprite"></a>精灵图 CSS Sprite</h4><blockquote><p>  是一种<code>CSS图形合成技术</code>，将各种小图片合并到一个图片上，利用CSS背景定位来显示对应图片部分，<code>CSS雪碧</code>或<code>CSS精灵</code></p></blockquote><p>优点</p><ol><li>减少请求数量，加快响应速度，减轻压力，优化性能</li><li>减少图片总大小</li><li>解决图片命名困扰</li></ol><p>制作</p><ol><li>设计人员提供</li><li><a href="https://www.toptal.com/developers/css/sprite-generator">https://www.toptal.com/developers/css/sprite-generator</a>  工具网站</li></ol><p>使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* http://www.spritecow.com/ 获取设计稿图片信息 */</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">background-position</span>:<span class="number">10px</span> <span class="number">10px</span>; <span class="comment">/* 通过这种方式将已近引入的雪碧背景图片，定位到合适的位置 */</span></span><br></pre></td></tr></table></figure><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="标准流（Normal-Flow）"><a href="#标准流（Normal-Flow）" class="headerlink" title="标准流（Normal Flow）"></a>标准流（Normal Flow）</h4><ul><li>默认元素<code>从左到右</code> <code>从上到下</code> ，块独占一行，这样 按顺序排布</li><li>默认相互之间不存在重叠现象</li></ul><h4 id="定位流"><a href="#定位流" class="headerlink" title="定位流"></a>定位流</h4><blockquote><p>  通过 position 将元素脱离标准流，单独对其设置位置，使它们有不同行为</p></blockquote><ul><li><p>如: 放到另一个元素上面，或始终保存在浏览器窗口的同一个位置</p></li><li><p>position 元素</p><ul><li><p>static 默认</p></li><li><p>relative 相对定位</p><ul><li>元素<code>依然</code>按标准流布局，但是可以使用 left top 等属性调整位置，<code>并且不影响标准流其他元素</code></li><li>移动的标准是<code>父元素</code></li><li>常用与元素位置的<code>微调</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 让img始终保持居中 */</span></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">960px</span>; <span class="comment">/* 如果图片宽度为1920的话 , transform:translate(-50%)不要算宽度 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">50%</span>; <span class="comment">/* margin 的% 始终是相对父元素宽度的 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>absolute 绝对定位</p><ul><li>直接脱离标准流   </li><li>移动的标准是相对 <code>定位了的</code>祖先元素，或<code>浏览器画布</code>进行移动，不是body</li><li>定位元素的特点<ul><li>所有元素可以设置宽高</li><li>宽高默认由内容决定</li><li>不会支撑父元素的高度</li></ul></li><li>相对定义的祖先元素宽度 &#x3D; 绝对定位元素宽度 + left + right + marginLeft + marginRight;</li><li><pre><code> relative 宽度   800 ，不设置 absolute  元素宽度</code></pre><ul><li>800 &#x3D; auto width + 0 + 0 + 0 + 0； 默认宽度，auto 所有会是800；</li><li>800 &#x3D; auto width + 50 + 50 + 0 + 0 ；那么定位元素宽度会自适应，宽度永远距离相对父级50像素</li></ul></li><li>relative 宽度   800 ，设置 absolute  元素宽度<ul><li>800 &#x3D; 200 + 0 + 0 + auto + auto; 局可以实现水平居中了，浏览器不会吧left right的auto看成居中</li></ul></li><li>上面公式 也适用于垂直方向</li><li></li></ul></li><li><p>fixed 固定定位</p><ul><li>直接脱离标准流</li><li>相对<code>可视区域</code> 定位<ul><li><code>视口</code>只有可以看到的一屏幕，<code>画布</code>包括滚动的区域 &gt;&#x3D; 视口</li></ul></li></ul></li><li><p><code>sticky</code> 粘性定位 （新）</p><ul><li><strong>相对定位</strong>和<strong>固定定位</strong>的结合体</li><li>默认是相对定位，当<strong>滚动到指定位置时</strong>，变成固定定位</li><li>相对于最近的能滚动的视口</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以前实现</span></span><br><span class="line">首先设置成 相对定位，浏览器滚动到指定位置时，拿到元素，包absolute 该成固定定位</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 sticky</span></span><br><span class="line">.box&#123;</span><br><span class="line">position: sticky;</span><br><span class="line">top:0; # 距离最近的能滚动的视口顶部 0像素 时，在该视口位置固定</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定位后能用的属性</p><ul><li><p><code>left</code> <code>top</code> <code>buttom</code> <code>right</code> <code>z-index</code> </p><ul><li>z-index  兄弟元素中值越大，层级越高， 非兄弟元素，找它们最近的，同级设置了zindex的祖先进行比较</li></ul></li></ul></li></ul></li></ul><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 如果用 css 定义全局变量，比起scss的优势 不需要一直导入 */</span></span><br><span class="line"><span class="comment">/* 使用 color:var(--main-bg); */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--main-bg</span>: <span class="number">#07C160</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>electron</title>
      <link href="/2023/07/22/web/web-diskapp-electron/"/>
      <url>/2023/07/22/web/web-diskapp-electron/</url>
      
        <content type="html"><![CDATA[<p>electron 实现前端代码构建桌面应用程序</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html</title>
      <link href="/2023/07/22/web/web-html/"/>
      <url>/2023/07/22/web/web-html/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><blockquote><p>  超文本标记语言 ( Hyper Text Markup Language )</p></blockquote><ol><li>构建网页的技术，框架结构, 以<code>.htm/.html</code> 结尾的文件 (早期 win95 那种系统扩展名不能超过三个字符)</li><li>网页由<code>标签</code>注册，<code>标签和内容</code>组成的部分称为<code>元素</code> </li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">MDN HTML 所有元素</a></li></ol><h3 id="文档标准结构"><a href="#文档标准结构" class="headerlink" title="文档标准结构"></a>文档标准结构</h3><ol><li><p>文档类型声明 </p><ol><li>H5的申明<code>&lt;!DOCTYPE html&gt;</code> 让浏览器用H5标准去解析，必须放在最前面，不能省略</li><li>其他还有 html4 、XHTML(语法严格)</li></ol></li><li><p>HTML结构  <code>html&gt;(head&gt;title&#123;网页标题&#125;)+body&gt;div&#123;内容 $&#125;*5</code></p></li></ol><hr><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><hr><blockquote><p>  元素由 <strong>标签 属性 内容</strong> 组成</p></blockquote><h4 id="元素标签"><a href="#元素标签" class="headerlink" title="元素标签"></a>元素标签</h4><ol><li><p>标签：不区分大小写，建议都小写 <code>&lt;div&gt;</code></p></li><li><p>单标签( img 、image、meta、… )</p><ol><li><code>&lt;img /&gt;</code>  <code>斜杆</code>是以前xhtml那种早期版本固定单标签需要加上的，限制<code>不需要</code>了</li></ol></li></ol><h4 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h4><ol><li><p>公共属性 <code>class</code> <code>id</code> <code>style</code></p><ol><li><p><code>data-*</code> HTML5新增的一个自定义数据属性功能  可以通过 js 与 html 进行数据交互</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div id=&quot;node&quot; data-color=&quot;red&quot; data-font-size=&quot;30px&quot;&gt;你好&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;node&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> data = div.<span class="property">dataset</span>;</span><br><span class="line"><span class="keyword">var</span> color = div.<span class="property">dataset</span>.<span class="property">color</span>;</span><br><span class="line"><span class="keyword">var</span> fontSize= div.<span class="property">dataset</span>.<span class="property">fontSize</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);      <span class="comment">//对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color);      <span class="comment">//red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( fontSize);   <span class="comment">//30px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">delete</span> div.<span class="property">dataset</span>.<span class="property">color</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置自定义的值</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-font-weight&quot;</span>,<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择器</span></span><br><span class="line"><span class="comment">//选择所有具有data-color属性的元素</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;[data-color]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择所有data-color属性值为red的元素</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;[data-color=&#x27;red&#x27;]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  css</span></span><br><span class="line"><span class="comment">    div[data-class]&#123;</span></span><br><span class="line"><span class="comment">        width: 100px;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p><code>title</code>  将内容完整显示给用户</p></li></ol></li><li><p>私有属性 <code>href ...</code></p></li></ol><h4 id="元素内容"><a href="#元素内容" class="headerlink" title="元素内容"></a>元素内容</h4><ol><li>实体字符<ol><li>如果要用影响结构，或不可见的符号</li><li>实体名称 <code>&amp;lt;</code> <code>&amp;gt;</code> <code>&amp;nbsp;</code></li><li>实体编号 <code>&amp;#60;</code> <code>&amp;#62;</code> <code>&amp;#160;</code></li><li>实体名称对应的实体编码 就是 <a href="https://www.habaijian.com/">ASCII</a> 的实体编码</li></ol></li></ol><h4 id="常用元素"><a href="#常用元素" class="headerlink" title="常用元素"></a>常用元素</h4><ol><li><p><strong>html</strong>：整个文档的根元素 <code>:root&#123;&#125;</code>就是设置html元素的样式</p><ol><li><code>lang</code> 可以帮助<code>语音合成</code>工具确定要使用的发音，或 <code>翻译工具</code>的翻译规则 <code>英文en  简体中文 zh-CN 中文 zh</code> (设置 lang&#x3D;”en” 那么打开页面，谷歌会提示是否翻译弹窗)</li></ol></li><li><p><strong>head</strong> 文档配置信息</p><ol><li><p><strong>mate</strong></p><ol><li>字符集<ol><li><p>字符集 <code>charset=&quot;utf-8&quot;</code> 必须有，否则容易出现乱码</p></li><li><p>文本  通过<code>指定字符集编码</code>成二进制给计算机识别，计算机也要通过<code>同样的解码方式</code>将二进制成正常文字显示处理</p><p><img src="/../../static/img/2022-09-03_135559.jpg" alt="过程"></p></li><li><p>现在一般都用 <code>utf-8</code></p></li></ol></li></ol></li><li><p><code>title</code> </p></li><li><p>link 外部资源链接</p><ol><li>ref 设置类型 ， href 引入资源路径</li><li>ref &#x3D;”icon|stylesheel|dns-prefetch|preload”    图标 、样式表、指定域名提前解析  、预加载</li></ol></li></ol></li><li><p><strong>body</strong></p><ol><li><p>h （利于seo优化） 、p、ul li 、ol li、dl dt dd、from</p></li><li><p>img  </p><ol><li>alt ( 加载失败的提示文字 )</li><li>src</li><li>默认 <code>vertical-align:baseline;</code> 下面留有一条缝隙，值设置 <code>top</code> 或<code>设置成块元素</code>等，就可以清除</li></ol></li><li><p>a ( 锚元素 (anchor) )</p><ol><li><p>超链接 跳转<code>新链接</code>，获取跳<code>转指定位置</code></p></li><li><p>href 指定要打开的<code>地址</code> (<code>外部url</code> 、<code>本地地址</code>、<code>文件资源 可下载</code>、<code>协议地址</code>)</p><ol><li>URL (统一资源定位符号)   URI （标志符 ，包含URL）</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--协议地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:xx@qq.com&quot;</span>&gt;</span>发送邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>target 以什么方式打开 href，_self   _blank   _top(多层iframe最顶层打开)  _parent(多层iframe上层打开) …</li><li><code>锚点</code> a 元素的<code>href=&#39;#eleId&#39;</code> 指向某个元素的 id  (实现<code>单页面菜单</code>，或<code>容器滚动到最底部</code>)</li></ol></li><li><p>iframe</p><ol><li>禁止别人引用 , 页面响应头设置 <code>X-Frame-Options:sameorigin</code> 表示只在同源域名下才能引用</li></ol></li><li><p><code>div</code> <code>span</code> 和<code>strong</code> <code>i</code> 这种元素的来源 </p><ol><li>早期并没有css样式，为了让页面更好看，所有添加可各种各样包含各种样式的标签</li><li>htm基本元素  -&gt;  添加各种strong标签  -&gt; 臃肿不好维护  -&gt; css成为为标准 -&gt; 样式分离，h1 strong i 这些 都能样式实现 -&gt; 出现<code>div/span 盒子 来搭建基本结构</code>，<code>css调样式</code>, 如果有<code>语义化</code>的东西在用对应标签<code>h1 ul p</code> 不好看css再微调</li></ol></li><li><p>table</p><ol><li>格式 table&gt;(thead&gt;tr&gt;th)(tbody&gt;tr&gt;td)</li><li><code>border-collapse:collapse</code>  边框折叠，适合合并td左右边框</li><li>常用属性：colspan&#x3D;”2” 跨列 (横向合并)、rowspan&#x3D;”2” 跨行（纵向合并）</li><li>caption 表格标题</li></ol></li><li><p>from </p><ol><li>常用属性: disabled、readonly(只读)、checked （checkbox的默认选择）、autofocus(自动聚焦)、selected(下拉的默认选择)</li><li>Input Type <ol><li>button 普通按钮</li><li>reset 重置，点击有默认行为，from标签内生效 (button type&#x3D;’reset’ 也可以)</li><li>submit 提交，点击有默认行为，from标签内生效 </li><li>radio 单选</li><li>checkbox 多选</li></ol></li><li>Input Name<ol><li>用于表单submit时参数key构建</li><li>相同Name 在 radio类型input 不能同时选择</li><li>相同Name 确定 checkbox 类型input 是否为同一个东西</li></ol></li><li>Input Value<ol><li>用于表单submit参数value的构建</li></ol></li><li>label  与某个input，textarea等元素绑定，点击label，就可以激活input ( label 的 for 与 input 的 id 关联 )</li><li>textarea 多行输入</li></ol><pre><code> 1.   cols 指定列数，rows 指定行数 2.   `css resize:none` 隐藏左下角拉伸的按钮</code></pre><ol start="7"><li>select option</li></ol></li></ol></li></ol><h3 id="emmet-工具"><a href="#emmet-工具" class="headerlink" title="emmet 工具"></a>emmet 工具</h3><blockquote><p>  快速审查html </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">快速生成h5默认结构</span></span><br><span class="line">!</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">属性</span></span><br><span class="line">a[href=&quot;xxxx&quot;]&#123;链接&#125;&gt;span</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt; 子代</span> </span><br><span class="line"><span class="meta prompt_">div&gt;</span><span class="language-bash">ul&gt;li</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">+ 兄弟</span></span><br><span class="line">div+div.tow$</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量与内容</span></span><br><span class="line"><span class="meta prompt_">div&gt;</span><span class="language-bash">ul&gt;li*10&#123;文本$&#125;</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">() 分组</span></span><br><span class="line"><span class="meta prompt_">div&gt;</span><span class="language-bash">(div.div1&gt;div.div1child)+div.div2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">^ 上级 .div11与.div1同级</span></span><br><span class="line"><span class="meta prompt_">div&gt;</span><span class="language-bash">div.div1&gt;div.div2^div.div11</span></span><br></pre></td></tr></table></figure><blockquote><p>  css Emmet</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w100 width:100px</span><br><span class="line">w100+h100 宽高100px  </span><br><span class="line">m20-30-40-50 margin:10px 30px 40px 50px;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HTML-关机知识点"><a href="#HTML-关机知识点" class="headerlink" title="HTML 关机知识点"></a>HTML 关机知识点</h3><p><code>文档类型</code> <code>字符集</code> <code>URL</code> <code>SEO</code> <code>元素</code> <code>实体字符</code> <code>元素属性公私属性</code> <code>语义化标签</code> <code>表格</code> <code>表单</code></p><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript</title>
      <link href="/2023/07/22/web/web-script-es6/"/>
      <url>/2023/07/22/web/web-script-es6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6844903959283367950#heading-12"><img src="/../../static/img/web-es6-1.webp" alt=""></a></p><h2 id="变量、复制"><a href="#变量、复制" class="headerlink" title="变量、复制"></a>变量、复制</h2><h3 id="let-const"><a href="#let-const" class="headerlink" title="let&#x2F;const"></a>let&#x2F;const</h3><ul><li><p>let 相对 var</p><ul><li>没有变量提升，不能先使用后定义、</li><li>不能重复定义</li><li>存在块级作用域</li></ul></li><li><p>优先使用 const，<code>必须有初始化值</code>，除非值一定需要改变</p><ul><li>const 只是指向的对象不能修改，可以改<code>对象属性</code></li><li>相当于只能修改内容，不能修改内存地址</li></ul></li><li><p>let&#x2F;const 有 if 和 for 的块级作用域</p></li><li><p>作用域:变量在什么范围内是可用的</p><ul><li>块级作用域:{}、if(){}、for(){}…<ul><li>暂时性死区 TDZ(如果块中定义了 let 或 const，区块中对它们声明的变量形成封闭作用域，即使外面有声明同样的变量，快内申明之前用都报错)</li><li>即使有块级作用域，外面 let 过的变量，{}内部也不能重复定义,外面 var 的，就可以</li><li>同一个块内，无论 let 还是 var 都不能定义相同的变量</li></ul></li><li>es5 以前 var <code>if和for</code>都没有块级作用域，很多东西都需要<code>借助function</code>的作用域来解决问题</li><li>var for 循环的异常<ul><li>就是因为 var 没有块级作用域， 变量 i 一直被改变，不会保存在作用域中,事件操作用的时候 i 就是最后一次的值了</li><li><code>闭包</code>(function(i){})(i)可以解决问题是因为<code>函数是有作用域的</code>,传入的时候就形参赋值了</li></ul></li></ul></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id=""><a href="#" class="headerlink" title="??"></a>??</h3><blockquote><p>非空运算符，只判断变量是否为<code>null/undefined</code>, <code>||</code>可以判断变量是否为 null&#x2F;undefined&#x2F;false&#x2F;0&#x2F;“”等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?? 如果前面变量为null或undefined则返回??后面的值</span></span><br><span class="line"><span class="literal">null</span>??<span class="number">1</span> <span class="comment">//1</span></span><br><span class="line"><span class="number">0</span>??<span class="number">1</span> <span class="comment">//0</span></span><br><span class="line"><span class="comment">// 非空判断</span></span><br><span class="line"><span class="keyword">if</span>((value??<span class="string">&#x27;&#x27;</span>) !== <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//??=</span></span><br><span class="line">a ??= b -&gt; a = (a??b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//?. 可选链操作符</span></span><br><span class="line"><span class="comment">// const host = config &amp;&amp; config.db &amp;&amp; config.db.host;</span></span><br><span class="line"><span class="comment">// 查找config下的db下的host属性，如果那一层没有，直接返回undefined</span></span><br><span class="line"><span class="keyword">const</span> host = config?.<span class="property">db</span>?.<span class="property">host</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(host)</span><br><span class="line"></span><br><span class="line">obj?.<span class="property">prop</span> <span class="comment">// 对象属性是否存在</span></span><br><span class="line">obj?.[expr] <span class="comment">// 同上</span></span><br><span class="line">func?.(...args) <span class="comment">// 函数或对象方法是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//?: 三元运算符</span></span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数新增<br>1、形参可以有默认值，<br>2、形参支持解构<br>3、剩余参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">&#123; name, age &#125;, a, b = <span class="number">10</span>, ...c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age); <span class="comment">// 123 100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// [3,4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(user, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul><li><code>const fun = a =&gt; 123</code></li><li><code>const fun = () =&gt; 123</code></li><li>一个参数可胜利(),只有返回值可以省略{}</li><li><code>this</code>:箭头函数 this 是最近作用域的 this，向外层作用域一层层查找</li></ul><h2 id="数组-json"><a href="#数组-json" class="headerlink" title="数组&#x2F;json"></a>数组&#x2F;json</h2><ul><li>数组<ul><li>数组遍历<ul><li>for 循环</li><li>for in:<code>for(let i in arr)</code> ，i 为索引</li><li>for of:<code>for(let item of arr)</code>，item 为每一项</li></ul></li><li>扩展运算符 […arrList] 展开数组 ，得到一个新的数组（console.log({…obj})）</li><li><code>filter</code><ul><li>filter 的回调必须返回一个<code>bool</code>值，<code>true</code>自动将这一项<code>返回</code>，否则<code>过滤</code>掉这一项</li><li>用<code>新数组</code>接收</li></ul></li><li><code>map</code><ul><li>每一项进行个性化操作后返回，生成<code>新数组</code>,改变<code>item</code>会音响原数组</li></ul></li><li><code>reduce</code>:对数组所以项进行汇总<ul><li>preVal 为<code>前一次return</code>的值，<code>第一次</code>默认为<code>参数二传入</code>的值，这里是 0<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> total = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">preVal, item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> preVal + item;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><code>数组扁平化</code>并去重<ul><li><strong>…new Set([1,2,3,4,[4,5,6,7],7,8,9].flat(Infinity))</strong></li></ul></li></ul></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>模板字符串 <code>xxx$&#123;number&#125;xxx</code><br>字符串方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123abc456&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&quot;123&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&quot;456&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>对象增强写法<ul><li>name:name -&gt; name</li><li>run:function(){} -&gt; run(){}</li><li>表达式 key<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;lzo&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="title function_">fun</span>(<span class="params"></span>) &#123; &#125;,</span><br><span class="line">    [name]: name</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;name: &#x27;lzo&#x27;, lzo: &#x27;lzo&#x27;, fun: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>对象方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objAssign = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,user)  <span class="comment">// 合并 &#123;&#125; 和 user，实现浅拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objCreate =  <span class="title class_">Object</span>.<span class="title function_">create</span>(user)<span class="comment">// 创建一个对象，并将对象 proto 指向参数对象</span></span><br><span class="line">                 <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)<span class="comment">// 创建一个没有原型的对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>vue-vue2.md</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>语法糖</p><h2 id="Map-and-Set"><a href="#Map-and-Set" class="headerlink" title="Map and Set"></a>Map and Set</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote><p>类似于数组的数据结构，成员值都是唯一且没有重复的值</p></blockquote><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><p>结构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c = <span class="number">100</span>, d, e = <span class="number">150</span>] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// 150</span></span><br><span class="line">c = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 还是 [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, <span class="attr">age</span>: age2 &#125; = user;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age2); <span class="comment">// 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 123</span></span><br><span class="line">name = <span class="number">456</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user); <span class="comment">// 不变</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 基础</title>
      <link href="/2023/07/22/web/web-script-ts/"/>
      <url>/2023/07/22/web/web-script-ts/</url>
      
        <content type="html"><![CDATA[<p><strong>JavaScript 的超级，在js es6 es6以上的js语法这个添加了 接口(interfaces)、强类型(Strongly Typed)、泛型(Generics)…</strong> </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">tsc -v</span><br><span class="line">tsc script.ts # 编译生成js文件</span><br><span class="line">tsc --init # 生成ts配置文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vscode直接右键运行ts文件</span></span><br><span class="line">npm install -g ts-node</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ts-node 需要依赖  tslib @types/node 两个包</span></span><br><span class="line">npm install tslib @types/node -g</span><br><span class="line">ts-node script.ts # 直接运行 script.ts</span><br></pre></td></tr></table></figure><blockquote><p>  解决了JavaScript类型缺失问题，错误发现的越早越好，开发阶段对类型进行校验</p></blockquote><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="手动直接编译"><a href="#手动直接编译" class="headerlink" title="手动直接编译"></a>手动直接编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc file.ts</span><br></pre></td></tr></table></figure><h3 id="vscode自动编译"><a href="#vscode自动编译" class="headerlink" title="vscode自动编译"></a>vscode自动编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 项目目录生成配置文件</span> </span><br><span class="line">tsc --init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改配置文件参数 如:</span></span><br><span class="line">&quot;strict&quot;: false </span><br><span class="line">&quot;outDir&quot;: &quot;./js&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.启动监视任务</span></span><br><span class="line">终端 -&gt; 运行任务 -&gt; 监视xx项目 tsconfig.json</span><br><span class="line"></span><br><span class="line">或 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tsc -p d:\lzo-project\lzo-everyday\tsconfig.json --watch 直接箭头指定的tsconfig</span></span><br></pre></td></tr></table></figure><h2 id="ts语法"><a href="#ts语法" class="headerlink" title="ts语法"></a>ts语法</h2><h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><blockquote><p> 这是一种轻量的为函数或者变量提添加的约束，冒号后面的都是类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整格式 var/let/const 标识符:数据类型 = 赋值</span></span><br><span class="line"><span class="comment">// 声明类型后，TypeScript 就会进行类型检测，声明类型称为 类型注解</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: number = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tsfun</span>(<span class="params">str: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果类型不对,编译时会报错</span></span><br><span class="line"><span class="title function_">tsfun</span>(<span class="string">&quot;str&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用基础类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: string = <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: number = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: string | number = <span class="number">20</span>; <span class="comment">//联合类型 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象,一般配合接口interface使用</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lzo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// let obj: &#123;</span></span><br><span class="line"><span class="comment">//     name: string;</span></span><br><span class="line"><span class="comment">//     age: number;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//非严格模式下（配置文件strict：false）undefined和null是可以赋值给其他类型变量的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">f</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js 不存在的类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">anytype</span>: any = <span class="string">&quot;any&quot;</span>; <span class="comment">// 值可以是任意类型，js的类型就是any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [string, number] = [<span class="string">&quot;str&quot;</span>, <span class="number">20</span>]; <span class="comment">//元组：固定元素个数与元素类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">unknownType</span>: unknown = <span class="number">8</span>; <span class="comment">// 任意不确定类型，任意数据都是不合法的,只能在类型缩小后操作</span></span><br><span class="line">unknownType = <span class="string">&quot;12&quot;</span>; <span class="comment">// 赋值还是没问题的</span></span><br><span class="line"><span class="comment">// console.log(unknownType.length) // 这样的操作就不行了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> unknownType == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 必须进行类型校验(缩小 将类型缩小到一定范围)，才能根据缩小后的类型进行对应操作</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(unknownType.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void 表示函数没有返回值的时候，用void来表示</span></span><br><span class="line"><span class="comment">// 用户指定函数返回void的时候，允许函数不返回 和 返回undefined(返回null不行)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">summ</span>(<span class="params">a: number, b: number</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用户没有指定void的时候，如果返回undefined，返回值类型部分，类型推导为 undefined类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// never类型</span></span><br><span class="line"><span class="comment">// 函数不会返回任何东西时，报错或死循环，通常自动推导时可以出现</span></span><br><span class="line"><span class="comment">// 不可能有符合条件的地方，就会被推导为never （let aaa:number&amp;string;）aaa就是never类型</span></span><br><span class="line"><span class="comment">// switch 用于到不了的case或default里面的变量，（可能出现的case，但是没有处理，直接报错，让用户意识到少处理了一些）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line">enum <span class="variable constant_">USER_ENUM</span> &#123;</span><br><span class="line">    <span class="variable constant_">USER</span>,</span><br><span class="line">    <span class="variable constant_">ADMIN</span>,</span><br><span class="line">    <span class="variable constant_">THREE</span> = <span class="string">&quot;three&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">USER_ENUM</span>.<span class="property">USER</span>); <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">USER_ENUM</span>.<span class="property">ADMIN</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">USER_ENUM</span>.<span class="property">THREE</span>); <span class="comment">//three</span></span><br><span class="line"><span class="comment">//可以通过数值类型值拿到key</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">USER_ENUM</span>[<span class="number">1</span>]); <span class="comment">//ADMIN</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//any 都可以类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr2</span>: any = [<span class="string">&quot;1&quot;</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//void类型像是与any类型相反,只能为它赋予undefined和null：</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">vi</span>: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//object 非基础数据类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">create</span> = (<span class="params">obj: object</span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="title function_">create</span>([]);</span><br><span class="line"><span class="title function_">create</span>(&#123;&#125;);</span><br><span class="line"><span class="title function_">create</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="title function_">create</span>(<span class="title class_">String</span>);</span><br></pre></td></tr></table></figure><h4 id="类型别名-Type"><a href="#类型别名-Type" class="headerlink" title="类型别名 Type"></a>类型别名 Type</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyNumber</span> = <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">age</span>:<span class="title class_">MyNumber</span> = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>:<span class="built_in">number</span>  <span class="comment">// 逗号和封号都可以，如果有换行，可以不指定任何符号</span></span><br><span class="line">    <span class="attr">y</span>:<span class="built_in">number</span></span><br><span class="line">    z?:<span class="built_in">number</span> <span class="comment">// z可选</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">point:PointType</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(point.<span class="property">x</span>) <span class="comment">// 放心的使用point</span></span><br><span class="line">    <span class="keyword">return</span> point.<span class="property">x</span> + point.<span class="property">y</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(&#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型推导/类型推断</span></span><br><span class="line"><span class="comment">// 声明标识符如果有赋值，会根据赋值的类型推导出标识符的类型注解</span></span><br><span class="line"><span class="keyword">let</span> lxtd = <span class="string">&quot;lxtd&quot;</span>;    <span class="comment">// 推导为 string</span></span><br><span class="line"><span class="keyword">let</span> lxtd2 = <span class="number">2.3</span>;      <span class="comment">// 推导为 number</span></span><br><span class="line"><span class="keyword">const</span> lxtd3 = <span class="number">2.3</span>;    <span class="comment">// 推导为 字面量类型2.3</span></span><br><span class="line"><span class="keyword">const</span> lxtd4 = <span class="string">&#x27;lxtd&#x27;</span>; <span class="comment">// 推导为 字面量类型lxtd</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lxtd = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">lxtd = <span class="number">124</span>; <span class="comment">//报错了 推断成了字符串类型</span></span><br></pre></td></tr></table></figure><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><blockquote><p>  告诉ts要操作的对象就是那个类型，可以对这个对象做那个类型可以做的事情 </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imgEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.img&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLImageElement</span></span><br><span class="line">imgEl.<span class="property">src</span> = <span class="string">&#x27;xxx&#x27;</span> <span class="comment">// 如果没有断言，ts不知道 imgEl 就是 图片对象，给设置src就会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型断言 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getString</span>(<span class="params">str:<span class="built_in">string</span>|<span class="built_in">number</span></span>):<span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">num</span>:<span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">// 高速ts编译器我的str是什么类型，断言str为string就可以取length</span></span><br><span class="line">    <span class="comment">// 前提是str类型可以是string</span></span><br><span class="line">    <span class="comment">// 两种方式: &lt;类型&gt;变量  或  变量 as 类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// num = (&lt;string&gt;str).length</span></span><br><span class="line">    num = (str <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span></span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getString</span>(<span class="number">12</span>))</span><br></pre></td></tr></table></figure><h4 id="非空类型断言"><a href="#非空类型断言" class="headerlink" title="非空类型断言 !"></a>非空类型断言 !</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非空类型断言</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPersion</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  infos?: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">ematyInfo</span>: <span class="title class_">IPersion</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lzo&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问时可以用 可选链?. 避免infos.name不存在时</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ematyInfo.<span class="property">infos</span>?.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值时就不能使用 ?. 了</span></span><br><span class="line"><span class="comment">// 方案1 利息缩小</span></span><br><span class="line"><span class="keyword">if</span>(ematyInfo.<span class="property">infos</span>)&#123;</span><br><span class="line">    ematyInfo.<span class="property">infos</span>.<span class="property">name</span> = <span class="string">&#x27;xun&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案2 非空类型断言（强制告诉ts infos一定不为空，危险如果断言错了，给undefined赋值，程序就出错了）</span></span><br><span class="line">ematyInfo.<span class="property">infos</span>!.<span class="property">name</span> = <span class="string">&#x27;xun&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;lzo&#x27;</span> <span class="comment">// 具体值，const定义的变量，自动推导成字面量</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>:<span class="number">18</span> = <span class="number">18</span> <span class="comment">// 指定为字面量类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用场景</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MethodType</span> = <span class="string">&quot;get&quot;</span> | <span class="string">&quot;post&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> reqinfos = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">const</span> reqinfos2 = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;post&quot;</span></span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">interface</span> reqinfos3Inter &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="title class_">MethodType</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">reqinfos3</span>: reqinfos3Inter = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requet</span>(<span class="params">url: <span class="built_in">string</span>, method: MethodType</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(method);</span><br><span class="line">&#125; <span class="comment">// 使用 MethodType 比 string 更加合理</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">requet</span>(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;post&quot;</span>); <span class="comment">// 可以</span></span><br><span class="line"><span class="title function_">requet</span>(<span class="string">&quot;url&quot;</span>, reqinfos.<span class="property">method</span> <span class="keyword">as</span> <span class="title class_">MethodType</span>); <span class="comment">// reqinfos.method 是 string 类型 不能直接赋值到 MethodType 类型</span></span><br><span class="line"><span class="title function_">requet</span>(<span class="string">&quot;url&quot;</span>, reqinfos2.<span class="property">method</span>); <span class="comment">// 直接将 reqinfos2 所有属性变成字面量类型</span></span><br><span class="line"><span class="title function_">requet</span>(<span class="string">&quot;url&quot;</span>, reqinfos3.<span class="property">method</span>); <span class="comment">// 直接将 reqinfos3.method 变成字面量类型 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数类型（类型返回值用的是箭头）</span></span><br><span class="line"><span class="comment">// 有些语言这个参数名称 a|b 是可以省略的，ts中是不可省略的，如果省略就变成 string:any </span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span> = (<span class="attr">a</span>: <span class="built_in">string</span>, <span class="attr">b</span>: <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> a + b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;211&quot;</span>));                                      </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 提取</span></span><br><span class="line"><span class="keyword">type</span> add2Type = <span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>; <span class="comment">// 指定返回值必须为string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add2</span>: add2Type = (<span class="attr">a</span>: <span class="built_in">string</span>, <span class="attr">b</span>: <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> a + b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;211&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据执行上下文自动推导匿名函数的类型</span></span><br><span class="line"><span class="keyword">let</span> arr5 = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="number">3</span>];</span><br><span class="line">arr5.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 交叉类型 （多种类型同时满足）</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info2</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">infos</span>: <span class="title class_">Info</span> &amp; <span class="title class_">Info2</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lzo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//数组 指定数据类型，只能放数字</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: (<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;str&quot;</span>]; <span class="comment">//数组 指定数据类型,可存放多种类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 泛型写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">list2</span>: <span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//list2的元素确保不会被修改</span></span><br></pre></td></tr></table></figure><h4 id="类型缩小（类型保护）"><a href="#类型缩小（类型保护）" class="headerlink" title="类型缩小（类型保护）"></a>类型缩小（类型保护）</h4><blockquote><p>  将需要使用的变量类型范围进行缩小</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 联合类型案例</span></span><br><span class="line"><span class="comment">// typeof</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">val</span>:<span class="built_in">number</span>|<span class="built_in">string</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> val == <span class="built_in">string</span>)&#123; <span class="comment">// val 的类型可以是 number 和 string，这里缩小为string，直接就能使用string的方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(val.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// === or !==</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Direction</span> = <span class="string">&quot;left&quot;</span> | <span class="string">&quot;right&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">switchdir</span>(<span class="params">direction:Direction</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(direction === <span class="string">&#x27;left&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是left&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceof</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">date</span>:<span class="built_in">string</span>|<span class="title class_">Date</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">if</span>(date <span class="keyword">instanceof</span> <span class="title class_">Date</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in 判断是否有某个属性  （&quot;name&quot; in obj 判断obj对象是否存在name属性）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ....</span></span><br></pre></td></tr></table></figure><p>总结</p><ul><li><code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>、数组<code>number[]</code>、元祖<code>[string, number,xxx]</code>、枚举<code>enum</code>、<code>any</code>、<code>void</code>、<code>object</code>等十几类</li><li>联合类型： number | string</li><li>类型断言： <code>&lt;类型&gt;变量</code>  或  <code>变量 as 类</code>，两种方式让编译器把变量当做指定的类型操作</li><li>类型推断:  定义变量时<code>没有指定类型</code>,编译器会把根据变量的值推断出一个类型,没值就是any</li></ul><h3 id="interface-与-对象"><a href="#interface-与-对象" class="headerlink" title="interface 与 对象"></a>interface 与 对象</h3><blockquote><p>接口是一种能力或一种约束</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * type 与 interface 的区别 </span></span><br><span class="line"><span class="comment"> *      1、type 对类型使用范围广，interface 只能声明对象（但对对象使用的范围更广）</span></span><br><span class="line"><span class="comment"> *      2、声明对象时 interface 相同名称可以多次声明，属性叠加（使用别接口，扩展自己需要加入的东西），type不能声明两个相同名称的别名同时存在</span></span><br><span class="line"><span class="comment"> *      3、interface 支持继承 interface Persion2 extends Person &#123;加入Persion2 独有的属性&#125; </span></span><br><span class="line"><span class="comment"> *      4、interface 可以被类实现 class Tree implements Person （Person 中所有属性方法都要被实现）</span></span><br><span class="line"><span class="comment"> *      5、总结建议：非对象类型使用type，如果使用对象类型的声明使用interface</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口,如果类型不对||使用没有定义的属性||obj属性不够,ts会提示错误</span></span><br><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">firsName</span>: string;</span><br><span class="line">    <span class="attr">lastName</span>: string;</span><br><span class="line">    <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params">person: Person</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> person.<span class="property">firsName</span> + person.<span class="property">lastName</span> + <span class="string">&quot;,&quot;</span> + person.<span class="property">age</span> + <span class="string">&quot;岁&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">firsName</span>: <span class="string">&quot;liao&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;zhongxun&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">xxx</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">showName</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================</span></span><br><span class="line"><span class="comment">//定义一个接口,用来描述对象形状的interface类型</span></span><br><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">    readonly <span class="attr">firsName</span>: string; <span class="comment">//名称定义好后不能随意更改</span></span><br><span class="line">    <span class="attr">lastName</span>: string;</span><br><span class="line">    age?: number; <span class="comment">//可填可不填</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">per1</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">firsName</span>: <span class="string">&quot;liao&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;zhongxun&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例类型断言,使Person中不存在的key属性不会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">per2</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    ...per1,</span><br><span class="line">    <span class="attr">key</span>: [<span class="string">&quot;xxx&quot;</span>, <span class="number">12</span>],</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="title class_">Person</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口扩展,继承</span></span><br><span class="line">interface <span class="title class_">Persion2</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: string;</span><br><span class="line">    [<span class="attr">key</span>: string]: any; <span class="comment">//定义接口设置，任意类型,创建对象时使Persion2中不存在的key属性不会报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">per3</span>: <span class="title class_">Persion2</span> = &#123;</span><br><span class="line">    ...per1,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;extend&quot;</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">c</span>: [<span class="string">&quot;xxx&quot;</span>, <span class="number">12</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//======================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数签名</span></span><br><span class="line">interface <span class="title class_">ISearchFunc</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个调用签名</span></span><br><span class="line">    (<span class="attr">a</span>: string, <span class="attr">b</span>: string): boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数，使用定义的签名</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">searchFunc</span>: <span class="title class_">ISearchFunc</span> = (<span class="attr">a</span>: string, <span class="attr">b</span>: string): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="title function_">search</span>(b) &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">searchFunc</span>(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//======================================================================</span></span><br><span class="line"><span class="comment">//函数签名</span></span><br><span class="line">interface <span class="title class_">ISearchFunc</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个调用签名</span></span><br><span class="line">    (<span class="attr">a</span>: string, <span class="attr">b</span>: string): boolean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类接口</span></span><br><span class="line">interface <span class="title class_">IFly</span>&#123;</span><br><span class="line">    <span class="attr">fly</span>:<span class="title class_">ISearchFunc</span></span><br><span class="line">&#125;</span><br><span class="line">interface <span class="title class_">IFly2</span>&#123;</span><br><span class="line">    <span class="attr">fly2</span>:<span class="title class_">ISearchFunc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类中 implements 的类接口都要实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> implements <span class="title class_">IFly</span>,<span class="title class_">IFly2</span>&#123;</span><br><span class="line">    <span class="title function_">fly</span>(<span class="attr">a</span>: string, <span class="attr">b</span>: string): boolean &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;实现IFly里的定义&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fly2</span>(<span class="attr">a</span>: string, <span class="attr">b</span>: string): boolean &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;实现IFly2里的定义&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> per1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">per1.<span class="title function_">fly</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">per1.<span class="title function_">fly2</span>(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>格式 test(变量,变量): 返回值{}   </p></blockquote><h4 id="函数完整写法"><a href="#函数完整写法" class="headerlink" title="函数完整写法"></a>函数完整写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  add变量:函数名</span></span><br><span class="line"><span class="comment"> *  (a: string, b: string) =&gt; string ==== add函数的类型</span></span><br><span class="line"><span class="comment"> *  (a: string, b: string): string =&gt; a + b ==== 符合这个类型的函数</span></span><br><span class="line"><span class="comment"> *  最后面的 string 指定返回值的类型，写上去方便使用的人知道，得到的是什么样的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="function">(<span class="params">a: string, b: string</span>) =&gt;</span> string = (<span class="attr">a</span>: string, <span class="attr">b</span>: string): <span class="function"><span class="params">string</span> =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取</span></span><br><span class="line">type add2Type = <span class="function">(<span class="params">a: string, b: string</span>) =&gt;</span> string; <span class="comment">// 指定返回值必须为string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add2</span>: add2Type = (<span class="attr">a</span>: string, <span class="attr">b</span>: string): <span class="function"><span class="params">string</span> =&gt;</span> a + b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;211&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a  默认参数,有默认值,可以不传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b  可选参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ...args  剩余参数,必须放在最后面,如果参数够多，默认和可选一定会占一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a: number = <span class="number">123</span>, b: number,...args:number[]</span>): number &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">//2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args) <span class="comment">//[3,4,5,6,7,8]</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h4 id="参数个数问题"><a href="#参数个数问题" class="headerlink" title="参数个数问题"></a>参数个数问题</h4><blockquote><p>  TypeScript 对于传入的函数类型的参数个数，少于应有的个数是，不进行检测数量的（但会检测类型） </p><p>  因为js提供很多方法，有很多参数，有很多不常用的</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;&#125;) <span class="comment">// 比如这里，其实还有第三个参数 array数组本生，一般情况基本不会用，没必要强制写入</span></span><br></pre></td></tr></table></figure><h4 id="函数调用签名"><a href="#函数调用签名" class="headerlink" title="函数调用签名"></a>函数调用签名</h4><blockquote><p>  调用签名（Call Signatures），函数除了可以被调用，<strong>自己也</strong>可以<strong>拥有属性值</strong></p></blockquote><blockquote><p>  函数表达式并不支持声明属性，如果需要描述一个带属性的函数，就需要在对象类型中写一个<strong>调用签名</strong>了</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数调用签名</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ISearchFunc</span> &#123;</span><br><span class="line">  <span class="comment">//定义一个调用签名</span></span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">string</span>, <span class="attr">b</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>; <span class="comment">// 这边是冒号，前面的函数类型用的是 箭头=&gt;</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 添加属性</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">bar</span>: <span class="title class_">ISearchFunc</span> = <span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line">bar.<span class="property">name</span> = <span class="string">&quot;lzo&quot;</span>;</span><br><span class="line">bar.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="构造签名-了解"><a href="#构造签名-了解" class="headerlink" title="构造签名(了解)"></a>构造签名(了解)</h4><blockquote><p>  描述某个函数式当做构造函数使用的</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> (): <span class="title class_">Person</span>     </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factory</span>(<span class="params">fn:IPerson</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">factory</span>(<span class="title class_">Date</span>))</span><br></pre></td></tr></table></figure><h4 id="可选-默认-剩余参数"><a href="#可选-默认-剩余参数" class="headerlink" title="可选&#x2F;默认&#x2F;剩余参数"></a>可选&#x2F;默认&#x2F;剩余参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">x:<span class="built_in">number</span>,y?:<span class="built_in">number</span></span>)&#123; <span class="comment">// 可选参数y的类型为 number|undefined 的联合类型</span></span><br><span class="line">    <span class="comment">// 参数y需要缩小才能使用 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">10</span>)</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar2</span>(<span class="params">x:<span class="built_in">number</span>,y = <span class="number">100</span></span>)&#123;&#125; <span class="comment">// 类型注解可以省略</span></span><br><span class="line"><span class="title function_">bar</span>(<span class="number">10</span>)</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">10</span>,<span class="literal">undefined</span>) <span class="comment">// 可以接收undefined值，undefined和不传是一样的，内部发现是undefined才使用默认值100</span></span><br><span class="line"><span class="title function_">bar</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar3</span>(<span class="params">...args:<span class="built_in">number</span>[]</span>)&#123;&#125;</span><br><span class="line"><span class="title function_">bar3</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="重载-了解"><a href="#重载-了解" class="headerlink" title="重载(了解)"></a>重载(了解)</h4><blockquote><p>函数名字相同，但是参数类型或个数不同</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">name:string</span>):<span class="keyword">void</span>; <span class="comment">// 重载签名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">age:number</span>):<span class="keyword">void</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">str:any</span>):<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> str == <span class="string">&quot;string&quot;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;名字:&quot;</span>,str)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> str == <span class="string">&quot;number&quot;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;年龄&quot;</span>,str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getInfo</span>(<span class="string">&quot;zhangsan&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="函数中的this类型"><a href="#函数中的this类型" class="headerlink" title="函数中的this类型"></a>函数中的this类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thobj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lzo&quot;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 没有ts配置文件时，默认 any 类型不报错</span></span><br><span class="line">    <span class="comment">// 属性 noImplicitThis:true 根据上下文推导出this是谁</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thobj2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//console.log(this) // noImplicitThis:true  这里就不行了，不能有模糊类型的this存在，需要明确指定</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thobj3</span>(<span class="params"><span class="variable language_">this</span>: &#123; name: <span class="built_in">string</span> &#125;, info: &#123; name: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 同过第一个参数指定this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">thobj.<span class="title function_">fn</span>();</span><br><span class="line">thobj3.<span class="title function_">call</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;lzo&quot;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;lzo&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ts还有很多this内置工具省略</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数最好不谣添加类型注解,例子中根据执行上下文推导出具体类型</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;&#125;) <span class="comment">// item:string,index:number</span></span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数 参数、返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a: string=<span class="string">&quot;123&quot;</span>, b: string</span>): string &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型:一般在定义联合类型或定义临时变量时可以使用</span></span><br><span class="line">type <span class="title class_">Sum</span> = <span class="function">(<span class="params">a: string, b: string</span>) =&gt;</span> string;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interface 声明类型可以继承,可以被类来实现</span></span><br><span class="line"><span class="comment">// interface Sum &#123;</span></span><br><span class="line"><span class="comment">//     (a: string, b: string): string;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test2</span>: <span class="title class_">Sum</span> = (<span class="attr">a</span>: string, <span class="attr">b</span>: string): <span class="function"><span class="params">string</span> =&gt;</span> a + b;</span><br><span class="line"><span class="comment">//test2类型 (a: string, b: string) =&gt;string,vscode鼠标移入会自动推导出来</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><blockquote><p>泛型，在代码执行是传入类型，来确定结果  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  泛型:</span></span><br><span class="line"><span class="comment">     *      在定义接口、函数、类的时候不能确定要使用的数据类型，只能在接口、函数、类调用的时候才能确定的数据类型</span></span><br><span class="line"><span class="comment">     *       定义时不知道类型，利用T..等字幕占位，调用的时候将类型传入</span></span><br><span class="line"><span class="comment">     *  T:type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> createArray&lt;T&gt;(<span class="attr">value</span>: T): T[] &#123;</span><br><span class="line">        <span class="keyword">return</span> [value];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定T为number类型number</span></span><br><span class="line">    <span class="keyword">let</span> caarr1 = createArray&lt;number&gt;(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//一个泛型,调用时如果不指定，编译器通过参数自动推导出T的类型</span></span><br><span class="line">    <span class="keyword">let</span> caarr2 = <span class="title function_">createArray</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> createArray2&lt;T, K&gt;(<span class="attr">value</span>: T, <span class="attr">key</span>: K): K[] &#123;</span><br><span class="line">        <span class="keyword">return</span> [key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ca1 = createArray2&lt;string, number&gt;(<span class="string">&quot;123&quot;</span>, <span class="number">123</span>);</span><br><span class="line">    <span class="keyword">let</span> ca2 = <span class="title function_">createArray2</span>(<span class="string">&quot;123&quot;</span>, <span class="literal">true</span>); <span class="comment">//通过参数自动推导出T,K的类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">//多个泛型实现反转</span></span><br><span class="line">    <span class="keyword">let</span> swap = &lt;T, K&gt;(<span class="attr">tuple</span>: [T, K]): [K, T] =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">swap</span>([<span class="string">&quot;123&quot;</span>,<span class="literal">true</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----类中----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="attr">name</span>: T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>&lt;string&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----接口中--------------------------------------------</span></span><br><span class="line">    interface <span class="title class_">PersonInt</span> &lt;T&gt;&#123;</span><br><span class="line">        <span class="attr">name</span>:T</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">pint</span>:<span class="title class_">PersonInt</span>&lt;string&gt; = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pint)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  泛型约束:</span></span><br><span class="line"><span class="comment">     *      如果直接对一个泛型取length会报错，一个编译器不知道T到的有没有length</span></span><br><span class="line"><span class="comment">     *      限制调用时传入的内容</span></span><br><span class="line"><span class="comment">     *      &lt;T extends ILength&gt; //必须有长度,并且可调用split方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个接口用来约束将来某个类型中必要的length属性</span></span><br><span class="line">    interface <span class="title class_">ILength</span> &#123;</span><br><span class="line">        <span class="attr">length</span>: number;</span><br><span class="line">        split</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> getLength&lt;T <span class="keyword">extends</span> <span class="title class_">ILength</span>&gt;(<span class="attr">x</span>: T): number &#123;</span><br><span class="line">        x.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> x.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(getLength&lt;string&gt;(<span class="string">&quot;ds&quot;</span>))</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 继承:类与类的关系</span></span><br><span class="line"><span class="comment"> * 继承后类与类之间的叫法:</span></span><br><span class="line"><span class="comment"> *      A类继承B类:那么A类叫子类，B类叫基类</span></span><br><span class="line"><span class="comment"> *           子类: -&gt; 派生类 </span></span><br><span class="line"><span class="comment"> *           基类: -&gt; 超类（父类）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 多态:子类重写父类结果 是不同子类实例调用父级可以产生不同的结果</span></span><br><span class="line"><span class="comment"> * 修饰符:作用类中的成员,拿来设置成员(属性、构造函数、方法)的可访问性</span></span><br><span class="line"><span class="comment"> *      类中成员有默认修饰符public(外部实例可以通过 . 访问类中成员)</span></span><br><span class="line"><span class="comment"> *      public:公共的，任何地方都能访问</span></span><br><span class="line"><span class="comment"> *      protected:受保护的，(修饰后类类外部无法访问,但子类可以访问)</span></span><br><span class="line"><span class="comment"> *      private:私有的,(修饰后类类外部与子类都无法访问)</span></span><br><span class="line"><span class="comment"> *      !readonly:只读的,对类中的 属性 成进行修饰，修饰后其他地方只能获取，只有构造函数中能修改</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 四种修饰符修饰构造函数的属性：</span></span><br><span class="line"><span class="comment"> *      效果一样</span></span><br><span class="line"><span class="comment"> *      但是有修饰符的属性就不需要定义成员属性，也不需要this.name = name;的步骤了</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  。。。。</span></span><br><span class="line"><span class="comment"> *  https://www.bilibili.com/video/BV1rf4y167am?p=26&amp;spm_id_from=pageDriver</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个基类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="comment">//定义属性</span></span><br><span class="line">        <span class="attr">name</span>: string;</span><br><span class="line">        <span class="attr">age</span>: number;</span><br><span class="line">        <span class="attr">gender</span>: string; <span class="comment">//性别</span></span><br><span class="line">        <span class="attr">sum</span>: any;</span><br><span class="line">        <span class="comment">//定义构造函数</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: string, age: number, gender: string</span>) &#123;</span><br><span class="line">            <span class="comment">//更新属性</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="function">(<span class="params">str:string</span>) =&gt;</span> &#123; <span class="comment">// 构造函数中的实例方法，每new一次都会创建</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义实例方法  prototype 的方法</span></span><br><span class="line">        <span class="title function_">sayHi</span>(<span class="params">str: string</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法</span></span><br><span class="line">        <span class="keyword">static</span> <span class="title function_">staticTest</span>(<span class="params">str: string</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;金泰&quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个子类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">        <span class="comment">//定义构造函数</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: string, age: number, gender: string</span>) &#123;</span><br><span class="line">            <span class="comment">//使用super调用父级的构造函数</span></span><br><span class="line">            <span class="variable language_">super</span>(name,age,gender);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是子类重写sayHi`</span>)</span><br><span class="line">            <span class="variable language_">super</span>.<span class="title function_">sayHi</span>(<span class="string">&quot;我在调用父类的sayHi方法&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> stu1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">10</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">    stu1.<span class="title function_">sayHi</span>();</span><br><span class="line">    <span class="title class_">Student</span>.<span class="title function_">staticTest</span>(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存取器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个基类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="comment">//定义属性</span></span><br><span class="line">        <span class="attr">name</span>: string;</span><br><span class="line">        <span class="attr">age</span>: number;</span><br><span class="line">        <span class="comment">//定义构造函数</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">            <span class="comment">//更新属性</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">nameage</span>() &#123;</span><br><span class="line">            <span class="comment">//获取nameage的时候直接调用</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用get&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;_&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> <span class="title function_">nameage</span>(<span class="params">val:string</span>) &#123;</span><br><span class="line">            <span class="comment">//设置nameage的时候直接调用</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用set&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = val.<span class="title function_">split</span>(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = <span class="title class_">Number</span>(val.<span class="title function_">split</span>(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> stu1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1); <span class="comment">//name:&quot;aa&quot;,age:10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1.<span class="property">nameage</span>); <span class="comment">//aa_10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>((stu1.<span class="property">nameage</span> = <span class="string">&quot;bb_20&quot;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1);<span class="comment">//name:&quot;bb&quot;,age:20</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态成员</span></span><br><span class="line"><span class="comment"> *      通过 static 修饰的属性或方法</span></span><br><span class="line"><span class="comment"> *      调用:类名.xxx 方式调用的，不能通过实例对象来使用</span></span><br><span class="line"><span class="comment"> *      普通方法不能获取静态属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个基类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="comment">//定义属性</span></span><br><span class="line">        <span class="keyword">static</span> <span class="attr">name1</span>: string;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义构造函数</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">        <span class="comment">//定义实例方法</span></span><br><span class="line">        <span class="keyword">static</span> <span class="title function_">sayHi</span>(<span class="params">str: string</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name1&#125;</span>`</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name1</span>);</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">sayHi</span>(<span class="string">&quot;静态成员方法&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="title class_">Person</span>.<span class="property">name1</span> = <span class="string">&quot;cc&quot;</span>));</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">sayHi</span>(<span class="string">&quot;静态成员方法&quot;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象类</span></span><br><span class="line"><span class="comment"> *      抽象方法,只能定义,函数体不能有东西</span></span><br><span class="line"><span class="comment"> *      可以包含非抽象方法</span></span><br><span class="line"><span class="comment"> *      不能被实例化</span></span><br><span class="line"><span class="comment"> *      抽象类的子类必须实现抽象方法和抽象属性才能实例化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 抽象类类似模板,定义的抽象方法和抽象属性子类必须拥有</span></span><br><span class="line"><span class="comment"> * 抽象类的目的和作用都是为子类服务的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个基类</span></span><br><span class="line">    abstract <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="comment">//定义属性</span></span><br><span class="line">        abstract <span class="attr">name</span>: string = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义方法</span></span><br><span class="line">        abstract <span class="title function_">eat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义实例方法</span></span><br><span class="line">        <span class="title function_">sayHi</span>(<span class="params">str: string</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: string;</span><br><span class="line">        <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;实现eat&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    dog.<span class="title function_">sayHi</span>(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">    dog.<span class="title function_">eat</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">name</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><blockquote><p>当使用第三方插件时需映入声明文件,才能获得代码补全接口提示的功能</p></blockquote><p>如:jquery  声明文件 @types&#x2F;jquery<br>安装完成之后存放在node_module&#x2F;@type文件夹中，运行项目是ts会自动解析到项目中</p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  内置对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">str</span>:string = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">str2</span>:string = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;str&quot;</span>) <span class="comment">//“string”是基元，但“String”是包装器对象会报错</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">str3</span>:<span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;str&quot;</span>) <span class="comment">//正确</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str,str2,str3)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础</title>
      <link href="/2023/07/22/web/web-script-js/"/>
      <url>/2023/07/22/web/web-script-js/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-基础（ECMSscript）"><a href="#JS-基础（ECMSscript）" class="headerlink" title="JS 基础（ECMSscript）"></a>JS 基础（ECMSscript）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="认识-JavaScript"><a href="#认识-JavaScript" class="headerlink" title="认识 JavaScript"></a>认识 JavaScript</h4><blockquote><ul><li>JS 的作用是给浏览器<em>指令</em>，负责和浏览器进行<em>沟通</em></li><li>JS 是一门编程语言，与计算机交流的计算机语言</li><li>JS 和 C、java、Python 等一样是高级语言</li><li>JS 基于浏览器，一些内置方法源码需要找JS引擎<ul><li><a href="https://262.ecma-international.org/">ECMA</a></li></ul></li></ul></blockquote><h4 id="编程语言的历史"><a href="#编程语言的历史" class="headerlink" title="编程语言的历史"></a>编程语言的历史</h4><ul><li>阶段一:<code>机器语言</code>，由二进制 0101010 组成</li><li>阶段二:<code>汇编语言</code>，用符号来代替，010101 难以记忆的代码</li><li>阶段三:<code>高级语言</code>，接近自然语言，符合我们的思维方式,<em>JavaScript</em>算是一个</li></ul><h4 id="JavaScript-的历史"><a href="#JavaScript-的历史" class="headerlink" title="JavaScript 的历史"></a>JavaScript 的历史</h4><ul><li>1995 浏览器两大厂商<code>网景公司</code>与<code>微软</code></li><li>网景<ul><li>网景招募<code>Brendan Eich</code>,为了<code>前端表达验证</code>，10 写出了最开始的<code>LiveScript</code>(js)</li><li>java 出来后很火爆，就把<code>LiveScript</code>改名<code>JavaScript</code></li></ul></li><li>微软<ul><li>微软开始用的是<code>JScript</code></li><li>所以为了适配需要两份代码</li></ul></li><li>时间轴<ul><li>1996.11，网景公司向<code>ECMA（欧洲计算机制造商协会）</code>提交申请语言标准</li><li>1997.06，ECMA 以 JavaScript 为基础指定了 ECMAScript 标准规范<code>ECMA-262</code><ul><li>JavaScript 成为了 ECMAScript 标准规范最著名的实现语言之一</li><li>然后 ActionScript 和 JScript 也是 ECMAScript 标准的实现语言</li></ul></li></ul></li></ul><h4 id="JavaScript-与-ECMAScript-标准的关系"><a href="#JavaScript-与-ECMAScript-标准的关系" class="headerlink" title="JavaScript 与 ECMAScript 标准的关系"></a>JavaScript 与 ECMAScript 标准的关系</h4><ul><li>ECMAScript 是 JavaScript 的标准，描述了该语言的<code>语法</code>与<code>基本对象</code></li><li>JavaScript 是 ECMAScript 的实现之一，除了基本实现之外，JavaScript 还多了自己的<code>DOM，BOM</code>的操作</li></ul><h4 id="JavaScript-的特点"><a href="#JavaScript-的特点" class="headerlink" title="JavaScript 的特点"></a>JavaScript 的特点</h4><ul><li>按照运行方式不同，<ul><li><code>编译性语言</code>:C 语言&#x2F;C++ –预编译-编译-汇编–&gt; 等步骤<code>一次性</code>将代码转为(linux 或 window..的)二进制 –&gt; 执行</li><li><code>解释性语言</code>:JS&#x2F;Python –&gt; 一行行读取，一行行执行(JS 浏览器执行)</li><li><code>先编译再解释</code>:java 编译成 .class</li></ul></li><li>动静类型语言<ul><li><code>静态类型</code>：在代码执行之前，可以确定一个变量准确类型，并且之后不予许修改</li><li><code>动态类型</code>：不确定一个变量的准确类型，可以动态改变变量类型，灵活，但是不安全(JS 就是这种)</li></ul></li><li>js 的主要应用场景<ul><li>网页交互</li><li>服务端开放(NodeJs)</li><li>命令行工具(NodeJs)</li><li>桌面应用程序(VsCode 用 TypeScript 开法，GitHub 可以验证)</li><li>APP(React Native,uni 等)</li><li>游戏开发(cocos2d-js)</li><li>小程序开发</li></ul></li></ul><h4 id="JavaScript-编写位置"><a href="#JavaScript-编写位置" class="headerlink" title="JavaScript 编写位置"></a>JavaScript 编写位置</h4><ul><li>在 HTML 中直接执行</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;html执行js&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alsert(&#x27;html执行js&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过 script 标签执行</li><li>通过 script src 属性外部引入 JS 文件<ul><li>标签间不能写代码，并且要有双标签</li><li>由于文档是从上到下执行的，所以建议把标签放在主体内容后面</li><li>早期需要<code>type=&quot;text/javascriopt&quot;</code>这种,由于限制所以主流浏览器以及 html5 的默认脚本语言就是 JS,所以写 JS 代码的话不用写了</li><li>html 和 css 不区分大小写，js<code>严格区分</code></li></ul></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>js</span><br><span class="line"><span class="comment">// xxxxxx</span></span><br><span class="line"><span class="comment">/* xxxxxx */</span></span><br><span class="line"></span><br><span class="line">文档注释格式</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  xxxxx</span></span><br><span class="line"><span class="comment"> *  xxxxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>html</span><br><span class="line"><span class="comment">// &lt;!----&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>css</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="有浏览器交互"><a href="#有浏览器交互" class="headerlink" title="有浏览器交互"></a>有浏览器交互</h4><ul><li>cosole.log()</li><li>alert()</li><li>document.write()</li><li>prompt(“请输入数据”)</li></ul><h4 id="如何定义变量"><a href="#如何定义变量" class="headerlink" title="如何定义变量"></a>如何定义变量</h4><ul><li><p>var 变量标识符 &#x3D; 值;</p></li><li><p>var a,b,c;</p></li><li><p>let、const、var</p></li><li><p>标识符</p><ul><li>数字、字母、_ 、$ (数字不能开头)</li><li>不能是关键字和保留字(保留字很多是其他语言拥有，js 暂未实现的标识符)</li></ul></li><li><p>命名规范以及主要事项</p><ul><li>小驼峰(多个单词，除第一个，后面的首字母大写)</li><li>驼峰(多个单词首字母大写)</li><li>见名知意</li><li>复制等号两边建议加空格(shell 强制不能加空格)</li></ul></li><li><p>交换两个值为数字的变量，不用第三个变量,可以用<code>加减</code>的方式实现</p></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li><p>引用数据类型:Object</p></li><li><p>特殊的引用构造类型:Function、Array、Regexp、Date、Math、Error、Math、Map、Set</p></li><li><p>基础类型:Number、String、Boolean、Null、Undefined、Symbol、Bigint</p><ul><li><p>数字:Number,值数字、NaN</p><ul><li>Number.MAX_VALUE 最大数值</li><li>Number.MIN_VALUE 最小数值</li><li>NaN:not a number，错误的数值运算返回</li><li>isNaN:判断是否不是一个数值</li></ul></li><li><p>字符串:String</p><ul><li><code>转义字符</code>：\n、\r、\t、\b 分别代表换行、回车、制表、退格<ul><li>开始的打字机换行需要消耗 0.2 秒时间，可以打印两个字符，要是在这 0.2 秒里面，又有新的字符传过来，那么这个字符将丢失。</li><li>在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换行”，告诉打字机把纸向下移一行</li><li>所以一行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“\r\n”</li></ul></li></ul></li><li><p>Boolean:true&#x2F;false</p></li><li><p>Undefined(未定义):只有一个值 undefined；</p><ul><li>变量声明未赋值</li><li>函数为放回</li><li>对象属性未添加,等情况产生</li></ul></li><li><p>Null(空):只有一个值 null</p><ul><li>将变量指向这个<code>null</code>,那么如何原来那个对象没有句柄的话，回收机制就会进行回收,<code>起到销毁对象的作用</code></li></ul></li><li><p>Bigint：兼容性不好</p><ul><li>Number.MAX_SAFE_INTEGER 安全值之外的数运算可能失去精度 <code>9007199254740992 === 9007199254740993</code></li><li>创建BigInt数据，后面加n<ul><li><code>9007199254740992n === 9007199254740993n</code></li><li><code>BigInt(9007199254740992) === BigInt(9007199254740993)</code> ???</li></ul></li><li>注意点<ul><li>BigInt不支持一元加号运算符</li><li>不允许在bigint和 Number 之间进行混合操作</li><li>不能在JS内置函数中使用 <code>Math.max(2n, 4n, 6n);</code> xxx</li><li>if中不是 <code>0n</code> 就是 true</li></ul></li></ul></li></ul></li><li><p>数据类型转换</p></li><li><p>方法</p><ul><li>typeof 返回类型字符串<ul><li>typeof age &#x2F;&#x2F; number</li><li>typeof str &#x2F;&#x2F; string</li></ul></li></ul></li><li><p>js 数据储存形式</p><ul><li>代码存储在硬盘，浏览器运行的时候会加载到<code>内存</code></li><li>内存空间<ul><li>栈空间(stack)<ul><li>申请变量空间&#x3D;基础数据类型值</li><li>申请变量空间&#x3D;引用数据类型地址</li></ul></li><li>堆空间<ul><li>用用数据类型数据</li></ul></li><li>销毁<ul><li>变量&#x3D;null</li></ul></li></ul></li></ul></li><li><p>js 的二、八、十进制前缀</p><ul><li>0b、0o、0x</li></ul></li></ul><h4 id="检测数据类型"><a href="#检测数据类型" class="headerlink" title="检测数据类型"></a>检测数据类型</h4><ul><li><p>typeof</p><ul><li>检测 Array 等特殊构造类型都为<code>object</code><br><img src="/../../static/img/web-js1.png" alt="typeof"></li><li>可以判断处理 null 外的原始数据类型<ul><li>可能是 js 最初的 bug，为了兼容老代码一直保留</li></ul></li><li>只能判断对象类型中 Function</li><li>除此之外 typeof NaN 为 number</li></ul></li><li><p>instanceof</p><ul><li>检测某个构造行数的 prototype 属性是否出现在某个实例的原型链上(检测一个对象是否是某个构造函数的实例对象)<br><img src="/../../static/img/web-js2.png" alt="typeof"></li><li>由于可以随意更该原型指向，所以这个不安全</li><li>可以准确判断引用对象类型，不好判断原始类型<ul><li>Symbol.hasInstance 用于判断某对象是否为某构造器的实例。拿来自定义 instanceof 操作符在某个类上的行为。<br><img src="/../../static/img/web-js3.png" alt="typeof"></li></ul></li><li>实现 instanceof<br><img src="/../../static/img/web-js4.png" alt="typeof"></li></ul></li><li><p>constructor<br><img src="/../../static/img/web-js5.png" alt="typeof"></p><ul><li>返回构造函数</li><li>数值字面量如 1.constructor 直接使用会报错，需要通过(1).constructor 用()将数值转对象</li><li>处理 null 和 undefined，其他都比较可以检测</li><li>constructor 也可以手动修改，不安全</li></ul></li><li><p>Object.prototype.toString.call()<br><img src="/../../static/img/web-js6.png" alt="typeof"></p><ul><li>返回一个表示该对象的字符串</li><li>封装<br><img src="/../../static/img/web-js7.png" alt="typeof"><br><img src="/../../static/img/web-js8.png" alt="typeof"></li></ul></li></ul><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><ul><li>转数值类型<ul><li>Number(a);<ul><li>数字字符串(正常),不是正常数字(NaN)</li><li>true&#x2F;false &#x3D;&gt; 1&#x2F;0</li><li>undefined&#x2F;null &#x3D;&gt; NaN&#x2F;0</li></ul></li><li>parseInt(str,radix 进制)&#x2F;parseFloat(str) ,合理运用编辑器代码提示<ul><li>将字符串转整型&#x2F;浮点型，只能是字符串</li><li>字符串有其他字符，取前面的数字(Number 直接 NaN)，第一个不是数字返回 NaN</li></ul></li></ul></li><li>转字符串<ul><li>num.toString()<ul><li>null、undefined、无 toString()</li></ul></li><li>String(num)<ul><li>null、undefined、布尔、数字等都可以</li></ul></li><li>num + “”:与字符串拼接</li></ul></li><li>转 bool(分支语句隐式调用 Boolean)<ul><li>Boolean(num)<br>false:””、0、-0、undefined、null、NaN<br>true:其他转字符串都为 true</li></ul></li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>算术运算符<ul><li>(加 正 字符串拼接)+、-、*、&#x2F;、%、++、–</li><li>自增自减++在前先加再用，++在后，先用再加</li></ul></li><li>赋值运算符<ul><li>&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、=、%&#x3D;</li></ul></li><li>逻辑运算符<ul><li>&amp;&amp;、||、！</li><li>断路运算-常用</li></ul></li><li>比较运算符<ul><li>&#x3D;&#x3D;、!&#x3D;、&gt;&#x3D;、&lt;&#x3D;、&lt;、&gt; (&#x3D;&#x3D; 的类型自动转换一般先转 number，再进行比较)</li><li>&#x3D;&#x3D;&#x3D;、!&#x3D;&#x3D; (严格相等比较，不会对比较的数据类型进行隐式转换,既比较类型也比较数据)</li></ul></li><li>优先级<ul><li><code>()</code> &gt; <code>++|--</code> &gt; <code>*|/|%</code> &gt; <code>位运算符的左右移</code> &gt; <code>非等判断</code> &gt; <code>等全等不等</code> ….</li><li><code>,</code> &lt; <code>赋值</code> &lt; <code>?:三元运算</code> &lt; 逻辑|| &lt; 逻辑&amp;&amp; &lt; 非左右移按位….</li></ul></li></ul><h3 id="执行语句"><a href="#执行语句" class="headerlink" title="执行语句"></a>执行语句</h3><blockquote><p>顺序(默认从上往下)、分支、循环的常用执行顺序<br>用{}包裹的代码，叫做<code>代码块</code></p></blockquote><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><ul><li><code>if else</code></li><li><code>switch</code>:switch(exp){case “常量 1”:语句 1;break;…..;default:语句 n;}</li></ul><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ul><li><code>for</code></li><li><code>while(exp)&#123;&#125;</code>:条件为真一直循环执行</li><li><code>do...while</code></li><li><code>break，continue</code>：break 跳出整个循环(这个 for 或整个 while)，continue 跳出本次循环</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><p><code>事件循环 EventLoop</code>、</p><h2 id="JS-API"><a href="#JS-API" class="headerlink" title="JS API"></a>JS API</h2><blockquote><p>通过 JS 操作 html(DOM) 和 浏览器(BOM)</p></blockquote><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><blockquote><p>dom 文档对象模型，操作网页内容，实现特效和交互</p></blockquote><ul><li><p>DOM 树对象(浏览器根据html标签生成的JS对象)</p><ul><li>DOM 树对象包含所有标签</li><li>修改某个对象属性会映射到所有标签上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// querySelector(css选择器 button | .class | #id | ul li...); 返回第一个匹配的对象，没有返回null</span></span><br><span class="line"><span class="comment">// querySelectorAll 返回所有匹配 NodeList 伪数组(有长度、有索引、但是没有js pop push 等方法)</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改内容</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// 直接追加到文档</span></span><br><span class="line">div.<span class="property">innerHTML</span> = <span class="string">&quot;xxx&quot;</span>; <span class="comment">// 设置元素内容</span></span><br><span class="line">div.<span class="property">outerHTML</span> = <span class="string">&quot;&quot;</span>; <span class="comment">// 包括操作元素与元素内容</span></span><br><span class="line">div.<span class="property">innerText</span> = <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// 不识别标签</span></span><br><span class="line">div.<span class="property">title</span>=<span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// 修改属性</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;#f0f&quot;</span>; <span class="comment">//修改样式</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&quot;#f0f&quot;</span>; <span class="comment">// 驼峰换横杆</span></span><br><span class="line"><span class="comment">// div.style.width 这种只能操作行内的样式 </span></span><br><span class="line"></span><br><span class="line">div.<span class="property">className</span>=<span class="string">&#x27;addClass&#x27;</span>; <span class="comment">//动态添加类 覆盖原有类名</span></span><br><span class="line">div.<span class="property">className</span>+=<span class="string">&quot; newclassName&quot;</span>; <span class="comment">// 不会被覆盖</span></span><br><span class="line"></span><br><span class="line">div.<span class="property">classList</span> <span class="comment">// 获取样式列表 </span></span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// 添加</span></span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// 删除</span></span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// 切换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================================元素大小和位置 (三大家族 scroll offset client)</span></span><br><span class="line"><span class="comment">// scroll</span></span><br><span class="line">div.<span class="property">scrollWidth</span> <span class="comment">// 返回div内容的宽高(内部超过自己元素,或文本的宽高，div overflow:auto; 后拉动滚动条后可以看到的宽高)</span></span><br><span class="line">div.<span class="property">scrollHeight</span> </span><br><span class="line">div.<span class="property">scrollTop</span>  <span class="comment">// 向上滚动了的，看不见的大小，默认0，可赋值修改</span></span><br><span class="line">div.<span class="property">scrollLeft</span> <span class="comment">// 向右   最大的scrollLeft值 + 可见有内容的宽度 = div.scrollWidth</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> <span class="comment">//整个文档滚动了的距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// offset</span></span><br><span class="line">div.<span class="property">offsetWidth</span>  <span class="comment">// 元素自己的宽高(包括 内容+填充+边框 和 滚动条)</span></span><br><span class="line">div.<span class="property">offsetHeight</span> </span><br><span class="line">div.<span class="property">offsetTop</span> <span class="comment">// 获取自己上面，距离最近一个有定位父级的高度， 都没有就以浏览器左上角为准</span></span><br><span class="line">div.<span class="property">offsetLeft</span></span><br><span class="line"><span class="comment">// 当document.xxx.scrollTop == 某个元素的 offsetTop 时，就是这个元素到顶的时候</span></span><br><span class="line"><span class="comment">// 与 window.outerWidth 类似</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line">div.<span class="property">clientWidth</span> <span class="comment">// 获取元素可见部分宽高(包括 padding-left + height + padding-right)</span></span><br><span class="line">div.<span class="property">clientHeight</span></span><br><span class="line">div.<span class="property">clientTop</span>  <span class="comment">// 返回的是元素上左边框的厚度（border）,无边框为0</span></span><br><span class="line">div.<span class="property">clientLeft</span></span><br><span class="line"><span class="comment">// 与 window.innerWidth 类似</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单操作</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">btn.<span class="property">disabled</span> = <span class="literal">false</span>; <span class="comment">//禁用按钮</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>节点(DOM树每个DOM下的属性内容等都是节点)</p><ul><li>元素节点、属性节点、文本节点、空格换行…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元素节点(DOM树的每一个标签)操作</span></span><br><span class="line"><span class="comment">// 获取父节点</span></span><br><span class="line">eleNode.<span class="property">parentNode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子节点</span></span><br><span class="line">eleNodeParent.<span class="property">children</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 兄弟节点</span></span><br><span class="line">eleNode.<span class="property">nextElementSibling</span>  <span class="comment">//下一个节点</span></span><br><span class="line">eleNode.<span class="property">previousElementSibling</span> <span class="comment">// 上一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建元素节点</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">div.<span class="property">className</span>=<span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">eleNodeParent.<span class="title function_">appendChild</span>(div) <span class="comment">// 父元素最后最近新节点</span></span><br><span class="line">eleNodeParent.<span class="title function_">insertBefore</span>(div,parentDom) <span class="comment">//指定节点前插入  参数:新节点， 指定放在哪个节点前面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 克隆节点</span></span><br><span class="line">eleNode.<span class="title function_">cloneNodew</span>(<span class="literal">true</span>)  <span class="comment">// 可溶一个一样的节点，参数true代表连后代节点一起克隆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line">eleNodeParent.<span class="title function_">removeChild</span>(eleNodeParent.<span class="property">children</span>[<span class="number">0</span>]) <span class="comment">//必先找到父节点，从父节点删除子节点</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-   事件</span><br><span class="line"></span><br><span class="line">    -   事件监听(绑定事件、注册事件)，监测程序是否有注册的事件发生，如果有就立即调用一个函数做出响应</span><br><span class="line"></span><br><span class="line">    ```javascript</span><br><span class="line">    // DOMLevel 0</span><br><span class="line">    // 相同事件会被覆盖，都是事件冒泡</span><br><span class="line">    // &lt;input type=&quot;button&quot; onclick=&quot;alert(0);&quot; /&gt;</span><br><span class="line">    ele.onclick = function()&#123;&#125;</span><br><span class="line">    ele.onclick = null; // 清理</span><br><span class="line">    </span><br><span class="line">    // DOMLevel 2</span><br><span class="line">    // 相同事件不会被覆盖，可设置捕获和冒泡</span><br><span class="line">    // 事件源 ele 、事件名 args[0] 、事件触发做的事情 args[1]</span><br><span class="line">    ele.addEventListener(&quot;event name&quot;,()=&gt;&#123;&#125;,bool); //bool 代表是否使用捕获机制，true 捕获 false 冒泡</span><br><span class="line">    ele.removeEventListenet(&quot;event name&quot;,&quot;函数名称&quot;,bool) // 清除事件，匿名函数无法被清除</span><br><span class="line">    // DOMLevel 3 一样的只是加了很多很多事件</span><br><span class="line">    </span><br><span class="line">    // 创建自定义事件（新）</span><br><span class="line">    const event = new Event(&#x27;build&#x27;);</span><br><span class="line">    // 添加 e 的属性</span><br><span class="line">    const event = new CustomEvent(&#x27;build&#x27;, &#123; detail: elem.dataset.time &#125;);</span><br><span class="line">    // 监听它</span><br><span class="line">    elem.addEventListener(&#x27;build&#x27;, (e) =&gt; &#123; /* … */ &#125;, false);</span><br><span class="line">    // 触发它</span><br><span class="line">    elem.dispatchEvent(event);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>事件对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听函数回调的第一个参数 e event ...</span></span><br><span class="line"><span class="comment"> * 包含与事件相关信息的对象</span></span><br><span class="line"><span class="comment"> * 常用属性 e. (不同事件 e的属性不一样)</span></span><br><span class="line"><span class="comment"> *      type：当前事件类型</span></span><br><span class="line"><span class="comment"> *      clientX/clientY：点击位置相对于浏览器可见窗口左上角的位置（显示位置不包括状态栏等）      </span></span><br><span class="line"><span class="comment"> *      pageX/pageY：点击位置相对于document文档左上角的位置(包括页面滚动的距离)      </span></span><br><span class="line"><span class="comment"> *      offsetX/offsetY：点击位置相对于当前点击的DOM元素左上角的位置      </span></span><br><span class="line"><span class="comment"> *      screenX/screenY：点击位置相对于设备屏幕的位置      </span></span><br><span class="line"><span class="comment"> *      layerX/layerY：点击位置，冒泡方向，有position定位元素，定位元素的 offsetX/offsetY 值,否则 == pageX/pageY</span></span><br><span class="line"><span class="comment"> *      movementX/movementY：鼠标移动的时候，这次相对上次移动的距离（移动慢基本是 0 1 -1 -2）</span></span><br><span class="line"><span class="comment"> *      tiltX/tiltY：指针（触控笔）的 XZ 平面与屏幕之间的角度,正值 向用户倾斜，不支持位0      </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      key/code：获取检测操作的按键的值(以前的keyCode ascii码 废弃中)      </span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>事件流</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件流指的是事件完整执行过程中的流动路径</span></span><br><span class="line"><span class="comment"> * 主要有两个阶段 事件捕获 和 事件冒泡 </span></span><br><span class="line"><span class="comment"> * 事件捕获 (参数三设置true)</span></span><br><span class="line"><span class="comment"> *    一个元 素事件被触发，先触发最父层，拥有该事件的元素</span></span><br><span class="line"><span class="comment"> *    document 开始 -&gt; html -&gt; body -&gt; 单前点击的元素      </span></span><br><span class="line"><span class="comment"> * 事件冒泡</span></span><br><span class="line"><span class="comment"> *    当一个元素事件被触发时，同样的事件会在该元素的祖先元素(父级、父父级。。document)依次触发，如果它们有监听这个事件的话</span></span><br><span class="line"><span class="comment"> *    当前点击元素  -&gt; body -&gt; html -&gt; document  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 阻止事件流动 （事件冒泡，事件捕获）</span></span><br><span class="line"><span class="comment"> *    监听注册事件的时候，冒到这个元素的这个事件就会停止</span></span><br><span class="line"><span class="comment"> *    e.stopPropagation();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 鼠标移入依次事件</span></span><br><span class="line"><span class="comment"> *      mouseover 和 mouseout  这个移入移出默认有冒泡行为</span></span><br><span class="line"><span class="comment"> *      mouseenter 和 mouseleave  这个移入移出不会有冒泡行为</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 阻止默认行为（阻止链接跳转，表单的默认就要的功能）</span></span><br><span class="line"><span class="comment"> *      e.preventDefault()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 事件流特性 实现事件委托</span></span><br><span class="line"><span class="comment"> *      给父级注册事件，父级收到点击的时候，通过 e.target 获取具体点击的子元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>常用事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动事件 scroll</span></span><br><span class="line"><span class="variable language_">window</span> 或 ele.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// load 和 DOMContentLoaded (document 的 dom被解析后就直接触发 无需等待样式表、图片等加载完成)</span></span><br><span class="line"><span class="comment">// pageshow 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发。 </span></span><br><span class="line"><span class="comment">// resize 当窗口发生变化时触发</span></span><br><span class="line"><span class="comment">// contextmenu 右键触发</span></span><br><span class="line"><span class="comment">// hashchange 该事件在当前 URL 的锚部分发生修改时触发</span></span><br><span class="line"><span class="comment">// pagehide 该事件在用户离开当前网页跳转到另外一个页面时触发</span></span><br></pre></td></tr></table></figure></li><li><p>环境对象 this</p><ul><li>非箭头函数 谁调用this指向谁</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this 指向</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>() == <span class="variable language_">window</span>.<span class="title function_">fn</span>() == <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>() == obj</span><br><span class="line"></span><br><span class="line"><span class="comment">// ele 被点击 this 是ele </span></span><br><span class="line">ele.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Obje</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>,<span class="string">&#x27;default&#x27;</span>) <span class="comment">// Obje &#123;&#125;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showthis</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>,<span class="string">&#x27;showthis&#x27;</span>) <span class="comment">// Obje &#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Obje</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">showprotothis</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>,<span class="string">&#x27;showprotothis&#x27;</span>) <span class="comment">// Obje &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sobj = <span class="keyword">new</span> <span class="title class_">Obje</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// call</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testCall</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// Obje &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">testCall.<span class="title function_">call</span>(<span class="title class_">Obje</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><blockquote><p>浏览器对象模型 ,最顶级 window 对象</p></blockquote><p>window 常见方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window 的方法 都可以省略 window.</span></span><br><span class="line"><span class="comment">// setInterval alter addEventListener requestAnimationFrame 全局函数...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">setInterval</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">clearInterval</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">setTimeout</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">clearTimeout</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> <span class="comment">// 也是一个时间内调用此次回调函数，只是它的时间是系统决定的，不是用户决定的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本地存储</span></span><br><span class="line"><span class="comment"> * 将数据存储在浏览器中，刷新或关闭浏览器都可以保留数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * localStorage 5M 左右</span></span><br><span class="line"><span class="comment"> *      生命周期永久存在，除非手动删除，或 或特殊浏览器(chromeium 就没办法保留)</span></span><br><span class="line"><span class="comment"> *      相同浏览器 相同站点多页面共享</span></span><br><span class="line"><span class="comment"> *      键值对方式储存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key,value) <span class="comment">// 添加普通数据</span></span><br><span class="line"> <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">Obj</span>)) <span class="comment">// 添加对象数据</span></span><br><span class="line"> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key) <span class="comment">// 获取普通数据</span></span><br><span class="line"> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key)) <span class="comment">// 获取对象数据</span></span><br><span class="line"> <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key) <span class="comment">// 删除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// sessionStorage  临时储存，关闭浏览器数据消失</span></span><br></pre></td></tr></table></figure><p>window 主要包含模块</p><ul><li>document (网页文档)<ul><li>JS 执行机制</li><li><code>document.execCommand(&#39;copy&#39;)</code> 复制文档中选中的内容</li><li><code>document.activeElement</code> 获取操作页面上聚焦的元素，默认body</li><li><code>document.designMode=on</code> 设置文档可编辑 ，设置为设计模式，所有功能失效</li></ul></li><li>location 对象<ul><li>URL相关的操作</li><li>location.reload(true) 刷新页面，true &#x3D;&#x3D; Ctrl + F5</li></ul></li><li>navigator 对象<ul><li>浏览器相关信息</li><li>navigator.clipboard 替代即将废弃的 <code>document.execCommand</code></li></ul></li><li>history 对象<ul><li>浏览器的前进&#x2F;后退&#x2F;上个页面 forward() 、back() 、go(-1)</li></ul></li><li>screen</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设备显示屏的宽高</span></span><br><span class="line">screen.<span class="property">width</span></span><br><span class="line">screen.<span class="property">height</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器最大化后的宽高 与 距离上左的距离</span></span><br><span class="line">screen.<span class="property">availWidth</span></span><br><span class="line">screen.<span class="property">availHeight</span></span><br><span class="line">screen.<span class="property">availTop</span></span><br><span class="line">screen.<span class="property">availLeft</span></span><br><span class="line"></span><br><span class="line">screen.<span class="property">availHeight</span> + screen.<span class="property">availTop</span> == screen.<span class="property">height</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>其他 window 属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screenLeft/screenX <span class="comment">// 窗口距离设备左边的距离</span></span><br><span class="line">screenTop/screenY <span class="comment">// 窗口距离设备上边的距离</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JS-高级"><a href="#JS-高级" class="headerlink" title="JS 高级"></a>JS 高级</h2><blockquote><p>  项目实践 <code>lzo-web-project</code> 下 <code>ECMAScript</code> 下的 <strong>JS高级</strong></p></blockquote><p><a href="https://www.ecma-international.org/publications-and-standards/standards/">ecma 标准</a></p><h3 id="JavaScript-的-this"><a href="#JavaScript-的-this" class="headerlink" title="JavaScript 的 this"></a>JavaScript 的 this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 四种影响this的因素</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;</span><br><span class="line"><span class="comment">// 默认绑定 window 为 this，直接调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式绑定，调用对象obj 为 this，通过对象调用</span></span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示绑定 call/apply/bind 强制绑定目标</span></span><br><span class="line">fn.<span class="title function_">call</span>(&#123;&#125;,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">fn.<span class="title function_">apply</span>(&#123;&#125;,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fnb = fn.<span class="title function_">bind</span>(&#123;&#125;,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) <span class="comment">// 得到一个新的，绑定好指定this指向的函数</span></span><br><span class="line"><span class="title function_">fnb</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) <span class="comment">// this指向 &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new 绑定,构造函数的this指向new时创建的空对象</span></span><br><span class="line"><span class="keyword">let</span> nfn = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数无this，只会使用上级作用域的this，call/apply/bind 对它无效，隐式绑定对它也无效</span></span><br></pre></td></tr></table></figure><h3 id="浏览器的运行原理"><a href="#浏览器的运行原理" class="headerlink" title="浏览器的运行原理"></a>浏览器的运行原理</h3><h4 id="通过URL拿到资源"><a href="#通过URL拿到资源" class="headerlink" title="通过URL拿到资源"></a>通过URL拿到资源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、输入网站</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、解析域名（DNS解析） 得到域名对应主机的IP地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、连接主机，通过用户访问的端口、路径返回对应资源到浏览器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、浏览器得到返回的页面(index.html)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、运行index.html  =&gt; 遇到<span class="built_in">link</span>下载css =&gt; 遇到script下载js并执行（阻塞无法构建DOM tree） =&gt; 遇到图片下载 ...</span></span><br></pre></td></tr></table></figure><h4 id="浏览内核"><a href="#浏览内核" class="headerlink" title="浏览内核"></a>浏览内核</h4><blockquote><p>  常见的<strong>浏览器内核</strong>&#x2F;<strong>浏览器引擎</strong>&#x2F;<strong>渲染引擎</strong></p></blockquote><p><img src="/../..%5Cstatic%5Cimg%5C2023-03-03_182155.jpg"></p><h4 id="页面渲染详细流程"><a href="#页面渲染详细流程" class="headerlink" title="页面渲染详细流程"></a>页面渲染详细流程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器拿到index.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遇到引入css，下载css，解析css ，不阻塞继续解析html，形成 DOM tree (之后JS可能进行DOM操作)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解析CSS，形成 CSSOM Tree(CSS 对象模型 Style Rules)</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并 DOM tree 和 Style Rules，生成渲染树 Render Tree</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 Render Tree 上进行 Layout 布局（确定宽高和位置信息）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当页面DOM位置变化，宽高方式变化也会重新 布局 Render Tree (称为 回流)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行 Painting 绘制 （样式发生变化 会来到 Painting 进行 重绘）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行 Display 显示</span></span><br></pre></td></tr></table></figure><p><img src="/../..%5Cstatic%5Cimg%5C2023-03-03_183614.jpg"></p><blockquote><p>  引起回流的场景（reflow）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DOM 结构发生改变，添加移除移动节点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部分发生改变（widht height padding font-size 等）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">窗口 resize 等</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">...</span></span><br></pre></td></tr></table></figure><blockquote><p>  重绘 （repaint）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次渲染内容叫绘制（paint）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后，页面颜色所有颜色发生改变，边框样式发生改变就会发生重绘</span></span><br></pre></td></tr></table></figure><blockquote><p>  回流一定包含重绘，重绘不一定包含回流，避免回流方法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改样式时尽量已持续修改，（通过class修改，好了一次性添加到dom上）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">避免评分操作DOM（用 DocumentFragment 一次性操作）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对一些元素使用绝对定位，时回流的范围减小（脱离文档流）</span></span><br></pre></td></tr></table></figure><h4 id="特殊解析-composite-合成"><a href="#特殊解析-composite-合成" class="headerlink" title="特殊解析 composite 合成"></a>特殊解析 composite 合成</h4><blockquote><p>  浏览器渲染的优化手段</p></blockquote><p>默认情况，前面是一个<strong>标准流</strong>的<strong>渲染流程</strong>，标准流的内容会被绘制在**一个图层(Layer)**中 （控制台找到更多工具 找到 layers 可查看）</p><p>特殊属性（如：定位）会创建一个<strong>新的单独的合成层</strong>（<code>CompositingLayer</code>），并且新的图层可以利用<strong>GPU来加速绘制</strong></p><ul><li>每个合成层都是单独渲染的，不会影响标准流<ul><li>3D transforms，</li><li>transition过度过程中，如果元素用 transform 做动画，会形成新图层，提高效率</li><li>video、canvas、iframe </li><li>position：fixed ( 形成一个新的Layer ，absolute 只会脱标，不会新城合成层) </li><li>给元素添加属性 will-change ，那么这个元素产生动画，也会分层</li></ul></li><li>新图层提高性能是需要 <strong>消耗硬件资源</strong>的，所有不能滥用</li></ul><h4 id="Script-元素的优化"><a href="#Script-元素的优化" class="headerlink" title="Script 元素的优化"></a>Script 元素的优化</h4><blockquote><p>  因为 JS 需要经常操作 DOM ，防止过度重绘回流，渲染时遇到 JS 默认会先执行完成再继续，所以JS放前面会阻塞页面渲染</p></blockquote><p><code>script</code> 属性 <code>defer</code> 和 <code>async</code></p><h5 id="defer-属性"><a href="#defer-属性" class="headerlink" title="defer 属性"></a>defer 属性</h5><blockquote><p>  当浏览器遇到defer 属性的 <strong>script 文件</strong>，会先对立下载页面，等待DOM Tree 构建完成，再执行script</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/test.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/demo.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>    </span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>app<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>title<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;product&quot;</span>&gt;</span>product<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 1.下载需要很长的事件, 并且执行也需要很长的时间 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 总结一: 加上defer之后, js文件的下载和执行, 不会影响后面的DOM Tree的构建 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 总结二: 如果脚本提前下载好了，也会等待DOM Tree 构建完毕，在DOMContentLoaded 事件之前先执行defer中的代码 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 总结三: defer代码是在DOMContentLoaded事件发出之前执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>哈哈哈哈啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果多个defer的script文件，浏览器会保证安装编写的顺序依次执行</span></span><br><span class="line"><span class="comment">// 执行书序  直接下载两个js文件/同时展示页面，包括 最后的h1 =&gt; DOM Tree 构建完成 =&gt; 依次执行外部脚本 =&gt; 打印 success</span></span><br></pre></td></tr></table></figure><h5 id="async-属性"><a href="#async-属性" class="headerlink" title="async 属性"></a>async 属性</h5><blockquote><p>  让脚本不阻塞页面，让脚本完全独立，独立下载、独立运行、不会等待其他脚本、不能保证在 DOM Tree 构建后执行</p></blockquote><h3 id="JS-引擎"><a href="#JS-引擎" class="headerlink" title="JS 引擎"></a>JS 引擎</h3><blockquote><p>  前面只提到下载执行阻塞 JavaScript 代码，没有说的<strong>具体执行过程</strong></p></blockquote><p>浏览器内核（webkit）由 <code>WebCore</code> 和 <code>JavaScriptCore (JSCore JS引擎)</code> 两部分组成</p><p><img src="/../..%5Cstatic%5Cimg%5C2023-03-04_090139.jpg"></p><h4 id="V8引擎执行原理"><a href="#V8引擎执行原理" class="headerlink" title="V8引擎执行原理"></a>V8引擎执行原理</h4><ul><li><p><a href="https://v8.dev/">V8 引擎</a>是<strong>blink</strong>浏览器内核的<strong>内置 JS引擎</strong> </p></li><li><p>Google 开源，C++ 编写，主要用于<code>Chrome</code> 和 <code>Node.js</code></p></li><li><p>V8 引擎可以<strong>独立运行</strong>，也可以其他任何程C++序中 </p></li><li><p>V8 的工作流程</p></li></ul><p><img src="/../..%5Cstatic%5Cimg%5C2023-03-04_100733.jpg"></p><p>将后 <strong>js 源码</strong>通过 <strong>Parse</strong> 解析成 <strong>AST抽象语法树</strong>，通过 <strong>lgnition</strong> 转化为cpu认识的<strong>字节码bytecode</strong> 给cpu运行</p><h4 id="V8核心概念"><a href="#V8核心概念" class="headerlink" title="V8核心概念"></a>V8核心概念</h4><h5 id="Parse-解析模块"><a href="#Parse-解析模块" class="headerlink" title="Parse 解析模块"></a>Parse 解析模块</h5><blockquote><p>  将 JavaScript 执行到的代码转化成 <strong>AST 抽象语法树</strong>，<strong>lgnition</strong> 解释器并不认识js源码</p><p>  词法分析(Scanner) &#x3D;&gt; 分词记号化(大量 tokens)  &#x3D;&gt; 一部分直接解析(parser) &#x2F; 一部分进行与解析(pre-parser)  &#x3D;&gt; 得到一个个Node节点 &#x3D;&gt; 得到 AST抽象语法树</p></blockquote><h5 id="lgnition-解释器"><a href="#lgnition-解释器" class="headerlink" title="lgnition 解释器"></a>lgnition 解释器</h5><blockquote><p>  将 <code>AST</code> 转换成 <code>bytecode</code> 字节码</p><p>  同时收集<strong>TurboFan优化</strong>所需要的信息，函数只调用一次，直接解释和执行 <code>bytecode</code></p><p>  函数调用多次，会别标记为<strong>热点函数</strong>，下次就会直接通过 <code>TurboFan</code> 转换成<strong>优化</strong>的<strong>机器码</strong>，<strong>提高</strong>执行性能</p></blockquote><h5 id="TurboFan-编译器"><a href="#TurboFan-编译器" class="headerlink" title="TurboFan 编译器"></a>TurboFan 编译器</h5><blockquote><p>  可以将收集到的（标记为热点函数的）字节码直接编译为 CPU 直接执行的<strong>机器码</strong></p><p>  后续<strong>热点函数</strong>执行的<strong>参数等因素</strong>发生变化，<strong>机器码</strong>会被还原成 <strong>字节码</strong>，<strong>降低</strong>执行性能</p></blockquote><h5 id="垃圾回收模块"><a href="#垃圾回收模块" class="headerlink" title="垃圾回收模块"></a>垃圾回收模块</h5><p>。。。</p><h3 id="浏览器中-JS-的运行原理"><a href="#浏览器中-JS-的运行原理" class="headerlink" title="浏览器中 JS 的运行原理"></a>浏览器中 JS 的运行原理</h3><h4 id="初始化全局对象"><a href="#初始化全局对象" class="headerlink" title="初始化全局对象"></a>初始化全局对象</h4><ul><li>js 引擎在执行代码<strong>之前</strong>，会在<strong>堆内存中</strong>创建一个<strong>全局对象</strong>：<code>Global Object(Go)</code></li><li>GO对象 所有<strong>作用域（scopt）</strong>都可以访问</li><li>里面包含 <code>Date</code>、<code>Array</code>、<code>String</code>、<code>Number</code>、<code>Math</code>、<code>setTimeout</code>、<code>setInterval</code> 这些全局函数</li><li>还有一个<strong>window 属性</strong>指向自己</li></ul><h4 id="执行上下文栈（ECS）"><a href="#执行上下文栈（ECS）" class="headerlink" title="执行上下文栈（ECS）"></a>执行上下文栈（ECS）</h4><blockquote><p>  就是执行代码的调用栈 （Execution Context Stack ECS），代码都是要在执行上下文栈中执行的</p></blockquote><h5 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h5><ul><li><p>接下来开始执行<strong>全局代码</strong></p><ul><li><p>需要构建一个 <strong>全局执行上下文</strong><code>Global Execution Context（GEC）</code> 来执行<strong>js引擎翻译好的</strong> -<strong>全局代码</strong>  </p></li><li><p><strong>全局执行上下文</strong> 会<strong>最先</strong>放入到 <strong>执行上下文栈</strong>中，处于最底部</p></li><li><p>调用函数，或es6的代码块，这些<strong>活跃的，局部的，执行执行上下文</strong>，依次压入，叠加，就形成了<strong>栈结构</strong>，先进后出</p><ul><li>函数执行上下文（FEC）</li></ul></li><li><p>最上面的永远是正则被执行的 <strong>执行上下文</strong>，执行完成，从<strong>栈顶出栈</strong></p></li></ul></li></ul><h5 id="执行上下文的-VO-详解"><a href="#执行上下文的-VO-详解" class="headerlink" title="执行上下文的 VO 详解"></a>执行上下文的 VO 详解</h5><blockquote><p>  每个执行上下文，都有一个自己<strong>保存变量的地方</strong>，让用户获取使用</p></blockquote><ul><li><strong>js 引擎翻译解析</strong>代码，<strong>开始执行前</strong>，<strong>变量</strong>放到内存中的<strong>执行上下文</strong>的细节<ul><li>每一个<strong>执行上下</strong>文会关联一个<strong>VO ( Variable Object 变量对象 ) <strong>，用来存放</strong>变量和函数</strong>声明<ul><li>代码永远是在执行上下文执行的，基本类型数据也是存在<strong>栈内存</strong>中，只是在 VO 对象属性中<strong>额外保存</strong>相应变量值</li></ul></li><li><strong>全局执行上下文</strong>的 <strong>VO</strong> 就是 堆内存<strong>GO</strong> 就是 **window  对象 **<ul><li>每次函数<strong>调用</strong>，创建新的 <strong>FEC</strong>，创建AO关联，函数执行上下文的 VO 是堆内存的<strong>AO (Activation Object 活跃的)</strong></li><li>初始化 argument，将<strong>参数作为变量存入AO中</strong></li><li>这个 AO 会作为函数执行上下文的 VO  来初始化变量</li><li>函数执行完毕，该函数的 FEC 出栈，AO 对象失去了句柄，在堆内存中游离，等待回收机制处理</li></ul></li><li>var变量放到执行上下文，默认值是 undefined</li><li>函数提前 放到执行上下文，默认值是一个内存地址，指向创建好的函数位置（所以函数可以在定义位置之前执行）<ul><li>只有最外层，能碰到的函数会预先创建</li></ul></li></ul></li></ul><h5 id="执行上下文的作用域链"><a href="#执行上下文的作用域链" class="headerlink" title="执行上下文的作用域链"></a>执行上下文的作用域链</h5><blockquote><p>  涉及变量的查找，就会用到 作用域  （scope）</p></blockquote><p>每一个<strong>执行上下文</strong>自己关联变量的 VO对象</p><blockquote><p>  作用域链 （scope chain） </p></blockquote><ul><li>行数<strong>创建的时候</strong>，就已经<strong>确定了自己的作用域链</strong>，与定义位置有关，与执行位置无关<ul><li>通过debugger ，sources，找到 witch，添加监视的函数名，找到 <code>[[Scopes]]</code> </li><li>浏览器有优化，如果没有使用某个上层作用域的变量，这边是看不到的</li></ul></li><li>每创建一个函数执行上下文，都会拿到函数定义就确定的<strong>作用域链</strong>（<code>scope chain</code>）<ul><li>作用域链是一个存放VO的列表（定义位置上下文的VO ~ 全局上下文的VO），根据<strong>代码类型</strong>初始化一系类数据</li><li>当使用一个变量标识符时，现在自己的作用域查找，找不到，才会去作用域链依次查找</li></ul></li></ul><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><blockquote><p>  作用域链的特性，作用域链与<strong>定义位置</strong>有关，是形成闭包的最大因素</p></blockquote><ul><li><p>闭包实际上是一个 <strong>函数和一个关联的环境</strong> 组成的 <strong>结构体</strong></p></li><li><p>跟函数的最大差别是，当捕捉闭包的时候，他的 <strong>自由变量</strong> 会在<strong>捕捉时被确定</strong>，这样既<strong>脱离了原先的上下文</strong>，也能<strong>照常运行</strong></p></li><li><p>每创建一个函数时，闭包就被创建了</p></li><li><p>js 中一个普通函数 function，如果他可以访问外层作用域的自由变量，那么这个函数的周围环境就是一个闭包</p><ul><li>广义上说：JavaScript 中的函数都是闭包</li><li>狭义上说：JavaScript 中的函数，如果<strong>访问了外层作用域的变量</strong>，那么就是一个闭包</li></ul></li></ul><blockquote><p>  闭包的运用</p></blockquote><ul><li>运用案例一：默认情况，函数中通过参数，直接使用外部变量</li><li>运用案例二：定义<strong>外层函数</strong>内部<strong>定义并返回新函数</strong>，我们拿到<strong>内层函数</strong> 对<strong>外层函数参数或变量</strong>的<strong>任意使用</strong>的过程 <ul><li>返回就是为了把内部函数地址储存到外面去，否则是没办法使用的，也是一个无用的闭包</li><li>地址存到变量，比如全局 <strong>addr</strong>，就会存到 GO，根据<strong>可达性</strong>，GO 可以从addr找到<strong>返回的函数</strong>，<strong>返回的函数</strong>使用了外部函数变量，外部函数的AO，就可以从[[Scoops]]找到<strong>外部函数的AO</strong>，那么程序没结束，内部函数，和外部函数的AO对象就不会销毁</li><li>多次调用外层函数获得内存函数，会产生保留<strong>多个不同的AO</strong>，所有它们不冲突</li></ul></li><li>运用案例三：<strong>柯里化函数</strong></li></ul><blockquote><p>  内存泄漏 </p></blockquote><p>以上面<strong>案例二</strong>为例，我们得到了内部函数地址，储存到<strong>全局的addr中</strong>，关联这这个<strong>addr和它作用域链的AO对象</strong></p><p>如果后期永远不用这个<strong>addr</strong>，而<strong>垃圾回收GC</strong>根据可达性，不知道我们不用，不进行回收，这种情况就是<strong>内存泄漏</strong></p><p>可以通过 <strong>addr &#x3D; null</strong> 手动释放</p><p><strong>addr</strong> 关联的这个<strong>闭包</strong>里面用很多OA对象数据 ，如果不手动释放，就对内存很有压力，所以<strong>说闭包容易尝试内存泄漏</strong></p><p>普通表达式函数，</p><h5 id="执行上下文的-This"><a href="#执行上下文的-This" class="headerlink" title="执行上下文的 This"></a>执行上下文的 This</h5><h4 id="内存管理与垃圾回收"><a href="#内存管理与垃圾回收" class="headerlink" title="内存管理与垃圾回收"></a>内存管理与垃圾回收</h4><blockquote><p>  不管怎么方式管理内存，都会有几个生命周期</p></blockquote><ul><li>申请需要的内存</li><li>使用分配的内存</li><li>不需要时，释放内存空间<ul><li>手动管理：C、C++ 需要手动管理内存，通过调用API申请释放内存</li><li>自动管理：Java、JavaScript、Python 等都会自动管理内存</li></ul></li></ul><h5 id="js的垃圾回收"><a href="#js的垃圾回收" class="headerlink" title="js的垃圾回收"></a>js的垃圾回收</h5><blockquote><p>  JavaScript 的垃圾回收机制 （Garbage Collection）GC</p></blockquote><p> 对于<strong>不再使用的对象</strong>，我们都称之为<strong>垃圾</strong>，它需要被<strong>回收</strong>，以释放更多的内存空间</p><blockquote><p>   常见的GC算法</p></blockquote><p>1、V8 使用标记清除算法（mark-Sweep）</p><ul><li>核心思路<strong>可达性（Reachability）</strong></li><li>首先需要一个<strong>根对象</strong>，回收器会<strong>定期从根对象开始</strong>，找所有<strong>能引用到的对象</strong>进行<strong>标记</strong>，那些<strong>没有引用到</strong>的对象，就是<strong>不可用</strong>的</li><li>js 中根对象就是 GO window</li><li>怎么找才是难的</li></ul><p> V8 对标记清除算法的一些优化</p><ul><li>标记整理<ul><li>如果清除了13579位置的内存空间，下次需要一个较大的空间，这些位置<strong>还是不能用</strong></li><li><strong>标记整理</strong>会将，保留的02468位置，<strong>搬运汇集</strong>到<strong>连续的内存</strong>中，避免<strong>碎片化</strong></li></ul></li><li>分代收集<ul><li>将新创建的对象放一起，老旧放一起，新的多检查，老的稳定可以减少检测频次</li></ul></li><li>增量收集</li><li>闲时收集</li></ul><p>2、引用计数，遛狗法则（Reference counting），js不用这个</p><p>实时计算有<strong>多少个东西</strong>在引用某个<strong>空间的对象</strong>，多一个+1，少一个-1，引用某个对象的<strong>引用数量为0</strong>，就能销毁</p><h3 id="手写-call-apply-bind"><a href="#手写-call-apply-bind" class="headerlink" title="手写 call-apply-bind"></a>手写 call-apply-bind</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> ob = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyCall</span> = <span class="keyword">function</span> (<span class="params">obj, ...args</span>) &#123;</span><br><span class="line">    obj = obj == <span class="literal">null</span> || obj == <span class="literal">undefined</span> ? <span class="variable language_">window</span> : <span class="title class_">Object</span>(obj);</span><br><span class="line">    obj.<span class="property">fn</span> = <span class="variable language_">this</span>; <span class="comment">// 这样简洁，但是用户到时会看到fn函数</span></span><br><span class="line">    obj.<span class="title function_">fn</span>(...args);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyApply</span> = <span class="keyword">function</span> (<span class="params">obj, args</span>) &#123;</span><br><span class="line">    obj = obj == <span class="literal">null</span> || obj == <span class="literal">undefined</span> ? <span class="variable language_">window</span> : <span class="title class_">Object</span>(obj);</span><br><span class="line">    obj.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">    obj.<span class="title function_">fn</span>(...args);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyBind</span> = <span class="keyword">function</span> (<span class="params">obj, ...beforeArgs</span>) &#123;</span><br><span class="line">    obj = obj == <span class="literal">null</span> || obj == <span class="literal">undefined</span> ? <span class="variable language_">window</span> : <span class="title class_">Object</span>(obj);</span><br><span class="line">    obj.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...afterArgs</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> args = [...beforeArgs, ...afterArgs];</span><br><span class="line">        obj.<span class="title function_">fn</span>(...args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getName.<span class="title class_">MyCall</span>(ob, <span class="number">18</span>);</span><br><span class="line">getName.<span class="title class_">MyApply</span>(ob, [<span class="number">18</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bindGetName = getName.<span class="title class_">MyBind</span>(ob);</span><br><span class="line"><span class="title function_">bindGetName</span>(<span class="number">19</span>);</span><br><span class="line"><span class="title function_">bindGetName</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="JavaScript-函数增强"><a href="#JavaScript-函数增强" class="headerlink" title="JavaScript 函数增强"></a>JavaScript 函数增强</h3><h4 id="函数对象的属性"><a href="#函数对象的属性" class="headerlink" title="函数对象的属性"></a>函数对象的属性</h4><blockquote><p>  传统行数创建就存在的属性 </p></blockquote><p>name<br>length（定义时明确形参的个数，不包括剩余参数 ）<br>argument （类数组对象，类数组转数组的多种方式 ，箭头函数自己无 argument ）</p><blockquote><p>  剩余参数</p></blockquote><p>形参中将不确定的参数放进一个数组中 </p><p><strong>rest</strong> 剩余参数与<strong>argument</strong>不同的是，它是一个<strong>真正的数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arg</span>(<span class="params">a,b,...argsxxx</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(argsxxx) <span class="comment">// [3,4,5]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">arg</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><ul><li>此函数<strong>相同的输入</strong>，必须有<strong>相同的输出</strong>（就是平时用的工具函数）</li><li>此函数执行过程中，不能有<strong>副作用</strong><ul><li>副作用：执行函数时，除了产生返回值外，还对外面数据产生了附加影响（如修改了全局变量，修改了其他状态等）</li></ul></li></ul><h4 id="柯里化-（Currying）"><a href="#柯里化-（Currying）" class="headerlink" title="柯里化 （Currying）"></a>柯里化 （Currying）</h4><blockquote><p>  闭包的一种使用场景，</p></blockquote><p> 只传递<strong>一部分参数</strong>来调用某个函数，让它返回一个函数去处理剩余参数，这个<strong>过程就叫柯里化</strong></p><p>柯里化<strong>只是对函数的一种转化</strong>，（意义在于前面括号可以提取共有部分，在这个基础上设置其他变化的东西）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.没有柯里化的时候做法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logInfo</span>(<span class="params">date, type, message</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`时间:<span class="subst">$&#123;date&#125;</span> 类型:<span class="subst">$&#123;type&#125;</span> 内容:<span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">logInfo</span>(<span class="string">&quot;2022-06-01&quot;</span>, <span class="string">&quot;DEBUG&quot;</span>, <span class="string">&quot;修复了从服务器请求数据后展示的bug&quot;</span>)</span><br><span class="line"><span class="title function_">logInfo</span>(<span class="string">&quot;2022-06-01&quot;</span>, <span class="string">&quot;DEBUG&quot;</span>, <span class="string">&quot;修复了从服务器请求数据后展示的bug&quot;</span>)</span><br><span class="line"><span class="title function_">logInfo</span>(<span class="string">&quot;2022-06-01&quot;</span>, <span class="string">&quot;FEATURE&quot;</span>, <span class="string">&quot;新建过滤功能&quot;</span>)</span><br><span class="line"><span class="title function_">logInfo</span>(<span class="string">&quot;2022-06-01&quot;</span>, <span class="string">&quot;FEATURE&quot;</span>, <span class="string">&quot;新建过滤功能 &quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 2.对函数进行柯里化: 柯里化函数的做法 =========================================</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logInfo</span>(<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">                <span class="string">`时间:<span class="subst">$&#123;date&#125;</span> 类型:<span class="subst">$&#123;type&#125;</span> 内容:<span class="subst">$&#123;message&#125;</span>`</span></span><br><span class="line">            );</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">logInfo</span>(<span class="string">&quot;2022-06-01&quot;</span>)(<span class="string">&quot;DEFAULT&quot;</span>)(<span class="string">&quot;这时一个默认日志&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> logToday = <span class="title function_">logInfo</span>(<span class="string">&quot;2022-06-01&quot;</span>); <span class="comment">// 固定第个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印debug日志</span></span><br><span class="line"><span class="keyword">var</span> logTodayDebug = <span class="title function_">logToday</span>(<span class="string">&quot;DEBUG&quot;</span>); <span class="comment">// 设置类型为 DEBUG</span></span><br><span class="line"><span class="title function_">logTodayDebug</span>(<span class="string">&quot;修复界面搜索按钮点击的bug&quot;</span>);</span><br><span class="line"><span class="title function_">logTodayDebug</span>(<span class="string">&quot;修复界面搜索按钮点击的bug&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logTodayFeature = <span class="title function_">logToday</span>(<span class="string">&quot;FEATURE&quot;</span>); <span class="comment">// 设置类型为 FEATURE</span></span><br><span class="line"><span class="title function_">logTodayFeature</span>(<span class="string">&quot;新建过滤功能&quot;</span>);</span><br><span class="line"><span class="title function_">logTodayFeature</span>(<span class="string">&quot;新建搜索功能&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="额外知识（少用）"><a href="#额外知识（少用）" class="headerlink" title="额外知识（少用）"></a>额外知识（少用）</h4><h5 id="with"><a href="#with" class="headerlink" title="with"></a>with</h5><blockquote><p>  强行插入作用域，不推荐使用</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h5><blockquote><p>  允许执行代码字符串，将传入的函数当做js代码运行，并将最后一句执行语句结果作为返回值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> codeString = <span class="string">`var name = &quot;why&quot;; console.log(name); console.log(message); &quot;abc&quot;;`</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">eval</span>(codeString);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h5 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h5><p>JS 早期设计存在一些缺陷，浏览器更加<strong>严格的检测代码</strong>，通过<strong>抛出错误</strong>消除原因的<strong>静默错误</strong></p><ul><li>无法意外创建全局变量</li><li>不允许使用 with</li><li>不允许视图删除不可删除的对象属性</li><li>在严格模式下, this不绑定全局对象而是undefined</li><li>……</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给整个script开启严格模式</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给一个函数开启严格模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认就是严格模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-对象增强"><a href="#JavaScript-对象增强" class="headerlink" title="JavaScript 对象增强"></a>JavaScript 对象增强</h3><h4 id="数据属性描述符"><a href="#数据属性描述符" class="headerlink" title="数据属性描述符"></a>数据属性描述符</h4><p>限制一个属性能做什么不能做什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="comment">// configurable: true</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 obj 对象的 name 属性添加 数据描述符 </span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">// 告诉js引擎, obj对象的name属性不可以被删除</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="comment">// 告诉js引擎, obj对象的name属性不可枚举(for in/Object.keys ,遍历的时候不显示)</span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>, <span class="comment">// 告诉js引擎, obj对象的name属性不写入(只读属性 readonly)</span></span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;coderwhy&quot;</span>, <span class="comment">// 告诉js引擎, 返回这个value</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Object.defineProperty方式添加的属性，configurable 默认 true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;address&quot;</span>, &#123;&#125;);</span><br></pre></td></tr></table></figure><h4 id="存取属性描述符"><a href="#存取属性描述符" class="headerlink" title="存取属性描述符"></a>存取属性描述符</h4><p>存取属性描述符，通过<strong>两个函数</strong>精准控制<strong>存的过程</strong>和<strong>取的过程</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  vue2响应式原理 （响应式就是监听到变化，更新视图）</span></span><br><span class="line"><span class="comment"> *  通过 oninput 事件监听数据变化</span></span><br><span class="line"><span class="comment"> *  当数据发生变化，触发属性的 set，在 set 中将视图中的 &#123;&#123;xxx&#125;&#125; 替换为 最新值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对obj对象中的name添加描述符(存取属性描述符)</span></span><br><span class="line"><span class="keyword">var</span> _name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;  <span class="comment">// 当属性name被赋值了，我们可以做一些事情</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set方法被调用了&quot;</span>, value);</span><br><span class="line">        _name = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 当属性name被查询了，我们可以做一些事情</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get方法被调用了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="对象中的写法"><a href="#对象中的写法" class="headerlink" title="对象中的写法"></a>对象中的写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">_name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="comment">// setter方法</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// getter方法</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;kobe&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); </span><br></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p><code>函数.prototype 显示原型</code> —–<code>对象.__proto__ 隐式原型</code> —–<code>对象.__proto__.__proto__ 原型链</code></p><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><blockquote><p>  每一个对象都有原型 [[Prototype]]</p></blockquote><p>对象原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看对象的原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>); <span class="comment">// 浏览器实现的，非标准</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj)); </span><br></pre></td></tr></table></figure><p>函数原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将函数看做普通对象,有__proto__ 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.<span class="property">__proto__</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型自带属性 </span></span><br><span class="line"><span class="variable constant_">FOO</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将函数当做函数使用，new的时候，将prototype 赋值给实例对象的 __proto__，设置方法 </span></span><br><span class="line"><span class="variable constant_">FOO</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性保存在构造函数体，每new个实例都会执行构造函数，有自己的单独属性</span></span><br><span class="line"><span class="comment">// 方法存在 prototype 原型中，每个实例共有</span></span><br><span class="line"><span class="keyword">let</span> fo = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">fo.<span class="title function_">getName</span>(); <span class="comment">// 这时候通过fo实例调用了方法，所以this就是fo实例，this.name 就是fo实例的name</span></span><br></pre></td></tr></table></figure><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>一个对象查找一个属性或方法，自己身上找不到，就去__proto__中找，__proto__找不到，就去__proto__对象的__proto__中找，形成的路径就是<strong>原型链</strong></p><p><img src="/../..%5Cstatic%5Cimg%5C2023-03-06_170053.jpg"></p><h4 id="new-实现原理"><a href="#new-实现原理" class="headerlink" title="new 实现原理"></a>new 实现原理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myNew</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">Fun, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;; <span class="comment">// 未来的实例对象</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = <span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 使实例对象原型链 指向构造函数的 prototype</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="title class_">Fun</span>.<span class="title function_">apply</span>(obj, args); <span class="comment">// 调用一次构造函数，将this指向实例对象，时属性加到 obj 中</span></span><br><span class="line">    <span class="keyword">return</span> res <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? res : obj; <span class="comment">// 所有构造函数不能返回对象，可以返回基本类型数据，但无效</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="title function_">myNew</span>(<span class="title class_">Dog</span>, <span class="string">&quot;dog1&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> dog2 = <span class="title function_">myNew</span>(<span class="title class_">Dog</span>, <span class="string">&quot;dog2&quot;</span>, <span class="number">1</span>);</span><br><span class="line">dog.<span class="title function_">getName</span>(); <span class="comment">// this 就是 dog, new dog 时新创建的 obj</span></span><br><span class="line">dog2.<span class="title function_">getName</span>(); <span class="comment">// this 就是 dog2，new dog2 时新创建的 obj</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// 这个属性默认指向构造函数，所有实例可以通过__proto__拿到这个属性</span></span><br></pre></td></tr></table></figure><h4 id="对象方法补充"><a href="#对象方法补充" class="headerlink" title="对象方法补充"></a>对象方法补充</h4><ul><li><strong>hasOwnProperty：</strong>判断对象自生是否存在某个属性，不包含原型，原型链</li><li><code>&#39;name&#39; in info</code>：判断<code>name</code>属性是否在 <code>info</code>对象上，或者在<code>info</code>对象的原型链上</li><li><code>for(var key in info)&#123;&#125;</code>：<code>for in</code>变量的不只是对象自身的属性，还有原型上的属性（不查找不可枚举的属性）</li><li><code>实例 instanceof FOO </code>：判断某个实例是否是<strong>FOO构造函数</strong>的实例（去实例的原型链查找是否有 <strong>constructor 为 FOO</strong> 的原型）<ul><li>实例原型链上所有 constructor 指向的类 都会为 true</li></ul></li><li><strong>isPrototypeOf：</strong></li><li>Object.setPrototypeOf(obj, Con.prototype);</li></ul><h4 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h4><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><ul><li>将属性方法，封装到一个类中，也是封装的过程</li></ul><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><ul><li>将重复的代码逻辑抽取到父类中</li><li>js 的继承就是基于原型链，把某个类的 prototype，的__proto__ 指向 哪个类的prototype，就是继承了那个类</li><li>Object 构造函数，是所有类的父类</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">msg</span> = <span class="string">&quot;父级 msg&quot;</span>; </span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">go1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go1&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子集</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Subset</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 属性继承</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果不想直接用 __proto__，执行需要继承那个类的实例，这个实例，自然能通过__proto__指向 Parent.prototype</span></span><br><span class="line"><span class="comment">// Subset.prototype = new Parent(&quot;父级name&quot;);</span></span><br><span class="line"><span class="comment">// Subset.prototype.__proto__ = Parent.prototype; // 方法继承</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="title class_">Subset</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// Object.setPrototypeOf 兼容性更好一点</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Subset</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">go2</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go2&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub = <span class="keyword">new</span> <span class="title class_">Subset</span>(<span class="string">&quot;sub1&quot;</span>);</span><br><span class="line">sub.<span class="title function_">go2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sub.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sub.<span class="property">msg</span>);</span><br></pre></td></tr></table></figure><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他语言严格的说法</span></span><br><span class="line"><span class="comment">// 1.必须有继承(实现接口)</span></span><br><span class="line"><span class="comment">// 2.必须有父类引用指向子类对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为不同数据类型，提供统一的接口</span></span><br><span class="line"><span class="comment">// 使用单一的符号来表示不同的类型</span></span><br></pre></td></tr></table></figure><h3 id="ES6-的-Class"><a href="#ES6-的-Class" class="headerlink" title="ES6 的 Class"></a>ES6 的 Class</h3><h4 id="对比构造函数"><a href="#对比构造函数" class="headerlink" title="对比构造函数"></a>对比构造函数</h4><blockquote><p>  相对于ES5 的写法<strong>内聚性</strong>更强 (<strong>高内聚</strong>就是说属于一个整体的东西尽量放在一起)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 的 Class 就是 ES5构造函数的语法糖，是可以相互转换的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function定义类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person1</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个类方法</span></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property">staticFunction</span> = <span class="title function_">staticFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类方法，静态方法&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">running</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Person1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eating</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person1</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> === <span class="title class_">Person1</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Person1</span>); <span class="comment">// function</span></span><br><span class="line"><span class="title class_">Person1</span>.<span class="title function_">staticFunction</span>() <span class="comment">// 调用静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同点: 作为普通函数去调用</span></span><br><span class="line"><span class="title class_">Person1</span>(<span class="string">&quot;abc&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//==========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">staticFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类方法，静态方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">running</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">eating</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&quot;kobe&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">__proto__</span> === <span class="title class_">Person2</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Person2</span>);</span><br><span class="line"><span class="title class_">Person2</span>.<span class="title function_">staticFunction</span>() <span class="comment">// 调用静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同点: class定义的类, 不能作为一个普通的函数进行调用</span></span><br><span class="line"><span class="title class_">Person2</span>(<span class="string">&quot;cba&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="类的描述符"><a href="#类的描述符" class="headerlink" title="类的描述符"></a>类的描述符</h4><blockquote><p>  程序员<strong>约定俗成</strong>的规范，不让外部访问的属性就以下划线开头，ES13后<strong>语言层面新增</strong> #开头为私有属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问器的应用场景</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y, width, height</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">position</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">x</span>, <span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">y</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">width</span>: <span class="variable language_">this</span>.<span class="property">width</span>, <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">height</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect1 = <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rect1.<span class="property">position</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rect1.<span class="property">size</span>);</span><br></pre></td></tr></table></figure><h4 id="ES6-的继承"><a href="#ES6-的继承" class="headerlink" title="ES6 的继承"></a>ES6 的继承</h4><blockquote><p>  super 可以在子类的构造函数、静态方法、原型方法中调用 </p></blockquote><blockquote><p>  js 只支持单继承</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;running~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name); <span class="comment">//必须先调用super</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">running</span>(<span class="params"></span>) &#123; <span class="comment">// 重写父类方法</span></span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">running</span>() <span class="comment">// 调用父类的方法, 在父类基础上写上自己的东西</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Student running~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">studying</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;studying~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>);</span><br><span class="line">stu.<span class="title function_">running</span>();</span><br></pre></td></tr></table></figure><blockquote><p>  继承内置方法，<code>MyArray</code> 扩展一些个人性，Array没有的东西</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">xxx</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6-增强"><a href="#ES6-增强" class="headerlink" title="ES6 增强"></a>ES6 增强</h3><h4 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27; &#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> key = <span class="string">&quot;address&quot;</span> + <span class="string">&quot; city&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name, <span class="comment">// 1、属性</span></span><br><span class="line">    <span class="title function_">foo</span>(<span class="params"></span>)&#123;&#125;, <span class="comment">// 2、方法</span></span><br><span class="line">    [key]:<span class="string">&#x27;xx&#x27;</span> <span class="comment">//3、自定义变量名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组结构</span></span><br><span class="line"><span class="keyword">let</span> [a,b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> [c,,f] = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b) <span class="comment">// 1,2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c,f) <span class="comment">// 4,6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的结构</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myname, age,...other&#125; = &#123;<span class="attr">name</span>:<span class="string">&quot;lzo&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">height</span>:<span class="number">190</span>,<span class="attr">money</span>:<span class="string">&#x27;more&#x27;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname) <span class="comment">// lzo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(other) <span class="comment">// &#123;height:190,money:&#x27;more&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="新的ECMA代码执行描述"><a href="#新的ECMA代码执行描述" class="headerlink" title="新的ECMA代码执行描述"></a>新的ECMA代码执行描述</h4><p><a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-262/">ecma-262</a>  找到 Executable Code and Execution Contexts</p><p>ES6 之前的代码描述</p><ul><li><p><strong>执行上下文栈：</strong><code>（Execution Context Stack）</code>用于执行上下文的<strong>栈结构</strong></p></li><li><p><strong>执行上下文：</strong><code>（Execution Context）</code>代码在执行前<strong>会先创建</strong>的执行上下文（<code>GEC、FEC</code>）</p><ul><li>关联 VO对象 、作用域链、this</li></ul></li><li><p><strong>变量对象：</strong><code>（Variable Object）</code>上下文管理的<strong>VO对象</strong>，用于<strong>记录函数</strong>和<strong>变量</strong>的声明</p></li><li><p><strong>全局对象：</strong><code>（Global Object）</code> <strong>GO</strong>是全局<strong>执行上下文</strong>关联的<strong>VO对象</strong></p></li><li><p><strong>激活对象：</strong><code>(Activation Object)</code> <strong>AO</strong>函数<strong>执行上下文</strong>管理的<strong>VO对象</strong></p></li><li><p><strong>作用域链：</strong><code>（scope chain）</code>用于关联指向上下文栈的变量查找</p></li></ul><p>ES6 的代码描述</p><ul><li><p><strong>执行上下文栈：</strong><code>（Execution Context Stack）</code>用于执行上下文的<strong>栈结构</strong></p></li><li><p><strong>执行上下文：</strong><code>（Execution Context）</code>代码在执行前<strong>会先创建</strong>的执行上下文（<code>GEC、FEC</code>）</p><ul><li>关联第一个词法环境 <code>Lexical Environments</code> 处理 let&#x2F;const 变量</li><li>关联第二个变量 环境 <code>Variable Environments</code>  处理 var 变量 ，会产生变量提升</li><li>它们初始化时时同一个值</li></ul></li><li><p><strong>词法环境：</strong><code>(Lexical Environments)</code> <strong>环境记录</strong> 和 <strong>外部词法环境</strong>组成</p><ul><li>函数声明、代码块语句、try-catch语句 被执行是都会创建<strong>局部词法环境</strong>（<strong>并不是EC</strong>,而是<strong>EC</strong>中<strong>变量或函数</strong>的集合）</li><li>环境记录：<code>Environment Record</code>    <ul><li>全局上下文 LE 的环境记录，与以前的 GO 类似，但不是window（定义全局的变量和函数标识符）<ul><li>全局较特殊，包含 Window  <strong>用于储存var变量</strong>、和 声明式环境记录 <strong>用于储存let&#x2F;cost</strong></li></ul></li><li>局部上下文 LE 的环境记录，与以前的 AO 类似 （定义局部的变量和函数标识符）</li><li>LE 创建就会<strong>直接记录 let&#x2F;count 的变量</strong>，但是要等到<strong>赋值才能访问</strong>，称为<strong>暂时性死区</strong></li></ul></li><li>外部词法环境：<code>Outer LE</code>  全局词法环境这个为null</li></ul></li></ul><h4 id="let-const"><a href="#let-const" class="headerlink" title="let&#x2F;const"></a>let&#x2F;const</h4><ul><li><p>不允许变量的<strong>重复</strong>声明</p></li><li><p>没有变量提升，<strong>词法环境创建时</strong>let&#x2F;const变量也<strong>直接创建</strong>，没赋值前有<strong>暂时性死区</strong>，无法访问</p><ul><li>暂时性死区，变量被创建 到 被赋值之间的<strong>区域</strong>，与定义位置无关</li></ul></li><li><p>全局var变量添加到<strong>window</strong>，let&#x2F;const 的变量<strong>不会添加到window</strong>，而是另外一个对象，谷歌表现为Script</p></li><li><p>let&#x2F;const&#x2F;function&#x2F;class所在的 {} 中，对相关变量，会形成<strong>块级作用域</strong>，与执行上下文无关</p><ul><li><pre><code class="javascript">foo(); // foo is not defined&#123;    let a = 1;    function foo() &#123;        console.log(&quot;111&quot;);    &#125;&#125;foo(); // 不报错console.log(a); // a is not defined// 外面无法访问a，函数做了特殊处理，可以在块级作用域后面后面使用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####  模板字符串</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">// 基本使用</span><br><span class="line">let s  = &#x27;123456&#x27;</span><br><span class="line">let str = `this is a template $&#123;s&#125;`</span><br><span class="line"></span><br><span class="line">// 标签模板字符串，react的 css in js 就是这么调用的</span><br><span class="line">function foo(...args) &#123;</span><br><span class="line">    console.log(&quot;参数:&quot;, args);</span><br><span class="line">&#125;</span><br><span class="line">foo`my name is $&#123;name&#125;, age is $&#123;age&#125;, height is $&#123;1.88&#125;`; // 调用</span><br><span class="line"></span><br><span class="line">// 其他字符串操作</span><br><span class="line">let str = &quot;123abc456&quot;;</span><br><span class="line">console.log(str.includes(&quot;abc&quot;)); // true</span><br><span class="line">console.log(str.startsWith(&quot;123&quot;)); // true</span><br><span class="line">console.log(str.endsWith(&quot;456&quot;)); // true</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> info = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>) <span class="comment">// 创建info对象，并且让对象的原型指向null</span></span><br></pre></td></tr></table></figure><h4 id="ES6函数增强"><a href="#ES6函数增强" class="headerlink" title="ES6函数增强"></a>ES6函数增强</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a=<span class="number">1</span></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数，没有 prototype 但是有 __proto__ </span></span><br><span class="line"><span class="comment">// 不绑定this、argument、super</span></span><br></pre></td></tr></table></figure><h4 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一开始只能展开数组和字符串</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> newArray = [...array,<span class="number">4</span>,<span class="number">5</span>] <span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="keyword">let</span> str = [...<span class="string">&quot;abc&quot;</span>] <span class="comment">// a,b,c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES9（ES2018）可以在构建字面量对象时，展开对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> info = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125; <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个对象，并且替换属性c</span></span><br><span class="line"><span class="keyword">let</span> newInfo = &#123;...obj,...info, <span class="attr">c</span>:<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="数值表示"><a href="#数值表示" class="headerlink" title="数值表示"></a>数值表示</h4><blockquote><p>  规范类进制写法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">规定 0b、0o、0x 开头代表二进制、八进制、十进制（以前0开头当做八进制）</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新出的 过大的数字可以用下划线连接，任意位置 10_000_00_0</span></span><br></pre></td></tr></table></figure><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><blockquote><p>  ES6 新增的基本数据类型</p></blockquote><ul><li><p>Symbol 函数可以生成一个独一无二的值</p></li><li><p>在别人传给你的对象添加新属性时，防止对象属性冲突</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成唯一的值</span></span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> bol = <span class="title class_">Symbol</span>();</span><br><span class="line">obj[sym] = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">obj[bol] = <span class="string">&#x27;yyy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非要生成相同的 Symbol，通过 Symbol.for 传入相同的描述</span></span><br><span class="line"><span class="keyword">const</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> s6 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象中 Symbol 的 key</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj) </span><br></pre></td></tr></table></figure><h4 id="Set-and-Map-数据结构"><a href="#Set-and-Map-数据结构" class="headerlink" title="Set and Map 数据结构"></a>Set and Map 数据结构</h4><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><blockquote><p>  与数组类似，但是元素不能重复，常用与数组去重</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建Set</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.添加元素</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">10</span>); <span class="comment">// 添加基本元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span> &#125;;</span><br><span class="line">set.<span class="title function_">add</span>(info);</span><br><span class="line">set.<span class="title function_">add</span>(obj); <span class="comment">// 添加第二个对象地址</span></span><br><span class="line">set.<span class="title function_">add</span>(obj); <span class="comment">// 无法添加</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.应用场景: 数组的去重,Set 接收一个可迭代对象</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> newNames = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(names)); <span class="comment">// [&quot;abc&quot;, &quot;cba&quot;, &quot;nba&quot;];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.Set的其他属性和方法</span></span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>);</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="comment">// 4.1. 添加元素</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 4.2. 删除元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set) <span class="comment">// 下一步才删除，这时打印已经展开是没有obj对象的，这时浏览器做的一些处理</span></span><br><span class="line">set.<span class="title function_">delete</span>(obj);</span><br><span class="line"><span class="comment">// 4.3. 判断是否存在</span></span><br><span class="line">set.<span class="title function_">has</span>(info);</span><br><span class="line"><span class="comment">// 4.4. 清除所有元素</span></span><br><span class="line">set.<span class="title function_">clear</span>()</span><br><span class="line"><span class="comment">// 4.5. forEach</span></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.set支持for...of</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><blockquote><p>  用于存储映射关系</p></blockquote><ul><li>和对象的差别<ul><li>对象不能使用复制类型作为key，**{[info]:’xxx’}** 会被转换成 <strong>[object object]</strong></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想用对象作为key 时就可以考虑不用对象使用Map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// 添加内容</span></span><br><span class="line">map.<span class="title function_">set</span>(info, <span class="string">&quot;aaaa&quot;</span>); </span><br><span class="line"><span class="comment">// 获取内容</span></span><br><span class="line">map.<span class="title function_">get</span>(info))</span><br><span class="line"><span class="comment">// delete方法, 删除内容</span></span><br><span class="line">map.<span class="title function_">delete</span>(info)</span><br><span class="line"><span class="comment">// has方法, 判断内容</span></span><br><span class="line">map.<span class="title function_">has</span>(info)</span><br><span class="line"><span class="comment">// clear方法, 清空内容</span></span><br><span class="line">map.<span class="title function_">clear</span>()</span><br><span class="line"><span class="comment">// forEach方法</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = item;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h5><blockquote><p>  Weak 开头都是弱引用，只添加到 WeakSet 的对象，<strong>GC 遇到</strong>还是会把它<strong>当做垃圾回收</strong>，虽然被WeakSet引用着</p></blockquote><ul><li>对比 Set<ul><li>WeakSet 只能存放对象类型</li><li>不能遍历，很有肯可能遍历的东西，突然被销毁了，很危险</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用，限制外部调用类中的方法，当实例被销毁时，由于这边是弱引用，依旧会被GC回收</span></span><br><span class="line"><span class="keyword">const</span> pWeakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        pWeakSet.<span class="title function_">add</span>(<span class="variable language_">this</span>); <span class="comment">// 添加每一个实例</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!pWeakSet.<span class="title function_">has</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Type error: 调用的方式不对&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;running~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// p = null</span></span><br><span class="line">p.<span class="title function_">running</span>();</span><br><span class="line"><span class="keyword">const</span> runFn = p.<span class="property">running</span>;</span><br><span class="line"><span class="title function_">runFn</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">run</span>: runFn &#125;;</span><br><span class="line">obj.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure><h5 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">obj1</span> <span class="operator">=</span> &#123; name: <span class="string">&quot;why&quot;</span> &#125;;</span><br><span class="line"><span class="type">let</span> <span class="variable">obj2</span> <span class="operator">=</span> &#123; name: <span class="string">&quot;kobe&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.WeakMap的基本使用</span></span><br><span class="line"><span class="type">const</span> <span class="variable">weakMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="comment">// weakMap.set(123, &quot;aaa&quot;)</span></span><br><span class="line">weakMap.set(obj1, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">weakMap.set(obj2, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">obj1 = <span class="literal">null</span>;</span><br><span class="line">obj2 = <span class="literal">null</span>; <span class="comment">// 因为weakMap是弱引用，这时，遇到GC，会被回收，如果换成Map 应用这obj2,GC就不会回收</span></span><br></pre></td></tr></table></figure><h4 id="Proxy-SReflect"><a href="#Proxy-SReflect" class="headerlink" title="Proxy&#x2F;SReflect"></a>Proxy&#x2F;SReflect</h4><h5 id="回顾vue2响应式原理"><a href="#回顾vue2响应式原理" class="headerlink" title="回顾vue2响应式原理"></a>回顾vue2响应式原理</h5><blockquote><p>  只能监听简单的get 和 set，后期新增删除的属性无法监听</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每一个属性使用defineProperty</span></span><br><span class="line"><span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = obj[key];</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 给<span class="subst">$&#123;key&#125;</span>设置了新的值:`</span>, newValue); <span class="comment">// value改变做一些事情</span></span><br><span class="line">            value = newValue;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 获取<span class="subst">$&#123;key&#125;</span>的值`</span>);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">17</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h5 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h5><ul><li>希望监听一个对象时，需要先创<strong>建代理对象</strong></li><li>之后都是<strong>直接针对代理对象操作</strong></li><li>监听整个对象，不针对于某个属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建一个Proxy对象</span></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, newValue</span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听<span class="subst">$&#123;key&#125;</span>的设置值: `</span>, newValue);</span><br><span class="line">        target[key] = newValue;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听<span class="subst">$&#123;key&#125;</span>的获取`</span>);</span><br><span class="line">        <span class="keyword">return</span> target[key];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">deleteProperty</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听删除<span class="subst">$&#123;key&#125;</span>属性`</span>);</span><br><span class="line">        <span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">has</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听in判断 <span class="subst">$&#123;key&#125;</span>属性`</span>);</span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span>  target;</span><br><span class="line">    &#125;,</span><br><span class="line">   ...</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><h5 id="Reflect（反射）"><a href="#Reflect（反射）" class="headerlink" title="Reflect（反射）"></a>Reflect（反射）</h5><blockquote><p>  和Math类似，本身就是一个对象，不需要new直接使用</p></blockquote><ul><li>提供很多<strong>操作 JavaScript对象的方法</strong><ul><li>Reflect.defineProperty  和 Object.defineProperty</li></ul></li><li>Object本身是一个构造函数，又是JS的顶级类，不适合太多方法</li><li>将一些对象本身的一些方法<strong>迁移到 Reflect</strong> 中</li><li>Proxy 有的方法， Reflect中也有</li></ul><blockquote><p>  Reflect 一般与 Proxy 共同完成代理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">_name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">newValue</span>) &#123; <span class="comment">// 下划线防止递归选好设置</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this:&quot;</span>, <span class="variable language_">this</span>); <span class="comment">// 默认是obj</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = newValue;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建一个Proxy对象</span></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, newValue,receiver</span>) &#123; <span class="comment">// receiver 就是 objProxy</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听<span class="subst">$&#123;key&#125;</span>的设置值: `</span>, newValue);</span><br><span class="line">        <span class="comment">// target[key] = newValue;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1、代理的目的是不直接操作原对象，通过Reflect 简介操作</span></span><br><span class="line">        <span class="comment">// 2、可以检测操作是否成功</span></span><br><span class="line">        <span class="comment">// 3、receiver，让 target里的getset 的 this 指向 receiver 就是 objProxy</span></span><br><span class="line">        <span class="keyword">let</span> isSuccess = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, newValue，receiver) </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objProxy.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><blockquote><p>  三种状态</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建一个Promise对象, 传入一个会立即执行的 executor 回调函数</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1.待定状态 pending</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意: Promise的状态一旦被确定下来, 就不会再更改, 也不能再执行某一个回调函数来改变状态</span></span><br><span class="line">    <span class="comment">// 2.兑现状态 fulfilled</span></span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.拒绝状态 rejected</span></span><br><span class="line">    <span class="title function_">reject</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个.then 返回的是promise，then的回调中如果有返回值，下一个then得到的数据就是返回值,抛出throw异常，就会走catch</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功的回调&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="comment">// catch也有return，也能得到一个promise，又能.then</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败的回调&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>  传值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.普通值</span></span><br><span class="line"><span class="title function_">resolve</span>([</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">&quot;macbook&quot;</span>, <span class="attr">price</span>: <span class="number">9998</span>, <span class="attr">intro</span>: <span class="string">&quot;有点贵&quot;</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">&quot;iPhone&quot;</span>, <span class="attr">price</span>: <span class="number">9.9</span>, <span class="attr">intro</span>: <span class="string">&quot;有点便宜&quot;</span>&#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.resolve(promise)</span></span><br><span class="line"><span class="comment">// 如果resolve的值本身Promise对象, 那么当前的Promise的状态会有传入的Promise来决定</span></span><br><span class="line"><span class="title function_">resolve</span>(p)</span><br></pre></td></tr></table></figure><blockquote><p>  then 的两种写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功的回调&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败的回调&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功的回调&quot;</span>);</span><br><span class="line">&#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败的回调&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>  ES9 finally</p></blockquote><p>无论是<code>resolve</code>，还是<code>reject</code>，都活走<code>finally</code></p><h5 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;&#125;) <span class="comment">// 将数据转换为promise数据</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;err msg&#x27;</span>).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line">promise.<span class="title function_">all</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//当所有promise的都走成功状态时进入，res是所有promise的resolve的数据列表</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 只要有一个reject，那么就会来的catch</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">rect</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 谁的结果最快，就是谁的then 和 catch</span></span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">any</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 谁的结果最快，并且是成功状态，就是谁的then，所有都是rejected时，就会走catch</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES11</span></span><br><span class="line">promise.<span class="title function_">allSettled</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//不管状态时什么，只要有结果都会进入，返回对应的对象</span></span><br><span class="line">    <span class="comment">//[&#123;status:rejected,reason:&quot;异常值&quot;&#125;,&#123;status:fulfilled,value:&quot;返回值&quot;&#125;]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator 迭代器"></a>Iterator 迭代器</h4><ul><li><p>很多语言都有<strong>迭代器</strong>，迭代器是让<strong>用户</strong>可以<strong>遍历访问</strong>数组、链表、哈希表。。。这些<strong>容器对象</strong> 的 对象</p><ul><li>这些容器对象就是<strong>可迭代对象</strong></li></ul></li><li><p>JS中：迭代器是一个具体对象，这个<strong>对象符合迭代器协议</strong>，JS的标准就是 <strong>next</strong></p><ul><li><strong>要求一：</strong>必须是<strong>参数个数小于等于1</strong>的函数</li><li><strong>要求二：</strong>必须返回存在 <code>done</code> 和 <code>value</code> 的对象<ul><li><strong>done(是否结束):</strong> 如果迭代器可以产生下一个值，<code>done</code> 为 <code>false</code>，如果是最后一个，<code>done</code>  为 <code>true</code></li><li><strong>value:</strong> <code>done</code>为<code>true</code>时可以省略</li></ul></li></ul></li><li><p><strong>可迭代对象</strong></p><ul><li>然有一个**[Symbol.iterator]**函数</li><li>执行 <strong>[Symbol.iterator]</strong> 得到一个<strong>迭代器函数</strong>，这个迭代器函数就有next() 方法</li><li>原生可迭代对象：<code>String、Array、Map、Set、argument、NodeList</code></li></ul></li><li><p><strong>应用场景</strong>  可迭代对象才能用的语法</p><ul><li><p>可以用<strong>for of</strong> 变量</p><ul><li>拿到变量那个可迭代对象的 [Symbol.iterator] 并执行 得到迭代器，执行next() 返回 value，直到 done 为 true 结束</li></ul></li><li><p>展开语法 (ES9 对象内部展开，是js做了特殊处理，不是迭代器做的)</p></li><li><p>结构赋值</p></li><li><p>yield*</p></li><li><p>构造函数参数：new Map( iterator )、new Set() 、new WeakSet()、new WeakMap() 参数都有是可迭代对象</p></li><li><p>Promise.all( iterator )、Array.from()</p></li></ul></li></ul><p>对象迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      将infos变成一个可迭代对象</span></span><br><span class="line"><span class="comment">      1.必须实现一个特定的函数: [Symbol.iterator]</span></span><br><span class="line"><span class="comment">      2.这个函数需要返回一个迭代器(这个迭代器用于 迭代当前的对象)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> infoss = &#123;</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;james&quot;</span>, <span class="string">&quot;curry&quot;</span>],</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> item = <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="keyword">const</span> infosIterator = &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; item.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">value</span>: item[index++],</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> infosIterator;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> infoss)&#123;</span><br><span class="line">    <span class="keyword">if</span> (item[<span class="number">1</span>] == <span class="string">&quot;kobe&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 可以用 break 或 continue 终断</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inter = infoss[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inter.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inter.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inter.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><blockquote><p>  让对象变成可迭代对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// const keys = Object.keys(this)</span></span><br><span class="line">    <span class="comment">// const values = Object.values(this)</span></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; entries.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: entries[index++] &#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> iterator;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Generator-生成器"><a href="#Generator-生成器" class="headerlink" title="Generator 生成器"></a>Generator 生成器</h4><h4 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h4><h3 id="ES7-ES13新特性"><a href="#ES7-ES13新特性" class="headerlink" title="ES7 ~ ES13新特性"></a>ES7 ~ ES13新特性</h3><h4 id="ES8-ES2017"><a href="#ES8-ES2017" class="headerlink" title="ES8(ES2017)"></a>ES8(ES2017)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象方法</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj); <span class="comment">// [key,key,key]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(obj); <span class="comment">// [value,value,value]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(obj); <span class="comment">// [[key,value],[key,value],[key,value]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对数组/字符串操作(了解)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>([<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>])); <span class="comment">// [[0,&#x27;abc&#x27;],[1,[cba]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串填充</span></span><br><span class="line"><span class="keyword">const</span> minute = <span class="string">&quot;15&quot;</span>.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>) <span class="comment">// 不足两位，从前面用0 填充</span></span><br><span class="line"><span class="keyword">const</span> second = <span class="string">&quot;6&quot;</span>.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>) <span class="comment">// 不足两位，从前面用0 填充</span></span><br><span class="line"><span class="keyword">const</span> pend = <span class="string">&quot;6&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">3</span>, <span class="string">&quot;0&quot;</span>) <span class="comment">//  // 不足三位，从后面用0 填充</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;minute&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trailing Commas 允许尾部逗号</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">a,b,</span>)&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性描述符</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>()</span><br></pre></td></tr></table></figure><h5 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### ES9(ES2018)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##### 异步迭代器 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##### 对象展开运算</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##### Promise finallly</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### ES10(ES2019)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="comment">// flat 按照指定深度，数组扁平化</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>, <span class="number">20</span>, [<span class="number">111</span>, <span class="number">222</span>], [<span class="number">333</span>, <span class="number">444</span>], [[<span class="number">123</span>, <span class="number">321</span>], [<span class="number">231</span>, <span class="number">312</span>]]]</span><br><span class="line"><span class="keyword">const</span> newNums1 = nums.<span class="title function_">flat</span>(<span class="number">1</span>) <span class="comment">// 扁平化一层</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flatMap</span></span><br><span class="line"><span class="keyword">let</span> list = [</span><br><span class="line">    <span class="string">&#x27;hello word&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;aaa bbb&#x27;</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> finalMessages = list.<span class="title function_">flatMap</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finalMessages); <span class="comment">// [hello,word,aaa,bbb]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// trimStart、trimEnd</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27; msg ms &#x27;</span>.<span class="title function_">trimStart</span>()) <span class="comment">// 去除前面的空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将ES8的 对象方法 Object.entries(obj) 二维数组反转回对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(entries)</span><br></pre></td></tr></table></figure><h4 id="ES11-ES2020"><a href="#ES11-ES2020" class="headerlink" title="ES11(ES2020)"></a>ES11(ES2020)</h4><h5 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt||?.||??"></a>BigInt||?.||??</h5><blockquote><p>  表示超过number范围的大整数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BigInt </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>); <span class="comment">// number能表示的最大安全整数 9007199254740991</span></span><br><span class="line"><span class="keyword">const</span> num1 = <span class="number">9007199254740992n</span>;</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="number">9007199254740993n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他</span></span><br><span class="line"><span class="comment">// 空值合并运算符，如果data 为 null或undefined时 将 默认值赋值给info</span></span><br><span class="line"><span class="keyword">let</span> info = data ?? <span class="string">&#x27;默认值&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选链</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">info</span>:&#123;</span><br><span class="line">        <span class="attr">innerInfo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果 obj存在info,info存在innerInfo时，才调用</span></span><br><span class="line">obj?.<span class="property">inof</span>?.<span class="property">innerInfo</span>?.()</span><br><span class="line"></span><br><span class="line"><span class="comment">// for in 遍历对象标准化</span></span><br></pre></td></tr></table></figure><h5 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h5><h4 id="ES12-ES2021"><a href="#ES12-ES2021" class="headerlink" title="ES12(ES2021)"></a>ES12(ES2021)</h4><h5 id="FinalizationRegistry"><a href="#FinalizationRegistry" class="headerlink" title="FinalizationRegistry"></a>FinalizationRegistry</h5><blockquote><p>  将某个对象注册进去，被GC回收时产生回调</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> info = &#123; <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> finalRegistry = <span class="keyword">new</span> <span class="title class_">FinalizationRegistry</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;某一个对象被回收了:&quot;</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">finalRegistry.<span class="title function_">register</span>(obj, <span class="string">&quot;why&quot;</span>);</span><br><span class="line">finalRegistry.<span class="title function_">register</span>(info, <span class="string">&quot;kobe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj = null</span></span><br><span class="line">info = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h5 id="WeakRefs"><a href="#WeakRefs" class="headerlink" title="WeakRefs"></a>WeakRefs</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> info = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">WeakRef</span>(info); <span class="comment">// 弱引用的方式指向 info 指向的地址 ，只要info=null</span></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">WeakRef</span>(info);</span><br></pre></td></tr></table></figure><h5 id="逻辑赋值运算符"><a href="#逻辑赋值运算符" class="headerlink" title="逻辑赋值运算符"></a>逻辑赋值运算符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑赋值运算符</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.||逻辑赋值运算符</span></span><br><span class="line">    <span class="comment">// message = message || &quot;默认值&quot;</span></span><br><span class="line">    <span class="comment">// message ||= &quot;默认值&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.??逻辑赋值运算符</span></span><br><span class="line">    <span class="comment">// message = message ?? &quot;默认值&quot;</span></span><br><span class="line">    message ??= <span class="string">&quot;默认值&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">    </span><br><span class="line">    obj &amp;&amp;= obj.<span class="property">name</span>  <span class="comment">// 如果obj对象的name存在，就把obj的name赋值个obj</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="大数字分隔符"><a href="#大数字分隔符" class="headerlink" title="大数字分隔符"></a>大数字分隔符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用下划线分割很大的而书中</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100000000</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100_000_000</span></span><br></pre></td></tr></table></figure><h5 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="string">&#x27;aaa_aaa_bbb_ccc&#x27;</span>;</span><br><span class="line">msg.<span class="title function_">replace</span>(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;ddd&quot;</span>) <span class="comment">// 只替换第一个aaa</span></span><br><span class="line">msg.<span class="title function_">replaceAll</span>(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;ddd&quot;</span>) <span class="comment">// 全部aaa都替换</span></span><br></pre></td></tr></table></figure><h4 id="ES13-ES2022"><a href="#ES13-ES2022" class="headerlink" title="ES13(ES2022)"></a>ES13(ES2022)</h4><h5 id="at方法"><a href="#at方法" class="headerlink" title="at方法"></a>at方法</h5><blockquote><p>  通过at方法从数组或字符串中取值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">at</span>(<span class="number">1</span>)) <span class="comment">// 获取数组索引为1的元素 bbb</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">at</span>(-<span class="number">1</span>)) <span class="comment">// 数组最后一位，ccc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">at</span>(<span class="number">1</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">at</span>(-<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h5 id="Object-hasOwn"><a href="#Object-hasOwn" class="headerlink" title="Object.hasOwn"></a>Object.hasOwn</h5><blockquote><p>  判断对象上是否有自己的指定属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防止重写，用户自己的obj对象中也有 hasOwnProperty 这个方法</span></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(obj)  <span class="comment">// 判断obj对象上是否有name属性，不包含原型链的name，写在prototype原型上</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj,name)  <span class="comment">//  替代 obj.hasOwnProperty</span></span><br></pre></td></tr></table></figure><h5 id="Class-添加新成员"><a href="#Class-添加新成员" class="headerlink" title="Class 添加新成员"></a>Class 添加新成员</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 1.实例属性</span></span><br><span class="line">    <span class="comment">// 对象属性: public 公共 -&gt; public instance fields</span></span><br><span class="line">    <span class="comment">// 所有实例都可以使用</span></span><br><span class="line">    height = <span class="number">1.88</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象属性: private 私有: 程序员之间的约定，还是能通过 p._intro 访问的</span></span><br><span class="line">    _intro = <span class="string">&quot;name is why&quot;</span>; <span class="comment">// p._intro 访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ES13对象属性: private 私有，外面无法访问</span></span><br><span class="line">    #intro = <span class="string">&quot;name is why&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.类属性(static)</span></span><br><span class="line">    <span class="comment">// 类属性: public</span></span><br><span class="line">    <span class="keyword">static</span> totalCount = <span class="string">&quot;70亿&quot;</span>; <span class="comment">// 通过 Person.totalCount 访问属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类属性: private</span></span><br><span class="line">    <span class="keyword">static</span> #maleTotalCount = <span class="string">&quot;20亿&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="comment">// 对象中的属性: 在constructor通过this设置</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">address</span> = <span class="string">&quot;广州市&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.静态代码块，第一次加载类的时候自动执行，用于初始化一些东西</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h4><h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><blockquote><p>  只能拷贝一层，遇到引用类型的数据拷贝的也是引用地址</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = &#123; ...obj &#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj2[key] = obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><blockquote><p>  遇到引用类型的数据拷贝的，不是引用地址，而是会创建新的对象，对<strong>性能很不友好</strong></p></blockquote><p>JSON方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  JSON.parse(JSON.stringify(info));</span></span><br><span class="line"><span class="comment"> *      1、函数引用无法添加到新对象 </span></span><br><span class="line"><span class="comment"> *      2、无法拷贝值为 undefined 的属性</span></span><br><span class="line"><span class="comment"> *      3、无法拷贝 [Symbol()] </span></span><br><span class="line"><span class="comment"> *      4、如果有对自己循环引用的对象，会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>自定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">originValue</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.如果是原始类型, 直接返回</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3、其他特殊类型 </span></span><br><span class="line">    <span class="comment">//      Object.prototype.toString.call(originValue) == &#x27;[object Set]&#x27; // 做自己的操作 </span></span><br><span class="line">    <span class="comment">//      Object.prototype.toString.call(originValue) == &#x27;[object Function]&#x27; // 直接返回</span></span><br><span class="line">    <span class="comment">//      </span></span><br><span class="line">    <span class="comment">// 2、如果不是原始类型和特殊类型，判断是对象就创建&#123;&#125;，数组就创建[]</span></span><br><span class="line">    <span class="comment">// 3.通过遍历实现拷贝</span></span><br><span class="line">    <span class="comment">// 4.其实就是在浅拷贝的基础上加一层判断，不是直接赋值，而是赋 deepCopy 过的值</span></span><br><span class="line">    <span class="comment">// 5.返回新对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> valueType = <span class="keyword">typeof</span> value</span><br><span class="line">  <span class="keyword">return</span> (value !== <span class="literal">null</span>) &amp;&amp; ( valueType === <span class="string">&quot;object&quot;</span> || valueType === <span class="string">&quot;function&quot;</span> )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深拷贝核心 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">originValue</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.如果是原始类型, 直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isObject</span>(originValue)) &#123;</span><br><span class="line">        <span class="keyword">return</span> originValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.如果是函数function类型, 不需要进行深拷贝，其实可以直接从 isObject 取代</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> originValue === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> originValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.如果是对象类型, 才需要创建对象</span></span><br><span class="line">    <span class="keyword">const</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(originValue) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> originValue) &#123; <span class="comment">// 数组的k是索引，可以和对象一样 for in 判断</span></span><br><span class="line">        newObj[key] = <span class="title function_">deepCopy</span>(originValue[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝详细</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">originValue,map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">    <span class="comment">// 0.如果值是Symbol的类型</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> originValue === <span class="string">&quot;symbol&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Symbol</span>(originValue.<span class="property">description</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.如果是原始类型, 直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isObject</span>(originValue)) &#123;</span><br><span class="line">        <span class="keyword">return</span> originValue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.如果是set类型</span></span><br><span class="line">    <span class="keyword">if</span> (originValue <span class="keyword">instanceof</span> <span class="title class_">Set</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> setItem <span class="keyword">of</span> originValue) &#123;</span><br><span class="line">            newSet.<span class="title function_">add</span>(<span class="title function_">deepCopy</span>(setItem));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newSet;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.如果是函数function类型, 不需要进行深拷贝，其实可以直接从 isObject 取代</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> originValue === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> originValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4-1.如果是对象类型, 才需要创建对象</span></span><br><span class="line">   <span class="keyword">if</span> (map.<span class="title function_">get</span>(originValue)) &#123; <span class="comment">// map为了解决循环引用问题</span></span><br><span class="line">       <span class="keyword">return</span> map.<span class="title function_">get</span>(originValue);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">const</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(originValue) ? [] : &#123;&#125;;</span><br><span class="line">    map.<span class="title function_">set</span>(originValue, newObj);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> originValue) &#123; <span class="comment">// 数组的k是索引，可以和对象一样 for in 判断</span></span><br><span class="line">        newObj[key] = <span class="title function_">deepCopy</span>(originValue[key],map);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4-1 单独遍历symbol，for in 变量不到 symbol</span></span><br><span class="line">    <span class="keyword">const</span> symbolKeys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(originValue);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> symbolKey <span class="keyword">of</span> symbolKeys) &#123;</span><br><span class="line">        newObj[<span class="title class_">Symbol</span>(symbolKey.<span class="property">description</span>)] = <span class="title function_">deepCopy</span>(</span><br><span class="line">            originValue[symbolKey],</span><br><span class="line">            map</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h4><blockquote><p>  用于跨组件的数据传递</p></blockquote><h5 id="Vue2-的-EventBus"><a href="#Vue2-的-EventBus" class="headerlink" title="Vue2 的 EventBus"></a>Vue2 的 EventBus</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EventBus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>() <span class="comment">// 全局使用</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$EventBus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>() <span class="comment">// 不需要导入导出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中发送事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$EventBus</span>.$emit(<span class="string">&quot;event&quot;</span>,<span class="string">&#x27;hello&#x27;</span>) </span><br><span class="line"><span class="comment">// 组件中监听数据的触发</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$EventBus</span>.$on(<span class="string">&quot;event&quot;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3 删除推荐使用 miss 第三方库</span></span><br></pre></td></tr></table></figure><h5 id="手写事件总线"><a href="#手写事件总线" class="headerlink" title="手写事件总线"></a>手写事件总线</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">event, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">fn</span>(data);</span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">on</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[event] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">off</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn, index</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fn == callback) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span>[event] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Evb</span> = <span class="keyword">new</span> <span class="title class_">EventBus</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line"><span class="title class_">Evb</span>.<span class="title function_">on</span>(<span class="string">&quot;eventClick&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Evb</span>.<span class="title function_">on</span>(<span class="string">&quot;eventClick&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二次&quot;</span>, data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Evb</span>.<span class="title function_">on</span>(<span class="string">&quot;lick&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Evb</span>.<span class="title function_">emit</span>(<span class="string">&quot;eventClick&quot;</span>, <span class="string">&quot;触发了 eventClick 的 emit&quot;</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Evb</span>.<span class="title function_">emit</span>(<span class="string">&quot;lick&quot;</span>, <span class="string">&quot;触发了 lick 的 emit&quot;</span>);</span><br><span class="line">&#125;, <span class="number">6000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><h5 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h5><h5 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建XMLHttpRequest对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 监听状态改变</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyStat</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>) <span class="comment">// 拿到结果 字符串</span></span><br><span class="line">    <span class="keyword">const</span> resJSON = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>) <span class="comment">// 解析结果成对象，responseType 默认是text</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//xhr.responseText/xhr.responseXML</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他事件监听</span></span><br><span class="line">xhr.<span class="property">onloadstart</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 开始请求</span></span><br><span class="line">xhr.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">// 一个响应数据表到达，一般用于展示文件上传进度</span></span><br><span class="line">xhr.<span class="property">onabort</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 取消请求</span></span><br><span class="line">xhr.<span class="property">ontimeout</span></span><br><span class="line">xhr.<span class="property">onerror</span></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 请求成功，xhr.onreadystatechange 并且 xhr.readyStat == 4</span></span><br><span class="line">xhr.<span class="property">loadend</span>  <span class="comment">// load、error、timeout、abort之后触发</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 告知xhr等会获取到的数据的类型</span></span><br><span class="line"><span class="comment">// 如已知拿到的是JSON数据，后端也会通过Response Headers 的 Content-Type 告知前端该怎么处理他返回的数据</span></span><br><span class="line"><span class="comment">// get</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span> <span class="comment">// 后不需要JSON解析 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 配置请求 open</span></span><br><span class="line"><span class="comment">// method 请求方式</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;http://xxxx/xxx?a=1&amp;b=2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4-1. get请求 发送, 通过query传递数据</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4-2 post请求 发送</span></span><br><span class="line"><span class="comment">// 告诉服务器，用什么样的方式解析我前端给你的数据 </span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;a=1&amp;b=2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4-3 post请求 发送FormData数据</span></span><br><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(formElement) <span class="comment">// 将表单元素转FormData</span></span><br><span class="line">xhr.<span class="title function_">send</span>(formData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4-4 post请求 json 数据</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.超市时间的设置，浏览器达到过期时间还没有获取结果时，自动取消本次请求</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">3000</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 当超时的时候</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求过期: timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手动取消请求，某个事件中</span></span><br><span class="line">xhr.<span class="title function_">abort</span>() <span class="comment">// 取消请求</span></span><br><span class="line">xhr.<span class="property">onabort</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求被取消&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h5><p>XHR的优化方案</p><ul><li>类似封装好的XHR，直接返回值是一个promise（发送成功调用resolve，失败调用reject）</li><li>不同XML，所有操作到在一个对象上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本使用</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取到response，是一个流</span></span><br><span class="line">    <span class="keyword">const</span> response = res;</span><br><span class="line">    <span class="comment">// 2.获取具体的结果，如果是json数据，就用json()</span></span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res);</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err:&quot;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// const response = await fetch(</span></span><br><span class="line">    <span class="comment">// &quot;http://123.207.32.32:1888/02_param/postjson&quot;,</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// method: &quot;post&quot;,</span></span><br><span class="line">    <span class="comment">// // headers: &#123;</span></span><br><span class="line">    <span class="comment">// //   &quot;Content-type&quot;: &quot;application/json&quot;</span></span><br><span class="line">    <span class="comment">// // &#125;,</span></span><br><span class="line">    <span class="comment">// body: JSON.stringify(&#123;</span></span><br><span class="line">    <span class="comment">// name: &quot;why&quot;,</span></span><br><span class="line">    <span class="comment">// age: 18,</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;why&quot;</span>);</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">        <span class="string">&quot;http://123.207.32.32:1888/02_param/postform&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">body</span>: formData,</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取response状态，ok == 200-299</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">ok</span>, response.<span class="property">status</span>, response.<span class="property">statusText</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>uni-app 2023</title>
      <link href="/2023/07/22/web/web-app-uniapp-2023/"/>
      <url>/2023/07/22/web/web-app-uniapp-2023/</url>
      
        <content type="html"><![CDATA[<blockquote><p>uni-app基于vue和微信小程序, 一套代码可以发布到ios、Android、h5、以及各种小程序平台</p></blockquote><h2 id="开启uniapp"><a href="#开启uniapp" class="headerlink" title="开启uniapp"></a>开启uniapp</h2><p>原生开发：早期移动端主要 有 <code>IOS</code> 和 <code>Android</code> 两大平台开发<strong>原生APP</strong></p><ul><li>优点：原生APP <strong>体验、性能、兼容性</strong>都非常好，并可以非常方便使用硬件设备，如摄像头</li><li>缺点：两个需要单独开发，<strong>消耗时间和成本</strong>，上线周期繁琐，适合大公司</li></ul><p>跨平台开发</p><ul><li>优点：<strong>一套代码，多端运行</strong>，用js实现一套代码，打包生成到各个平台（IOS、Android、各种小程序、H5应用）<ul><li>成本低、周期短</li></ul></li><li>缺点：只适合根系统交互少，页面不太复杂的场景，硬件支持相对不好（不适合做高性能、复制用户体验，定制高的程序）</li></ul><p>跨平台发展史</p><ul><li><strong>&lt;2009</strong>：   HTML+CSS+JS实现移动端开发</li><li><strong>2009-2014</strong>：<code>PhoneGap、Cordova</code>等框架啊</li><li><strong>2015</strong>：<strong>ReactNative</strong></li><li><strong>2016</strong>：阿里开源 <strong>Weex</strong></li><li><strong>2017</strong>：谷歌公布了 <strong>Flutter</strong> 需要掌握 <strong>Dart</strong>  （移动端和PC端都支持）</li><li><strong>2017</strong>：<strong>微信小程序</strong>、<strong>uni-app</strong>（底层利用weex）、<strong>Taro</strong> （底层基于 ReactVative）等一下小程序框架啊</li></ul><p>uniapp</p><ul><li>优点：容易开发成本低、基于vue、轻、适合开发app、活跃度高、支持 <code>IOS</code> 和 <code>Android</code> <code>web</code> <code>小程序</code> <code>快应用</code></li><li>介绍：uni 统一的意思，使用 <a href="https://uniapp.dcloud.net.cn/">Hbuilder X</a> 开发</li><li>创建：Hbuilder X 中<strong>可视化界面创建</strong>，也能用vue-cli命令行创建</li><li>对比小程序：支持跨平台、定制低，兼容稳定稍差</li><li>如果开发<strong>微信小程序</strong>，最终会通过微信小程<strong>序专有API</strong>转换生成<strong>wxss</strong>那种代码</li></ul><p><img src="/../../static%5Cimg%5C2023-02-26_110241.jpg"></p><h3 id="Hbuilder-X"><a href="#Hbuilder-X" class="headerlink" title="Hbuilder X"></a>Hbuilder X</h3><p>配置<a href="https://www.dcloud.io/hbuilderx.html">下载</a></p><ul><li>快捷键：工具 &gt; 预设快捷键 选择熟悉的 可以选择vscode</li><li>注册一个账号</li></ul><p>运行</p><ul><li>浏览器</li><li>微信小程序<ul><li>第一次需要指定微信开发者工具安装路径</li><li>并且在开发者工作的<strong>设置 安全</strong>中开启服务端口，运行时就会自动打开（或手动去unpackage目录下打开）</li><li>开发<strong>百度、支付宝</strong>下程序，需要安装对应的开发者工具，配置好安装路径就会自动启动</li></ul></li><li>手机模拟器（需要先安装模拟器）<ul><li>安卓使用<code>mumu</code>，ISO使用<code>X Code</code></li><li>模拟器（Android还需要配置 adb命令行工具）</li><li>选择运行App到手机或模拟器</li></ul></li><li>运行到真机<ul><li>找到开发者模式，授权USB连接，adb桥接打开，就能直接从运行到Android App基座运行调试</li><li>自动搜索到真机的标准基座</li><li>遇到问题: 连接usb不弹出授权弹窗，要去用户目录 找到 .android 下的 adbkey 删除，重启HBuilder X，再插入USB</li></ul></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id="pages-json"><a href="#pages-json" class="headerlink" title="pages.json"></a>pages.json</h3><blockquote><p>  页面配置文件，路由、页面标题、窗口信息、页面样式 （微信的 app.json）</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;globalStyle&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">// 配置公共窗口信息</span></span><br><span class="line">        <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span><span class="punctuation">,</span> <span class="comment">// 窗口背景颜色</span></span><br><span class="line"><span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app&quot;</span><span class="punctuation">,</span> <span class="comment">// 窗口标题</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span> <span class="comment">// 窗口标题颜色</span></span><br><span class="line"><span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// ===================================配置底部菜单</span></span><br><span class="line">    <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#7A7E83&quot;</span><span class="punctuation">,</span>  <span class="comment">//颜色</span></span><br><span class="line">    <span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3cc51f&quot;</span><span class="punctuation">,</span>  <span class="comment">//选中的颜色</span></span><br><span class="line">    <span class="attr">&quot;borderStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffffff&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;position&quot;</span><span class="punctuation">:</span><span class="string">&quot;top&quot;</span><span class="punctuation">,</span> <span class="comment">//仅微信小程序支持</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/logo.png&quot;</span><span class="punctuation">,</span> <span class="comment">//图标路径</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/logo.png&quot;</span><span class="punctuation">,</span> <span class="comment">//选中的图标路径</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/about/new_file&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;关于&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;uniIdRouter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><blockquote><p>  入口组件，所有页面都在 App.vue 下切换，本身并不是页面，也没有template元素</p></blockquote><ul><li>应用的什么周期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用的什么周期</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">onLaunch</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App Launch&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onShow</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App Show&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onHide</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App Hide&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>全局数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">globalData</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;lzo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pages 中获取</span></span><br><span class="line"><span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 拿到全局 App.vue 的 globalData 中的数据</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">getApp</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">globalData</span>.<span class="property">name</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>定义全局样式，页面中style定义<strong>局部样式</strong>默认有<strong>scoped作用域</strong>了</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/*每个页面公共css */</span></span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./static/css/base.scss&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.globalTestClass</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f00</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">page&#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f0f</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h3><blockquote><p>  页面存放位置</p></blockquote><h4 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h4><p><a href="https://uniapp.dcloud.io/api/router?id=navigateto">uni.navigateTo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tabBar页面，并关闭其他非tabBar页面</span></span><br><span class="line">uni.<span class="title function_">switchTab</span>(&#123; </span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;pages/about/new_file&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;pages/about/new_file&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换到新页面</span></span><br><span class="line">uni.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回上两级页面</span></span><br><span class="line">uni.<span class="title function_">navigateBack</span>(&#123;</span><br><span class="line"><span class="attr">delta</span>: <span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、跳转通过?传的参数，子页面onLoad 通过生命周期onLoad获取参数</span></span><br><span class="line"><span class="title function_">onLoad</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    <span class="comment">//监听页面加载 ，并拿到上级页面传递的参数</span></span><br><span class="line">    <span class="comment">//只会触发一次页面切换时不会触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;页面加载了&quot;</span>+ option)</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 2、事件总线</span></span><br><span class="line"><span class="comment">// 3、全局数据 globalData</span></span><br><span class="line"><span class="comment">// 4、本地数据存储</span></span><br><span class="line"><span class="comment">// 5、pinia 等状态管理库</span></span><br></pre></td></tr></table></figure><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><blockquote><p>  uni-app 的入口文件，初始化vue 、定义全局组件、定义全局属性、安装插件如pinia等</p></blockquote><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><blockquote><p>  清单配置文件</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;appid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;__UNI__EDA2F03&quot;</span><span class="punctuation">,</span> <span class="comment">// 为UNI项目生成的唯一ID</span></span><br><span class="line">    <span class="comment">/* 小程序特有相关 */</span></span><br><span class="line">    <span class="attr">&quot;mp-weixin&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;appid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;wx3ffcef9fc255b0bc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;urlCheck&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;usingComponents&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="uni-scss"><a href="#uni-scss" class="headerlink" title="uni.scss"></a>uni.scss</h3><blockquote><p>  全局变量，内部变量，任意页面随意使用，修改后需要重新编译</p></blockquote><ol><li>可以重新uni-app内置样式变量</li><li>定义自定义全局变量，<strong>每个页面都可以使用</strong><ol><li><code>支持 @import 导入外部文件</code></li></ol></li><li>重新uni-ui内置变量</li></ol><h3 id="unpackage"><a href="#unpackage" class="headerlink" title="unpackage"></a>unpackage</h3><blockquote><p>  打包文件存放路径</p></blockquote><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、manifest.js &gt; 源码视图</span></span><br><span class="line"> <span class="string">&quot;mp-weixin&quot;</span> : &#123;</span><br><span class="line">... </span><br><span class="line">        <span class="string">&quot;requiredPrivateInfos&quot;</span> : [ <span class="string">&quot;getLocation&quot;</span>, <span class="string">&quot;chooseLocation&quot;</span> ],</span><br><span class="line"><span class="string">&quot;optimization&quot;</span>:&#123;<span class="string">&quot;subPackages&quot;</span>:<span class="literal">true</span>&#125; <span class="comment">// 开启分包</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 2、新建pagesA 将登录页面从pages移动到pagesA中</span></span><br><span class="line"><span class="comment">// 3、pages.json</span></span><br><span class="line"><span class="string">&quot;subPackages&quot;</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;root&quot;</span>:<span class="string">&quot;pagesA&quot;</span>, <span class="comment">//子包根目录</span></span><br><span class="line">        <span class="string">&quot;pages&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;path&quot;</span> : <span class="string">&quot;login/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;style&quot;</span> :                                                                                   </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;登录&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;root&quot;</span>:<span class="string">&quot;pagesB&quot;</span>, <span class="comment">//如果有第二个子包</span></span><br><span class="line">        <span class="string">&quot;pages&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;path&quot;</span> : <span class="string">&quot;login/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;style&quot;</span> :                                                                                   </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;登录&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="UNI-push"><a href="#UNI-push" class="headerlink" title="UNI push"></a>UNI push</h2><p>manifest.json&#x2F;APP模块配置 勾选 Push(消息推送)</p><p>应用详情，各平台信息添加公共证书 <a href="https://ask.dcloud.net.cn/article/36522">公共证书</a></p><p>去uniPush 管理 <a href="https://dev.dcloud.net.cn/pages/app/push2/info">添加应用</a></p><p>关联服务空间，需要实名认证</p><p>开通 uniPush 2.0</p><h2 id="UI库"><a href="#UI库" class="headerlink" title="UI库"></a>UI库</h2><h4 id="uni-ui"><a href="#uni-ui" class="headerlink" title="uni-ui"></a><a href="https://uniapp.dcloud.net.cn/component/uniui/quickstart.html">uni-ui</a></h4><p>1、全局导入</p><p>2、按需导入（需要登录）</p><p>​   直接从文档中的插件时长导入到<code>HBuilder X</code> 中，选择项目，组件就会安装到<code>uni_modules</code>下，<strong>无需注册引入</strong>，直接使用</p><h2 id="各个端的兼容问题"><a href="#各个端的兼容问题" class="headerlink" title="各个端的兼容问题"></a>各个端的兼容问题</h2><p>1、隐藏滚动条问题</p><blockquote><p>  <strong>scroll-view</strong> 的 <strong>:show-scrollbar&#x3D;”false”</strong> 隐藏滚动条 h5 端不生效，需要找到对应元素将 ::–webkit-scrollar{display:none}</p></blockquote><p>2、微信小程序本地背景图片</p><blockquote><p>  要么使用<strong>服务器上的图片</strong>，要么使用<strong>base64</strong>当做背景图片，uni中小于40kb运行到小程序会自动转base64, 如果用太大的本地图片单做背景，小程序端将无法显示</p></blockquote><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="https://juejin.cn/post/7132272611366535182#heading-8">掘金1</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mumu 手机模拟器】</title>
      <link href="/2023/07/22/web/web-app-uniapp-mumu/"/>
      <url>/2023/07/22/web/web-app-uniapp-mumu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mumu.163.com/">下载</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>提示关闭 Hyper-V （WSL2 就没了 管理员身份从Pollshell 运行 <code>bcdedit /set hypervisorlaunchtype auto</code> 然后重启）</li><li>将Hbuilder X 的项目跑到 mumu模拟器 或 手机中<ul><li>先设置 <strong>adb调试桥</strong> 命令行工具<ul><li>连接手机设备</li><li>安装App</li><li>调试大于log</li><li>热更新</li><li>………..</li></ul></li></ul></li></ul><h3 id="adb调试桥"><a href="#adb调试桥" class="headerlink" title="adb调试桥"></a>adb调试桥</h3><p>方式一、直接使用 <code>Hbuilder X</code> 自带的 adb 工具</p><ul><li>找到 <strong>HBuilderX\plugins\launcher\tools\adbs</strong>   (需要安装真机App运行插件就有)  MAC下可能位置会不一样，</li><li>进入目录通过 adb 指令 <code>./adb connect 127.0.0.1:7555</code> 连接 mumu模拟器（mumu 默认端口 7555）</li><li>查看连接结果 <code>./adb devices</code> </li><li>打开Hbuilder X， 运行到手机或模拟器 &gt; 运行到Android App 基座，就会检索出连接成功的设备 </li><li>成功后手机或模拟器桌面就会多出运行程序的图标</li></ul><p>方式二、自己下载adb工具包</p><ul><li><a href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn">外部下载地址</a></li><li>HBuilder X 中配置adb路径</li></ul><p>方式三、使用 <code>Android Studio</code>开发工具SDK中 platform-toos的adb工具</p><p>用一个就行，不要混合用，会冲突</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>uni-app</title>
      <link href="/2023/07/22/web/web-app-uniapp/"/>
      <url>/2023/07/22/web/web-app-uniapp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>uni-app基于vue和微信小程序, 一套代码可以发布到ios、Android、h5、以及各种小程序平台</p></blockquote><h2 id="开启uniapp"><a href="#开启uniapp" class="headerlink" title="开启uniapp"></a>开启uniapp</h2><p>原生开发方式<br>ios  -&gt;  采用ObjectC、Swift语言<br>安卓 -&gt;  Java、Kotlin语言<br>如果企业主要业务在app上，需要更好的用户体验，很多调用硬件api功能，且不惜成本与时间，就可以用原生来开发<br>如果需求只是查找或者是浏览比较基础的功能，就可以用web paa 混合开发</p><p>对比uniapp优点<br>1、官方指定方案更受认可<br>2、性能以及用户体验更好<br>3、可以直接调用硬件能力<br>缺点<br>1、开发成本高<br>2、开发周期长<br>3、ios与安卓需要分开开发与维护</p><p>常见跨端开发方式<br>Vue技术栈（Uniapp、Weex）<br>React技术栈（ReactNative、Taro）<br>Flutter 这个需要Dart语言，不是通过js开发的</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><blockquote><p>安装编辑器HbuilderX <a href="https://uniapp.dcloud.io/">官网</a></p></blockquote><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行到小程序d -&gt; 微信开发者工具第一次要配置安装目录,百度等也要先配置好开发者工具安装目录<br>配置好后，开发这者工具设置-&gt;安全-&gt;端口打开才能打开</p><p>运行到手机需要连接数据线</p><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>页面规范一般遵守vue单文件组件格式<br>标签靠近小程序规范<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html">小程序文档</a></p><h3 id="条件注释跨端兼容"><a href="#条件注释跨端兼容" class="headerlink" title="条件注释跨端兼容"></a>条件注释跨端兼容</h3><p><a href="https://uniapp.dcloud.io/platform?id=%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91">条件编译</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#ifndef <span class="variable constant_">H5</span></span><br><span class="line">需条件编译的代码</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="目录结构与项目配置"><a href="#目录结构与项目配置" class="headerlink" title="目录结构与项目配置"></a>目录结构与项目配置</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pages  <span class="comment">#存放所有页面</span></span><br><span class="line">static  <span class="comment">#存放静态文件</span></span><br><span class="line">unpackage  <span class="comment">#打包h5、安卓打包成功后的文件存放位置</span></span><br><span class="line">App.vue  <span class="comment">#整个项目跟组件，所有页面都是在这里进行切换(生命周期在此设置)</span></span><br><span class="line">main.js <span class="comment">#项目的入了文件， 加载时首先走这个文件</span></span><br><span class="line">manifest.json <span class="comment">#配置各种打包方式的配置文件</span></span><br><span class="line">pages.json <span class="comment">#存放整个项目的页面路径与窗口外观</span></span><br><span class="line">uni.scss <span class="comment">#常用的样式全局变量</span></span><br></pre></td></tr></table></figure><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html">小程序基础配置</a><br><a href="https://uniapp.dcloud.io/collocation/pages">uniapp配置文档</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//=========================pages数组中第一项表示应用启动页</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//设置页面独有外观样式，属性与全局一样</span></span><br><span class="line">                <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app全局首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enablePullDownRefresh&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//设置下拉刷新 uni.stopPullDownRefresh()手动关闭</span></span><br><span class="line">                <span class="attr">&quot;onReachBottomDistance&quot;</span><span class="punctuation">:</span><span class="string">&quot;50px&quot;</span><span class="punctuation">,</span> <span class="comment">//设置距离底部多少触发上拉刷新函数</span></span><br><span class="line">                <span class="attr">&quot;h5&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;titleNView&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;titleText&quot;</span><span class="punctuation">:</span><span class="string">&quot;h5首页标题&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/about/new_file&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app全局关于页面&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;h5&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;titleNView&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;titleText&quot;</span><span class="punctuation">:</span><span class="string">&quot;h5关于页面&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;globalStyle&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//===============================配置程序全局所有页面样式</span></span><br><span class="line"><span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;enablePullDownRefresh&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span> <span class="comment">//下拉刷新</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// ===================================配置底部菜单</span></span><br><span class="line">    <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#7A7E83&quot;</span><span class="punctuation">,</span>  <span class="comment">//颜色</span></span><br><span class="line">    <span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3cc51f&quot;</span><span class="punctuation">,</span>  <span class="comment">//选中的颜色</span></span><br><span class="line">    <span class="attr">&quot;borderStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffffff&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;position&quot;</span><span class="punctuation">:</span><span class="string">&quot;top&quot;</span><span class="punctuation">,</span> <span class="comment">//仅微信小程序支持</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/logo.png&quot;</span><span class="punctuation">,</span> <span class="comment">//图标路径</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/logo.png&quot;</span><span class="punctuation">,</span> <span class="comment">//选中的图标路径</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/about/new_file&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;关于&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//=== 模式配置，仅开发期间生效，开发的时候直接切换开发者工具编译模式到某个页面进行开发</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">//当前激活的模式（list 的索引项）</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swiper&quot;</span><span class="punctuation">,</span> <span class="comment">//模式名称</span></span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/about/new_file&quot;</span><span class="punctuation">,</span> <span class="comment">//启动页面，必选</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;interval=4000&amp;autoplay=false&quot;</span> <span class="comment">//启动参数，在页面的onLoad函数里面得到。</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p><a href="https://uniapp.dcloud.io/component/README">uniapp组件</a></p><h4 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">代替HTML标签,并加了很多参数属性</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span> </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--view新属性--&gt;</span></span><br><span class="line">hover-class=&#x27;鼠标按下的类&#x27;</span><br><span class="line">hover-stop-propagation  属性阻止事件冒泡</span><br><span class="line">hover-start-time  多久延迟出现hover类效果</span><br><span class="line">hover-stay-time 离开后保持多久失去效果</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h4><blockquote><p>创建 ：后缀名.vue文件，视为一个组件<br>使用 ：通过import 组件名 from “xxx”导入并通过components注册,完成之后通过标签形式使用</p></blockquote><h5 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h5><p><a href="https://uniapp.dcloud.io/collocation/frame/communication">组件通讯</a></p><blockquote><p>父传子 : 以标签形式调用组件是 :data 传到子组件, 组件中:prop[‘data’] 接收<br>子传父 : this.$emit(‘父级自定义方法 par’)， 父组件中: @par &#x3D; ‘xxx’  </p></blockquote><p>兄弟组件传值 : </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件A</span></span><br><span class="line"><span class="comment">//触发全局的update函数 将父子间的this换成uni</span></span><br><span class="line">uni.$emit(<span class="string">&#x27;update&#x27;</span>,&#123;<span class="attr">msg</span>:<span class="string">&#x27;页面更新&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件B</span></span><br><span class="line"><span class="comment">//监听全局的自定义事件update</span></span><br><span class="line">uni.$on(<span class="string">&#x27;update&#x27;</span>,<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听到事件来自 update ，携带参数 msg 为：&#x27;</span> + data.<span class="property">msg</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="uniapp中的样式"><a href="#uniapp中的样式" class="headerlink" title="uniapp中的样式"></a>uniapp中的样式</h3><p>不同点</p><ul><li>rpx<br>响应式px,类似rem,根据屏幕宽度自适应的单位,以750为基准,750rex恰好为屏幕宽度,屏幕变宽,1rpx实际显示效果等比放大<br>750rpx相当于100%</li><li>style标签中 @import url(“xxxx”) 导入样式表</li><li>不能使用 * 选择器</li><li>page详单与body</li><li>App.vue的样式为全局样式,pages下页面的样式为局部样式,覆盖全局样式 </li><li>字体图标注意事项<ul><li>字体文件大小不能超过4kb,否则要自己手动转base64</li><li>引用的时候建议使用 ~@static&#x2F;fonts&#x2F;xxx 开头的绝对路径引入字体</li><li>字体图标放在static目录下,在App.vue中全局引入css,</li></ul></li><li>直接 lang&#x3D;”scss” 并且安装sass插件就能使用sass了,sass才能使用uni.scss里的变量</li></ul><h3 id="数据绑定事件…"><a href="#数据绑定事件…" class="headerlink" title="数据绑定事件…"></a>数据绑定事件…</h3><p>与vue一样</p><h3 id="uni生命周期"><a href="#uni生命周期" class="headerlink" title="uni生命周期"></a>uni生命周期</h3><blockquote><p>生命周期概念: 一个对象被创建、运行、销毁的这个过程<br>生命周期函数:生命周期每个阶段都会有相应生命周期函数自动触发</p></blockquote><p><a href="https://uniapp.dcloud.io/collocation/frame/lifecycle">生命周期</a></p><h4 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.vue</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">//应用的生命周期</span></span><br><span class="line"><span class="attr">onLaunch</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//uniapp初始化完成触发(全程只触发一次)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App Launch&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onShow</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//uniapp启动,或从后台到前台触发</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App Show&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onHide</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//uniapp从前台到后台触发</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App Hide&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onError</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//uniapp 报错触发</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App Error&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*每个页面公共css */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通页面中</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">onLoad</span>(<span class="params">option</span>) &#123;</span><br><span class="line"><span class="comment">//监听页面加载 ，并拿到上级页面传递的参数</span></span><br><span class="line"><span class="comment">//只会触发一次页面切换时不会触发</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;页面加载了&quot;</span>+ option)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">onShow</span>(<span class="params"></span>) &#123; <span class="comment">//监听页面显示</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;页面出现在屏幕上了&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">onReady</span>(<span class="params"></span>) &#123; <span class="comment">//监听页面初次渲染完成 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听页面初次渲染完成 &quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">onHide</span>(<span class="params"></span>) &#123; <span class="comment">//监听页面隐藏</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;页面隐藏&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">onUnload</span>(<span class="params"></span>) &#123; <span class="comment">//讲台页面卸载</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;页面卸载&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">onPullDownRefresh</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户下拉页面了&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">onReachBottom</span>(<span class="params"></span>)&#123; <span class="comment">//向下滚动触底时触发</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户上拉&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">        ...</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件中</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在实例初始化之后 无data数据&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在实例创建完成后 有data数据&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;挂载到实例上去之前调用 无dom节点&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;挂载到实例上去之后调用  有dom节点&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">beforeUpdate </span><br><span class="line">updated <span class="comment">//数据更新 仅支持h5</span></span><br><span class="line">beforeDestroy</span><br><span class="line">destroyed <span class="comment">//组件销毁</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><p><a href="https://uniapp.dcloud.io/api/request/request?id=request">uni request</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">url</span><br><span class="line">method</span><br><span class="line">    data</span><br><span class="line">    header</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">文档路径</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">setStorage</span>(&#123; <span class="comment">//存储数据   设置的是localStorage</span></span><br><span class="line"><span class="attr">key</span>: <span class="string">&#x27;storage_key&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设置缓存success&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uni.<span class="title function_">getStorage</span>(&#123; <span class="comment">//获取数据 异步不会阻塞，有时可能获取不到</span></span><br><span class="line"><span class="attr">key</span>: <span class="string">&#x27;storage_key&#x27;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uni.<span class="title function_">removeStorage</span>(&#123; <span class="comment">//删除数据</span></span><br><span class="line"><span class="attr">key</span>: <span class="string">&#x27;storage_key&#x27;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除success&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加Sync的同步接口</span></span><br><span class="line"> uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;storage_key&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"> <span class="keyword">const</span> value = uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;storage_key&#x27;</span>); <span class="comment">//同步的一定能获取到</span></span><br><span class="line"> uni.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;storage_key&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p><a href="https://uniapp.dcloud.io/api/media/image?id=chooseimage">媒体图片</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">chooseImage</span>(&#123;</span><br><span class="line"><span class="attr">count</span>: <span class="number">6</span>, </span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">tempFilePaths</span>); <span class="comment">//得到路径图片路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过  uni.uploadFile 传到自己的服务器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="导航跳转"><a href="#导航跳转" class="headerlink" title="导航跳转"></a>导航跳转</h3><h4 id="组件-navigator"><a href="#组件-navigator" class="headerlink" title="组件 navigator"></a>组件 navigator</h4><p><a href="https://uniapp.dcloud.io/component/navigator">navigator</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--open-type=&#x27;switchTab&#x27; 设置了才能跳转tabBar 页面--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--open-type=&#x27;redirect&#x27; 替换到新页面 无返回--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;pages/about/new_file&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;navigator-hover&quot;</span> <span class="attr">open-type</span>=<span class="string">&#x27;switchTab&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h4><p><a href="https://uniapp.dcloud.io/api/router?id=navigateto">uni.navigateTo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;pages/about/new_file&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//tabBar页面，并关闭其他非tabBar页面</span></span><br><span class="line">uni.<span class="title function_">switchTab</span>(&#123; </span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;pages/about/new_file&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换到新页面</span></span><br><span class="line">uni.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//跳转通过?传的参数，通过生命周期onLoad获取参数</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="发行"><a href="#发行" class="headerlink" title="发行"></a>发行</h2><h2 id="HBuilderX-cli"><a href="#HBuilderX-cli" class="headerlink" title="HBuilderX cli"></a>HBuilderX cli</h2><p>命令行操作开发环境,安装好 HBuilderX 把bin路径配置到环境变量中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开编辑器</span></span><br><span class="line">cli.exe open</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录</span></span><br><span class="line">cli.exe user login --username 869664233@qq.com  --password lzxxxxxxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出</span></span><br><span class="line">cli user logout</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">项目列表</span></span><br><span class="line">cli project list</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/22/web/vue/vue-vuecli/"/>
      <url>/2023/07/22/web/vue/vue-vuecli/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p><a href="https://cli.vuejs.org/zh/guide/">https://cli.vuejs.org/zh/guide/</a></p><p>安装<a href="%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E5%90%8E%E8%83%BD%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8vue%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%BF%E7%94%A8vue3%E9%82%A3%E4%B9%88cli%E7%89%88%E6%9C%AC%E9%9C%80%E8%A6%81%E5%9C%A84.3.1%E4%BB%A5%E4%B8%8A">^①</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br><span class="line">npm i -g @vue/cli@3.x</span><br><span class="line"></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>删除<a href="@vue/cli%E6%98%AF%E5%B1%85%E4%BA%8Enode%E7%9A%84,%E5%A6%82%E6%9E%9C%E5%88%A0%E9%99%A4%E4%B8%8D%E6%88%90%E5%8A%9F%E5%8F%AF%E4%BB%A5%E5%8E%BBnode%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9B%B4%E6%8E%A5%E5%88%A0%E9%99%A4vue%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6">^②</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g @vue/cli</span><br><span class="line">yarn global remove @vue/cli</span><br></pre></td></tr></table></figure><p>图形化管理界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><p><a href="https://www.cnblogs.com/joe235/archive/2004/01/13/12448744.html">案例</a></p><h3 id="vue-CLI-3"><a href="#vue-CLI-3" class="headerlink" title="vue-CLI 3+"></a>vue-CLI 3+</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vue3项目需保证vuecli版本在4.5.0以上 以前3.12.1</span></span><br><span class="line"></span><br><span class="line">vue create &lt;project-name&gt;</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><blockquote><p>特点</p></blockquote><ul><li>基于webpack4、0配置、去除类build和config等目录、提供vue ui图形化界面</li><li>webpack文件隐藏在node-module -&gt; @vue -&gt; <code>cli-server</code> -&gt; 下</li><li>去除static文件夹，新增public文件夹，并将index.html移到里面</li><li>配置通过<code>vueui界面</code>或取<code>cli-server</code>直接更改 或创建<code>vue.config.js</code>配置，自动和默认配置进行合并</li></ul><h3 id="使用vite创建"><a href="#使用vite创建" class="headerlink" title="使用vite创建"></a>使用vite创建</h3><ul><li>vite 是原生ESM驱动的web构建工具,开发环境下基于浏览器原生ES imports开发</li><li>本地快速启动,基于rollup打包，不是webpack</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line">cd &lt;project-name&gt;</span><br><span class="line">npm i</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或直接 npm init vue@latest</span><br></pre></td></tr></table></figure><h3 id="vue-CLI-2"><a href="#vue-CLI-2" class="headerlink" title="vue-CLI 2"></a>vue-CLI 2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br><span class="line">npm install @vue/cli-init -g # 安装2模板</span><br><span class="line">vue init webpack &lt;project-name&gt;</span><br><span class="line">npm run dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1-3:项目名称、描述、作者</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vue build:选择运行时，第一个通用，第二个轻小</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否安装路由、是否ES-lint(代码规范限制)、unit单元测试(用的少)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e2e端到端测试 (专业测试人员使用)</span></span><br></pre></td></tr></table></figure><ul><li>路径<ul><li><code>static</code>:里面的静态文件会原样复制到dist下<ul><li><code>.gitkeep</code>:这个文件使文件为空时也会上传到git</li></ul></li><li><code>src</code>:源码<br>  - <code>assets</code>:里面的今天文件打包重命名，小的图片会被转成base64图片</li><li><code>package-lock.json</code>:记录的是node_module安装的真实依赖版本</li></ul></li></ul><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-router</title>
      <link href="/2023/07/22/web/vue/vue-router/"/>
      <url>/2023/07/22/web/vue/vue-router/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h3 id="router-配置"><a href="#router-配置" class="headerlink" title="router 配置"></a>router 配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">&#123;  <span class="comment">//动态路由 =&gt; params =&gt; &#123;&#123; $route.params.id &#125;&#125;</span></span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;/dynamic/:id/:name&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Dynamic&quot;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/test/dynamic.vue&quot;</span>),</span><br><span class="line"><span class="attr">props</span>: &#123; <span class="attr">keyxxx</span>: <span class="string">&quot;路由参数传达，组件中也是通过 prop:[&#x27;keyxxx&#x27;] 获取&quot;</span> &#125;,</span><br><span class="line"><span class="attr">children</span>: [ <span class="comment">//嵌套路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>, <span class="comment">// 不要斜杆</span></span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/test/profile.vue&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;gonameview&#x27;</span>, <span class="comment">// 命名视图</span></span><br><span class="line"><span class="attr">components</span>: &#123; <span class="comment">//</span></span><br><span class="line"><span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/test/go-not-name-view.vue&quot;</span>),</span><br><span class="line"><span class="attr">viewName</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/test/go-name-viewName-view.vue&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;   <span class="comment">// 不存在的路由地址,重定向到404页面，如果404页面存在的话</span></span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;other&quot;</span>,</span><br><span class="line"><span class="attr">redirect</span>: <span class="string">&quot;/404.vue&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;hash&#x27;</span>,</span><br><span class="line"><span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;路由跳转前会做的一些事情&quot;</span>);</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>import router from &#39;./router&#39;</code><br>挂载 router 到将 Vue 实例中</p><h3 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h3><p>router 路由对象，可以进行跳转，等方法<br>route  单个页面路路由，有路径，名称的信息</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nuxt</title>
      <link href="/2023/07/22/web/vue/vue-ssr-nuxt-2023/"/>
      <url>/2023/07/22/web/vue/vue-ssr-nuxt-2023/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>单页面应用程序（SPA）在客户端呈现（术语称：CRS）<ul><li><strong>渲染原理：</strong>先拿到空白页，<strong>下载引入的 js 文件</strong>，<strong>通过 js 在客户端动态渲染数据</strong>（包括<strong>逻辑</strong>、<strong>UI</strong>、以及<strong>服务器通信相关数据</strong>）</li><li><strong>优点：</strong>第一层请求时加载页面，页面切换不需要重新加载，仅更新变化的数据，体验更加流畅</li><li><strong>缺点：</strong>不利于<strong>SEO优化</strong>，大项目<strong>首次首屏渲染缓慢</strong></li><li><code>React</code>、<code>Vue</code>、<code>AngularJs</code> 等库可以实现</li></ul></li><li>搜索引擎优化 （SEO） <ul><li>Google 爬虫的工作流程<ul><li>主要有抓取地址以及相关地址 ，索引编制 ，用户搜索呈现结果三个阶段</li><li>蜘蛛&#x2F;爬虫<strong>抓取网页</strong> &#x3D;&#x3D;&gt; 储存临时数据库，找到外链<strong>循环抓取储存</strong> &#x3D;&#x3D;&gt; <strong>符合规则可以抓取进行爬取</strong>，不符合清理  &#x3D;&#x3D;&gt;  爬取符合网址内容，各种<strong>数据存入索引区</strong> （TDK、Alt属性、图片、视频等）&#x3D;&#x3D;&gt; <strong>搜索引擎</strong>将用户搜索数据进行分类、归档、排序、反馈</li><li>交钱的排序会被提升，其他的按照符合要求程度自动排序</li></ul></li><li>优化手段<ul><li>多用语义化的HTML标签，<ul><li>如 <code>H1~H6</code> </li><li>一个页面<strong>H1只能有一个</strong>，否则增加蜘蛛爬虫对网站的困扰，没有优化的意义了，<strong>不要过度</strong>使用H标签</li><li>制作喜欢的标签: title、a、h、p、title属性、alt属性、mate 描述和关键字等</li></ul></li><li>每个页面需要一个标题（页面不需要可以隐藏） + 内部连接</li><li>设置 tdk</li><li>图片加 alt</li><li>robots.txt 文件：规定爬虫可以访问网站上哪些网站，允许哪些搜索引擎抓取</li><li>sitemap.xml 站点地图：列出网站管理所以网站，防止爬虫遗漏，可在线生成</li></ul></li></ul></li><li>静态站点生成 (SSG  预渲染)，预先生成好静态网站<ul><li>优点：速度快，页面在构建时提前生成好，直接给浏览器返回静态HTML，且日保留SPA的应用特性</li><li>缺点：</li></ul></li><li>服务器渲染 (SSR 同构应用) 全称：<strong>Server Side Render</strong> <ul><li>应用是在服务端渲染，用户请求的每个页面都会限制服务端渲染成字符串，再返回给浏览器静态先显示 </li><li><img src="/../../../static%5Cimg%5C2023-03-02_001857.jpg" alt="第一步 生成静态页面"></li><li><strong>Hydration</strong> 水和 激活应用程序</li><li><img src="/../../..%5Cstatic%5Cimg%5C2023-03-02_002745.jpg"></li><li>优点：更快的首屏渲染速度，立即返回静态内容，爬虫可以抓取，不需要等加载完整个应用程序<ul><li>在 Hydration 后依然保留应用程序交互</li></ul></li><li>缺点：服务器消耗大，要求高，成本高，客户端渲染用的是<strong>每个客户自己</strong>的电脑渲染<ul><li>开发者需要注意呢些代码是运行在服务端，哪些是运行在浏览器，增加开发成本</li></ul></li><li>解决方案<ul><li>方案一：php，jsp</li><li>方案二：学习 通过 Node+webpack+vue&#x2F;react 搭建</li><li>推荐方案：Vue Nuxt、React Next.js</li></ul></li><li>使用场景：<ul><li><pre><code>门户网站、零售网站、、</code></pre></li></ul></li></ul></li></ul><p>​</p><h2 id="手动实现方案"><a href="#手动实现方案" class="headerlink" title="手动实现方案"></a>手动实现方案</h2><p><a href="https://github.com/liaozhongxun/lzo-vue3-ssr">配套项目</a></p><blockquote><p>  服务端搭建</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装node环境，进入项目目录</span></span><br><span class="line">npm init -y</span><br><span class="line">npm install express -S</span><br><span class="line">npm install nodemon -D</span><br><span class="line">npm install webpack webpack-cli webpack-node-externals -D</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过express创建node服务并启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webpack配置，服务端打包生成 server_bundle.js</span> </span><br><span class="line">webpack --config ./config/webpack.config.js --watch #监听者，入口文件一发生变化，重新打包server_bundle.js</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 nodemon 执行 server_bundle.js</span> </span><br><span class="line">nodemon ./build/server/server_bundle.js # 当 webpack入口文件方式变化，这里执行的 server_bundle.js 跟着变化</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>   加入 vue3 配置代码，将vue项目生成静态文件展示给用户</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务端配置的基础上加速vue的配置</span></span><br><span class="line">npm install vue </span><br><span class="line">npm install vue-loader babel-loader @babel/preset-env -D</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 createSSRApp 创建app实例 导出，进入server入口文件中导入使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再使用 @vue/server-rendere 中将 vue 渲染成字符串的函数 renderToString</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换测试用的 hello word 字符串</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">去webpack配置文件中加入loader规则，再同时运行build:server 和 start指令</span></span><br></pre></td></tr></table></figure><blockquote><p>客户端 Hydration 水合激活静态页面的交互</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端需要重新将 App 组件 通过 createApp 创建app实例，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过配置客户端webpack配置文件，通过webpack打包成 client_bundle.js ( 同构应用，客户端和服务器同时构建 )</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">renderToString 渲染字符串那 html文件中直接引入 client_bundle.js</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将buuild 设置位静态文件夹</span></span><br></pre></td></tr></table></figure><blockquote><p>  正常开发vue项目</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 vue-roouter pinia，src下正常设置router，view等 生成多页面项目</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nuxt</title>
      <link href="/2023/07/22/web/vue/vue-ssr-nuxt/"/>
      <url>/2023/07/22/web/vue/vue-ssr-nuxt/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/liaozhongxun/lzo-nuxt-v2.0.git">配套项目</a></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>优点<br>    1、多页面<br>    2、ssr seo 优化 每页有自己的tdk<br>    3、页面的内容源码直接有了,vue源码是没有什么内容的,不利于抓取(预渲染，SSR优化)</p><p>预渲染<br>    读取配置获取需要渲染的页面<br>    发布模拟浏览器环境打开页面<br>    页面脚本触发渲染时机<br>    渲染出当前页面内容<br>    获取渲染出的所有DOM结构<br>    生成HTML文件<br>   （模拟浏览器环境生成dom直接生成HTML文件，扔到页面上）<br>    vue seo方案 &#x3D;&gt; 预渲染: (得到打包后将数据生成到html源码的效果)<br>        1、使用预渲染插件 <code>prerender-spa-plugin</code><br>            配置中设置指定需要预渲染的页面<br>            无法配置动态路由<br>            不适合 token 权限的项目<br>        2、修改页面 TDK <code>vue-meta-info</code> （在每个页面组件中配置自己后面的 TDK 信息）<br>            接口数据无效<br>        <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">metaInfo</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&quot;xxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>服务端渲染(SSR)<br>    前端渲染的方式（C&#x2F;S）<br>        用户通过浏览器向服务端发送请求 -&gt; 服务端相应数据到看浏览器，vue将数据渲染到页面上<br>        拿到数据之前页面已经打开</p><pre><code>服务端渲染步骤 （C/S/S）    用户发送请求到 Node Server -&gt; Node Server(可以用 Nuxt 做)将发送请求到后端 -&gt;  返回数据到 Node Server -&gt; 渲染好完整页面呈现给用户    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 打包</span></span><br><span class="line">npm build  (不会生成dist)</span><br><span class="line">npm generate  依据路由编译生成html文件，生成静态站点,</span><br></pre></td></tr></table></figure>适合的项目:    项目所有页面都有做SEO的时候</code></pre><p>SEO优化方案<br>    1、前后端不分离(前端写好模板页面布局，扔给后端就可以了，不方便)<br>        -   不存在接口调用，压力全在后端<br>        -   不对外暴露接口，安全性好</p><pre><code>2、前后端分离    2.1 SPA单页面应用对SEO不友好，数据是后期浏览器访问页面后渲染出来的        -   压力分散到客户端，用户机器配置    2.1 vue-cli项目 实现预渲染        -   某些页面需要SEO的情况适合    2.3 服务端渲染        -   整个站点都需要seo        -   起两个服务，Node server 和 后端接口服务，压力在服务端</code></pre><h3 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h3><p>安装:<a href="https://nuxtjs.org/docs/get-started/installation#using-create-nuxt-app">Nuxt2</a></p><p>目录结构</p><ul><li>pages           存放页面<ul><li>新建页面自动添加到路由，可直接访问</li></ul></li><li>components      存放组件<ul><li>config文件 component 为 true 时，下面的组件，其他页面就可以直接引</li></ul></li><li>static          存放静态资源</li><li>store           vuex状态树</li><li>nuxt.config.js  配置文件</li></ul><p>概念<br>    路由<code>不需要手动配置</code>，会根据pages目录下的文件自动生成<br>    页面上用到的组件会自动去components目录查找，<code>不需要导入</code> -&gt; 可配置</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>服务端生命周期(输出终端打印,里面不能用浏览器相关的对象 如localStorage)</p><ol><li><code>nuxtServerInit</code> 在 store action 中<ul><li>可初始化数据，比如获取token</li></ul></li><li><code>middleware</code>, 全局从 <code>nuxt.config.js</code> 指定，局部重页面组件中指定 要执行的内容<ul><li>可验证 token ，类似vue的路由的守卫</li></ul></li><li><code>validate(&#123;params,query&#125;)</code><ul><li>校验参数是否正确,不正确 直接重定向到 404 页面</li></ul></li><li><code>asyncData(&#123;$axios,store,params&#125;)</code>, 仅仅页面组件中用(page 下)，页面加载之前调用<ul><li>常用于发送请求操作,获取数据     </li><li>获取数据 <code>this.List = data</code> 变成 <code>return &#123; List: data &#125;</code></li></ul></li><li><code>fetch(&#123;$axios,app,store,params&#125;)</code>，页面加载前调用<ul><li><p>asyncData类似，在<code>组件</code>和<code>页面</code>都能用(渲染页面前会填充页面状态树 store 数据)</p></li><li><p>建议组件中才使用fetch</p><ul><li>组件中没有 {$axios,app,store,params} 这些上下文对象，用 this.$axios 代替</li></ul></li><li><p>this.List &#x3D; data;this.存在的，但是拿不到数据，this.data.List &#x3D; data;可能可以拿到？？ </p></li><li><p>或者fetch页面中是拿来操作store的??</p></li></ul></li></ol><p>服务端与客户端 共有的 生命周期（控制台 Nuxt SSR 中有，Nuxt SSR 外也有打印，也不能用浏览器相关对象）</p><ol><li><code>beforeCreate</code> 和 <code>created</code></li></ol><p>客户端的生命周期（输出仅控制台 Nuxt SSR 外才打印的）</p><ol><li><code>beforeMount</code> 和 <code>mounted</code></li><li><code>beforeUpdate</code> 和 <code>updated</code></li><li><code>beforeDestroy</code> 和 <code>destroyed</code></li></ol><p>持久化存储，使<code>服务端</code>和<code>客服共享</code>的生命周期可以访问持久数据<br>1、安装模块 <code>npm install cookie-universal-nuxt -S</code><br>2、nuxt.config.js -&gt; modules 添加 <code>cookie-universal-nuxt</code><br>3、使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登入成功的时候,下次不用登录，也可以拿到这个数据，放到store.state中，服务端生命周期就可以通过sotore拿到这个数据</span></span><br><span class="line"><span class="comment">// 代替localStorage.set(&quot;token&quot;,&quot;xxxxx&quot;)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>,<span class="string">&#x27;xxxxx&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$cookies</span>.<span class="title function_">get</span>(<span class="string">&quot;token&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>1、page 目录下默认生成路由，路由路径，根据目录结构生成<br>2、子路由，如果page有<code>index.vue</code>,那么新建一个<code>同名的文件夹</code>，里面的页面，就是index的子路由<br>3、动态路由，建一个 下划线开头的页面如 <code>_id.vue</code><br>4、重构还想用原来router.js 的话，需要通过插件 <code>@nuxtjs/router</code> 处理<br>    -   npm install @nuxtjs&#x2F;router -S<br>    -   nuxt.config.js ,modules:[“@nuxtjs&#x2F;router”] 配置<br>    -   把自己的 router.js 的懒加载干掉，再文件放到根目录<br>    -   修改一下 export 。。。<br>    -   里面的<code>导航守卫</code>也属于服务端的生命周期,里面操作在终端打印</p><p>导航守卫</p><ol><li>自己定义的路由表，用法和vue一样</li><li>nuxt 的导航守卫<ul><li>中间件 middleware<ul><li>配置文件 添加 router 配置，根文件夹新建 middleware 文件夹，里面存放做的事情</li><li>配置文件 设置全局，页面中设置 局部</li></ul></li><li>插件 plugin</li></ul></li></ol><p>特点<br>1、无需懒加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;nuxt-link to=<span class="string">&quot;/login&quot;</span>&gt;跳转登录页面&lt;/nuxt-link&gt;</span><br></pre></td></tr></table></figure><h4 id="nuxt-config-js"><a href="#nuxt-config-js" class="headerlink" title="nuxt.config.js"></a>nuxt.config.js</h4><blockquote><p>里面的配置都是全局的</p></blockquote><ol><li><p>head</p><ul><li>ssr 每个页面如果没设置<code>自己独有的 tdk </code>等信息，就会用全局的</li><li>全局hander是一个对象信息，每个页面中的 是一个 head 函数,return出 里面的信息</li><li>局部 与 全局相同的属性可以不写,一般 标题 描述 关键字就可以了 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">head</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;页面独有 head 属性设置&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>css</p><ul><li>全局引入：css模块添加 “~&#x2F;static&#x2F;xxx&#x2F;style.css”</li><li>局部引入：@import “~&#x2F;static&#x2F;xxx&#x2F;style.css”;</li><li>nuxt 中 <code>页面样式</code>如果<code>不写 scoped</code> ,页面间的样式<code>不会相互影响</code>，但是这个样式却会在<code>组件</code>中生效</li><li>scss 需要安装 <code>npm install sass sass-loader@10.1.1 -D</code>,只要安装上去就可以了，最新版本好像不能用</li></ul></li><li><p>components</p><ul><li>设置位 true 后，页面中使用组件就可以不用注册，就能直接使用了</li></ul></li><li><p>plugins</p><ul><li>呈现页面之前要运行的插件</li><li>使用场景 <code>axios二次封装</code>、<code>第三方插件</code>、<code>ElementUi</code> …<ul><li><code>~/plugin/xxxelementui.js</code></li><li>css部分需要映入 <code>插件相关的css</code></li><li>JS 中 再 import Vue 、import Element ， Vue.use(Element) 这些操作</li></ul></li></ul></li><li><p>modules</p><ul><li><code>npm install @nuxtjs/axios -S</code> 创建项目如果有选中的话就不用安装了</li><li>modules 中添加 ‘@nuxtjs&#x2F;axios’ 配置nuxt内置的axios</li><li>接口注意事项：SSR是为了seo优化，所有请求接口一定先在服务端口拿到数据，再打开页面，所以一般都再服务端周期调用</li></ul></li><li><p>axios</p><ul><li>配置代理</li><li>modules 安装并添加 <code>@nuxtjs/axios</code>,<code>@nuxtjs/proxy</code> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">modules</span>: [</span><br><span class="line">         <span class="string">`@nuxtjs/axios`</span>,</span><br><span class="line">         <span class="string">`@nuxtjs/proxy`</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">axios</span>: &#123;</span><br><span class="line">        <span class="comment">// 是否可跨域</span></span><br><span class="line">        <span class="attr">proxy</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 重发次数</span></span><br><span class="line">        <span class="attr">retry</span>: &#123;<span class="attr">retries</span>:<span class="number">5</span>&#125;,</span><br><span class="line">        <span class="comment">// 不同环境下基本地址</span></span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 开发环境 xxx 否则 xxx</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localxxxxxx&#x27;</span>,</span><br><span class="line">            <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">                <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>loading</p><ul><li>nuxt 默认每个页面加载都有一个黑条 <code>loading:false</code> 禁用，自己去axios配置</li><li>或更改样式 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">loading</span>:&#123;</span><br><span class="line">    <span class="attr">color</span>:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>或指定loading 动画文件 <code>loading:&#39;~/components/loading.vue&#39;</code> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">start</span>(<span class="params"></span>)&#123; <span class="comment">// 路由更新，浏览器地址发送变化时调用</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">finish</span>(<span class="params"></span>)&#123; <span class="comment">// 更新完毕，asyncData 调用完成，且页面完成加载时调用</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fial</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">        <span class="title function_">increase</span>(<span class="params">num</span>)&#123; <span class="comment">// 页面加载过程中调用，num 小于100</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>server 配置渲染node服务器端口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">prot</span>:<span class="number">3000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="项目上线"><a href="#项目上线" class="headerlink" title="项目上线"></a>项目上线</h4><ol><li><code>npm run build</code> 打包</li><li>打包好的 <code>.nuxt</code>,<code>static</code>,<code>nuxt.config.js</code>,<code>package.json</code>, 上传到服务器</li><li>服务器安装node环境，执行 <code>npm install</code><ul><li>安装MongoDB数据库，mongoose 首先 systemctl 运行数据库，设置开机启动</li><li>直接启动 或 <code>pm2 start bin/www</code> 启动服务器接口服务</li><li><code>npm run start</code> 或 <code>pm2 --name=nuxtName start npm -- run start</code> 启动nuxt服务</li></ul></li><li>在服务器上运行 <code>npm run start</code> 启动项目，创建 <code>localhost:3000</code> 服务</li><li>通过nginx将 <code>localhost:3000</code> 代理到需要用的域名 <code>www.xxxx.com</code> 中</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础</title>
      <link href="/2023/07/22/web/vue/vue-vue2/"/>
      <url>/2023/07/22/web/vue/vue-vue2/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h3><ul><li><code>编程范式</code>: 申明式编程(以前 jQuery 那种命令式编程)</li><li>样式App引入，公共组件单独抽离，页面内组件页面文件夹下</li></ul><h3 id="实例-option"><a href="#实例-option" class="headerlink" title="实例 option"></a>实例 option</h3><ul><li><code>el</code>:挂载 vue 将要管理的 HTML 模板</li><li><code>template</code>:运行的时候<code>template</code>与<code>el</code>同时存在，那么temp模板的HTML的代码会替换<code>#app</code>挂载的DOM节点</li><li><code>data</code>:Object|Function<ul><li>组件 data<code>必须</code>是函数,用 return 对象里的数据<ul><li>组件需要被<code>多次调用</code>，使用函数返回可以<code>保证每个组件</code>的<code>数据是独立的</code>，不会相互音响</li><li>如果就想要公用 把对象定义到外面，统一返回这个对象</li></ul></li><li>组件无法访问到 vue 实例 data 的数据</li></ul></li><li><code>methods</code>:方法列表(不与实例挂钩单独的叫函数)</li><li><code>computed</code>:计算属性,只要 return 任意属性变化，都会更新 a<ul><li><code>缓存</code>:页面上无论用几次，里面计算过程不会重复调用，属性发生变化才会调用</li></ul></li><li><code>filters</code>:过滤器对象</li><li><code>components:&#123;my-title:myTitle&#125;</code>:<code>局部组件</code>注册，只能在当前实例上用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 因为计算属性一般不需要set属性的,只要获取就可以了</span></span><br><span class="line">    <span class="attr">a</span>:&#123;</span><br><span class="line">        <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">b</span> + <span class="variable language_">this</span>.<span class="property">c</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 简写</span></span><br><span class="line">    <span class="attr">a</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        xxxxxx</span><br><span class="line">        xxxxxx</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">b</span> + <span class="variable language_">this</span>.<span class="property">c</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p><code>Mustache语法</code>: <code>&#123;&#123;&#125;&#125;</code></p><ul><li>变量</li><li>简单 js 表达式</li></ul></li><li><p>指令</p><ul><li><code>v-once</code>:标签里的数据开始渲染一次，数据变化则不会更新</li><li><code>v-html</code>:展示 html</li><li><code>v-text</code></li><li><code>v-pre</code>:直接显示内容</li><li><code>v-cloak</code>:<ul><li>加到<code>挂载的dom</code>上，vue 解析之后会<code>自动删除v-cloak</code></li><li>样式：[v-cloak]{display:none} 这样可以处理双大括号闪烁的问题</li></ul></li></ul></li><li><p><code>v-bind:| 语法糖 :</code>:绑定属性</p><ul><li>类:<code>:class=&quot;&#123;类名:bool&#125;&quot;</code> ,多个调用方法，返回这个对象</li><li>样式<ul><li><code>:style=&quot;&#123;属性名:变量属性值&#125;&quot;</code>， 支持<code>font-size</code>或<code>fontSize</code></li></ul></li></ul></li><li><p><code>v-on:|@:</code>:绑定方法</p><ul><li><code>$event</code>:把对应的形参当做时间对象</li><li>修饰符 @click.stop<ul><li><code>.stop</code>:阻止事件冒泡</li><li><code>.prevent</code>:阻止默认事件</li><li><code>.enter|.13</code>:回车</li><li><code>.once</code>:第一次事件生效</li></ul></li></ul></li><li><p><code>v-if v-else-if v-else</code></p><ul><li>复用问题：切换之后某些相似元素复用，给他们指定不同<code>key</code>就不会复用了</li></ul></li><li><p><code>v-show</code></p><ul><li>对比 v-if<ul><li>显示隐藏&#x2F;加载卸载</li></ul></li></ul></li><li><p><code>v-for</code></p><ul><li>数组数据:<code>item,index</code></li><li>对象数据:<code>value,key,index</code></li><li>key 属性:<ul><li>编辑器 -&gt; 虚拟 DOM -&gt; 浏览器- 响应式</li><li>有相同父元素的子元素必须有独特的 key</li></ul></li><li>无法响应式的操作<ul><li>arr[0]&#x3D;1<ul><li><code>C被标识为E</code>，<code>D被标识为C</code>,在<code>最后增加一个</code>标识为 D</li></ul></li><li>有不同且固有的 key 时在 B 与 C 之间插入 E()<ul><li>直接在<code>B与C</code>之间<code>插入节点</code>，C 和 D 无需变化,大大提高性能</li><li>直接用 index 没有意义，因为 index 是会变化的，我们要的是能<code>一一对应</code>的 key</li></ul></li><li>插入时通过 diff 算法对比，查看虚拟 dom 与浏览器 dom 的 key</li></ul></li></ul></li><li><p><code>v-model</code>:表单元素双向绑定</p><ul><li>1、v-bind:绑定 value 属性，数据改变 value 改变</li><li>2、v-on:绑定@input 事件，value 改变重新赋值数据</li><li>案例<ul><li>多选框如果 v-model 设置同一个数组，勾选会自动添加</li><li>select 添加 multiple 多选</li></ul></li><li>修饰符<ul><li><code>.lazy</code>:数据变化回车更新</li><li><code>.number</code>:值转 number 类型</li><li><code>.trim</code>:去除作用空格</li></ul></li></ul></li><li><p><code>v-slot:slotName</code>:绑定具名插槽</p></li><li><p>响应式</p><ul><li>无法响应式的操作<ul><li>arr[0]&#x3D;1</li></ul></li></ul></li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h3 id="组件注册与父子组件"><a href="#组件注册与父子组件" class="headerlink" title="组件注册与父子组件"></a>组件注册与父子组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;my-title&gt;&lt;/my-title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建组件构造器</span></span><br><span class="line"><span class="keyword">let</span> myTitle = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;title&lt;/div&gt;`</span></span><br><span class="line">    <span class="attr">components</span>:&#123; <span class="comment">//子组件</span></span><br><span class="line">       <span class="attr">myChild</span>:myChild</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> myChild = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123; <span class="comment">//子组件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;child&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局组件（可以在多个vue实例下使用）</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-title&#x27;</span>,myTitle)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Vue实例范围内使用组件</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h3><ul><li><p><code>props</code> 配合 <code>$eimt events</code></p><ul><li><p><code>:propName=&#39;xxx&#39;</code>: 组件标签绑定传递的数据,不用绑定的话传递的数据只是<code>字符串</code></p><ul><li>有些版本不支持驼峰需要<code>:prop-name=&#39;xxx</code>处理</li></ul></li><li><p><code>props</code>:子组件中接收</p><ul><li>数组 : props:[‘name1’,’name2’，’xxx’]</li><li>对象 :</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name1</span>:<span class="title class_">Array</span>,</span><br><span class="line">    <span class="attr">name4</span>:[<span class="title class_">Array</span>,<span class="title class_">String</span>],<span class="comment">//多种类型</span></span><br><span class="line">    <span class="attr">name2</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>   <span class="comment">//必传</span></span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="comment">//高版本vue中Object或Array的default必须是函数</span></span><br><span class="line">    <span class="attr">name3</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Array</span>,</span><br><span class="line">        <span class="title function_">default</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//自定义验证函数参数必须是1或2或3</span></span><br><span class="line">    <span class="attr">name5</span>:&#123;</span><br><span class="line">        <span class="attr">validator</span>:<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">include</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意<ul><li>vue 官方<code>不建议</code>在子组件<code>更改</code>父组件<code>传入的prop</code>属性值</li><li>可以在 data 手动设置一个对应属性值 <code>mynumber:this.number</code>这样重新定义一下</li><li>想同步到父级，在<code>@input</code>数据变化时<code>触发$emit</code>或<code>witch监听</code>数据变化时触发，通过自定义函数更改</li></ul></li></ul></li><li><p>子传父</p><ul><li>组件标签 <code>@selfevent=&#39;self&#39;</code></li><li>子组件 <code>this.$emit(selfevent,data)</code></li><li>父组件 <code>self(data)&#123;c.log(data)&#125;</code> 获取数据</li></ul></li></ul></li></ul><h3 id="父子访问-直接相互访问"><a href="#父子访问-直接相互访问" class="headerlink" title="父子访问(直接相互访问)"></a>父子访问(直接相互访问)</h3><ul><li>父访问子<ul><li><code>this.$children</code>:获取子组件列表，直接调用其方法</li><li><code>this.$refs</code>:给组件添加 ref 属性</li></ul></li><li>子访问父<ul><li><code>this.$parent</code>:不建议用</li><li><code>this.$root</code>:直接拿到顶层 vue 实例</li></ul></li></ul><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><ul><li>默认<ul><li><code>组件中</code>设置<code>slot标签对</code>,父组件调用时<code>标签间</code>的内容就会替换到<code>子组件slot</code>的位置</li><li>子组件<code>slot标签</code>中可以直接设置<code>默认dom</code>,调用标签间有东西，就会覆盖掉</li><li>默认只会替换子组件<code>没有名字的slot</code></li></ul></li><li>具名插槽<ul><li>子组件:slot 标签设置<code>name:slotnamexx</code></li><li>父组件:要替换的标签中设置<code>slot=&quot;slotnamexx&quot;</code></li></ul></li><li>作用域插槽<ul><li>编译作用域:组件中只能用自己的 data 数据</li><li>作用:父组件替换插槽的标签,但是内容由子组件来提供</li><li>步骤:<ul><li>子组件<code>slot标签</code>自定义属性，储存<code>子组件的数据</code>，如:<code>:data=&#39;dataList&#39;</code></li><li>父组件调用的<code>标签对之间</code> 插入 <code>&lt;template slot-scope=&quot;slot&quot;&gt;&#123;&#123;slot.data&#125;&#125;&lt;/template&gt;</code></li><li>从而实现将子组件的数据拿到父组件的插槽中使用</li><li>v2.6 以上高版本可以不需要 template 标签了</li></ul></li></ul></li></ul><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>事物<code>从诞生到消亡</code>的过程，当走到<code>某一步</code>的时候<code>调用</code>一个你传入的<code>钩子(hook)函数</code>，做你在这个时候想做的事情</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">option</span>)&#123;</span><br><span class="line">    <span class="number">1.</span>xxx</span><br><span class="line">    <span class="number">2.</span>xxx</span><br><span class="line">    <span class="number">3.</span>创建好的时候</span><br><span class="line">        option.<span class="property">created</span>?option.<span class="title function_">created</span>()</span><br><span class="line">        源码:<span class="title function_">callHook</span>(vm,<span class="string">&quot;created&quot;</span>)</span><br><span class="line">    <span class="number">4.</span>xxx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span></span><br><span class="line">    <span class="comment">// 创建</span></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//当走到第三步的时候就好自动执行这里的程序</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;创建好了&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//挂载</span></span><br><span class="line">    <span class="title function_">beforeMount</span>(),</span><br><span class="line">    <span class="title function_">mounted</span>(),</span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="title function_">beforeUpdate</span>(),</span><br><span class="line">    <span class="title function_">updated</span>(),</span><br><span class="line">    <span class="comment">//销毁</span></span><br><span class="line">    <span class="title function_">beforeDestroy</span>(),</span><br><span class="line">    <span class="title function_">destroyed</span>(),</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><blockquote><p>  模块化开发目的是将项目划分为一个个小结构、<br>  这个结构中编写自己的<code>逻辑代码</code>,有<code>自己的作用域</code>，不会影响到其他结构<br>  这个结构也可将自己希望暴露的<code>变量</code>,<code>函数</code>,<code>对象</code>等导出给其他结构使用<br>  也可以通过某中方式导入其他结构的<code>变量</code>,<code>函数</code>,<code>对象</code><br>  将程序按照种子方式开发就叫<code>模块化开发</code><br>  核心就是<code>导入</code>和<code>导出</code></p></blockquote><blockquote><p>  自从出现<code>ajax</code>前后的分离、SPA页面需要<code>路由 状态管理</code>、Nodejs还有编写后端程序，模块化更加重要了</p></blockquote><ul><li>非模块化产生的问题<ul><li>多文件<code>全局变量命名冲突</code><ul><li>利用函数作用域<code>;(function()&#123;xxx&#125;)()</code> 匿名函数自执行(IIFE)</li><li>里面的<code>代码无法复用</code></li><li>升级自己的模块化  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fileA</span></span><br><span class="line"><span class="keyword">var</span> modelA = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123; num &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">//fileB</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(modelA.<span class="property">num</span>) <span class="comment">//1 </span></span><br></pre></td></tr></table></figure></li><li>缺点<ul><li>必须记得每个模块返回对象的命名如<code>modelA</code></li><li>每个文件都要包裹要给匿名函数</li><li>没有适合的规范，每个人公司都有自己的写法</li><li>所以js社区出现了很多好用的规范<code>AMD</code>、<code>CMD</code>、<code>Commonjs</code>、<code>ES6 的模块化</code></li></ul></li></ul></li></ul></li><li>常见模块化规范<ul><li><p><code>CommonJS</code>:</p><ul><li>运用于:<code>node</code></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 导入</span></span><br><span class="line"><span class="comment"> * node运行文件，每个js文件都是一个模块，一个commonjs的模块</span></span><br><span class="line"><span class="comment"> * require 作用是拿到指定模块中 的exports对象地址，并返回</span></span><br><span class="line"><span class="comment"> * node实现commonjs的本质就是对象的引用赋值</span></span><br><span class="line"><span class="comment"> * require(&quot;xxx&quot;)查找规则顺序</span></span><br><span class="line"><span class="comment"> *      1.如果xxx是./  ../   /开头，就会去当前文件夹、上层文件夹、根目录下查找模块</span></span><br><span class="line"><span class="comment"> *      2.查找优先级:xxx &gt; xxx.js &gt; xxx.json &gt; xxx.node &gt; xxx目录/index.js &gt; xxx目录/index.json &gt; xxx目录/index.node</span></span><br><span class="line"><span class="comment"> *      3.如果不是这些开头而是字符串, 优先级:核心模块 &gt; 当前目录下的node_modules &gt; 上级目录下的node_modules &gt; 上上...</span></span><br><span class="line"><span class="comment"> * 相同模块只会被加载一次,之后会被加入到缓存,module的loaded属性变为true</span></span><br><span class="line"><span class="comment"> * 循环嵌套引入:按顺序依次加载,最后模块没引入了,再返回最后一层的上一层继续执行,最后再执行第一个文件的后续代码,遇到加载过的则跳过</span></span><br><span class="line"><span class="comment"> *      图结构的深度优先算法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 加载过程:运行时同步加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> &#123;obj1,obj2&#125; = <span class="built_in">require</span>(<span class="string">&quot;./xxxx&quot;</span>) <span class="comment">//导入并解构</span></span><br><span class="line"><span class="keyword">let</span> objs = <span class="built_in">require</span>(<span class="string">&quot;./xxxx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">obj</span>:obj,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="comment">// 两者一样的，内部 module.exports = exports;</span></span><br><span class="line"><span class="comment">// 如果最后手动 module.exports = &#123;&#125;; 前面的 exports 都没了</span></span><br><span class="line"><span class="comment">// 再改吧exports数据时是不会变的，他们是两个对像</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">exports</span>.函数</span><br><span class="line"> <span class="variable language_">module</span>.<span class="property">exports</span> = 函数 <span class="comment">//必须 let objs = require(&quot;./xxxx&quot;)；导入，函数不能结构</span></span><br></pre></td></tr></table></figure></li><li><p><code>ES6的Modules</code></p><ul><li><code>script标签</code> 添加 <code>type=&quot;modules&quot;</code>，设置为模块化文件,本地文件不支持  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认导入</span></span><br><span class="line"><span class="keyword">import</span> model <span class="keyword">from</span> <span class="string">&quot;./xxx.js&quot;</span></span><br><span class="line"><span class="comment">// 按需导入,与到处的名称对应</span></span><br><span class="line"><span class="keyword">import</span> &#123;num,str,funName&#125; <span class="keyword">from</span> <span class="string">&quot;./xxxx.js&quot;</span></span><br><span class="line"><span class="comment">// 全部导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">All</span> <span class="keyword">from</span> <span class="string">&quot;./xxxx.js&quot;</span> </span><br><span class="line"><span class="comment">// 起别名</span></span><br><span class="line"><span class="keyword">import</span> &#123;num <span class="keyword">as</span> newnum,str <span class="keyword">as</span> newstr&#125; <span class="keyword">from</span> <span class="string">&quot;./xxxx.js&quot;</span></span><br><span class="line"><span class="comment">// 先导入直接导出（方便所有文件的暴露统一导出）</span></span><br><span class="line"><span class="keyword">export</span> &#123;xxx,xxx,xxx&#125; <span class="keyword">from</span> <span class="string">&quot;./xxxx.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时导入默认的和其他的导出 </span></span><br><span class="line"><span class="keyword">import</span> defModel, &#123; a, b &#125; <span class="keyword">from</span> <span class="string">&quot;./xxx.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导出 （导出的都是变量的引用）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> str = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">funName</span>(<span class="params"></span>)&#123;&#125;; <span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;&#125;; <span class="comment">//导出类</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="comment">//export的语法 不是对象</span></span><br><span class="line">    num,xxx, str <span class="keyword">as</span> newstrname</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------default</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> xxxx <span class="comment">//default导出的只能有一个,可以让导入者自己命名</span></span><br><span class="line"><span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">&quot;./xxxx.js&quot;</span> <span class="comment">//接收默认导出</span></span><br></pre></td></tr></table></figure></li><li>import 不能再逻辑代码中导入<ul><li>js引擎解析代码(词法分析，并没有执行)时，就要确认依赖关系了，而解析成二进制后才会运行代码</li><li>解析代码遇到类似if语句时，没有运行代码，不知道走哪条分支，也就不能确定是否要导入内部的依赖文件了</li><li>逻辑代码中可以用 <code>const promise = import(&quot;./xxx.js&quot;)</code>;异步函数</li><li>require()可以，是因为require是一个函数，是再运行阶段执行的   </li><li>导出的是大括号中变量的引用，后期导出的内容变化，导入的也会跟着变<ul><li>解析时<code>export</code> 到<code>import</code>时创建一块内存空间(模块环境变量 Module environment recode)</li><li>这块空间实时绑定（bindings）: <code>export &#123;name&#125;</code> -&gt; 空间中 <code>const name = name</code> -&gt; import 的时新定义的name</li><li>非引用类型:es发现name变化会删除原来的<code>const name = name值</code>,重新创建一个，import的永远时最新的，外面时<code>无法更改</code>的</li><li>引用类型:es发现name变化时<code>const name = name地址</code>,外面改变的是name地址指向的对象，是<code>可以更改</code>的</li></ul></li></ul></li><li>Node 对ES Module的支持<ul><li>模块默认一样需要后缀</li><li>老版本node，默认不能使用<ul><li>运行添加参数：<code>node index.js -experimental-modules</code>,实验阶段不稳定</li></ul></li><li>新版本node，默认不能使用的，node默认值commonjs的module<ul><li>方案1:在package.js 设置 “type”:”module”</li><li>方案2:将相关当作模块的文件的文件后缀改为<code>mjs</code></li></ul></li></ul></li><li>当前Node中ES Module 不能与 commonjs 交互的：ES Module，在解析是进行语法分析，commonjs是同步加载，实在运行时处理</li></ul></li><li><p><code>AMD</code></p><ul><li>define 定义 require 导入</li><li>require.js 引入后项目就可以支持AMD模块化了</li></ul></li><li><p><code>CMD</code></p><ul><li>seajs 实现</li></ul></li></ul></li></ul><h3 id="转脚手架步骤"><a href="#转脚手架步骤" class="headerlink" title="转脚手架步骤"></a>转脚手架步骤</h3><ul><li><p>默认</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="comment">//组件无</span></span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,<span class="comment">//这个app是 html页面的app</span></span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;message&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>不改html页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">//组件无</span></span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>, </span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&lt;/div&gt;`</span>  <span class="comment">//模板替换&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;插入到body中</span></span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;message&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>组件化抽离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">//组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&lt;/div&gt;`</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&quot;message&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;App/&gt;`</span> <span class="comment">//调用一下App标签,因为只有一个元素他自己就是跟 </span></span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="title class_">App</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>模块化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;App/&gt;`</span> <span class="comment">//调用一下App标签,因为只有一个元素他自己就是跟 </span></span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="title class_">App</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>导出app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; </span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&lt;/div&gt;`</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&quot;message&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>.vue文件</p></li></ul><blockquote><p><code>.vue</code>文件需要配置loader</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader vue-template-compiler -D //loader和编译插件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">vue-loader14以上版本需要加一个插件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webpack</span></span><br><span class="line">&#123;</span><br><span class="line">    test:/\.vue/,</span><br><span class="line">    use:[&#x27;vue-loader&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">message</span>:<span class="string">&quot;message&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;   </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p><code>MVVM</code>:Model View ViewModel</p><ul><li><code>View</code>:挂载的 dom 下的页面<ul><li>视图层、DOM 层，给用户展示各种信息</li></ul></li><li><code>Model</code>:js 数据<ul><li>数据层，固定数据、借口数据等</li></ul></li><li><code>ViewModel</code>：<code>new Vue()</code><ul><li>试图模型层，<code>View</code>与<code>Model</code>沟通的桥梁</li><li>数据绑定到页面上，数据改变<code>通过VM的处理</code>实时显示到<code>页面View</code>上</li><li><code>监听View的事件</code>，触发事件时去调用 Model 的方法</li></ul></li></ul></li><li><p><code>虚拟DOM（vdom)</code>  </p></li><li><p><code>runtime-only</code> 与 <code>runtime-compiler(编译类型)</code> 的差别<br> <img src="/../../../static/img/vue-vue2-1.png" alt="差异"></p><ul><li>vue解析过程<ul><li>template –解析-&gt; ast(抽象语法树) –编译-&gt; render函数 –形成-&gt; 虚拟dom(vdom) –&gt; 真实DOM</li><li><code>runtime-only</code>:直接从render开始无需编译(性能高、代码量少)</li><li><code>render函数</code>解析<ul><li>完整的render函数  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">render:function(createElement)&#123;</span><br><span class="line">    return createElement(&quot;h2&quot;,&#123;class:&quot;box&quot;&#125;,[&#x27;hello word&#x27;,createElement(xxx)])</span><br><span class="line">    # 渲染一个class=box 内容为hello word的h2标签，替换index.html的#app节点</span><br><span class="line">    # h2标签直接换成组件 就是 runtime-only的写法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>main.js引入的APP组件以及是编译成<code>render函数</code>, 里面不存在<code>&lt;template&gt;</code>模板了，通过<code>vue-template-compiler</code>完成</li></ul></li></ul></li><li><p>前端渲染与后端渲染</p><ul><li>后端渲染<ul><li>服务器拿到浏览器发送的地址，服务器分析地址，通过jsp、php等技术，结合js+html+后端语言直接生成页面，在不这个页面返回到浏览器中</li><li>后端语言是来操作数据库，动态将数据放到页面中</li><li>一个url对应一个页面的映射关系，在后端处理就是后端路由</li></ul></li><li>前端渲染(前后端分离阶段)<ul><li>ajax出现后，后端只负责提供数据</li><li>一般公司会分静态资源服务其和API接口服务器</li><li>访问网站 –&gt; 静态资源服务器获取页面 –&gt; 解析页面遇到ajax –&gt; 向API服务器请求数据 –&gt; 通过js将数据渲染到页面</li><li>工作明确，一套接口多端运用</li></ul></li><li>前端路由(前端渲染基础添加路由)<ul><li>SPA单页面应用</li><li>访问页面直接下载引入的静态资源与当前路由页面访问到的接口,(默认所以.vue都会打包到同一个js中)</li><li>点击按钮跳转时，生成URL，不会请求静态资源，而是去开始下载的资源里抽取当前页面需要显示的东西(类似某一个组件)</li><li>从而形成一个URL对应一个组件的映射关系，由前端管理,就叫前端路由    </li><li>改变url不刷新页面，而是获取开始下载资源中对应组件内容</li></ul></li></ul></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>package.json ^…,最会第三位版本号自动升级, ~…,第二位和第三位自动升级</li><li>package-lock.js 记录项目中安装的真实版本</li><li><code>bate</code>版本都是测试不稳定的版本</li></ul><h2 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h2><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ul><li><p>基础</p><ul><li>知识点<ul><li>所有组件都继承自Vue原型</li></ul></li><li>改变路径而不刷新vue提供的方式方式hash或history<ul><li>history<ul><li>history.pushState({},””,”laster”);栈结构，新进后出，每次push后，浏览器显示的的都是当前push的 </li><li>history.replace </li><li>history.go(-1),退后一步骤，-2后退两步,.back &#x3D;&#x3D; .go(-1),.forward &#x3D; .go(1)向前一步</li></ul></li></ul></li><li>安装 npm安装 vue-router<ul><li><code>导入</code>对象，调用<code>Vue.use(VueRouter)</code>安装插件(VueRouter.install)</li><li><code>创建实例</code>传入<code>映射配置</code></li><li>Vue实例中挂载路由实例</li></ul></li><li>使用步骤<ul><li><p>创建路由需要映射的组件</p></li><li><p><code>&lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</code>:标签跳转，或通过事件<code>push</code>等方式跳转</p><ul><li><code>to=&quot;/xxx&quot;</code>:指定跳转位置<ul><li><code>:to=&quot;&#123;path:&#39;xxx&#39;,query:&#39;xxx&#39;&#125;&quot;</code>:query传参</li></ul></li><li><code>tag=&quot;div&quot;</code>：渲染成指定标签，默认渲染成a标签</li><li><code>replace</code>：使用replace替换</li><li><code>active-class=&quot;xxx&quot;</code>:指定激活元素拥有的类(new VueRouter({linkActiveClass:’xxx’}),全部统一更改)</li><li>通过js跳转<ul><li><code>this.$router.push(&#39;/xxx&#39;)</code>:push、replace</li><li><code>this.$router.push(&#39;/xxx&#39;)</code>:push、replace</li></ul></li></ul></li><li><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code>:设置存放的位置</p><ul><li>渲染组件容器，路由切换的是这变挂载的组件，其他内容不变</li></ul></li></ul></li><li><code>keep-alive</code>:vue内置组件,可以使被包含的组件被缓存，保留状态，避免重新渲染<ul><li>属性<ul><li><code>exclude=&quot;组件name,name2&quot;</code>:不缓存排除名称的组件</li></ul></li><li>搭配的两个钩子函数<ul><li>activated(){},激活所在组件触发</li><li>deactivated(){}，切换，离开组件时触发</li></ul></li></ul></li><li>组件内的导航守卫<ul><li>生命周期钩子同级:beforeRouteLeave(to,from,next){}</li></ul></li></ul></li><li><p>vue webpack 打包</p><ul><li>文件 <code>app.xxxx.js</code>：存放应用程序开发的所以js业务代码</li><li>文件 <code>vendor.xxxx.js</code>：存放第三方插件、库、包、框架</li><li>文件 <code>manifest.xxx.js</code>:为打包代码做底层支撑运行时代码，<code>相互依赖</code>、<code>导入导出</code>等功能的处理</li><li>路由懒加载<ul><li>程序运行时vendor、manifest必须要的，然而app却可以拆分</li><li>把不同路由对应组件分割开来,路由被访问到时再加载对应资源，更加高效</li></ul></li></ul></li><li><p>路由懒加载</p></li></ul><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=2&spm_id_from=pageDriver">地址</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>开发脚手架工具</title>
      <link href="/2023/07/22/web/tool/web-my-vuecli/"/>
      <url>/2023/07/22/web/tool/web-my-vuecli/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/liaozhongxun/lzo-cli.git">配套项目</a></p><ul><li>自定义终端命令<ul><li>创建并进入项目通过<code>npm init -y</code>初始化项目</li><li>打开<code>package.json</code>main指向是的入口文件</li><li>首行添加<code>#!/usr/bin/env node</code>,叫做:<code>shebang</code>,在当前电脑环境中找到node指令，更据node可执行文件执行当前文件后续代码</li><li><code>package.json</code>添加<code>bin:&#123;cmdname:&quot;index.js&quot;&#125;</code></li><li>终端执行<code>npm link</code>将<code>bin</code>与真正的环境变量做一个链接，就可以在终端输入<code>cmdname</code> 来执行<code>index.js</code> 这个文件<ul><li><code>npm link</code>后会在安装node安装文件加下( -g 安装 npm 包所在位置)自动创建<code>cmdname</code>可执行shell文件</li><li><code>npm install xxx -g</code> 默认执行 <code>npm link</code></li></ul></li></ul></li><li>配置参数 如:<code>cmdname --help</code>如何出来对应的信息<ul><li>安装第三方包:<code>commander</code> -&gt; <code>tj/commander.js</code></li></ul></li><li>创建cli模板 <code>cmdname create demo</code><ul><li><code>program.command</code>:创建指令</li><li><code>clone 模板项目</code><ul><li><code>download-git-repo</code>:第三方npm库，可在项目中cloen GitHub项目</li></ul></li><li>执行 <code>npm install</code></li></ul></li><li>创建组件<ul><li>创建ejs模板</li><li>定义一个指令 如<code>cmdname addcpn</code></li><li>出发 该指令的时候，编译模板，得到结果，写入指定位置文件中</li></ul></li><li>其他库<ul><li><code>open</code>:打开浏览器</li><li><code>inquirer</code>:选项</li></ul></li></ul><p>详细发布 lzo-nodejs 项目</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>包管理</title>
      <link href="/2023/07/22/web/tool/web-tool-pack/"/>
      <url>/2023/07/22/web/tool/web-tool-pack/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>包名</th><th align="center">作用</th><th>相似</th></tr></thead><tbody><tr><td>live-server</td><td align="center">web静态页面服务器（热更新）</td><td>puer</td></tr><tr><td><a href="https://www.npmjs.com/package/vue-json-views">vue-json-views</a></td><td align="center">页面中显示JSON树</td><td></td></tr></tbody></table><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><blockquote><p>npm初始化项目</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y  # 生成package.json</span><br></pre></td></tr></table></figure><blockquote><p>npm安装包</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="variable language_">module</span>-name --<span class="variable language_">global</span> | -g      <span class="comment">//全局安装 一般是工具</span></span><br><span class="line">npm install <span class="variable language_">module</span>-name --save | -S | 不加任何    <span class="comment">//自动把模块和版本号添加到dependencies(生产环境)部分</span></span><br><span class="line">npm install <span class="variable language_">module</span>-name --save-dev | -D   <span class="comment">//自动把模块和版本号添加到devDependencies(开发环境)部分,打包之后就没有用的依赖</span></span><br><span class="line"></span><br><span class="line">npm install||i <span class="comment">//项目中 npm install 下载当前目录下package.json的所有包</span></span><br><span class="line">npm i --production <span class="comment">//只安装生成环境的包</span></span><br><span class="line">npm i git+<span class="attr">ssh</span>:<span class="comment">//git项目地址 //安装git项目</span></span><br><span class="line"></span><br><span class="line">npm list <span class="comment">//依赖树</span></span><br><span class="line">npm list -g</span><br><span class="line"></span><br><span class="line">npm rebuild  <span class="comment">//强制重新安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看当前node全局安装路径</span></span><br><span class="line">npm config get prefix / npm root -g</span><br><span class="line"><span class="comment">//查看所有node版本公用全局安装路径</span></span><br><span class="line"> <span class="attr">C</span>:\<span class="title class_">Users</span>\<span class="title class_">Administrator</span>\<span class="title class_">AppData</span>\<span class="title class_">Roaming</span>\npm</span><br><span class="line"></span><br><span class="line">npm view jquery versions <span class="comment">//查看插件的所有版本 通过 jquery@x.x.x 安装指定版本</span></span><br><span class="line"></span><br><span class="line">npm updata <span class="comment">//将配置文件中各个插件未锁定的版本位更新到最新</span></span><br><span class="line"></span><br><span class="line">npm outdated <span class="comment">//查看过期包 (相同功能的第三方包 david)</span></span><br><span class="line"></span><br><span class="line">npm cache clean --force <span class="comment">//清除npm缓存，安装错误之后建议清一下再装</span></span><br><span class="line"></span><br><span class="line">npm config get registry  <span class="comment">//查看当前源</span></span><br><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org/  //设置淘宝源</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>安装生产环境依赖的模块，即项目运行时的模块，例如react，react-dom,vue,jQuery等类库或者框架<br>安装开发环境依赖的模块，即项目开发时的模块，例如babel、webpack等</p></blockquote><h3 id="npm-run-xxxx"><a href="#npm-run-xxxx" class="headerlink" title="npm run xxxx"></a>npm run xxxx</h3><blockquote><p>除了运行方便之外，script里还能执行 node_modules&#x2F;.bin 里的可执行文件软连接</p></blockquote><h4 id="npm-缓存策略-package-lock-json"><a href="#npm-缓存策略-package-lock-json" class="headerlink" title="npm 缓存策略 package-lock.json"></a>npm 缓存策略 package-lock.json</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get cache <span class="comment">//获取缓存存放位置</span></span><br></pre></td></tr></table></figure><p><a href="../../../static/img/npm-package-lock.jpg">npm 安装原理</a></p><h3 id="npm版本号"><a href="#npm版本号" class="headerlink" title="npm版本号"></a>npm版本号</h3><p>版本符号:<br>^x.x.x 开头，锁定主版本<br>~x.x.x 开头，锁定主版本和次版本<br>x.x.x  全部锁定<br>星号或x  升级最新版本</p><h3 id="标准版本号"><a href="#标准版本号" class="headerlink" title="标准版本号"></a>标准版本号</h3><p>16.7.1<br>    16 是它的 Major，主版本号，通常只有在重构、API不向下兼容时才会进行升级。<br>     7 是它的 Minor， 次版本号，通常在增加向下兼容新特性时升级此版本号。<br>     1 是它的 Patch，修订号，通常在发布向下兼容的问题修复时更新</p><h3 id="先行版本号（pre-release"><a href="#先行版本号（pre-release" class="headerlink" title="先行版本号（pre-release)"></a>先行版本号（pre-release)</h3><p>16.7.1-alpha.1      一个短横线 + 一个字符串组成<br>                    内测、 公测、 生产候选 等种版本形式<br>                    16.7.1-alpha.1 的版本号是 小于 16.7.1<br>                    16.7.1-alpha.1 是 16.7.1 的内测版本</p><p>约定的三种方式<br>    16.7.1-alpha.1 ：16.7.1 内测的第一个版本<br>    16.7.1-beta.1 ：16.7.1 灰度测试的第一个版本<br>    16.7.1-rc.1 ：16.7.1 生产候选的第一个版本</p><pre><code>16.7.1-alpha.1 &lt; 16.7.1-beta.1 &lt; 16.7.1-rc.1 &lt; 16.7.1</code></pre><p>vue@latest<br>    beta ： 灰度测试版本，当前匹配 3.2.34-beta.1<br>    latest ：3.2.37 最新正式版<br>    next ： 3.2.36 下一代版本（在vue4出来前暂时没啥用了）<br>    preview ： 3.0.3 预览版<br>    csp：内容安全版本<br>    legacy：历史稳定版</p><h3 id="自定义npm包"><a href="#自定义npm包" class="headerlink" title="自定义npm包"></a>自定义npm包</h3><ol><li>npmjs.com 注册账户</li><li>包的目录下npm adduser，输入用户名、密码、邮箱（源是<a href="https://registry.npmjs.org/%E6%89%8D%E8%A1%8C%EF%BC%89">https://registry.npmjs.org/才行）</a></li><li>npm publish</li></ol><h3 id="npm脚本"><a href="#npm脚本" class="headerlink" title="npm脚本"></a>npm脚本</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="string">&quot;node -v&quot;</span><span class="punctuation">,</span> <span class="comment">//值可设置一切命令行可运行的命令</span></span><br><span class="line">        <span class="attr">&quot;test1&quot;</span><span class="punctuation">:</span><span class="string">&quot;node ./script.js &amp; ./node script2.js&quot;</span><span class="punctuation">,</span> <span class="comment">//并行执行</span></span><br><span class="line">        <span class="attr">&quot;test2&quot;</span><span class="punctuation">:</span><span class="string">&quot;node ./script.js &amp;&amp; ./node script2.js&quot;</span><span class="punctuation">,</span> <span class="comment">//串行执行 script.js执行完才会执行2</span></span><br><span class="line">        <span class="attr">&quot;test3&quot;</span><span class="punctuation">:</span><span class="string">&quot;echo $npm_package_config_env&quot;</span><span class="punctuation">,</span> <span class="comment">//命令行中使用config定义的变量</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;envvalue&quot;</span> <span class="comment">//通过脚步运行js文件才能同过 process.env.npm_package_config_env 获取到</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">npm run test1 <span class="comment">//运行（start、test等可以简写不需要run）</span></span><br><span class="line">npm start</span><br><span class="line">npm test</span><br></pre></td></tr></table></figure><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><ul><li><a href="https://yarn.bootcss.com/docs/usage/">yarn</a></li><li><a href="https://www.jianshu.com/p/59e990b90483">简书</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn global add puer </span><br><span class="line">yarn global remove puer</span><br><span class="line"></span><br><span class="line">yarn global dir # 查看yarn全局安装模块路径</span><br></pre></td></tr></table></figure><h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h2><h2 id="nrm-访问源管理器"><a href="#nrm-访问源管理器" class="headerlink" title="nrm 访问源管理器"></a>nrm 访问源管理器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install nrm -g</span><br><span class="line"></span><br><span class="line">nrm ls //查看可用源</span><br><span class="line">nrm use taoba //切换源</span><br><span class="line">nrm test //测试速度</span><br></pre></td></tr></table></figure><h2 id="npx-npm5-2-新增自带"><a href="#npx-npm5-2-新增自带" class="headerlink" title="npx npm5.2 新增自带"></a>npx npm5.2 新增自带</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm 5.2后自带</span></span><br><span class="line">npx gulp -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认先找项目中是否有gulp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再找本地全局是否有gulp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">都没有的话会自带下载gulp，存在临时文件夹中用完自动销毁</span></span><br><span class="line"></span><br><span class="line">npx --no-install gulp -v # 只能有本地的不允许自动安装</span><br><span class="line">npx --ignore-existing gulp -v # 只能直接安装，不允许使用本地安装的版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建工具 webpack</title>
      <link href="/2023/07/22/web/tool/web-tool-webpack/"/>
      <url>/2023/07/22/web/tool/web-tool-webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>一切都是模块</li><li>指定一个入口，关联<code>.hbs、.js、.jpg、sass、es6、...</code>等个种模块和依赖串在一起</li><li>编译成浏览器认识的目标文件<code>.js、.css、jpg、png</code>(static assets)</li><li>web(<code>浏览器</code>) pack(<code>打包</code>) 就是一个模块打包的工具，</li><li><code>模块化</code>就是文件之间自成作用域，互不影响，只能通过<code>导入导出</code>方式，相互关联</li><li><code>打包</code>就是可以处理所以模块的<code>依赖关系</code>，将所以的<code>导入导出</code>形成一个<code>关系网</code>,生成<code>浏览器识别</code>的程序</li><li>webpack 是一个的基于<code>nodejs平台</code>开发的<code>工程化工具</code><ul><li>webpack<code>依赖nodejs</code>，<code>npm</code>帮助<code>node</code>管理各种包</li></ul></li><li>与 gulp&#x2F;grunt 的区别<ul><li>gulp&#x2F;grunt <code>前端自动任务管理工具</code>，处理一个一个配置好的<code>任务(task)</code></li><li>适用范围:<code>简单依赖关系</code>、<code>不需要模块化</code>、项目只需要一些<code>合并压缩</code>等操作的项目</li></ul></li><li>支持CommonJS、es6、AMD、CMD模块化规范都支持</li></ul><p><a href="https://v4.webpack.docschina.org/">webpack4 官网</a><br><a href="https://v4.webpack.docschina.org/plugins/">webpack4 官方插件</a></p><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><p>步骤:</p><ul><li>安装 webpack 、 webpack-cli(因为项目依赖的版本可能不同，所以一般很少用全局的)</li><li>需要 html 入口: 安装 html-webpack-plugin</li><li>需要服务：webpack-dev-server</li><li>需要复制: copy-webpack-plugin</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li><p><code>loader</code></p><ul><li><code>webpack</code>功能有限，很多东西都<code>不认识</code>，<code>loader</code>就相当于他的扩展</li><li><code>样式类</code><ul><li><code>style-loader[插入到页面],css-loader[认识加载样式文件],sass-loader....</code></li></ul></li><li><code>图片类</code><ul><li><code>url-loader</code>:显示图片，并设置多大的可以转base64</li><li><code>必须安装file-loader</code>来处理大于指定大小不转base64的图片</li></ul></li></ul></li><li><p><code>vue</code>配置</p><ul><li>安装vue<ul><li>版本<ul><li><code>runtime-only</code>:代码中不能有任何template， 包括<code>el:#app</code></li><li><code>runtime-compiler</code>:compiler可以编译template,所以这个版本可以有template</li><li><code>vue$:&quot;vue/dist/vue.esm.js&quot;</code>:alias中配置，指定使用compiler版本</li></ul></li></ul></li></ul></li><li><p><code>Plugin 插件</code></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack·</title>
      <link href="/2023/07/22/web/tool-coder/coder-webpack/"/>
      <url>/2023/07/22/web/tool-coder/coder-webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir coder-webpack</span><br><span class="line">cd coder-webpack</span><br><span class="line">npm init</span><br><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认：webpack.config.js</span></span><br><span class="line"><span class="comment"> * 指定：--config dev.config.js</span></span><br><span class="line"><span class="comment"> * webpack基于node运行，配置文件使用的是CommonJS语法，入口js文件是用的浏览器的，使用的是 import 方式es6语法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 打包: npx webpack(node_modules/.bin) =&gt; 找到配置文件 =&gt; 从入口文件开始对项目进行打包 </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="配置文件属性"><a href="#配置文件属性" class="headerlink" title="配置文件属性"></a>配置文件属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mode：模式(&#x27;none&#x27;|&#x27;development&#x27;|&#x27;production 默认&#x27;)</span></span><br><span class="line"><span class="comment"> *       影响 process.env.NODE_ENV 的值,不同模式会添加一些默认配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * entry：入口文件配置</span></span><br><span class="line"><span class="comment"> * output：出口文件配置</span></span><br><span class="line"><span class="comment"> * devtool: 生产 &quot;source-map&quot;，开发默认 &quot;eval&quot;</span></span><br><span class="line"><span class="comment"> *         1、设置devtool值 2、将打包后的.map文件一起发布 </span></span><br><span class="line"><span class="comment"> *         3、控制台/设置/Preference/sources/Enable JavaScript(CSS) source maps 勾选</span></span><br><span class="line"><span class="comment"> *         source-map 压缩处理后代码映射回原始文件,影响打包性能 </span></span><br><span class="line"><span class="comment"> *   解决经过丑化、压缩、编译后代码结构不一样，无法定位保存准确位置的问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据可视化话 - css3</title>
      <link href="/2023/07/22/web/visualization/day01-css3/"/>
      <url>/2023/07/22/web/visualization/day01-css3/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>  优点</p></blockquote><p>数据可视化主要指借助与<strong>图形化</strong>的手段，清晰有效的<strong>传达与沟通信息</strong></p><p>数据可视化通常用<strong>柱状图</strong>、<strong>折线图</strong>、<strong>饼图</strong>、<strong>玫瑰图</strong>、<strong>散点图</strong>等图形来<strong>传递信息</strong></p><p>也可以使用<strong>点</strong>、<strong>线</strong>、<strong>面</strong>、<strong>地图</strong>来对<strong>数字数据</strong>进行<strong>编码</strong>展示，在视觉上传达关键信息</p><p>可视化可以帮助用户<strong>分析与推理数据</strong>，让复杂数据更容易理解与使用</p><blockquote><p>  发展历史</p></blockquote><p><strong>18世纪</strong>就开始有有人手绘<strong>柱状图、折线图这些</strong>可视化图形表了</p><p>随着<strong>计算机应用</strong>的发展，数理统计把<strong>数据可视化</strong>变成可一门<strong>科学</strong>（<strong>计算机图形学</strong>、<strong>统计学</strong>、<strong>分析学</strong>），并运用到各个行业</p><blockquote><p>  可视化-实现方案</p></blockquote><ul><li>前端可视化技术<ul><li>底层图形引擎：<code>Skia</code>、<code>OpenGL</code>  （一级）<ul><li><code>2D</code>、<code>2.5D</code>大多基于<code>Skia</code>，也能绘制3D</li><li><code>3D</code>、游戏、绘图软件等大多基于<code>OpenGL</code></li></ul></li><li><code>W3C</code>提供：<code>CSS3</code>、<code>Canvas</code>、<code>SVG</code>、<code>WebGL</code>  （二级）<ul><li><code>canvas</code>和<code>svg</code>就是基于<code>Skia</code>的，<code>WebGL</code>则底层基于<code>OpenGL</code>实现</li></ul></li><li>JavaScript 第三方插件动画库，基于<code>W3C</code>提供的这些技术来实现 （三级）<ul><li><code>ZRender</code> 可以选择使用 <code>Canvas</code> 或 <code>SVG</code> </li><li><code>Echarts</code> 基于 <code>ZRender</code> ，通过<strong>配置</strong>绘制 柱状图、折线图等</li><li><code>AntV</code> 包括 <code>G2、G3、G6、G7</code>等</li><li><code>Highcharts</code> 和 <code>Echarts</code> 类似，因为收费的，提供更全的一些东西</li><li><code>D3.js</code> 比<code>Echarts</code> 更加灵活 ，通过<code>js实现绘制</code> 它们的关系犹如 Vue2 和 React，一个通过配置，一个通过函数</li><li><code>Three.js</code>   基于 <code>WebGL</code>（规矩需要CAD设计思想，懂一些3d概念才会写，镜头、摄像机、灯光、材质、场景等概念）</li><li>百度地图 、高德地图等</li></ul></li><li>低代码可视化平台：阿里云（<code>DataV</code>）、腾讯云图、网易有数等<ul><li>通过地代码，基本不需要写代码，买来就能开发者可视化页面</li><li>使用模板 或 通过一些控件拉取，拼接成一个大屏页面</li></ul></li></ul></li></ul><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><blockquote><p>坐标系</p></blockquote><p><strong>X轴</strong>：中心点向左， <strong>Y轴</strong>：中心点向下(与数学相反)， <strong>Z轴</strong>： 垂直屏幕</p><p>所有动画都是要参照于坐标系的，<code>transform</code> 属性变化的元素 会受到 <code>transform-origin</code> 影响，改变形变的<strong>原点</strong></p><p>css元素<strong>默认</strong>坐标系<strong>原点</strong>在左上角，通过<code>transform</code>时， <code>transform-origin 默认 50% 50%</code>,  坐标系<strong>原点</strong>会默认变为元素<strong>中心点</strong></p><p><code>transform</code> 会是坐标系发送倾斜，后期动画都是基于最新坐标系进行运动的</p><blockquote><p>2D动画</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span> 旋转 缩放 倾斜 平移 给某个元素实现<span class="number">2</span>D形变</span><br><span class="line"><span class="attribute">transform-origin</span> 设置原点 <span class="attribute">left</span> == <span class="number">0</span> <span class="number">50%</span></span><br></pre></td></tr></table></figure><blockquote><p>  3D动画</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(x,y,z) <span class="comment">/* 所有涉及到3d 的属性 都会启用计算机的GPU提高性能速度 */</span></span><br><span class="line">transform: <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">45deg</span>) == <span class="built_in">rotateZ</span>(<span class="number">45deg</span>) <span class="comment">/* 轴轴旋转45 角度  */</span></span><br><span class="line">transform: <span class="built_in">translate3d</span>(<span class="number">100px</span>,<span class="number">0</span>,<span class="number">0</span>) ==   <span class="built_in">translateX</span>(<span class="number">100px</span>)</span><br><span class="line">transform: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>) == <span class="built_in">scaleX</span>(<span class="number">2</span>) <span class="comment">/* 1倍 保持不变 */</span></span><br></pre></td></tr></table></figure><blockquote><p>   3D 透视  perspective</p></blockquote><p>定了<strong>观察者</strong>与<strong>z&#x3D;0(平面)<strong>的距离，使具有</strong>三维位置变换</strong>的元素产生**透视效果(近大远小)**，</p><p><strong>z&gt;0</strong> 的三维元素比正常的大，而 <strong>z&lt;0</strong> 时则比正常的小，大小程度有具体值绝对 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 形变元素父元素定义透视属性效果 */</span></span><br><span class="line"><span class="attribute">perspective</span>:<span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 形变元素自身定义透视属性效果 */</span></span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">200px</span>) <span class="built_in">translateX</span>(<span class="number">199px</span>); <span class="comment">/* 这时就直接粘着眼睛了，这个屏幕都是这个元素 */</span></span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">200px</span>) <span class="built_in">translateX</span>(<span class="number">201px</span>); <span class="comment">/* 元素到眼睛后面，就看不见了 */</span></span><br></pre></td></tr></table></figure><blockquote><p>  3D 空间  transform-style</p></blockquote><p>设置元素的子元素是处于什么空间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 父元素设置 */</span></span><br><span class="line"><span class="attribute">transform-style</span>:flat <span class="comment">/*2D空间平面*/</span></span><br><span class="line">transform-style:preserve-<span class="number">3</span>d <span class="comment">/*3D空间 否则无法看出3d的感觉 不仅在父集元素放大缩小，还会会穿过平面*/</span></span><br></pre></td></tr></table></figure><blockquote><p>  3D 背面可见性</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 变形元素的属性，变形元素背面朝向用户时，是否内容可见 */</span></span><br><span class="line"><span class="attribute">backface-visibility</span>:visible; </span><br><span class="line"><span class="attribute">backface-visibility</span>:hidden;</span><br></pre></td></tr></table></figure><h3 id="动画性能优化"><a href="#动画性能优化" class="headerlink" title="动画性能优化"></a>动画性能优化</h3><p><img src="D:\MyData\projects\lzo-docs-blog\static\img\2022-12-06_231445.jpg"></p><p>谷歌浏览器 console 下面三个点 –&gt; more tools –&gt; layers 查看动画图层</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据可视化话 - canvas</title>
      <link href="/2023/07/22/web/visualization/day02-canvas/"/>
      <url>/2023/07/22/web/visualization/day02-canvas/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>2004</strong> 年引入，首先被<strong>火狐</strong>和<strong>Chrome</strong>实现，被<strong>W3C提议为</strong>下一代标准，最后成为<code>Html5</code>的一个<strong>标签</strong></p><p>提供很多<strong>JavaScript绘图API</strong>，配合 <code>canvas</code> 元素<strong>主要绘制</strong>各种<strong>2D图形</strong></p><p>也能使用<code>canvas</code> 提供的 <code>WebGL API</code> 绘制一些 <strong>3D 图形</strong></p><p>应用场景</p><p>​<strong>动画</strong>、<strong>游戏画面</strong>、<strong>数据可视化</strong>、<strong>图片编辑</strong>、<strong>视频处理</strong>等</p><p>兼容性</p><p>​<strong>不支持 IE8</strong></p><p>缺点</p><p>​     <strong>占内存</strong>、<strong>只能通过JavaScript脚本操作</strong>、<strong>放大像素话(模糊失真)</strong></p><h3 id="canvas标签"><a href="#canvas标签" class="headerlink" title="canvas标签"></a>canvas标签</h3><ul><li><code>canvas</code> 标签只有<code>width</code>和<code>height</code>两个属性，默认300 和 150</li><li>必须有结束标签</li><li>通过<code>canvas.getContext()</code> 方法检测浏览器是否支持</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&#x27;canvas1&#x27;</span>&gt;</span>不兼容显示这里提示文字<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*  */</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* 获取canvas容器  */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> can = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        can.<span class="property">width</span> = <span class="string">&#x27;1000&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        can.<span class="property">height</span> = <span class="string">&#x27;150&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * 创建一个画布, </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         *     ctx 绘图上下文，提供绘图指令，通过 ctx 在画布上各种绘制</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ctx = can.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">/* 2d 或 webgl */</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>  canvas 的坐标系统</p></blockquote><p>canvas画布默认被<strong>网格(坐标系)覆盖</strong>，一个单元相当于 canvas元素的一像素，<strong>网格原点</strong>默认位于<strong>左上角 0,0</strong></p><p><strong>所有绘制</strong>都相对于<strong>原点</strong>，图形变换后，绘制都基于新的坐标系</p><h3 id="绘制api"><a href="#绘制api" class="headerlink" title="绘制api"></a>绘制api</h3><p>两种绘制方式：<strong>矩形绘制</strong> 和 <strong>路径绘制（点列表，通过线段连接）</strong></p><p>矩形的绘制方法类型：<strong>fill 开头</strong>的方法，得到一个<strong>实心的矩形</strong>，<strong>stroke 开头</strong>的方法，得到一个矩形<strong>边框或描边</strong></p><blockquote><p>  矩形绘制</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&#x27;canvas1&#x27;</span>&gt;</span>不兼容显示这里提示文字<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*  */</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> can = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        can.<span class="property">width</span> = <span class="string">&#x27;1000&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        can.<span class="property">height</span> = <span class="string">&#x27;150&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ctx = can.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">         </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* 1、设置绘制样式 */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* 2、绘制，指定位置与绘制范围 */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* 3、清除，指定清除的位置与清除范围 */</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据可视化话 - svg</title>
      <link href="/2023/07/22/web/visualization/day03-svg/"/>
      <url>/2023/07/22/web/visualization/day03-svg/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>SVG</strong> 全称 <strong>可缩放的矢量图形</strong></p><p>​矢量定义：既有大小，又有方向的量，物理称为<strong>矢量</strong>，数学称为<strong>向量</strong>，<strong>计算机</strong>中矢量图是可以<strong>无损无限放大的</strong></p><p>​矢量图像：基于<strong>点</strong>、<strong>线</strong>、<strong>形状</strong>和<strong>数学公式</strong>来构建的<strong>图形</strong>，不是像素组成，不会失真</p><p>​光栅图像：由像素点构成的图形，大量像素点组成高清图形，相同范围内，像素越多，质量越高</p><p><strong>SVG</strong> 是一种<strong>基于XML格式</strong>的<strong>矢量图</strong>，主要用于<strong>定义二维图形</strong>，支持<strong>交互</strong>和<strong>动画</strong></p><p>​基于 XML 的SVG，可用文本编辑器、图形编辑器 <strong>创建和编辑</strong>，可在<strong>浏览器直接显示</strong></p><p>​图形编辑器，导出为SVG文件，就可以通过代码导入或封装成组件使用</p><p><strong>SVG兼容性</strong>  除了IE 基本可以使用</p><p><strong>SVG 优点</strong></p><p>​1、可以在不失真的情况下缩放，压缩</p><p>​2、灵活：可以结合语言技术一起使用，包括CSS、JavaScript、HTML、<strong>SMIL（做动画语言）</strong>，可以<strong>集成到DOM中</strong></p><p>​        3、轻量级：相对png、jpg哪些小很多</p><p>​        4、可打印</p><p>​        5、SEO友好</p><p>​        6、可压缩</p><p><strong>SVG 缺点</strong></p><p>​1、适合做 简单、类似logo的图标，不适合用于高清图片</p><p>​        2、图形复杂时候，加载比较慢</p><p>​        3、比较弱IE8级以下</p><p><strong>SVG 应用场景</strong></p><p>​1、实例图标、logo、几何设计等</p><p>​        2、适合多种尺寸屏幕展示</p><p>​        3、和js交互，制作线条动画、过度和其他复杂动画</p><p>​        4、和css交互，可以使用自己内置的 <strong>SMIL 动画</strong></p><p>​        5、时候制作各种图表（柱状图、折线图…）、大屏可视化开发、2.5D动画、页面加载动图</p><p><strong>SVG 历史版本</strong></p><p>​SVG1.x 版本  （2001.9.4 W3C推荐标准）</p><p>​<strong>SVG 1.1</strong>、<strong>SVG Tiny 1.2</strong></p><p>​SVG2.x 版本  （2016.9.15 W3C推荐标准，目前主流使用）</p><p>​对比 SVG1.x 版本</p><p>​删除了 baseProfile 和 version 属性</p><p>​宽高未设置 自动添加 auto 属性</p><p>​。。。。。</p><p><strong>对比 Canvas</strong></p><p>缩放不失真、任何分辨率高质量打印、复杂图像渲染更慢、结合代码更灵活  &#x3D;&#x3D;&#x3D;&#x3D;&gt;  canvas相反</p><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><blockquote><p>  和canvas类似，原点位于左上角，被称为<strong>初始视口坐标系</strong></p></blockquote><blockquote><p>  svg 的 transform 属性 可以用来<strong>移动</strong>、<strong>旋转</strong>、<strong>缩放</strong>某个元素，变形后，该元素内部回建立一个<strong>新的坐标系</strong>，后续所有变化，默认<strong>基于新创建的坐标系</strong></p></blockquote><h2 id="绘制SVG"><a href="#绘制SVG" class="headerlink" title="绘制SVG"></a>绘制SVG</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><blockquote><p>在一个单独svg文件中绘制，svg文件可直接在浏览器预览或嵌入到HTML中 </p></blockquote><p>步骤</p><p>​新建svg文件</p><p>​    编写svg元素 &#x3D;&#x3D;&gt; width&#x2F;height  命名空间 <strong>xmlns</strong></p><p>​svg元素添加图形</p><p>​    浏览器预览</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DTD 声明 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standalone=&quot;no|yes&quot;  no不是独立的，表示依赖外部DTD声明(外链)，yes独立的，不依赖  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DTD声明 语法验证xml语法是否符合指定规范  --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">svg</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD SVG 1.1//EN&quot;</span> <span class="string">&quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面都可以省略--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我是svg title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><blockquote><p>直接在HTML文件中使用svg元素绘制</p></blockquote><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><blockquote><p>直接使用JavaScript代码来生成svg矢量图（不推荐）</p></blockquote><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><blockquote><p>通过矢量图编辑工具导出</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建工具 gulp</title>
      <link href="/2023/07/22/web/tool/web-tool-gulp/"/>
      <url>/2023/07/22/web/tool/web-tool-gulp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于文件流的任务管理系统,将一个一个单独的任务，编成一个任务队列，通过同步或异步的形式执行<br>一个任务，输出一个目标，中间可以插入很多插件<br>gulp 是一个基于nodejs的任务关联工具</p></blockquote><p>开启gulp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure><p>在普通项目中使用<a href="https://github.com/liaozhongxun/lzo-gulp">我的gulp demo</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm init -y  //初始化项目的npm配置文件</span><br><span class="line">npm install -D gulp //安装gulp到本地项目(仅开发使用 -D)</span><br><span class="line">npm install -D gulp-autoprefixer  //安装gulp相关插件</span><br><span class="line">npm install -D gulp-rename  //重名插件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建配置文件gulpfile.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gulpfile.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>),</span><br><span class="line">    autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;gulp-autoprefixer&#x27;</span>),</span><br><span class="line">    rename = <span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;t1&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">//t1任务名</span></span><br><span class="line">    gulp.<span class="title function_">src</span>(<span class="string">&#x27;./css/**/*.css&#x27;</span>) <span class="comment">//处理文件的位置</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">autoprefixer</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">rename</span>(&#123;</span><br><span class="line">        <span class="attr">suffix</span>:<span class="string">&quot;.min&quot;</span>,</span><br><span class="line">        <span class="attr">extname</span>:<span class="string">&quot;.css&quot;</span> <span class="comment">//文件扩展名</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./dist/&#x27;</span>))  <span class="comment">//最终文件输出位置</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//命令喊执行任务</span></span><br><span class="line">gulp t1</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="/2023/07/22/web/style/style-css3/"/>
      <url>/2023/07/22/web/style/style-css3/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS3新增属性"><a href="#CSS3新增属性" class="headerlink" title="CSS3新增属性"></a>CSS3新增属性</h3><p>xxx<br>xxx<br>xxx</p><h3 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h3><h4 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h4><blockquote><p>设备屏幕尺寸是指屏幕<strong>对角线的长度</strong>， 1英寸&#x3D;2.54cm   </p></blockquote><p><a href="https://screensiz.es/">查看大部分设备尺寸</a></p><h4 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h4><blockquote><p>屏幕分辨率是指屏幕的<strong>逻辑像素点 数</strong></p></blockquote><h4 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h4><p><a href="https://segmentfault.com/a/1190000011586301">参考资料</a></p><ul><li><strong>物理像素</strong></li></ul><blockquote><p>  1366x768设备屏幕的物理像素是指横向1366与纵向768个发光的点组成的设备屏幕</p></blockquote><p>物理像素|设备像素dp(device pixels)<br>设备固定属性，设备像素是固定不变的</p><hr><ul><li><strong>css逻辑像素</strong></li></ul><p>逻辑像素|css像素<br>css像素是一个相对单位。<br>相对不同屏幕，其实际像素大小不同。<br>我们定义时，是定义其逻辑像素。即该图要用多少个像素来显示。</p><hr><ul><li><strong>设备像素比DPR</strong></li></ul><p>设备像素比DPR(devicePixelRatio)<br>设备像素&#x2F;(CSS像素|独立像素)<br>DPR &#x3D; 1 设备像素与css像素相等<br>DPR &#x3D; 2 设备像素是css像素两倍<br>dpr可通过window.devicePixelRatio获取</p><hr><ul><li><strong>viewport 视口</strong><ul><li>布局视口（layout viewport）<ul><li>布局视口定义了pc网页在移动端的默认布局行为</li><li>布局视口<code>默认为980px</code>。也就是说在<code>不设置网页的viewport</code>的情况下，pc端的网页<code>默认</code>会以布局视口为基准，在移动端进行展示</li></ul></li><li>视觉视口（visual viewport）<ul><li>视觉视口表示浏览器内看到的<code>网站的显示区域</code></li><li>用户可以通过缩放来改变视觉视口</li></ul></li><li>理想视口（ideal viewport）<ul><li><code>理想视口</code>或者说<code>分辨率</code>就是给定设备物理像素的情况下，最佳的“布局视口”。</li></ul></li><li><a href="https://juejin.cn/post/6844903630655471624#heading-0">https://juejin.cn/post/6844903630655471624#heading-0</a></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mate</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    width=device-width 可视区宽度等于设备显示屏幕宽度</span></span><br><span class="line"><span class="comment">    user-scalable=no   不允许用户手动缩放</span></span><br><span class="line"><span class="comment">    initial-scale=1    初始比例设置100%</span></span><br><span class="line"><span class="comment">    minimum-scale      最小缩放比例(user-scalable=no 不生效)</span></span><br><span class="line"><span class="comment">    maximum-scale      最大缩放比例(user-scalable=no 不生效)</span></span><br><span class="line"><span class="comment">    viewport:</span></span><br><span class="line"><span class="comment">        (1) 一个三百多像素屏幕，打开一个PC页面，要放置一个1000多像素的页面，会混乱，所以会手机浏览器虚拟一个980像素的页面，再进行缩放</span></span><br><span class="line"><span class="comment">        (2) 所以开发移动端时设置width=device-width，把980设置成设备的宽度</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 设备宽度小于 <span class="number">960px</span> 时 <span class="selector-tag">body</span>背景变红</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">960px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">      <span class="attribute">background-color</span>:<span class="number">#F00</span>；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在 screen 类型 小于 240px 或 大于360px 小于 700px 加载 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">240px</span>), (<span class="attribute">min-width</span>: <span class="number">360px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">700px</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span> screen &#123;</span><br><span class="line">    xxxx</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen&#123;</span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设备类型:</span></span><br><span class="line"><span class="comment">all、screen、print ...</span></span><br><span class="line"><span class="comment">运算符</span></span><br><span class="line"><span class="comment">not、and、only、逗号</span></span><br><span class="line"><span class="comment">常见功能属性</span></span><br><span class="line"><span class="comment">height                  输出设备中的页面可见区域高度。</span></span><br><span class="line"><span class="comment">        width                   输出设备中的页面可见区域宽度。</span></span><br><span class="line"><span class="comment">        max-aspect-ratio        输出设备的屏幕可见宽度与高度的最大比率。</span></span><br><span class="line"><span class="comment">        max-device-aspect-ratio 输出设备的屏幕可见宽度与高度的最大比率。</span></span><br><span class="line"><span class="comment">        max-device-height       输出设备的屏幕可见的最大高度。</span></span><br><span class="line"><span class="comment">        max-device-width        输出设备的屏幕最大可见宽度。</span></span><br><span class="line"><span class="comment">        max-height              输出设备中的页面最大可见区域高度。</span></span><br><span class="line"><span class="comment">        max-width               输出设备中的页面最大可见区域宽度。</span></span><br><span class="line"><span class="comment">        min-height              输出设备中的页面最小可见区域高度。</span></span><br><span class="line"><span class="comment">        min-width               输出设备中的页面最小可见区域宽度。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">1</span>、标签中 </span><br><span class="line">&lt;source media=&quot;(<span class="attribute">min-width</span>: <span class="number">650px</span>)<span class="string">&quot; srcset=&quot;</span>demo.jpg<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 2、样式中</span></span><br><span class="line"><span class="string">@media only screen&#123;</span></span><br><span class="line"><span class="string">    xxx</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 3、样式标签</span></span><br><span class="line"><span class="string">&lt;style media=&quot;</span>(min-width: <span class="number">500px</span>)<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">  .box &#123;</span></span><br><span class="line"><span class="string">    background-color: red;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 4、第三方文件</span></span><br><span class="line"><span class="string">@import url(./index.css) (min-width:350px);</span></span><br></pre></td></tr></table></figure><h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">百分比</span></span><br><span class="line"><span class="comment">    width/height(百分比值):相对于父元素</span></span><br><span class="line"><span class="comment">    left/right:position非static的上级元素宽度</span></span><br><span class="line"><span class="comment">    top/bottom:position非static的上级元素高度</span></span><br><span class="line"><span class="comment">    定位元素 padding/margin:position非static 直接父亲元素的width，height无关</span></span><br><span class="line"><span class="comment">    非定位元素 padding/margin:直接父亲元素的width，而与父元素的height无关</span></span><br><span class="line"><span class="comment">    border-radius/translate/background-size等:相对于自生宽度</span></span><br><span class="line"><span class="comment">百分比布局缺点</span></span><br><span class="line"><span class="comment">宽高相对父元素不一致，计算困难</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="vw适配方案"><a href="#vw适配方案" class="headerlink" title="vw适配方案"></a>vw适配方案</h4><p><a href="https://github.com/liaozhongxun/lzo-webfit-postpxtoviewport">Github案例</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算公式:元素宽度(75px)/设计稿宽度(750px)*100 vw */</span></span><br></pre></td></tr></table></figure><h4 id="rem-适配方案"><a href="#rem-适配方案" class="headerlink" title="rem 适配方案"></a>rem 适配方案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设计稿尺寸/rootValue(基准大小) =&gt; 得到rem大小，rem大小*根字体大小 =&gt; 得到设备显示的具体像素大小 */</span></span><br></pre></td></tr></table></figure><ul><li>rem只相对于浏览器的根元素（HTML元素）的font-size</li><li>在响应式布局中，必须通过js来动态控制根元素font-size的大小。</li><li>必须将改变font-size的代码放在css样式之前。</li><li>算法: <code>设计稿尺寸/rootValue(基准大小)</code> 得到rem大小，<code>rem大小*根字体大小</code>得到设备的具体像素大小</li><li>如果<code>基准翻倍</code>，html<code>字体翻倍</code>，得到的<code>rem值缩小一半</code>，最终设备得到像素大小<code>不变</code></li></ul><h5 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h5><p><a href="https://github.com/liaozhongxun/lzo-webfit-pxtorem-vue2">Github案例</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.通过 vue init webpack my-project 搭建vue2 webpack项目</span></span><br><span class="line"><span class="comment">2.映入rem文件动态设置html的字体大小</span></span><br><span class="line"><span class="comment">import &quot;./rem&quot;;</span></span><br><span class="line"><span class="comment">3.安装 postcss-pxtorem@5.1.1</span></span><br><span class="line"><span class="comment">4..postcssrc.js 配置 postcss-pxtorem</span></span><br><span class="line"><span class="comment">----------------------------------------------.postcssrc.js</span></span><br><span class="line"><span class="comment">module.exports = &#123;</span></span><br><span class="line"><span class="comment">  &quot;plugins&quot;: &#123;</span></span><br><span class="line"><span class="comment">    &quot;postcss-pxtorem&quot;: &#123; </span></span><br><span class="line"><span class="comment">          rootValue: 16, //结果为：设计稿元素尺寸/16，比如元素宽320px,最终页面会换算成 20rem</span></span><br><span class="line"><span class="comment">          rootValue: 32, //结果为：设计稿元素尺寸/32，比如元素宽750px,最终页面会换算成 23.4375rem</span></span><br><span class="line"><span class="comment">          propList: [&quot;*&quot;], //是一个存储哪些将被转换的属性列表，这里设置为[&#x27;*&#x27;]全部，假设需要仅对边框进行设置，可以写[&#x27;*&#x27;, &#x27;!border*&#x27;]</span></span><br><span class="line"><span class="comment">          unitPrecision: 5, //保留rem小数点多少位</span></span><br><span class="line"><span class="comment">          selectorBlackList: [&#x27;.radius&#x27;],  //则是一个对css选择器进行过滤的数组，比如你设置为[&#x27;fs&#x27;]，那例如fs-xl类名，里面有关px的样式将不被转换，这里也支持正则写法。</span></span><br><span class="line"><span class="comment">  selectorBlackList: [/^(?!\.mrms-).*斜杠], //只要不是.mrms-开头的类都排除，保留px</span></span><br><span class="line"><span class="comment">  selectorBlackList: [/^(?!\.(mrms|ivu)-).*斜杠], // 只要不是.mrms-或.ivu-开头的类都排除，保留px</span></span><br><span class="line"><span class="comment">          replace: true, //是否直接替换</span></span><br><span class="line"><span class="comment">          mediaQuery: false, //媒体查询( @media screen 之类的)中不生效</span></span><br><span class="line"><span class="comment">          minPixelValue: 12, //px小于12的不会被转换</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">-----------------------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.项目中按ui稿正常填写像素大小，解析后自动转为rem单位</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rem.js</span></span><br><span class="line"><span class="comment">// 基准大小</span></span><br><span class="line"><span class="keyword">const</span> baseSize = <span class="number">32</span>; <span class="comment">//与 post-pxtorem 的 rootValue 一致</span></span><br><span class="line"><span class="comment">// 设置 rem 函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setRem</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 当前页面宽度相对于 750 宽的缩放比例，可根据自己需要修改。</span></span><br><span class="line">  <span class="comment">// iPhone678 375，baseSize为32,这是 得到跟节点大小为 16px</span></span><br><span class="line">  <span class="keyword">const</span> scale = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> / <span class="number">750</span>;</span><br><span class="line">  <span class="comment">// 设置页面根节点字体大小</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> =</span><br><span class="line">    baseSize * <span class="title class_">Math</span>.<span class="title function_">min</span>(scale, <span class="number">2</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="title function_">setRem</span>();</span><br><span class="line"><span class="comment">// 改变窗口大小时重新设置 rem</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setRem</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h5><blockquote><p>  <code>.postcssrc.js</code> 改为 <code>postcss.config.js</code></p></blockquote><p><a href="https://github.com/liaozhongxun/lzo-webfit-pxtorem">Github</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.通过 vue create 项目名称</span></span><br><span class="line"><span class="comment">2.映入rem文件动态设置html的字体大小</span></span><br><span class="line"><span class="comment">import &quot;./rem&quot;;</span></span><br><span class="line"><span class="comment">3.安装 postcss-pxtorem@5.1.1</span></span><br><span class="line"><span class="comment">4.postcss.config.js 配置 postcss-pxtorem</span></span><br><span class="line"><span class="comment">----------------------------------------------.postcssrc.js</span></span><br><span class="line"><span class="comment">module.exports = &#123;</span></span><br><span class="line"><span class="comment">    &quot;postcss-pxtorem&quot;: &#123;</span></span><br><span class="line"><span class="comment">        rootValue: 32</span></span><br><span class="line"><span class="comment">xxx</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-----------------------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.项目中按ui稿正常填写像素大小，解析后自动转为rem单位</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="移动端常用默认样式"><a href="#移动端常用默认样式" class="headerlink" title="移动端常用默认样式"></a>移动端常用默认样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span> &#123;</span><br><span class="line">    -webkit-tap-highlight-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">/*清除点击阴影*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  -webkit-appearance: none; <span class="comment">/*清除ios圆角*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>; <span class="comment">/*清除ios输入框默认圆角*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  -webkit-user-select: none; <span class="comment">/*禁止选中文字*/</span></span><br><span class="line">  <span class="attribute">font-family</span>: helvetica; <span class="comment">/*默认字体*/</span></span><br><span class="line">  -webkit-text-size-adjust: <span class="number">100%</span>; <span class="comment">/*用户横竖屏切换的时候，禁止字体缩放*/</span></span><br><span class="line">  <span class="attribute">font-family</span>: helvetica; <span class="comment">/*默认字体*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样式关联配置"><a href="#样式关联配置" class="headerlink" title="样式关联配置"></a>样式关联配置</h3><h4 id="vue2-全局scss变量配置"><a href="#vue2-全局scss变量配置" class="headerlink" title="vue2 全局scss变量配置"></a>vue2 全局scss变量配置</h4><ol><li>去除<code>webpack.base.conf.js</code>的scss配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">    <span class="attr">loaders</span>: [<span class="string">&quot;style&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;sass&quot;</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>进入<code>build/utils</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveResouce</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src/assets/styles/&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">generateLoaders</span>(<span class="params">loader, loaderOptions</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> loaders = [</span><br><span class="line">            cssLoader,</span><br><span class="line">            <span class="comment">//添加部分1</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;sass-resources-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="comment">//这是用到的sass文件，多个文件时用数组的形式传入，这是带有变量和mixin的scss文件</span></span><br><span class="line">                    <span class="attr">resources</span>: [<span class="title function_">resolveResouce</span>(<span class="string">&quot;global-style.scss&quot;</span>)],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">if</span> (loader) &#123;</span><br><span class="line">            loaders.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">loader</span>: loader + <span class="string">&quot;-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>: <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, loaderOptions, &#123;</span><br><span class="line">                    <span class="attr">sourceMap</span>: options.<span class="property">sourceMap</span>,</span><br><span class="line">                &#125;),</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Extract CSS when that option is specified</span></span><br><span class="line">        <span class="comment">// (which is the case during production build)</span></span><br><span class="line">        <span class="keyword">if</span> (options.<span class="property">extract</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">ExtractTextPlugin</span>.<span class="title function_">extract</span>(&#123;</span><br><span class="line">                <span class="attr">use</span>: loaders,</span><br><span class="line">                <span class="attr">fallback</span>: <span class="string">&quot;vue-style-loader&quot;</span>,</span><br><span class="line">                <span class="attr">publicPath</span>: <span class="string">&quot;../../&quot;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;vue-style-loader&quot;</span>].<span class="title function_">concat</span>(loaders);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">css</span>: <span class="title function_">generateLoaders</span>(),</span><br><span class="line">        <span class="attr">postcss</span>: <span class="title function_">generateLoaders</span>(),</span><br><span class="line">        <span class="attr">less</span>: <span class="title function_">generateLoaders</span>(<span class="string">&quot;less&quot;</span>),</span><br><span class="line">        <span class="attr">sass</span>: <span class="title function_">generateLoaders</span>(<span class="string">&quot;sass&quot;</span>, &#123; <span class="attr">indentedSyntax</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">        <span class="comment">//添加部分2,增加.concat....</span></span><br><span class="line">        <span class="attr">scss</span>: <span class="title function_">generateLoaders</span>(<span class="string">&quot;sass&quot;</span>).<span class="title function_">concat</span>(&#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;sass-resources-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">resources</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">                    __dirname,</span><br><span class="line">                    <span class="string">&quot;../src/assets/styles/global-style.scss&quot;</span></span><br><span class="line">                ), <span class="comment">//全局样式文件</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">stylus</span>: <span class="title function_">generateLoaders</span>(<span class="string">&quot;stylus&quot;</span>),</span><br><span class="line">        <span class="attr">styl</span>: <span class="title function_">generateLoaders</span>(<span class="string">&quot;stylus&quot;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>锚点平滑滚动 html添加 <code>scroll-behavior: smooth;</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flex基础</title>
      <link href="/2023/07/22/web/style/style-flex/"/>
      <url>/2023/07/22/web/style/style-flex/</url>
      
        <content type="html"><![CDATA[<blockquote><p>设置 display:flex;的盒子就是 Flex 容器(flex container),它的直接子元素就是项目(flex item), flex 容器的子元素 float clear vertical-align 等属性都会失效<br><a href="http://flexboxfroggy.com/">flex game</a></p></blockquote><h3 id="主轴与侧轴"><a href="#主轴与侧轴" class="headerlink" title="主轴与侧轴"></a>主轴与侧轴</h3><ol><li><p>默认主轴就是 x 方向向右、水平方向、行</p></li><li><p>默认侧轴就是 y 方向向下、垂直方向、列</p></li><li><p>元素是跟着主轴方向排列的,主轴的方向最终取决于 flex-direction 的值</p></li></ol><h3 id="父容器常用属性"><a href="#父容器常用属性" class="headerlink" title="父容器常用属性"></a>父容器常用属性</h3><p>flex-direction: 设置主轴方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>:</span><br><span class="line">    :row;  默认、水平向右</span><br><span class="line">    :row-reverse; 是元素从右向左排类</span><br><span class="line">    :column; 将主轴设置为垂直方向，设置之后水平方向就成了侧轴</span><br><span class="line">    :column-reverse;  从下到上</span><br></pre></td></tr></table></figure><p>justify-content: 设置主轴上子元素的排列方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>:</span><br><span class="line">    :flex-start; 默认,项目从左对齐</span><br><span class="line">    :flex-end; 使项目右对齐</span><br><span class="line">    :center; 在主轴居中对其(如果主轴是x则水平居中)</span><br><span class="line">    :space-around;  平均分配空间</span><br><span class="line">    :space-between; 两边贴边、再平分剩余空间</span><br></pre></td></tr></table></figure><p>flex-warp: 设置子元素是否可以换行(默认 flex 是不会换行的,空间不够会减小项目的宽度)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>-warp:</span><br><span class="line">    :nowarp;  默认</span><br><span class="line">    :warp;  可以换行</span><br><span class="line">    :warp-reverse;  可以换行，且第一行在下面</span><br></pre></td></tr></table></figure><p>align-content: 设置侧轴上子元素的排列方式(多行,单行无效果)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>:</span><br><span class="line">    :flex-start; 侧轴从上到下</span><br><span class="line">    :center; 垂直居中</span><br><span class="line">    :space-between; 侧轴上两边贴边,再平分剩余空间</span><br><span class="line">    :space-around;  平均分配侧轴空间</span><br><span class="line">    :stretch; 子元素高度平分父元素高度</span><br><span class="line">    :flex-end; 侧轴从下到上</span><br></pre></td></tr></table></figure><p>align-items: 设置侧轴上的子元素排列方式(单行，多行无效果)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>:</span><br><span class="line">    :flex-start; 默认,侧轴从上到下</span><br><span class="line">    :flex-end; 侧轴从下到上</span><br><span class="line">    :center; 垂直居中</span><br><span class="line">    :stretch; 将项目拉升的与最大高度(子项目不能设置高度)</span><br></pre></td></tr></table></figure><blockquote><p>flex-flow: 符合属性 相当于设置了 flex-directiion 和 flex-warp , :column warp 直接设置主轴方向与是否换行</p></blockquote><h3 id="子容器常用属性"><a href="#子容器常用属性" class="headerlink" title="子容器常用属性"></a>子容器常用属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>:null | flex-grow flex-shrink flex-basis;</span><br><span class="line">:<span class="number">1</span>; 无宽度子元素个数分之一,一般只用第一个</span><br><span class="line"></span><br><span class="line"><span class="attribute">align-self</span>: 控制某个子项自己在侧轴的排列方式</span><br><span class="line">    :flex-start; 侧轴从上到下</span><br><span class="line">    :flex-end; 侧轴从下到上</span><br><span class="line">    :center; 垂直居中</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-grow</span>:设置子元素所占剩余空间比例</span><br><span class="line">flex-grow:<span class="number">4</span>,flex-grow:<span class="number">1</span>,flex-grow:<span class="number">2</span>;第一个占七分之四,第二个占七分之一，第三个占七分之二</span><br><span class="line"></span><br><span class="line"><span class="attribute">order</span>: 定义子项的排列顺序(前后顺序,数值越小越靠前 默认<span class="number">0</span>,可以是负数)</span><br><span class="line">flex-shrink:设置缩小比例(不换行时单所有元素宽度之和超过父容器时),默认都是<span class="number">1</span>， 变成<span class="number">0</span>就不会自动压缩</span><br></pre></td></tr></table></figure><!--  <iframe height='350px' width='100%' src="http://mctool.wangmingchang.com/index/jspay/dashang"> </iframe> -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Three-基础</title>
      <link href="/2023/07/22/web/threejs/base/"/>
      <url>/2023/07/22/web/threejs/base/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h3><p>第一天：场景、相机、几何体、材质、渲染器、控制器、坐标轴、向量、requestAnimationFrame 实现动画、Clock 时钟、gsap 动画库、窗口 resize 更新场景、像素比、全屏元素、dat.gui（UI 界面变量控制库）</p><p>第二天：物体属性认识、自定义几何体、系统提供几何体详解、材质详解、材质纹理、纹理重复偏移、纹理的大小显示设置</p><h3 id="专业名词"><a href="#专业名词" class="headerlink" title="专业名词"></a>专业名词</h3><ul><li><strong>场景</strong> （Scene） ：所有物体都有放在场景上面</li><li><strong>相机</strong> （Camera）：相机让我们能看到场景里的物体</li><li><strong>几何体</strong> （BoxGeometry 等各种几何体。。。）<ul><li>文档位置：<code>https://localhost:8082/docs/index.html#api/zh/geometries/BoxGeometry</code></li><li><code>position 位移</code>、<code>scale 缩放</code>、<code>rotation 旋转</code></li></ul></li><li><strong>材质</strong> （Material）: 设置物体皮肤<ul><li>设置纹理<ul><li>纹理加载器 THREE.TextureLoader()</li><li>纹理属性</li></ul></li></ul></li><li><strong>物体</strong> ：<strong>几何体</strong>加<strong>材质</strong>，通过 <code>THREE.Mesh</code> 方法形成<ul><li>物体.geometry 得到几何体信息</li><li>物体.material 得到材质信息</li><li>物体.attributes 储存几何体相关属性<ul><li><code>position</code>: 有每个面，每个点，xyz 的位置形成的数组列表</li><li><code>uv</code>:几何体展开后的平面图信息</li></ul></li></ul></li><li><strong>渲染器</strong> （Renderer）：渲染场景上的物体</li><li><strong>控制器</strong> （OrbitControls）：轨道控制器，控制查看物体</li><li><strong>坐标轴</strong> （AxesHelper）：坐标轴辅助器（红色 X 轴、绿色 Y 轴、蓝色 Z 轴）</li><li><strong>二维</strong> （Vector2）</li><li><strong>三维</strong> （Vector3）</li></ul><h3 id="最基础的引用"><a href="#最基础的引用" class="headerlink" title="最基础的引用"></a>最基础的引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、创建场景</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、创建透视相机 （还有其他相机）</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">  <span class="number">75</span>,</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">innerWidht</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span><br><span class="line">  <span class="number">0.1</span>,</span><br><span class="line">  <span class="number">1000</span></span><br><span class="line">); <span class="comment">// 角度、宽高比例、近端、远端</span></span><br><span class="line"><span class="comment">// 设置位置，并添加到场景中</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 将相机添加到场景</span></span><br><span class="line">scene.<span class="title function_">add</span>(camera);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、添加物体</span></span><br><span class="line"><span class="comment">// 创建几何体</span></span><br><span class="line"><span class="keyword">const</span> cubeGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 创建材质</span></span><br><span class="line"><span class="keyword">const</span> cubeMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0xffff00</span> &#125;);</span><br><span class="line"><span class="comment">// 根据几何体和材质创建物体</span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(cubeGeometry, cubeMaterial);</span><br><span class="line"><span class="comment">// 将物体添加到场景</span></span><br><span class="line">scene.<span class="title function_">add</span>(cube);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、初始化渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span><br><span class="line"><span class="comment">// 设置渲染器（canvas）大小</span></span><br><span class="line">renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line"><span class="comment">// 将webgl渲染的canvas内容添加到body</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span><br><span class="line"><span class="comment">// 使用渲染器（通过相机将场景渲染进来）</span></span><br><span class="line">renderer.<span class="title function_">render</span>(scene, camera);</span><br></pre></td></tr></table></figure><h2 id="几何体-物体"><a href="#几何体-物体" class="headerlink" title="几何体-物体"></a>几何体-物体</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>grid网格布局</title>
      <link href="/2023/07/22/web/style/style-grid/"/>
      <url>/2023/07/22/web/style/style-grid/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p><h2 id="开启grid"><a href="#开启grid" class="headerlink" title="开启grid"></a>开启grid</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>  <strong>Flex</strong>布局是<code>轴线布局</code>，只能设置项目轴线方向的<code>一维布局</code><br>  <strong>Grid</strong>将容器划分为<code>行</code>和<code>列</code>，产生单元格，的<code>二维布局</code><br>  使用<code>display:grid;</code>的元素成为<code>容器</code>，<code>容器内部</code>直接子元素称为<code>项目</code>(项目的display:inline-block|table-cell、float等生成BFC属性失效)</p></blockquote><h3 id="容器属性-假设3x3-9个项目"><a href="#容器属性-假设3x3-9个项目" class="headerlink" title="容器属性(假设3x3 9个项目)"></a>容器属性(假设3x3 9个项目)</h3><blockquote><p>在容器元素上使用的属性</p></blockquote><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">display</span>:grid|inline-gird; 使用说明</span><br></pre></td></tr></table></figure><h4 id="设置行"><a href="#设置行" class="headerlink" title="设置行"></a>设置行</h4><ul><li><code>grid-template-rows:100px 100px 100px;</code>:设置为行，且每个宽度为100px<ul><li><p><code>100px</code>: 一一设置行每个项目宽度像素大小</p></li><li><p><code>25%</code>: 一一设置行每个项目宽度百分比</p></li><li><p><code>fr</code>: fraction 分配比例1fr(flex:1)、2fr(flex:2)</p></li><li><p><code>auto</code>:剩余空间宽度自动分分配</p></li><li><p><code>repeat(3,33.33%)</code>: repeat行数(重复次数，重复大小)</p></li><li><p><code>repeat(2,100px 200px)</code>: repeat行数(重复次数，重复模式),相当于 100 200 100 200</p></li><li><p><code>minmax(100px,200px)</code>:设置项目宽度最小100px,最大200px</p></li><li><p><code>auto-fill</code>:自动填充次数，repeat(auto-fill,100px)</p></li><li><p><code>[c1 cc1多名称] 1rf [c2] 1rf [c3] 2rf [c4]</code>: 网格线名称,三个格子四条网格线</p></li></ul></li><li><code>row-gap:10px</code>:横向项目间距，原grid-row-gap    </li><li><code>gap:10px 20px</code>:同时设置行、列间距,原grid-gap</li><li><code>grid-auto-rows</code>:值同上（设置的是超出区域的宽度和行高，自定义区域才会产生这种）</li></ul><h4 id="设置列"><a href="#设置列" class="headerlink" title="设置列"></a>设置列</h4><ul><li><code>grid-template-columns:100px 100px 100px;</code>:设置为每行放3个项目，且每个宽度为100px<ul><li>值同上</li></ul></li><li><code>colunm-gap</code>:纵向项目间接,原grid-colunm-gap</li><li><code>grid-auto-columns</code>:值同上</li></ul><h4 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h4><ul><li><code>grid-template-areas</code>:定义区域<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*将每个格子都设置成不同区域*/</span></span><br><span class="line"><span class="attribute">grid-template-areas</span>:<span class="string">&#x27;a b c&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;d e f&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;g h i&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*将容器分 a b c 三个区域,最后一个用不到，用.代替</span></span><br><span class="line"><span class="comment">只要定义了区域，网格线自动命名，区域名-start，区域名-end*/</span></span><br><span class="line"><span class="attribute">grid-template-areas</span>:<span class="string">&#x27;a a a&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;b b b&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;c c .&#x27;</span>; </span><br></pre></td></tr></table></figure></li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li><code>grid-auto-flow</code>:默认先行后列<ul><li>row:默认</li><li>column:先列后行，从上到下排</li><li>row dense</li><li>column dense</li></ul></li></ul><h4 id="对齐方式-justify-使-对齐"><a href="#对齐方式-justify-使-对齐" class="headerlink" title="对齐方式(justify -&gt; 使...对齐)"></a>对齐方式(<code>justify -&gt; 使...对齐</code>)</h4><ul><li><p><code>item</code>-&gt; 单元格</p></li><li><p><code>justify-items</code>:设置单元格内容的水平位置</p><ul><li>start | end | center |stretch(默认的自动拉伸)</li></ul></li><li><p><code>align-items</code>:设置单元格内容的垂直位置</p></li><li><p><code>place-items:align-items justify-items</code>:简写，先垂直后水平(为测试方向是否根据grid-auto-flow变化?)</p><ul><li><code>content</code> -&gt; 内容</li><li><code>justify-content</code>:内容区域在容器中水平对齐方式<ul><li>start | end | center |stretch(默认的自动拉伸) | space-between(均分，两边靠边) | space-around(均分，不靠边) | space-evenly</li></ul></li><li><code>align-content</code>:垂直位置</li><li><code>place-content</code>:justify-content align-content<br><a href="https://www.bilibili.com/video/BV1mf4y147bk?p=6&spm_id_from=pageDriver">stop</a></li></ul></li></ul><h4 id="简写-了解"><a href="#简写-了解" class="headerlink" title="简写(了解)"></a>简写(了解)</h4><ul><li>grid-template:<ul><li>grid-template-(rows|column|areas) 的简写</li></ul></li><li>grid:<ul><li>grid-template-(rows|column|areas) grid-auto-(rows|column|flow) 六个的简写</li></ul></li></ul><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><blockquote><p>在项目元素上使用的属性</p></blockquote><ul><li><code>grid-column-start</code>:左边框所在的垂直网格先<ul><li>值是一个<code>number</code>，设置这个项目从<code>第几条</code>开始<code>第几条</code>结束，start 1，end 3的话，就占两份了 </li><li>网格名称(区域名称-start….)</li><li>使用span关键字:跨域 number<ul><li>grid-column-start:span 3;改项目直接占用三个网格大小</li></ul></li></ul></li><li><code>grid-column-end</code>:右边框所在的垂直网格先</li><li><code>grid-row-start</code>:上边框所在的垂直网格先</li><li><code>grid-row-end</code>:下边框所在的垂直网格先</li></ul><p>简写</p><ul><li>grid-column:grid-column-start&#x2F;grid-column-end;</li><li>grid-row:grid-row-start&#x2F;grid-row-end;</li><li>grid-area:grid-row-start&#x2F;grid-column-start&#x2F;grid-row-end&#x2F;grid-column-end | 区域名;指定项目放在哪个区域</li></ul><p>项目自身的对齐方式</p><ul><li>justify-self:单个项目水平方向的对齐方式<ul><li>start | end | center |stretch(默认的自动拉伸)</li></ul></li><li>align-self: 垂直方向</li><li>place-self:align-self justify-self;简写</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>babel</title>
      <link href="/2023/07/22/web/tool-coder/coder-babel/"/>
      <url>/2023/07/22/web/tool-coder/coder-babel/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>本质上就是一个编译器，将一种源代码转换成另外一种代码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动转换</span></span><br><span class="line">npm install @babel/core @babel/cli -D</span><br><span class="line">npm install @babel/plugin-transform-block-scoping -D # 块级作用域转换</span><br><span class="line">npm install @babel/plugin-transform-array-functions -D # 箭头函数</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没指定插件是不会转化的</span> </span><br><span class="line">npx babel ./src --out-dir ./dist --publics=@babel/plugin-transform-block-scoping,@babel/plugin-transform-array-functions # 将src下所有转换到dist</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">babel 预设 （手动太麻烦）</span></span><br><span class="line">npm install @babel/core @babel/cli -D</span><br><span class="line">npm install @babel/preset-env -D</span><br><span class="line">npx babel ./src --out-dir ./dist --publics=@babel/preset-env # 按需自己加载block或array-functions</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他预设</span></span><br><span class="line">env、react、ts</span><br></pre></td></tr></table></figure><h3 id="使用思想"><a href="#使用思想" class="headerlink" title="使用思想"></a>使用思想</h3><p>​        <code>babel</code>是可以单独使用的，<code>webpack</code>就是结合这些可以单独使用的功能形成一个工程，遇到 js 文件，就在 <code>module loader</code> 中对 js 文件进行<code>babel</code>编译转化</p><h3 id="webpack-中的-babel-配置"><a href="#webpack-中的-babel-配置" class="headerlink" title="webpack 中的 babel 配置"></a>webpack 中的 babel 配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core @babel/cli -D</span><br><span class="line">npm install @babel/preset-env -D</span><br><span class="line">npm install babel-loader -D</span><br><span class="line"></span><br><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">        &#123; <span class="comment">// 1、直接使用</span></span><br><span class="line">            <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="attr">use</span>:&#123;</span><br><span class="line">            <span class="attr">loader</span>:<span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>:&#123;</span><br><span class="line">                    <span class="attr">presets</span>:[</span><br><span class="line">                        <span class="string">&quot;@babel/preset-env&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123; <span class="comment">// 2、指定目标浏览器</span></span><br><span class="line">            <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="attr">use</span>:&#123;</span><br><span class="line">            <span class="attr">loader</span>:<span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>:&#123;</span><br><span class="line">                    <span class="attr">presets</span>:[</span><br><span class="line">                        [<span class="string">&quot;@babel/preset-env&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">targets</span>:</span><br><span class="line">        &#125;]</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览器兼容（browserslist）"><a href="#浏览器兼容（browserslist）" class="headerlink" title="浏览器兼容（browserslist）"></a>浏览器兼容（browserslist）</h3><blockquote><p>通过 <code>.browserslistrc</code> 的配置，决定编译出的代码会兼容哪些浏览器</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>样式问题</title>
      <link href="/2023/07/22/web/issues/issues-style/"/>
      <url>/2023/07/22/web/issues/issues-style/</url>
      
        <content type="html"><![CDATA[<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>normalize.css<br><a href="https://meyerweb.com/eric/tools/css/reset/index.html">reser.css</a></p><h4 id="只在火狐生效"><a href="#只在火狐生效" class="headerlink" title="只在火狐生效"></a>只在火狐生效</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@-moz-document</span> url-prefix()&#123;</span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#f00</span>; //box只在火狐浏览器上变红</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="毛玻璃效果"><a href="#毛玻璃效果" class="headerlink" title="毛玻璃效果"></a>毛玻璃效果</h4><blockquote><p>backdrop-filter 不支持火狐</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bakcground:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">1</span>);</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.14</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>:<span class="built_in">blur</span>(<span class="number">20px</span>);</span><br></pre></td></tr></table></figure><h4 id="溢出省略"><a href="#溢出省略" class="headerlink" title="溢出省略"></a>溢出省略</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//单行</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"></span><br><span class="line">//多行</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure><h4 id="IOS滚动滑动不顺畅问题"><a href="#IOS滚动滑动不顺畅问题" class="headerlink" title="IOS滚动滑动不顺畅问题"></a>IOS滚动滑动不顺畅问题</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>:auto;</span><br><span class="line">-webkit-<span class="attribute">overflow</span>-scrolling:touch;</span><br></pre></td></tr></table></figure><h4 id="隐藏谷歌滚动条"><a href="#隐藏谷歌滚动条" class="headerlink" title="隐藏谷歌滚动条"></a>隐藏谷歌滚动条</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ele</span>::-webkit-scrollbar&#123;</span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="格式化上下文-BFC"><a href="#格式化上下文-BFC" class="headerlink" title="格式化上下文 BFC ?"></a>格式化上下文 BFC ?</h4><p>BFC全称是<code>Block Formatting Context</code>，意思就是块级格式化上下文。</p><p>你可以把BFC看做一个容器，容器里边的子元素不会影响到容器外部的元素。</p><ul><li><p>触发方式：父级设置 position、overflow、dispaly、float  这些属性不为默认值</p></li><li><p>解决问题：</p><ul><li><p>margin 塌陷&#x2F;重绘&#x2F;重叠，</p></li><li><p>子元素设置margintop，父元素一起下去</p></li><li><p>清除浮动</p></li></ul></li></ul><h4 id="顶线、中线、基线…"><a href="#顶线、中线、基线…" class="headerlink" title="顶线、中线、基线…"></a>顶线、中线、基线…</h4><blockquote><p>顶线、中线、基线、底线、行高、行距、半行距 </p></blockquote><p><a href="https://www.jianshu.com/p/59f31a1704de">https://www.jianshu.com/p/59f31a1704de</a></p><h4 id="图片地部3像素"><a href="#图片地部3像素" class="headerlink" title="图片地部3像素"></a>图片地部3像素</h4><blockquote><p>产生原因:img属于<code>linlie</code>元素，div中的img的vertical-align默认属性是<code>baseline</code>,而baseline和底线之间有偏差<br>偏差大小由<code>字体大小</code>而定<br>所有可以从这几个方面处理</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父元素*/</span></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">或<span class="selector-tag">img</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">display</span>:block|inline-black;</span><br><span class="line"></span><br><span class="line">或<span class="selector-tag">img</span></span><br><span class="line"></span><br><span class="line">virtical-align: middle;//设置为任意值都可以</span><br></pre></td></tr></table></figure><h4 id="cale动态计算值"><a href="#cale动态计算值" class="headerlink" title="cale动态计算值"></a><code>cale</code>动态计算值</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>:<span class="built_in">cale</span>(<span class="number">50%</span> - <span class="number">20px</span>);</span><br></pre></td></tr></table></figure><h4 id="css隐藏元素的方法"><a href="#css隐藏元素的方法" class="headerlink" title="css隐藏元素的方法"></a>css隐藏元素的方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>:none;</span><br><span class="line">opcity:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">visibility</span>:hidden;（仍然占用空间）</span><br><span class="line">各种方法搞到显示区域之外;</span><br><span class="line"></span><br><span class="line">缩放方式</span><br><span class="line"><span class="attribute">width</span> and <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">zoom: <span class="number">0.00001</span>;</span><br></pre></td></tr></table></figure><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1、最后加元素 或 伪元素:after clear: both;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2 display*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flow-root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><blockquote><p>设置left right 等于设置了宽度<br>position:sticky; 子元素达到父元素某个位置时固定住，暂时只支持Firefox </p></blockquote><h4 id="ul-list-style"><a href="#ul-list-style" class="headerlink" title="ul list-style"></a>ul list-style</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* list-style-type, list-style-position, list-style-image*/</span></span><br><span class="line"><span class="attribute">list-style</span>:none|其他图形符号(例:decimal数字) <span class="built_in">inside</span>(文本内侧) 自定义图片</span><br></pre></td></tr></table></figure><h4 id="initial-和-inherit"><a href="#initial-和-inherit" class="headerlink" title="initial 和 inherit"></a>initial 和 inherit</h4><blockquote><p>initial:属性取默认值<br>inherit:属性值从父元素继承</p></blockquote><p>暂存:background-blend-mode 属性定义了背景层的混合模式（图片与颜色）。<br>    anime.js Mo.js velocity popmotion Hover(css)</p><h4 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h4><h5 id="font-family取值"><a href="#font-family取值" class="headerlink" title="font-family取值"></a><code>font-family</code>取值</h5><ul><li><strong>font-family: Arial</strong> ：具体的<code>字体样式</code>，字体族名为 Arial;</li><li><strong>font-family: sans-serif</strong>：<code>通用字体族名</code>,备选机制，用于在指定的字体不可用时给出较好的字体</li><li><strong>通用字体族名</strong><ul><li><a href="https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/#generic-font-families">css fonts3</a><ul><li>serif 衬线字体族</li><li>sans-serif 非衬线字体族</li><li>monospace 等宽字体，即字体中每个字宽度相同</li><li>cursive 草书字体</li><li>fantasy 主要是那些具有特殊艺术效果的字体</li></ul><p> </p></li><li><a href="https://www.w3.org/TR/css-fonts-4/#generic-font-families">css fonts4 新增</a><ul><li>system-ui 系统默认字体</li><li>emoji 用于兼容 emoji 表情符号字符</li><li>math 适用于数学表达式</li><li>fangsong 此字体系列用于中文的（仿宋）字体。</li></ul></li></ul></li></ul><h5 id="常用-通用字体族名"><a href="#常用-通用字体族名" class="headerlink" title="常用 通用字体族名"></a>常用 通用字体族名</h5><ul><li><code>系统默认字体（system-ui）</code>，不同的操作系统的 Web 页面下，自动选择本操作系统下的默认系统字体。<ul><li>补充 system-ui 兼容性的不足 </li><li>支持作为 <strong>-apple-system</strong> 值（仅在 macOS 和 iOS 上）</li><li>支持作为 <strong>BlinkMacSystemFont</strong> 值（仅在 macOS 上）</li></ul><p> </p></li><li><code>Segoe UI</code>， Windows 平台及 Windows Phone 上选取最佳的<strong>西文字体</strong>展示。</li><li><code>Roboto</code>，是为 Android 操作系统设计的一个无衬线字体家族</li><li><code>衬线字体族（ serif）</code>，在字符笔画末端有叫做衬线额外装饰，笔画的粗细会有所不同</li><li><code>无衬线字体族（sans-serif）</code>，通常是统一线条的，往往拥有相同的曲率，笔直的线条，锐利的转角</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">font-family</span>: system-ui,-apple-system,BlinkMacSystemFont,segoe ui,Roboto,</span><br><span class="line">    Helvetica,Arial,</span><br><span class="line">    sans-serif,apple color emoji,segoe ui emoji,segoe ui symbol;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* system-ui,-apple-system,BlinkMacSystemFont,segoe ui,Roboto,具体字体族,sans-serif,可有可无随意;*/</span></span><br></pre></td></tr></table></figure><h4 id="对src和href的理解"><a href="#对src和href的理解" class="headerlink" title="对src和href的理解"></a>对src和href的理解</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">它们都可以加载外部文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">href 是 <span class="built_in">link</span>和a的属性， 遇到时并行下载，不会停止对文档的处理</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">src  是 js和img的属性， 会暂停其他资源的处理，处理完在继续</span></span><br></pre></td></tr></table></figure><h4 id="常见的浏览器兼容问题"><a href="#常见的浏览器兼容问题" class="headerlink" title="常见的浏览器兼容问题"></a>常见的浏览器兼容问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器兼容问题产生的原因</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   不同浏览器内核不同，渲染解析出的效果有时会又所差异，支持的API会有差异，就是浏览器兼容问题</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   如：不同浏览器默认内边距不同  或 css3 新的api各个浏览器支持不一致等，早期都有加前缀</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web</title>
      <link href="/2023/07/22/web/issues/issues-web/"/>
      <url>/2023/07/22/web/issues/issues-web/</url>
      
        <content type="html"><![CDATA[<h3 id="微前端"><a href="#微前端" class="headerlink" title="微前端"></a>微前端</h3><h3 id="DX-与-UX"><a href="#DX-与-UX" class="headerlink" title="DX 与 UX"></a>DX 与 UX</h3><blockquote><p>开发人员体验:DX（developer experience）<br>用户体验:UX（user experience）<br>（DX）是指开发人员在完成交付目标的整个过程的总体交互和感受<br>（UX）的定义是用户如何使用产品、系统和服务，重点是对功能，效率，易用性等方面的感知。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2023/07/22/web/issues/issues-vue/"/>
      <url>/2023/07/22/web/issues/issues-vue/</url>
      
        <content type="html"><![CDATA[<h3 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h3><blockquote><p>mixin:里面的属性方法是独立的多组件调用不相互影响<br>vuex:里面的数据是共用的，而mixin数据在各个组件中是私有的<br>组件:父组件与子组件是相对独立的，而mixin是在父组件对象中添加新的数据，直接合成新的组件<br>优先级:如果名称相同，组件中的方法覆盖mixin中的方法，mixiny优先级别低</p></blockquote><h4 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mixin/mixin.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="comment">//全局关闭dialogChannel组件弹窗</span></span><br><span class="line">        <span class="title function_">dialogChannelsClose</span>(<span class="params">name</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>,name,<span class="literal">false</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> @/mixin/mixin.<span class="property">js</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="局部混入"><a href="#局部混入" class="headerlink" title="局部混入"></a>局部混入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mixins/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mymixins = &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">aaa</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件中使用局部混入</span></span><br><span class="line"><span class="keyword">import</span> &#123; mymixins &#125; <span class="keyword">from</span> <span class="string">&quot;@/mixins/index.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">mixins</span>: [mymixins],</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="title class_">MyPlugin</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//xxxx</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MyPlugin</span>, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="vue-模板处理本地图片路径问题"><a href="#vue-模板处理本地图片路径问题" class="headerlink" title="vue 模板处理本地图片路径问题"></a>vue 模板处理本地图片路径问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 固定图片 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;index-page&quot;&gt;</span><br><span class="line">        &lt;!-- 字符串直接引入是可以正常加载 --&gt;</span><br><span class="line">        &lt;img src=&quot;@/assets/images/head_g.png&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 如果是动态数据 --&gt;</span><br><span class="line">        &lt;img :src=&quot;imgurl&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    const imgurl=&quot;@/assets/images/head_g.png&quot; // x</span><br><span class="line">    </span><br><span class="line">    &lt;!-- webpack环境 直接使用无法加载的--&gt;</span><br><span class="line">    const imgurl= require(&quot;@/assets/images/head_g.png&quot;) // √</span><br><span class="line">    </span><br><span class="line">     &lt;!-- vite环境 和 webpack环境 --&gt;</span><br><span class="line">    import imgurl from &quot;@/assets/images/head_g.png&quot; // √</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 变量中的图片 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;index-page&quot;&gt;</span><br><span class="line">        &lt;!-- webpack环境 --&gt;</span><br><span class="line">        &lt;div v-for=&quot;item in list&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;require(`../assets/images/$&#123;item&#125;`)&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- vite环境 --&gt;</span><br><span class="line">        &lt;div v-for=&quot;item in list&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;getSrc(item)&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    const list = [&quot;head_g.png&quot;, &quot;head_g.png&quot;];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    // vite 环境</span><br><span class="line">    const getSrc = (item) =&gt; &#123;  // 错误</span><br><span class="line">        import imgurl from &quot;xxx&quot;; // 这个是有问题的，import 被Js解析的，执行逻辑代码的时候以及跳过了解析阶段</span><br><span class="line">        return imgurl</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const getSrc = (item) =&gt; &#123; // 正确，必须要用相对路径</span><br><span class="line">        return new URL(`../assets/images/$&#123;item&#125;`, import.meta.url).href;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="彻底关闭eslint"><a href="#彻底关闭eslint" class="headerlink" title="彻底关闭eslint"></a>彻底关闭eslint</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;rules&quot;: &#123;</span><br><span class="line">    &quot;no-console&quot;:  &quot;off&quot;,</span><br><span class="line">    &quot;no-debugger&quot;:  &quot;off&quot;,</span><br><span class="line">    &quot;prettier/prettier&quot;: &quot;off&quot;,</span><br><span class="line">    &quot;no-unused-vars&quot;:&quot;off&quot;,</span><br><span class="line">    &quot;no-empty&quot;:&quot;off&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue-add-与-npm-install"><a href="#vue-add-与-npm-install" class="headerlink" title="vue add 与 npm install"></a>vue add 与 npm install</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install 只会下载包不会改变项目中文件或文件内容</span><br><span class="line">vue add 不加会安装下载包，还好添加需要的配置文件，例如 vue add router 會幫你配置 router.js</span><br><span class="line">        安装 electron-builder 会在 package.js script自动添加上指令 和 src/background.js 主进程等</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2023/07/22/web/issues/issues-javacript/"/>
      <url>/2023/07/22/web/issues/issues-javacript/</url>
      
        <content type="html"><![CDATA[<h2 id="早期-js-存在的一些问题"><a href="#早期-js-存在的一些问题" class="headerlink" title="早期 js 存在的一些问题"></a>早期 js 存在的一些问题</h2><blockquote><ul><li>var 定义变量没有作用域</li><li>不能像常规语言一样使用 class，js 原型链方式是基于很早以前的<code>Self</code>语言的</li><li>没有模块化</li><li>无类型检测</li><li>typeof null 为什么是 object</li></ul></blockquote><h2 id="JS-概念性问题"><a href="#JS-概念性问题" class="headerlink" title="JS 概念性问题"></a>JS 概念性问题</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>基础知识</p><blockquote><ul><li>弱类型或者说动态语言（一个变量可以保存不同的数据类型）</li><li>原始类型 Boolean、Null、Undefined、Number、String、Bigint（ecma 2020）、Symbols（ecma 2015）</li><li>一组属性的集合 对象 Object （Object、Array、Function、Date、）</li></ul></blockquote><p>1、数据类型判断 - typeof</p><blockquote><p>返回一个字符串，代表检测数据的类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常情况返回数据类型小写单词，一下特殊情况</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Infinity</span> === <span class="string">&quot;number&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span> === <span class="string">&quot;number&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Number</span>(<span class="number">1</span>) === <span class="string">&quot;number&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">42n</span> === <span class="string">&quot;bigint&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>() === <span class="string">&quot;symbol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用类型对象包含[[call]]方法 结果就返回function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; === <span class="string">&quot;function&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Array</span> === <span class="string">&quot;function&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> &#123; <span class="attr">a</span>: <span class="number">1</span> &#125; === <span class="string">&quot;object&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>] === <span class="string">&quot;object&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Date</span>() === <span class="string">&quot;object&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> /regex/ === <span class="string">&quot;object&quot;</span>; <span class="comment">// 历史结果请参阅正则表达式部分</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>) === <span class="string">&quot;object&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>) === <span class="string">&quot;object&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>) === <span class="string">&quot;object&quot;</span>; <span class="comment">//String &#123;0:a,1:b,3:c,length:3,....&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null 的类型标签是 0</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">&quot;object&quot;</span>;</span><br></pre></td></tr></table></figure><p>2、数据类型判断 - instanceof</p><blockquote><ul><li>object instanceof constructor</li><li>instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。上级没有找上上级</li><li>返回 true false</li><li>可以判断 Array、Object、Data 等</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">D</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">o <span class="keyword">instanceof</span> C; <span class="comment">// true，因为 Object.getPrototypeOf(o) === C.prototype</span></span><br><span class="line">o <span class="keyword">instanceof</span> D; <span class="comment">// false，因为 D.prototype 不在 o 的原型链上</span></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">// true，因为 Object.prototype.isPrototypeOf(o) 返回 true</span></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="title class_">Function</span>; <span class="comment">// false</span></span><br><span class="line">D <span class="keyword">instanceof</span> <span class="title class_">Function</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>3、数据类型判断 - prototype.toString</p><blockquote><p>各个类型自己和自己 prototype 的 toStrig 结果不同意，有些是函数，有些是字面量，Math.toString()正常，所以统一用对象原型的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;&#x27;</span>) ;   <span class="comment">// [object String]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>) ;    <span class="comment">// [object Number]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>) ; <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>()); <span class="comment">//[object Symbol]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>) ; <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>) ; <span class="comment">// [object Null]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Function</span>()) ; <span class="comment">// [object Function]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) ; <span class="comment">// [object Date]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]) ; <span class="comment">// [object Array]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>()) ; <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Error</span>()) ; <span class="comment">// [object Error]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>) ; <span class="comment">// [object HTMLDocument]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">window</span>) ; <span class="comment">//[object global] window 是全局对象 global 的引用</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>4、数据类型判断 - constructor</p><blockquote><ul><li>null 和 undefined 是无效的对象</li><li>constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line">o.<span class="property">constructor</span> === <span class="title class_">Object</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">o.<span class="property">constructor</span> === <span class="title class_">Object</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.<span class="property">constructor</span> === <span class="title class_">Array</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">a.<span class="property">constructor</span> === <span class="title class_">Array</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> n = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>);</span><br><span class="line">n.<span class="property">constructor</span> === <span class="title class_">Number</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">f.<span class="property">constructor</span> == F; <span class="comment">//true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    F.prototype = &#123;</span></span><br><span class="line"><span class="comment">        constructor: ƒ F()</span></span><br><span class="line"><span class="comment">        [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">f.<span class="property"><span class="keyword">prototype</span></span> = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> f2 = <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">f2.<span class="property">constructor</span> == F; <span class="comment">//false</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    F.prototype = &#123;</span></span><br><span class="line"><span class="comment">        a:1</span></span><br><span class="line"><span class="comment">        [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">F.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = F;</span><br><span class="line"><span class="keyword">let</span> f3 = <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">f3.<span class="property">constructor</span> == F; <span class="comment">//true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    F.prototype = &#123;</span></span><br><span class="line"><span class="comment">        a:1</span></span><br><span class="line"><span class="comment">        constructor: ƒ F()</span></span><br><span class="line"><span class="comment">        [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>5、jquery.type(‘xxx’)</p><h3 id="js-常见的内置对象"><a href="#js-常见的内置对象" class="headerlink" title="js 常见的内置对象"></a>js 常见的内置对象</h3><p>3 中包装对象 <strong>Number</strong> <strong>String</strong> <strong>Boolean</strong></p><p>包装对象的装箱与拆箱<br>装箱:把基本数据类型转化为对应引用数据类型的操作<br>通过 new 的方式得到实例<br>拆箱:把引用数据类型转化为对应基本数据类型的操作(数组对象也有拆箱)<br>调用实例的 valueOf()和 toString() 实现拆箱</p><pre><code>    js内部有一个toPrimitive(input,type) 方法 判断传入的值是否为原始类型，是返回，不是就调用valueOf方法，结果还不是就掉toString方法    valueOf()  判断是否有基本类型值，有就返回，没有则返回对象本身    toString() 得到的都是字符串类型 &quot;123&quot;,valueOf 可以得到正常的 123    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; + []) [object object]</span><br><span class="line"><span class="number">1</span>、&#123;&#125; 调用<span class="title function_">toPrimitive</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="title function_">valueOf</span>()) =&gt; &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="title function_">toString</span>()) =&gt; [object object]</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、[] 调用toPrimitive</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="title function_">valueOf</span>()) =&gt; &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="title function_">toString</span>()) =&gt; <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、有些浏览器 会把前面的 &#123;&#125; 当做代码块 识别为 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> + []) 结果就是<span class="number">0</span>，非[object object]</span><br></pre></td></tr></table></figure></code></pre><p>字面量可以调用方法的原因 ‘abc’.indexOf(‘a’) (隐式装箱)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"># <span class="number">2</span></span><br><span class="line">str.<span class="title function_">indexOf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"># <span class="number">3</span></span><br><span class="line">str = <span class="literal">null</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(1)实际上，每当读取一个基本类型的时候，js 内部会自动创建一个基本包装类型对象，可以让我们调用一些方法来操作<br>(2)’a’.indexOf(‘a’)在调用过程中会先 let str &#x3D; new String(‘a’)，然后调用 indexOf，调用完毕 str &#x3D; null, 销毁该对象</p><p>其他内置对象<br>Date、Math、Function、Array、</p><h3 id="数据存储形式"><a href="#数据存储形式" class="headerlink" title="数据存储形式"></a>数据存储形式</h3><blockquote><ul><li>栈 计算机为原始数据类型开辟了一块内存空间 number string</li><li>堆 计算机为应用数据类型开辟了一块内存空间 object</li><li><code>栈内存</code>是内存中用于存放临时变量的一片内存块(储存变量名称、原始变量值、引用变量地址)</li><li><code>堆内存</code>存储 地址和<code>栈内存中</code> 地址或指针指向的对象</li><li>赋值变量会将<code>栈内存的值</code>或<code>栈内存的地址</code>复制一份，拿给新的变量</li></ul></blockquote><h4 id="存储空间"><a href="#存储空间" class="headerlink" title="存储空间"></a>存储空间</h4><p>硬件<br>内存：访问速度快、容量小、临时存在<br>硬盘：访问速度慢、容量大、永久存在<br>软件<br>App 下载 硬盘<br>App 运行 内存<br>运行<br>函数申明（函数体）：占用内存空间，运行期间永久存在<br>函数运行（执行上下文）：临时占用存储空间</p><p>程序运行，计算机或浏览器会给程序<code>分配</code>一段连续的内存（以使用方式的不同分成 栈内存和堆内存）</p><p>如果分配了 0-1000 段的内存<br>栈内存 –&gt; 管理函数执行，程序上下文执行，执行栈, 从高地址位向下使用(1000,999,998…)<br>主要为了管理函数的执行顺序<br>堆内存 –&gt; 存储对象，从低地址位向上使用(0,1,2…)<br>?? 对象里面的原始类型是存在堆中的<br>执行栈中如果入栈的是对象，那么进入的是对象地地址，对象存放堆内存中，对象内的原始类型数据也在堆中</p><p>内存溢出：当程序运行使用的内存超过<code>分配来的</code>这些，就会<code>内存溢出</code>（一般设定栈内存比较小的，大部分情况也是<code>栈溢出</code>）<br>内存泄漏：当某一段内存我们失去了对它的控制、失去引用、回收机制也管理不了的情况</p><h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><p>哪些被分配的内存确实已经不再需要了，自动回收<br>JS 会周期性遍历内存空间，发现没有被引用的对象就会自动回收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>    a=<span class="number">1</span></span><br><span class="line">b=a    b=<span class="number">1</span></span><br><span class="line">b++    b=<span class="number">2</span>  <span class="number">1</span>、<span class="number">1</span>、<span class="number">2</span>属与三块内存空间，b++后，b=<span class="number">1</span>那个<span class="number">1</span>的地址就是去了引用，下次清除周期到了将会被回收</span><br><span class="line"></span><br><span class="line"># 如果 b=<span class="number">1</span> 的<span class="number">1</span> 和<span class="number">2</span>时同一块内存空间的话，那么说明内存是可以被覆盖的，不好</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">c</span>:<span class="number">1</span>&#125;;</span><br><span class="line">a = <span class="literal">null</span>; <span class="comment">// 将a标记为未使用状态或没有引用状态，等待下次遍历时回收</span></span><br><span class="line"></span><br><span class="line">js 变量名是否存在内存中??</span><br><span class="line"><span class="number">1</span>、变量 a 是不存在内存空间的，内存空间只有值和地址，变量名是给人看的</span><br></pre></td></tr></table></figure><p>标记 - 清除算法<br>这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。</p><p>v8 的垃圾回收机制</p><h3 id="跨域方案总结"><a href="#跨域方案总结" class="headerlink" title="跨域方案总结"></a>跨域方案总结</h3><h3 id="事件循环-EventLoop"><a href="#事件循环-EventLoop" class="headerlink" title="事件循环 EventLoop"></a>事件循环 EventLoop</h3><p>正常情况下一个应用程序会有一个进程，包含着非常多线程，但是浏览器时多进程的<br>主线程 与 任务队列 里代码的不断循环执行，异步任务未完成之前(在 web 异步 API 操作的地方等待)是不会加入任务队列的</p><p>浏览器的事件循环</p><ul><li>浏览器<code>渲染进程</code>、网络进程、GPU 进程….</li><li>重点<code>渲染进程</code>包含<code>js引擎进程</code>、<code>HTTP请求进程</code>、<code>定时器触发进程</code>、<code>事件触发进程</code>、<code>GUI进程</code>等</li><li>浏览器与<code>NodeJS</code>异步任务执行原理，背后是通过<code>事件驱动</code>完成的</li><li>事件驱动包括<code>事件触发</code>、<code>任务选择</code>、<code>任务执行</code></li><li>由特定的事件触发特定的任务（如用户 click 事件，自动的定时器事件）</li><li>事件循环就是在事件驱动模式中，管理和执行事件的流程</li><li>在事件驱动中，当有事件触发后吧，被触发的事件会按顺序，暂时存在一个队列中，等待 js 同步任务执行完成，再从队列中取出<code>要处理的事件处理</code> - 事件循环来控制什么时候取事件，或优先取的事件<br>浏览器与 js<blockquote><p>浏览器多线程，只会给 js 一个线程,所有 js 是单线程<br>js 单线程，所以只能通过浏览器的多线程来执行<code>异步任务</code><br>js 执行代码的<code>主线程</code>只有一个,<code>浏览器提供的JS引擎线程</code>,主线程执行同步任务<br>此外还有<code>定时器线程</code>、<code>HTTP请求线程</code>、<code>Promise线程</code>等,来执行其他任务<br>当开定时器或调用接口时，这些任务将分配给他们对应的线程来做，完成了再回到住线程<br>执行步骤</p></blockquote></li><li>运行首先执行主线程(将同步代码按顺序排在<code>执行栈</code>中)，当遇到 Promise 或定时器时会(保存挂起，时间到了或 ajax 的 success 等的时候)丢到任务列队(Event Quque)里,继续执行主线程的内容</li><li>主线程完了才会走任务列队(已完成的)的微任务(await，Promise 等)，再走宏任务(Ajax、定时器,事件绑定等),加入执行栈继续执行,宏任务完了就运行结束了<ul><li>微任务(micro task):<code>微任务队列</code>先，包含:Promise、new MutaionObserver()、<code>queueMicrotask(()=&gt;&#123;&#125;) 自定义微任务</code><ul><li>微任务不会有浏览器进线帮忙处理，类似将<code>.then</code>的代放到<code>主线程尾部(或叫微任务队列)</code>，当前循环执行，能执行的微任务<code>都执行完</code>，才会执行宏任务</li><li><code>new Promise(()=&gt;&#123;&#125;)</code>这里的回调会和住线程一起执行，resolve 或 reject 的时候才有微任务的 then</li><li><code>await</code> 后面的函数就相当于<code>new Promise</code>的回调，会直接执行，async 函数里 await 下面的相当于.then 的微任务</li></ul></li><li>宏任务(macro task):<code>宏任务队列</code>后，包含:定时器相关、Ajax、I&#x2F;O ,事件监听（load,click,…）…操作<ul><li>宏任务有浏览器线程帮忙异步处理，下次循环，如有结果再通过回调执行，宏任务执行完一个，都会先查看是否有微任务执行，没有才执行下一个</li></ul></li><li>其他：requestAnimationFrame<ul><li>事件周期最后是页面渲染，二页面渲染之前调用 requestAnimationFrame 回调，当前周期执行的，如果说宏任务是下次 tick 执行的话，那么就不属于宏任务</li><li>但是 window.requestAnimationFrame 即使在<code>Promise</code>前面调用，也是渲染页面前最后执行，微任务顺序不定</li><li>window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，时间是下次重绘之前。</li></ul></li></ul></li><li>主线程执行完后去找一个个的微宏任务，找到一个拿到主线程继续执行执行完再<code>不断循环</code>去找。。。，就叫做 Event Loop 事件循环</li><li>每次循环就是一个事件周期(tick)</li><li>每个周期结束之后浏览器才会对页面进行渲染，所以有时操作 DOM 不一定会立马刷新视图</li><li>视图重汇之前会执行<code>requestAnimationFrame</code>回调</li><li>主线程(执行栈)每次执行方法，会生成一个独有的执行环境(上下文 context)，执行结束，销毁独有环境，并从栈弹出此方法，继续下面代码</li><li>宏任务误差延迟问题:如果将定时器设置 100ms 后执行，首先会挂掉任务列队，100ms 时间到了,如果主线程还在执行中，定时器只能等待，同步代码越长，误差将会越大</li></ul><p>Node 的事件循环</p><ul><li>浏览器的事件循环时由 html5 定义的规范来实现的，node 的事件是有<code>libuv</code>实现的</li></ul><p><a href="https://www.bilibili.com/video/BV1gb4y1U7Un?spm_id_from=333.999.0.0">学习</a></p><h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><ul><li>共同点<ul><li>都能改变函数内部 this 指向</li></ul></li><li>使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fu</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fu函数调用call,通过原型链机制，找到fu.prototype上的call函数进行调用</span></span><br><span class="line"><span class="comment">//fu.call(newThis,a,b);</span></span><br><span class="line"><span class="comment">// 非严格模式</span></span><br><span class="line">fu.<span class="title function_">call</span>(); <span class="comment">//不传，指向window(默认指向)</span></span><br><span class="line">fu.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">//传null,指向window</span></span><br><span class="line">fu.<span class="title function_">call</span>(<span class="literal">undefined</span>); <span class="comment">//传undefined ，指向window</span></span><br><span class="line">fu.<span class="title function_">call</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//传1，指向 Number(1)</span></span><br><span class="line">fu.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//传obj,指向obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//严格模式</span></span><br><span class="line"><span class="comment">// fu.call() //不传，指向undefined</span></span><br><span class="line"><span class="comment">// fu.call(null) //传null,指向null</span></span><br><span class="line"><span class="comment">// fu.call(undefined) //传undefined ，指向undefined</span></span><br><span class="line"><span class="comment">// fu.call(1,2) //传1，指向 1</span></span><br><span class="line"><span class="comment">// fu.call(obj,1,2) //传obj,指向obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//apply,只是参数列表通过数组传递</span></span><br><span class="line">fu.<span class="title function_">apply</span>(obj, [<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind 用法也与call类似，区别是是否立即执行</span></span><br><span class="line">fu.<span class="title function_">bind</span>(obj, <span class="number">1</span>, <span class="number">2</span>)();</span><br></pre></td></tr></table></figure><ul><li><p>实现 call</p><blockquote><p>三点：修改 this、执行函数、返回行数返回值</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">  <span class="comment">// this指向调用call的对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用call的若不是函数则报错</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  thisArg = thisArg || <span class="variable language_">window</span>;</span><br><span class="line">  thisArg.<span class="property">fn</span> = <span class="variable language_">this</span>; <span class="comment">// 将调用call函数的对象添加到thisArg的属性中</span></span><br><span class="line">  <span class="keyword">const</span> result = thisArg.<span class="title function_">fn</span>(...[...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)); <span class="comment">// 执行该属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">fn</span>; <span class="comment">// 删除该属性,执行的fn内部this中依然存在该函数，这个删除是函数执行后才做的</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  问题: 如何去除调用函数fn时内部<span class="variable language_">this</span>对象会出现fn自己的问题;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="js-删除对象属性"><a href="#js-删除对象属性" class="headerlink" title="js 删除对象属性"></a>js 删除对象属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">a</span>;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(obj, <span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="jQuery-的链式操作"><a href="#jQuery-的链式操作" class="headerlink" title="jQuery 的链式操作"></a>jQuery 的链式操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jQuery</span>(<span class="params">selector, context</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(selector, context);</span><br><span class="line">&#125;</span><br><span class="line">jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="comment">//fn即对应prototype</span></span><br><span class="line">  <span class="attr">constructor</span>: jQuery,</span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params">selector, context</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(selector, context);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">then</span>: <span class="keyword">function</span> (<span class="params">par</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(par);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">jQuery.<span class="property">fn</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jQuery</span>(<span class="number">1</span>, <span class="number">2</span>).<span class="title function_">then</span>(<span class="number">4</span>).<span class="title function_">then</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="new-内部做了什么？"><a href="#new-内部做了什么？" class="headerlink" title="new 内部做了什么？"></a>new 内部做了什么？</h3><p>1、创建新对象<br>2、将新对象的原型链执行 我们 new 那个构造函数的 prototype<br>3、判断构造函数是否有返对象，如果有，那么构造函数有问题，直接返回他要返回的东西<br>如果没有，返回刚刚创建的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">Con, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个新的空对象</span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = Con.prototype;</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, <span class="title class_">Con</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将构造函数里的属性方法复制一份给 obj</span></span><br><span class="line">  <span class="comment">// 设置构造函数内 this指向，不然默认指向window，this.name 就变成window name了</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="title class_">Con</span>.<span class="title function_">apply</span>(obj, args);</span><br><span class="line">  <span class="comment">// 对构造函数返回值做判断，然后返回对应的值（所以构造函数不能返回对象，可以返回this，也可以返回基本类型，但是基本类型没什么作用）</span></span><br><span class="line">  <span class="comment">// 构造函数中默认隐式返回this了的</span></span><br><span class="line">  <span class="keyword">return</span> res <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? res : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><p>全局作用域、函数作用域、块级作用域、词法作用<br>js 用的<code>词法作用域</code>:这就意味着函数的执行依赖于函数<code>定义的时候</code>所产生（而不是函数调用的时候产生的）的<code>变量作用域</code>。</p></blockquote><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><blockquote><p>闭包就是外层函数中 return 出新函数,使新函数通过外层函数在外面可以使用，新函数中可以使用外层函数中定义的变量<br>局部数据共享</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">n, o</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n, o);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">fun2</span>: <span class="keyword">function</span> (<span class="params">m</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fun</span>(m, n);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">fun</span>(<span class="number">0</span>); <span class="comment">// ?0</span></span><br><span class="line">a.<span class="title function_">fun2</span>(<span class="number">1</span>); <span class="comment">// ?</span></span><br><span class="line">a.<span class="title function_">fun2</span>(<span class="number">2</span>); <span class="comment">// ?</span></span><br><span class="line">a.<span class="title function_">fun2</span>(<span class="number">3</span>).<span class="title function_">fun2</span>(<span class="number">4</span>); <span class="comment">// ?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun2</span>(<span class="number">1</span>).<span class="title function_">fun2</span>(<span class="number">2</span>).<span class="title function_">fun2</span>(<span class="number">3</span>); <span class="comment">// ?</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun2</span>(<span class="number">1</span>); <span class="comment">// ?</span></span><br><span class="line">c.<span class="title function_">fun2</span>(<span class="number">2</span>); <span class="comment">// ?</span></span><br><span class="line">c.<span class="title function_">fun2</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="IIFE-匿名函数"><a href="#IIFE-匿名函数" class="headerlink" title="IIFE 匿名函数"></a>IIFE 匿名函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 内部作用域，会先去查找是有已有变量b的声明，有就直接赋值20，确实有了呀。发现了具名函数 function b()&#123;&#125;，拿此b做赋值；</span></span><br><span class="line">  <span class="comment">// IIFE的函数无法进行赋值（内部机制，类似const定义的常量），所以无效。</span></span><br><span class="line">  <span class="comment">// （这里说的“内部机制”，想搞清楚，需要去查阅一些资料，弄明白IIFE在JS引擎的工作方式，堆栈存储IIFE的方式等）</span></span><br><span class="line">  b = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [Function b]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">b</span>); <span class="comment">// 10，不是20</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h3><blockquote><p>算法技巧叫做<code>记忆华搜索</code>，目的:<code>为了减少重复计算</code>,如递归或其他重复计算多的场景适合使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取函数运行时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTime</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">const</span> result = fn.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`用时：<span class="subst">$&#123;<span class="built_in">Date</span>.now() - now&#125;</span>毫秒，结果：<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getTime</span>(fibonacci, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// memoization化斐波那契数列</span></span><br><span class="line"><span class="keyword">const</span> fibonacciWithCache = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 设置缓存队列</span></span><br><span class="line">  <span class="keyword">const</span> cacheList = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">_fibonacciWithCache</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果缓存队列中没有该运算结果，则计算出结果并加入缓存队列中</span></span><br><span class="line">    <span class="keyword">if</span> (!cacheList[n])</span><br><span class="line">      cacheList[n] = <span class="title function_">_fibonacciWithCache</span>(n - <span class="number">1</span>) + <span class="title function_">_fibonacciWithCache</span>(n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> cacheList[n];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">getTime</span>(fibonacciWithCache, <span class="number">40</span>);</span><br></pre></td></tr></table></figure><ul><li>两者对比<br>用时：2830 毫秒，结果：102334155<br>用时：0 毫秒，结果：102334155</li></ul><h3 id="URI-URL-URN"><a href="#URI-URL-URN" class="headerlink" title="URI URL URN"></a>URI URL URN</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * URI = Uniform Resource Identifier 统一资源标志符</span></span><br><span class="line"><span class="comment"> *      定位方式表示 URL</span></span><br><span class="line"><span class="comment"> *          URL = Uniform Resource Locator 统一资源定位符</span></span><br><span class="line"><span class="comment"> *      名字方式表示 URN</span></span><br><span class="line"><span class="comment"> *          URN = Uniform Resource Name 统一资源名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * /</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 去村子找个具体的人（URI），如果用地址：某村多少号房子第几间房的主人 就是URL， 如果用身份证号+名字 去找就是URN了。</span></span><br><span class="line"><span class="comment">// 原来uri包括url和urn，后来urn没流行起来，导致几乎目前所有的uri都是url</span></span><br></pre></td></tr></table></figure><h3 id="柯里化、偏函数、Compose、Pipe"><a href="#柯里化、偏函数、Compose、Pipe" class="headerlink" title="柯里化、偏函数、Compose、Pipe"></a>柯里化、偏函数、Compose、Pipe</h3><blockquote><p>收集函数多次调用的参数了列表</p></blockquote><ul><li>作用<ul><li>参数复用<ul><li>就是利用闭包的原理，让我们前面传输过来的参数不要被释放掉</li></ul></li><li>提前确认</li><li>延迟运行</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 固定参数类型，函数柯里化</span></span><br><span class="line"><span class="comment"> * 关键利用闭包的特性保存每次调用参数个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">func</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">...any</span>&#125; <span class="variable">args</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">curry</span> = (<span class="params">func, ...args</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取函数的参数个数,不调用</span></span><br><span class="line">  <span class="keyword">const</span> fnLen = func.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//利用闭包与递归收集所有小括号参数个数,如果func参数列表用到的少，后面的小括号都是白写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...innerArgs</span>) &#123;</span><br><span class="line">    <span class="comment">// 每个小括号调用的参数...innerArgs加上前面调用过储存的参数，拿来与func的参数比较</span></span><br><span class="line">    innerArgs = args.<span class="title function_">concat</span>(innerArgs);</span><br><span class="line">    <span class="comment">// 参数未搜集足的话，继续递归搜集</span></span><br><span class="line">    <span class="keyword">if</span> (innerArgs.<span class="property">length</span> &lt; fnLen) &#123;</span><br><span class="line">      <span class="keyword">return</span> curry.<span class="title function_">call</span>(<span class="variable language_">this</span>, func, ...innerArgs); <span class="comment">//...innerArgs至少从第二个小阔号调用开始</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则拿着搜集的参数调用func,这时开始调用func回调</span></span><br><span class="line">      func.<span class="title function_">call</span>(<span class="variable language_">this</span>, innerArgs);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="title function_">curry</span>(<span class="function">(<span class="params">num1, num2, num3</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line">  <span class="comment">// console.log(num1, num2, num3, num1 + num2 + num3);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// 1 2 3 6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// 1 2 3 6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 1 2 3 6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 1 2 3 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//============================================</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curry2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 第一次执行时，定义一个数组专门用来存储所有的参数</span></span><br><span class="line">  <span class="keyword">var</span> _args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//arguments类数组Array.prototype.slice.call(arguments)将有length的对象转数组</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值</span></span><br><span class="line">  <span class="keyword">var</span> _adder = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _args.<span class="title function_">push</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> _adder; <span class="comment">//第二次调用执行_adder，返回_adder给第三次执行用</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span></span><br><span class="line">  _adder.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">func</span>(_args);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//外部回调操作</span></span><br><span class="line">  _adder.<span class="property">toString1</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(_args);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将内部函数返回出去</span></span><br><span class="line">  <span class="keyword">return</span> _adder; <span class="comment">//第一次调用curry2执行得到_adder函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取操作列表自定义函数操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">_args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    _args.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">curry2</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>)(<span class="number">9</span>).<span class="title function_">toString</span>(func);</span><br><span class="line"></span><br><span class="line"><span class="title function_">curry2</span>(</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">)(<span class="number">4</span>)(<span class="number">9</span>).<span class="title function_">toString1</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="函数式编程的纯函数与副作用"><a href="#函数式编程的纯函数与副作用" class="headerlink" title="函数式编程的纯函数与副作用"></a>函数式编程的纯函数与副作用</h3><h3 id="JS-的内存管理"><a href="#JS-的内存管理" class="headerlink" title="JS 的内存管理"></a>JS 的内存管理</h3><blockquote><p>本质上讲, 内存泄露就是不再被需要的内存, 由于某种原因, 无法被释放.<br>JS 中, 没隐藏了内存管理功能,有专门的内存管理接口, 所有的内存管理都是”自动”的. JS 在创建变量时, 自动分配内存, 并在不使用的时候, 自动释放. 这种”自动”的内存回收, 造成了很多 JS 开发者并不关心内存回收<br>全局变量引用的空间需要程序结束才能是否，局部变量指向的空间，需要改作用域执行完后自动释放</p></blockquote><blockquote><p>对象是否不再需要(没有任何变量指向的对象)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr = <span class="literal">null</span>; <span class="comment">//手动赋值null， [1,2,3,4]这时没有被引用, 会被自动回收</span></span><br></pre></td></tr></table></figure><h3 id="JS-耗性能操作与时间复杂度"><a href="#JS-耗性能操作与时间复杂度" class="headerlink" title="JS 耗性能操作与时间复杂度"></a>JS 耗性能操作与时间复杂度</h3><h3 id="事件对象鼠标位置"><a href="#事件对象鼠标位置" class="headerlink" title="事件对象鼠标位置"></a>事件对象鼠标位置</h3><blockquote><p>事件对象 clientX、screenX、pageX、offsetX、layerX、movementX 的差别</p></blockquote><h3 id="所有浏览器-userAgent-都是-Mozilla"><a href="#所有浏览器-userAgent-都是-Mozilla" class="headerlink" title="所有浏览器 userAgent 都是 Mozilla?"></a>所有浏览器 userAgent 都是 Mozilla?</h3><blockquote><p>最初浏览器 NCSA Mosaic，简称 Mosaic,<br>后面出现另外一款浏览器 Mozilla( Mosaic + Killer)，–&gt; Mozilla 更名为 Netscape，也就是网景<br><code>网站管理员探测 user agent，对 Mozilla 浏览器发送含有框架的页面，对非 Mozilla 浏览器发送没有框架的页面。</code><br>后面软开发了自己的浏览器，Internet Explorer –&gt; (开始只有 Mozilla 支持框架（frame），为了快速收到含有框架的页面了)微软宣布 IE 是兼容 Mozilla，并且模仿 Netscape 称 IE 为“Mozilla&#x2F;1.22“<br>后面微软与网景的浏览器大众，网景失败退出<br>Netscape 居然以 Mozilla(后面更名 Firefox)的名义重生了，并且开发了 <code>Gecko渲染引擎</code>（Mozilla&#x2F;5.0(Windows; U; Windows NT 5.0; en-US; rv:1.1) Gecko&#x2F;20020826）<br>Mozilla 后来变成了 Firefox，并自称“Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; sv-SE; rv:1.7.5) Gecko&#x2F;20041108 Firefox&#x2F;1.0”<br>很多浏览器使用了它的代码，每一个都将自己装作 Mozilla，而它们全都使用 Gecko。<br><code>Gecko 很出色,因此 user agent 探测规则变了，使用 Gecko 的浏览器被发送了更好的代码</code><br>linux Konqueror 浏览器<code>KHTML渲染引擎</code> 伪装 Gecko <code>like Gecko</code>(Mozilla&#x2F;5.0 (compatible; Konqueror&#x2F;3.2; FreeBSD) (KHTML, like Gecko))<br>Opera<br>后来苹果开发了 Safari 浏览器，并使用 KHTML 作为渲染引擎<br>但苹果加入了许多新的特性，于是苹果从 KHTML 另辟分支称之为 <code>WebKit</code><br>但它又不想抛弃那些为 KHTML 编写的页面，于是 Safari 自称为“Mozilla&#x2F;5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit&#x2F;85.7 (KHTML, like Gecko) Safari&#x2F;85.5”<br>再后来，谷歌开发了 Chrome 浏览器，Chrome 使用 Webkit 作为渲染引擎(后面渲染引擎改用 Blink(基于 Webkit 开发)，V8 是 js 引擎不是渲染引擎)<br>和 Safari 之前一样，它想要那些为 Safari 编写的页面，于是它伪装成了 Safari<br>于是 Chrome 使用 WebKit，并将自己伪装成 Safari，WebKit 伪装成 KHTML，KHTML 伪装成 Gecko，最后所有的浏览器都伪装成了 Mozilla<br><code>因为网站开发者可能会因为你是某浏览器（这里是 Mozilla），所以输出一些特殊功能的程序代码（这里指好的特殊功能），所以当其它浏览器也支持这种好功能时，就试图去模仿 Mozilla 浏览器让网站输出跟 Mozilla 一样的内容，而不是输出被阉割功能的程序代码。大家都为了让网站输出最好的内容，都试图假装自己是 Mozilla，一个已经不存在的浏览器……</code></p></blockquote><ul><li><p>浏览器内核也叫”渲染引擎”，用来接收网页语法并渲染到页面上。内核绝对了浏览器如何显示网页，以及格式</p><ul><li>比如不同浏览器初始化都会有 margin padding,有的默认没有</li></ul></li><li><p>渲染引擎之间关系(内核也叫做排版引擎、渲染引擎、浏览器引擎等)</p><ul><li>Gecko 壁虎 (Firefox)</li><li>KHTML(linux Konqueror)</li><li>KHTML –&gt; Webkit(Safari、移动端浏览器)</li><li>KHTML –&gt; Webkit –&gt; Blink(chrome)</li><li>Presto 急板乐曲(欧鹏) -&gt; 欧鹏 Presto 后期被 Blink 代替</li><li>Trident 三叉戟 (IE 360 搜狗 百度 uc)</li><li>EdgeHTML(Edge 浏览器) –&gt; 后期被 Blink 代替</li></ul></li></ul><h3 id="禁止通过控制台查看代码"><a href="#禁止通过控制台查看代码" class="headerlink" title="禁止通过控制台查看代码"></a>禁止通过控制台查看代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://www.mk2048.com/blog/blog_hjjahikh2hjaa.html</span></span><br><span class="line"><span class="keyword">var</span> forbidDebug = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> callbacks = [],</span><br><span class="line">        timeLimit = <span class="number">50</span>,</span><br><span class="line">        open = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">setInterval</span>(loop, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">addListener</span>: <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">          callbacks.<span class="title function_">push</span>(fn);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">cancleListenr</span>: <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">          callbacks = callbacks.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> v !== fn;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// alert(&#x27;=======================================&#x27;)</span></span><br><span class="line">        <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>() - startTime &gt; timeLimit) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!open) &#123;</span><br><span class="line">            callbacks.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">              fn.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          open = <span class="literal">true</span>;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="title function_">stop</span>();</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&quot;扒的话，劳烦您尊重一下劳动成果！&quot;</span>);</span><br><span class="line">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          open = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)().<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> e = <span class="variable language_">window</span>.<span class="property">event</span> || <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">123</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;扒的话，劳烦您尊重一下劳动成果2！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">ctrlKey</span> &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; e.<span class="property">keyCode</span> == <span class="number">73</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;扒的话，劳烦您尊重一下劳动成果2！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">ctrlKey</span> &amp;&amp; e.<span class="property">keyCode</span> == <span class="number">85</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;扒的话，劳烦您尊重一下劳动成果4！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">ctrlKey</span> &amp;&amp; e.<span class="property">keyCode</span> == <span class="number">83</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;扒的话，劳烦您尊重一下劳动成果5！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">forbidDebug</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//==========================第一次输入密码查看======</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">forbidDebug</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> intarv = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> callbacks = [],</span><br><span class="line">        timeLimit = <span class="number">50</span>,</span><br><span class="line">        open = <span class="literal">false</span>;</span><br><span class="line">      intarv = <span class="built_in">setInterval</span>(loop, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">addListener</span>: <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">          callbacks.<span class="title function_">push</span>(fn);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">cancleListenr</span>: <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">          callbacks = callbacks.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> v !== fn;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>() - startTime &gt; timeLimit) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;请输入密码&quot;</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//右键进入</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(intarv);</span><br><span class="line">            open = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;console&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!open) &#123;</span><br><span class="line">              callbacks.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">                fn.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            open = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">stop</span>();</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;请您尊重一下劳动成果！&quot;</span>);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          open = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)().<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> e = <span class="variable language_">window</span>.<span class="property">event</span> || <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        e.<span class="property">keyCode</span> == <span class="number">123</span> ||</span><br><span class="line">        (e.<span class="property">ctrlKey</span> &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; e.<span class="property">keyCode</span> == <span class="number">73</span>) ||</span><br><span class="line">        (e.<span class="property">ctrlKey</span> &amp;&amp; e.<span class="property">keyCode</span> == <span class="number">85</span>) ||</span><br><span class="line">        (e.<span class="property">ctrlKey</span> &amp;&amp; e.<span class="property">keyCode</span> == <span class="number">83</span>)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;请输入密码&quot;</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(intarv);</span><br><span class="line">          open = <span class="literal">false</span>;</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;console&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&quot;请您尊重一下劳动成果！&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// else if (e.ctrlKey &amp;&amp; e.shiftKey &amp;&amp; e.keyCode == 73) &#123;</span></span><br><span class="line">      <span class="comment">//     alert(&quot;禁止打开控制台&quot;);</span></span><br><span class="line">      <span class="comment">//     return false;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="comment">// else if (e.ctrlKey &amp;&amp; e.keyCode == 85) &#123;</span></span><br><span class="line">      <span class="comment">//     alert(&quot;禁止查看源码页面&quot;);</span></span><br><span class="line">      <span class="comment">//     return false;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="comment">// else if (e.ctrlKey &amp;&amp; e.keyCode == 83) &#123;</span></span><br><span class="line">      <span class="comment">//     alert(&quot;禁止下载页面&quot;);</span></span><br><span class="line">      <span class="comment">//     return false;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;console&quot;</span>) != <span class="string">&quot;xxxx&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_">forbidDebug</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Date-详解"><a href="#Date-详解" class="headerlink" title="Date 详解"></a>Date 详解</h3><blockquote><p><strong>lzo-web-project\JavaScript\ECMAScript\Date\index.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===========================基本操作======================================</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ISO 8601 国际标准化组织的国际标准ISO 8601是日期和时间的表示方法（1998、2000、2004等版本）</span></span><br><span class="line"><span class="comment"> * GMT（格林尼治标准时间）是一些欧洲和非洲国家正式使用的时间，</span></span><br><span class="line"><span class="comment"> * UTC（是国际标准）这两个时间一般情况是相等的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Thu Nov 04 2021 08:00:00 GMT+0800 (中国标准时间) 指 中国标准时间是格林尼治标准时间 + 8小时(偏移量)</span></span><br><span class="line"><span class="comment"> * UTC或GMT 时间00:00:00的时候，我们的时间是08:00:00</span></span><br><span class="line"><span class="comment"> * IOS上执行new Date(&#x27;1990-01-04&#x27;)会得到invilaid date。处理方法是对1990-01-04转换成1990/01/04的格式</span></span><br><span class="line"><span class="comment"> * Thu Nov 04 2021 10:10:10 GMT+0800 (中国标准时间) 等同于UTC时间 2021-11-04T02:10:10.000Z (T指UTC时间)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//new Date 里的参数默认中国标准时间</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">NewDate</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2021-11-04&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============日期基础===================&quot;</span>);</span><br><span class="line"><span class="comment">//浏览器运行结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2021-11-04&quot;</span>)); <span class="comment">//Thu Nov 04 2021 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">//Thu Nov 04 2021 16:05:58 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1636013291302</span>)); <span class="comment">//Thu Nov 04 2021 16:08:11 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;Thu Nov 04 2021 16:08:11 GMT+0800&quot;</span>)); <span class="comment">//Thu Nov 04 2021 16:08:11 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2021-11-04T10:10:10&quot;</span>)); <span class="comment">//Thu Nov 04 2021 10:10:10 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">//node运行 (ISO 8601)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2021-11-04T10:10:10&quot;</span>)); <span class="comment">//2021-11-04T02:10:10.000Z</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前时间(从格林威治1970.1.1 00:00:00 [国内 1970.1.1 08:00:00] 开始的毫秒数)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), +<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="title class_">Date</span>.<span class="title function_">now</span>()); <span class="comment">// 三种方式</span></span><br><span class="line"><span class="comment">//获取当前毫秒数(0-999)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getMilliseconds</span>());</span><br><span class="line"><span class="comment">//获取一分钟后的毫秒数目</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="number">60000</span>).<span class="title function_">getTime</span>());</span><br><span class="line"><span class="comment">//获取星期</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法返回指定日期在月中的第几天（从 1 到 31）。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDate</span>(), <span class="string">&quot;getDate&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2021-11-05 07:59:59&quot;</span>).<span class="title function_">getUTCDate</span>(), <span class="string">&quot;getUTCDate&quot;</span>); <span class="comment">//中国标准上午八点之前，获取到的是前一天</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//getUTCHours 与 getHours</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2021-11-05 08:00:00&quot;</span>).<span class="title function_">getHours</span>(), <span class="string">&quot;getHours&quot;</span>); <span class="comment">//8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2021-11-05 08:00:00&quot;</span>).<span class="title function_">getUTCHours</span>(), <span class="string">&quot;getUTCDate&quot;</span>); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============end===================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================通过Date方法获取日期时间格式===========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:返回时间</span></span><br><span class="line"><span class="comment"> * 描述:date.toTimeString         // 11:19:44 GMT+0800 (中国标准时间,24小时制)</span></span><br><span class="line"><span class="comment"> *console.log(new Date(1597894083000).toLocaleString())      // 2020/8/20 上午11:26:29</span></span><br><span class="line"><span class="comment"> *console.log(new Date().toLocaleTimeString()) //下午3:23:14</span></span><br><span class="line"><span class="comment"> *console.log(new Date(1597894083000).toLocaleDateString())  // 2020/8/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取24制小时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getTimeFromDate</span> = (<span class="params">date</span>) =&gt; date.<span class="title function_">toTimeString</span>().<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">let</span> time1 = <span class="title function_">getTimeFromDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// 09:46:08</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;========转换输出格式=============&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()); <span class="comment">//2021/11/5 上午11:50:41</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>()); <span class="comment">//上午11:50:41</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleDateString</span>()); <span class="comment">//2021/11/5</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>()); <span class="comment">//转ISO标准，日期格式 2021-11-05T03:47:35.756Z</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toUTCString</span>()); <span class="comment">//Fri, 05 Nov 2021 03:45:22 GMT (推荐)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toGMTString</span>()); <span class="comment">//Fri, 05 Nov 2021 03:45:22 GMT (不推荐)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toString</span>()); <span class="comment">//中国标准时间(默认)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toTimeString</span>()); <span class="comment">//中国标准时间后半部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toDateString</span>()); <span class="comment">//中国标准时间日期部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;========end=============&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><blockquote><p>1.IEEE754 标准中的 “双精度浮点数” 来表示一个数字，不区分整数和浮点数。 2.有效数值默认总是 1，不保存在 64 位之中，也就是说，有效数字总是 1.xxxx 的形式，其中 xxxx 的部分保存在 64 位浮点数之中，最长可能位 52 位</p></blockquote><h4 id="Number-MAX-VALUE"><a href="#Number-MAX-VALUE" class="headerlink" title="Number.MAX_VALUE"></a>Number.MAX_VALUE</h4><blockquote><p>js number 表示的最大值 <code>Number.MAX_VALUE == (2**53 - 1)*(2**971)</code>,52 是浮点数部分 1 是整数默认部分<br>IEEE754 标准的双精度 64 &#x3D; <code>sign bit（符号1）</code> + <code>exponent（指数11）</code>+ <code>mantissa（尾数52）</code></p></blockquote><ul><li>Number.MAX_VALUE 运算过程<ul><li>11 位指数为(2^0~2^10 &#x3D;&gt; 2^11-1 &#x3D;&gt; 2047)</li><li>IEEE 标准需要 1023 偏移量(除了最高位其他全为 1 的时)</li><li>默认整数位 1+52 位浮点数<ul><li><code>1.1111111111111111111111111111111111111111111111111111 * 2^(2046 - 1023)</code>，[0 到 2046 次]</li><li><code>1.1111111111111111111111111111111111111111111111111111 * 2^1023</code></li><li><code>11111111111111111111111111111111111111111111111111111 * 2^(1023-52)</code></li><li><code>(2**53 - 1)*2^971</code></li></ul></li></ul></li></ul><h4 id="Number-MAX-SAFE-INTEGER"><a href="#Number-MAX-SAFE-INTEGER" class="headerlink" title="Number.MAX_SAFE_INTEGER"></a>Number.MAX_SAFE_INTEGER</h4><blockquote><p>最大安全整数，就是大于这个数的整数不一定可以精确表示 <code>Number.MAX_SAFE_INTEGER == 2**53-1</code><br>Number.MAX_SAFE_INTEGER+1 &#x3D;&#x3D; Number.MAX_SAFE_INTEGER+2 &#x2F;&#x2F;true</p></blockquote><h4 id="0-1-0-2-0-3"><a href="#0-1-0-2-0-3" class="headerlink" title="0.1+0.2!&#x3D;0.3"></a>0.1+0.2!&#x3D;0.3</h4><blockquote><p>运算时将目标转成二进制进行运算，这两个转二进制都是无限循环<br>而存储结构中的尾数部分最多只能表示 53 位。为了能表示 0.1，只能模仿十进制进行四舍五入了，但二进制只有 0 和 1 ， 于是变为 0 舍 1 入 。<br>通过进制的加法运算后的二进制重新转十进制，有些情况就产生了偏差</p></blockquote><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 十进制:100  (逢10进1，最高位9   从0到9都是一位，10 变两位，进1，自生变0)</span></span><br><span class="line"><span class="comment">  *   </span></span><br><span class="line"><span class="comment">  *   转二进制</span></span><br><span class="line"><span class="comment">  *     除二取余数，从下往上，就是二进制的从左到右</span></span><br><span class="line"><span class="comment">  *     (100).toString(2)</span></span><br><span class="line"><span class="comment">  *   转十进制</span></span><br><span class="line"><span class="comment">  *     (0x64).toString(10);</span></span><br><span class="line"><span class="comment">  *     Number(0x64)</span></span><br><span class="line"><span class="comment">  * 二进制（0b）:01100100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 八进制(0o|0 ):01 100 100 =&gt; 144 </span></span><br><span class="line"><span class="comment">  *  占三位 最大值1+2+4 = 7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 十六进制(0x):0110 0100 =&gt; 64</span></span><br><span class="line"><span class="comment">  *  占四位 最大值1+2+4+8 =15 </span></span><br><span class="line"><span class="comment">  *  颜色值六个十六进制占三个字节24位 =&gt; #ffffff =&gt; rgb(0b11111111,0b11111111,0b11111111) 所以范围是0-255,所以三个字节的颜色拥有256*256*256种颜色</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *  十六位能放多大的十进制数字?</span></span><br><span class="line"><span class="comment">  *     (2**0)+(2**1)+(2**2)+(2**3)+(2**4)+(2**5)+(2**6)+(2**7)+(2**8)+(2**9)+(2**10)+(2**11)+(2**12)+(2**13)+(2**14)+(2**15)</span></span><br><span class="line"><span class="comment">  *     1 2 4 8....   = 65535</span></span><br><span class="line"><span class="comment">  *     或 最大四位十六进制转十进制 (0xffff).toString(10) =  = 65535</span></span><br><span class="line"><span class="comment">  *     4个字节32位最大能存多少  (0xFFFFFFFF).toString(10) = 4294967295 </span></span><br><span class="line"><span class="comment">  *     1kb = 1024字节 = 8192位 = 可以储存 1111 1111 1111 1111 ... 的这种二进制8192个</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *  一个字符如何转为二进制?</span></span><br><span class="line"><span class="comment">  *     可以说每个字符都有对应的二进制编号</span></span><br><span class="line"><span class="comment">  *     基础字符在ascii表有对应的编号，比如 字符A，表中对应二进制 01000001 ,转 二进制就是65了</span></span><br><span class="line"><span class="comment">  *  </span></span><br><span class="line"><span class="comment">  *   二进制为什么可以显示位画面?</span></span><br><span class="line"><span class="comment">  *     屏幕画面是由一个个非常微小的像素的组成，每个像素点是有rgb三基色组成，红、绿、蓝的范围都是0-255，8位的二进制</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h4 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h4><ul><li>十进制转二进制原码，最高位是<code>符号位</code>,0 为正，1 为负</li><li>原码转反码<ul><li><code>正数(最高位为0的) 原码就是反码</code></li><li><code>负数(最高位为1的) 符号位不变，其余取反</code><ul><li>如果<code>定义为有符号数值的类型</code>为四个字节，那么最高位就是第 32 位</li></ul></li></ul></li><li>反码转成补码 - <code>正数(最高位为0的) 原码还是补码</code> - <code>负数(最高位为1的) 补码就是在反码的基础上+1</code><!-- 二进制间运算先要转成补码，得到结果再转回原码 --></li></ul><h4 id="小数的二进制"><a href="#小数的二进制" class="headerlink" title="小数的二进制"></a>小数的二进制</h4><blockquote><p>公式: *2 如果&lt;1 就为 0，基数&#x3D;基数；大于 1,就为 1,基数&#x3D;基数-1，直至小数点后为 0</p></blockquote><ul><li><code>0.6</code><ul><li>0.6*2 &#x3D;&gt; 1.2 1</li><li>0.2*2 &#x3D;&gt; 0.4 0</li><li>0.4*2 &#x3D;&gt; 0.8 0</li><li>0.8*2 &#x3D;&gt; 1.6 1</li><li>0.6*2 &#x3D;&gt; 1.2 1 0.100110011001….无限循环</li></ul></li></ul><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><ul><li><p><code>+</code></p><ul><li>在计算机中，<code>负数</code>以原码的<code>补码形式</code>表达(负数绝对值原码最高位变 1&#x3D;&gt;除最高位取反&#x3D;&gt;+1)</li><li><code>3 + 8</code><ul><li><code>0000 0011</code> + <code>0000 1000</code> &#x3D; <code>0000 1011</code> &#x3D;&gt; <code>11</code>;</li></ul></li><li><code>3 + (-8)</code><ul><li>正数补码 + 负数补码 &#x3D; 负数补码 &#x3D;&gt; 转原码 &#x3D; 转十进制</li><li><code>0000 0011</code> + <code>(1000 1000 =&gt; 1111 0111 =&gt; 1111 1000)</code> &#x3D; <code>1111 1011</code> &#x3D;(负转原 减 1 取反)&#x3D;&gt; <code>1000 0101</code> &#x3D; -5</li></ul></li><li><code>3 + (-1)</code><ul><li><code>0000 0011</code> + <code>(1000 0001 =&gt; 1111 1110 =&gt; 1111 1111)</code> &#x3D; <code>0000 0010</code> &#x3D;(正转原)&#x3D;&gt; <code>0000 0010</code> &#x3D; 2</li></ul></li></ul></li><li><p><code>3 &lt;&lt; 8</code> : 按位左移动 &#x3D;&#x3D;&gt; 3*(2^8)</p><ul><li>将 3 转为二进制，再整体向左移动八位(右边添加 8 个 0)</li><li>程序中运算结果会将移动好的二进制再转十进制显示，<code>(3 &lt;&lt; 8).toString(2)</code> 可以还原</li><li>(3 &lt;&lt; 8) &#x3D;&#x3D; 0011 0000 0000</li></ul></li><li><p><code>3 &gt;&gt; 8</code> : 按位右移动,,则高位补 0,若为负数,则高位补 1（&gt;&gt;&gt; 无符号右移，不论正负最高位都补 0）</p><ul><li>将 3 转为二进制，再整体从右边删除八位</li><li>(3 &gt;&gt; 1) &#x3D;&#x3D; 0001</li></ul></li><li><p><code>|</code>: 按位或</p><ul><li>相同位相加 不为 0 则为 1</li></ul></li><li><p><code>&amp;</code>：按位与</p><ul><li>相同位都为 1 则为 1</li></ul></li><li><p><code>^</code>：按位异或</p><ul><li>相同为零不同为一</li></ul></li><li><p><code>~5</code>:按位取反</p><ul><li><p>规则 <code>转数值原码</code> &#x3D;&gt; <code>转反码</code> &#x3D;&gt; <code>转补码</code> &#x3D;&gt; <code>补码全部取反</code>(<strong>~关键作用步骤</strong>) &#x3D;&#x3D;&gt; <code>转反码</code> &#x3D;&gt; <code>转原码</code>(最终值得原码)</p><ul><li><code>~5</code>:0000 0101(原、反、补) &#x3D;&gt; 1111 1010(补码取反) &#x3D;&gt; 1111 1001(减 1 变反码) &#x3D;&gt; 1000 0110(变原码) &#x3D;&gt; -6</li></ul></li><li><p>位数的运算</p><ul><li>8 位 最大值是 255 &#x3D;&gt; 1+2+4+8+16+32+64+128 &#x3D;&gt; 2^0 ~ 2^7 &#x3D;&gt; 2^8 - 1 的结果</li><li>32 位 最大值是 2^0 ~ 2^31 值之和 &#x3D;&gt; 2^32 -1</li><li>2^32 - 1 的 4294967295 是 32 位能表示的最大值</li><li>2^31 的 2147483648 的大小是 32 位中最小的（1 31 个 0）</li></ul></li><li><p>操作数被转换为 32 位二进制表示（0 和 1）。超过 32 位的数字将丢弃</p><ul><li>范围内 任何数字 x 的运算结果都是<code>-(x + 1)</code><ul><li>上述 2^31 的 2147483648 涉及到 32 位了（大于等于它的数值在~中都不存在符号了）,不能用公式</li><li>大于等于 2147483648 的数值 x,~x &#x3D;&gt; 4294967295 - x;</li><li>总结<ul><li>达到最高 32 位的正数 与 ~最终结果之和要等于 4294967295</li><li>未达到最高 32 的正数 与 ~最终结果之和要等于 -1</li><li>大于等于 -2147483648 的负数 与 ~最终结果之和要等于-1</li><li>小于 -2147483648 的负数 与 ~最终结果之和要等于 -4294967297</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="Set、Map、weakSet、weakMap"><a href="#Set、Map、weakSet、weakMap" class="headerlink" title="Set、Map、weakSet、weakMap"></a>Set、Map、weakSet、weakMap</h4><p>Set</p><ol><li>成员不能重复</li><li>只有健值，没有健名，有点类似数组。</li><li>可以遍历，方法有 add, delete,has<br>weakSet</li><li>成员都是对象</li><li>成员都是弱引用，随时可以消失。 可以用来保存 DOM 节点，不容易造成内存泄漏</li><li>不能遍历，方法有 add, delete,has<br>Map</li><li>本质上是健值对的集合，类似集合</li><li>可以遍历，方法很多，可以干跟各种数据格式转换<br>weakMap</li><li>直接受对象作为健名（null 除外），不接受其他类型的值作为健名<br>健名所指向的对象，不计入垃圾回收机制</li><li>不能遍历，方法同 get,set,has,delete</li></ol><h3 id="js-代码整洁之道"><a href="#js-代码整洁之道" class="headerlink" title="js 代码整洁之道"></a>js 代码整洁之道</h3><p><a href="https://zhuanlan.zhihu.com/p/159458364">暂时参考</a><br><a href="https://www.cnblogs.com/wenxinsj/p/14646550.html">暂时参考</a><br><a href="https://www.jianshu.com/p/fb4409d8ace2">暂时参考</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.文件、文件夹名，横杠分词</span></span><br><span class="line"><span class="comment">序号，下划线</span></span><br><span class="line"><span class="comment">2.组件，大驼峰</span></span><br><span class="line"><span class="comment">3.类名，横杠分词，多层级双横杠</span></span><br><span class="line"><span class="comment">4.函数名、普通变量名，小驼峰</span></span><br><span class="line"><span class="comment">5.关键字、变量、标点符号（除 括号 和 引号）后加空格</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><blockquote><p>在某一行打下断点,当浏览器执行到这一行时，程序暂停，可以观察限制，代码状态，变量值等，在通过下一步下一步查看代码走向以及值的变化</p></blockquote><h2 id="JS-功能性问题"><a href="#JS-功能性问题" class="headerlink" title="JS 功能性问题"></a>JS 功能性问题</h2><h3 id="js-判断服务器图片是否存在"><a href="#js-判断服务器图片是否存在" class="headerlink" title="js 判断服务器图片是否存在"></a>js 判断服务器图片是否存在</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ImgObj</span> = <span class="keyword">new</span> <span class="title class_">Image</span>(); <span class="comment">//判断图片是否存在</span></span><br><span class="line"><span class="title class_">ImgObj</span>.<span class="property">src</span> = <span class="string">&quot;xxxx.png&quot;</span>;</span><br><span class="line"><span class="title class_">ImgObj</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图片存在&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ImgObj</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图片不存在&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="js-插入样式"><a href="#js-插入样式" class="headerlink" title="js 插入样式"></a>js 插入样式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> style = <span class="string">&quot;&lt;style&gt;#print .linetow&#123;text-align:center&#125;&lt;/style&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">ele.<span class="property">innerHTML</span> = style;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(ele.<span class="property">firstElementChild</span>);</span><br></pre></td></tr></table></figure><h3 id="类数组转数组"><a href="#类数组转数组" class="headerlink" title="类数组转数组"></a>类数组转数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArray</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="comment">//1. 原理是数组的slice()方法可以从已有数组中返回一个新数组，它可以接受两个参数arr.slice(start,end),如果不传参将返回原数组的一个副本，但该方法不会修改原数组，而是返回截取的新数组</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">  <span class="comment">//2. splice(start,count,item) 改变原数组</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>));</span><br><span class="line">  <span class="comment">//3. Array.from(arguments)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">  <span class="comment">//4. Array.apply(null, arguments)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, <span class="variable language_">arguments</span>));</span><br><span class="line">  <span class="comment">//5. [].concat.apply([], arguments)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="property">concat</span>.<span class="title function_">apply</span>([], <span class="variable language_">arguments</span>));</span><br><span class="line">  <span class="comment">//6. 循环遍历类数组对象，push到新创建的数组对象里</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getArray</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="根据对象某属性去重"><a href="#根据对象某属性去重" class="headerlink" title="根据对象某属性去重"></a>根据对象某属性去重</h3><blockquote><p>通过 reduce,判断 list 列表每一项的 a 属性,是否含有与 next 中 a 相等的，如果有不添加 next，否则添加 next</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> objList = [</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  objList.<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">list, next</span>) =&gt;</span></span><br><span class="line">      list.<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item[<span class="string">&quot;a&quot;</span>] == next[<span class="string">&quot;a&quot;</span>]) ? list : [...list, next],</span><br><span class="line">    []</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组扁平化</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>, [<span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">m_concat</span> = (<span class="params">...arg</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1、扁平化 flat</span></span><br><span class="line">  <span class="keyword">return</span> arg.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、reduct</span></span><br><span class="line">  <span class="comment">// if (arg.length == 1) &#123;</span></span><br><span class="line">  <span class="comment">//     arg = arg[0];</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return arg.reduce((a, next) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     return a.concat(Array.isArray(next) ? m_concat(next) : next);</span></span><br><span class="line">  <span class="comment">// &#125;, []);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、正则</span></span><br><span class="line">  <span class="comment">// return JSON.stringify(arg).replace(/\[|\]/g,&quot;&quot;).split(&quot;,&quot;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、数值变字符串，并将字符串数值变为number， arg+&quot;&quot; 一样</span></span><br><span class="line">  <span class="comment">// return arg.toString().split(&quot;,&quot;).map((item) =&gt; (/^\d+$/.test(item) ? Number(item) : item));</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、while some</span></span><br><span class="line">  <span class="comment">// while (arg.some((item) =&gt; Array.isArray(item))) &#123;</span></span><br><span class="line">  <span class="comment">//     arg = [].concat(...arg);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return arg;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">flatten</span> = (<span class="params">array</span>) =&gt; &#123;</span><br><span class="line">  array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? [...acc, ...<span class="title function_">flatten</span>(cur)] : [...acc, cur];</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr));</span><br></pre></td></tr></table></figure><h3 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h3><blockquote><p>Blob(二进制大对象)对象是一个用来包装二进制文件的容器，File 继承于 Blob</p><p><strong>IE9-浏览器不支持</strong></p></blockquote><h4 id="Blob-创建"><a href="#Blob-创建" class="headerlink" title="Blob 创建"></a>Blob 创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myBlob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], &#123; <span class="attr">type</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBlob);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBlob.<span class="property">size</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBlob.<span class="property">type</span>);</span><br><span class="line"><span class="comment">// blob.slice 大文件切割返回小 blob</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过input FileList获取文件Blob</span></span><br></pre></td></tr></table></figure><h4 id="Blob-下载"><a href="#Blob-下载" class="headerlink" title="Blob 下载"></a>Blob 下载</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//创建XMLHttpRequest对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//配置请求方式、请求地址以及是否同步</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/sfwanshengjie/mp4/shipin1.mp4&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//设置请求结果类型为blob</span></span><br><span class="line">    xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span>;</span><br><span class="line">    <span class="comment">//请求成功回调函数</span></span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">//获取blob对象</span></span><br><span class="line">            <span class="keyword">var</span> blob = <span class="variable language_">this</span>.<span class="property">response</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(blob);</span><br><span class="line">            <span class="comment">//获取blob对象地址，并把值赋给容器</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>).<span class="property">src</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Blob-转地址"><a href="#Blob-转地址" class="headerlink" title="Blob 转地址"></a>Blob 转地址</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把blob转化成当前页面的一个data:image/jpeg;base64内存地址</span></span><br><span class="line"><span class="keyword">let</span> fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">fr.<span class="title function_">readAsDataURL</span>(file | blob);</span><br><span class="line">fr.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> base64 = e.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(base64);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把blob转化成当前页面的一个blob:xxxx内存地址</span></span><br><span class="line"><span class="keyword">let</span> src = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(file | blob); <span class="comment">// 这个方法也可以传一个file</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(src);</span><br><span class="line">img.<span class="property">src</span> = src;</span><br></pre></td></tr></table></figure><ul><li>URL.createObjectURL(file|blob) 可以获取当前文件的一个内存 URL<ul><li>得到 blob:<a href="http://127.0.0.1:5500/xxxxxxxx">http://127.0.0.1:5500/xxxxxxxx</a> 格式地址，不是 base64 的</li><li>比 base64 地址小节约空间</li><li>立即执行的同步生成，FileReader 需要在 onload 下异步获取 base64</li><li>URL.revokeObjectURL 释放该地址</li><li>data:&#x2F;&#x2F;URL 会对内容进行编码。blob:&#x2F;&#x2F;URL 只是对浏览器存储在内存中或者磁盘上的 Blob 的一个简单引用</li></ul></li></ul><h3 id="JS-获取-base64-的方式"><a href="#JS-获取-base64-的方式" class="headerlink" title="JS 获取 base64 的方式"></a>JS 获取 base64 的方式</h3><blockquote><p>base64 是二进制数据的一个编码格式</p></blockquote><ul><li>JS 通过 FileReader 获取 base64</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">fileReader.<span class="title function_">readAsDataURL</span>(file | <span class="title class_">Blob</span>); <span class="comment">// base64形式 读取图片</span></span><br><span class="line">fileReader.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//图片读取完成</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">result</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>JS 通过 canvas 获取 base64</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个image就是输入</span></span><br><span class="line"><span class="comment">// 除了new，也可以直接取页面上的标签</span></span><br><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line"></span><br><span class="line">image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> w = image.<span class="property">width</span>;</span><br><span class="line">   <span class="keyword">var</span> h = image.<span class="property">height</span>;</span><br><span class="line">   <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">   <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">   canvas.<span class="property">width</span> = w;</span><br><span class="line">   canvas.<span class="property">height</span> = h;</span><br><span class="line">   ctx.<span class="title function_">drawImage</span>(image, <span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">   <span class="comment">// 可以在这里添加水印或者合并图片什么的</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">// 把画布的内容转成base64，这个就是输出</span></span><br><span class="line">   <span class="keyword">var</span> base64 = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/jpeg&#x27;</span>，<span class="number">0.1</span>);<span class="comment">//参数2压缩比例</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(base64)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个src可以是本地路径，服务器图片地址，也可以是上面fileReader的base64</span></span><br><span class="line">image.<span class="property">src</span> = <span class="string">&quot;xxx.jpg&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="输入框光标"><a href="#输入框光标" class="headerlink" title="输入框光标"></a>输入框光标</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Input</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"><span class="comment">//vue ref =&gt; Input = this.$refs.exprInput.getInput()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="title class_">Input</span>.<span class="property">selectionStart</span>; <span class="comment">//获取开始位置</span></span><br><span class="line"><span class="keyword">let</span> end = <span class="title class_">Input</span>.<span class="property">selectionEnd</span>; <span class="comment">//获取结束位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 vue需要 this.$nextTick(() =&gt; &#123;&#125;) 中,当dom都加载完毕再执行</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Input</span>.<span class="title function_">setSelectionRange</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="comment">//或</span></span><br><span class="line">  start.<span class="property">selectionStart</span> = <span class="number">1</span>; <span class="comment">// 设置光标开始的位置</span></span><br><span class="line">  end.<span class="property">selectionEnd</span> = <span class="number">3</span>; <span class="comment">// 设置光标结束的位置</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例 光标位置插入数据</span></span><br><span class="line"><span class="keyword">let</span> inputval = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> before = inputval.<span class="title function_">substring</span>(<span class="number">0</span>, start);</span><br><span class="line"><span class="keyword">let</span> after = inputval.<span class="title function_">substring</span>(end);</span><br><span class="line"><span class="keyword">let</span> data = before + <span class="string">&quot;newvalue&quot;</span> + after;</span><br></pre></td></tr></table></figure><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p><a href="https://www.cnblogs.com/pengdt/p/12037986.html">xxxx</a></p><ul><li>多选:multiple</li><li>指定类型:accept&#x3D;”image&#x2F;*“</li><li>类数组 input.flies 返回一个 FileList 选择的图片数据</li><li>capture 调用摄像头</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;uploadFile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;uploadFile()&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><blockquote><p>FileReader 是用来读取内存中的文件的 API，支持 File 和 Blob 两种格式。</p></blockquote><ul><li>FileReader.readyState<ul><li>0：EMPTY&#x2F;还没有加载任何数据</li><li>1：LOADING&#x2F;数据正在被加载</li><li>2：DONE&#x2F;已完成全部的读取请求</li></ul></li><li>FileReader.result</li><li>FileReader.error</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readAsArrayBuffer(file) :按字节读取文件内容，结果用ArrayBuffer对象表示</span></span><br><span class="line"><span class="comment">// readAsBinaryString(file) :按字节读取文件内容，结果为文件的二进制串</span></span><br><span class="line"><span class="comment">// readAsDataURL(file) :读取文件内容，结果用data:url的字符串形式表示</span></span><br><span class="line"><span class="comment">// readAsText(file,encoding) :按字符读取文件内容，结果用字符串形式表示</span></span><br><span class="line"><span class="comment">// abort() :终止文件读取操作</span></span><br><span class="line"><span class="comment">// 事件</span></span><br><span class="line"><span class="comment">// onloadstart 当读取操作开始时调用</span></span><br><span class="line"><span class="comment">// onprogress 在读取数据过程中周期性调用</span></span><br><span class="line"><span class="comment">// onabort 当读取操作被中止时调用</span></span><br><span class="line"><span class="comment">// onerror 当读取操作发生错误时调用</span></span><br><span class="line"><span class="comment">// onload 当读取操作成功完成时调用</span></span><br><span class="line"><span class="comment">// onloadend 当读取操作完成时调用，无论成功，失败或取消</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">fileReader.<span class="title function_">readAsDataURL</span>(file); <span class="comment">// base64形式 读取图片</span></span><br><span class="line">fileReader.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//图片读取完成</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">result</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">let</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">fileReader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">fileReader.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 读取完成</span></span><br><span class="line">  <span class="keyword">let</span> res = fileReader.<span class="property">result</span>;</span><br><span class="line">  <span class="comment">// res是base64格式的图片</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h4><blockquote><p>用一些键值对来模拟一系列表单控件：即把 form 中所有表单元素的 name 与 value 组装成 一个 queryString</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line"><span class="comment">//各种方式给formData添加文件数据</span></span><br><span class="line">formData.<span class="title function_">set</span>(fieldName, file);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    name:属性名</span></span><br><span class="line"><span class="comment">    value:属性值，在我们这里则指 file 数据</span></span><br><span class="line"><span class="comment">    filename:当第二个参数为 file 或 blob 时，告诉服务器的文件名。Blob 对象的默认文件名是“blob”。File 对象的默认文件名 是文件的文件名。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">formData.<span class="title function_">append</span>(name, value, filename);</span><br></pre></td></tr></table></figure><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">post</span>(<span class="string">&quot;url/load&quot;</span>, formDate, config)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="大文件上传"><a href="#大文件上传" class="headerlink" title="大文件上传"></a>大文件上传</h4><pre><code>-file继承Blob利用Blob的slice方法将文件切片-确定每片大小-获取总大小 (file.size)-片段数量 (Math.ceil(总大小/每片大小))-定义一个偏移量决定每次调接口传哪一段，每次调用便宜量++</code></pre><h4 id="Canvas-图片上传"><a href="#Canvas-图片上传" class="headerlink" title="Canvas 图片上传"></a>Canvas 图片上传</h4><pre><code>-通过 canvas.toDataURL(&#39;image/jpeg&#39;) 上传base64上传</code></pre><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>ASCII 码字符集、Unicode 字符集</p><h3 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">计算机的底层硬件实现就是用电量的 开 和 闭 两种状态来表示0 和 1 的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ASCII </span></span><br><span class="line"><span class="comment">ASCII  使用一个字节表示一个字符(8bit)，不使用最高位</span></span><br><span class="line"><span class="comment">二进制  0000 0000    十进制   0         </span></span><br><span class="line"><span class="comment">        0111 1111            127</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">最多只能表示128个字符</span></span><br><span class="line"><span class="comment">数字与编码存在着对应关系chr 和 ord 可查看对应关系</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line"><span class="comment">latin1(ISO-8859-1)  HTML 4 的默认字符集</span></span><br><span class="line"><span class="comment">向下兼容ASCII ,启用最高位</span></span><br><span class="line"><span class="comment">二进制曾 1000 0000    十进制  128</span></span><br><span class="line"><span class="comment">        1111 1111            255</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">最多能表示255个字符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-------------------------------------------------</span></span><br><span class="line"><span class="comment">Unicode(国际码) 表示更多字符,大多数国家的文字都有一个对应编码</span></span><br><span class="line"><span class="comment">(1) Unicode 与 latin1无关,前128兼容ASCLL</span></span><br><span class="line"><span class="comment">(2) 通过连个字节来表示更多的自己付 最多可达16位</span></span><br><span class="line"><span class="comment">(3) 为了让计算机知道后面的两个字节代表的是一个字符,还是两个字符,所以所有字符都有两个字节代替,不够就补0(比较浪费空间)</span></span><br><span class="line"><span class="comment">(4)如果将一个字符的16位当做两个8位处理就会造成乱码(如:x.encode(&#x27;utf8&#x27;)  得到的结果 decode(&#x27;gbk‘)情况)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(5) 基于浪费空间问题于是产生很多Unicode 的编码方式如:  UTF-8 、 UTF-16、GBK、BIG5 或 UTF-32等了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unicode 的编码方式不同编码方式以不同规则表示</span></span><br><span class="line"><span class="comment">GBK: 国标扩，规定汉子占两个字节,用于简体中文</span></span><br><span class="line"><span class="comment">BIG5:繁体中午</span></span><br><span class="line"><span class="comment">UTF-8:统一编码 汉字占三个字节</span></span><br><span class="line"><span class="comment">-------------------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="滚动条动态底部"><a href="#滚动条动态底部" class="headerlink" title="滚动条动态底部"></a>滚动条动态底部</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变化的时候</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">overflow</span>容器.<span class="property">scrollTop</span> = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">overflow</span>容器.<span class="property">scrollHeight</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="指定时间触发定时器"><a href="#指定时间触发定时器" class="headerlink" title="指定时间触发定时器"></a>指定时间触发定时器</h3><blockquote><p>通过一个定时器找到指定时与分，关闭定时器，执行内容，定义第二个 24 小时执行一次的定时器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 固定时间执行定时器</span></span><br><span class="line"><span class="comment">// 利用定时器监听到某个时间点时触发另外一个定时器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ListenerTime</span> = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">2</span>; <span class="comment">//监控的执行间隔时间   每小时</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">StartTime</span> = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>; <span class="comment">//正式启动后的执行间隔时间   每天 24小时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RunInterval</span>,</span><br><span class="line">  runTime,</span><br><span class="line">  hh = <span class="number">11</span>,</span><br><span class="line">  mm = <span class="number">34</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *启动的入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正在启动监听....&quot;</span>);</span><br><span class="line">  <span class="comment">//直接符合条件不开定时器</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">runCode</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  runTime = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">runCode</span>();</span><br><span class="line">  &#125;, <span class="title class_">ListenerTime</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * run定时器中要做的事情</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&quot;监听中....第&quot;</span> +</span><br><span class="line">      <span class="title function_">getTime</span>(<span class="string">&quot;hh&quot;</span>) +</span><br><span class="line">      <span class="string">&quot;小时&quot;</span> +</span><br><span class="line">      <span class="string">&quot;,当前是第 &quot;</span> +</span><br><span class="line">      <span class="title function_">getTime</span>(<span class="string">&quot;mm&quot;</span>) +</span><br><span class="line">      <span class="string">&quot; 分,&quot;</span> +</span><br><span class="line">      <span class="title function_">getTime</span>(<span class="string">&quot;ss&quot;</span>) +</span><br><span class="line">      <span class="string">&quot; 秒&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getTime</span>(<span class="string">&quot;hh&quot;</span>) == hh) &#123;</span><br><span class="line">    <span class="comment">//当系统时间是中午12点启动，如果是特定的其他时间可按需改动</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">getTime</span>(<span class="string">&quot;mm&quot;</span>) == mm || <span class="title function_">getTime</span>(<span class="string">&quot;mm&quot;</span>) == mm + <span class="number">1</span>) &#123;</span><br><span class="line">      runTime &amp;&amp; <span class="built_in">clearInterval</span>(runTime); <span class="comment">//清除监控的定时器</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">&quot;找到执行时间,当前过 1000 * 60 * 60 * 24 毫秒再次执行,已关闭监听&quot;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="title class_">StartInterval</span>(); <span class="comment">//启动要执行的方法</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  到监控时间后所要启动的定时器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">StartInterval</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">main</span>();</span><br><span class="line">  <span class="title class_">RunInterval</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">main</span>();</span><br><span class="line">  &#125;, <span class="title class_">StartTime</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  主要执行的函数内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot;正式执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *关闭主要执行的定时器</span></span><br><span class="line"><span class="comment"> * 需要额外调用来关闭主程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">closeInterval</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(<span class="title class_">RunInterval</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已关闭执行程序&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 获取系统时间的方法  **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; time  想要获取时分秒的判断参数</span></span><br><span class="line"><span class="comment"> * YY 年;MM 月;DD 日;hh 时;mm 分;ss 秒;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * return   返回类型为Number型,若参数正确，返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTime</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> datetime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = datetime.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> month = datetime.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> day = datetime.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Hours</span> = datetime.<span class="title function_">getHours</span>();</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Minutes</span> = datetime.<span class="title function_">getMinutes</span>();</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Seconds</span> = datetime.<span class="title function_">getSeconds</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (time) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;YY&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> year;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;MM&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> month;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DD&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> day;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;hh&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Hours</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;mm&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Minutes</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ss&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Seconds</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟启动</span></span><br><span class="line"><span class="title function_">run</span>();</span><br></pre></td></tr></table></figure><h3 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h3><blockquote><p>请求动画的 API <code>requestAnimationFrame</code> 由系统来决定回调函数的执行时机。<br>根据屏幕刷新率执行下一次<br>它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> progress = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  progress += <span class="number">1</span>; <span class="comment">//修改图像的位置</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(progress);</span><br><span class="line">  <span class="keyword">if</span> (progress &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="comment">//在动画没有结束前，递归渲染</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一帧渲染</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(render);</span><br></pre></td></tr></table></figure><ul><li>大数据操作<blockquote><p>如何操作优化注意的用掉的数据删除，避免下次又要查，和找到目标后直接跳出</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 插入十万条数据</span></span><br><span class="line">  <span class="keyword">const</span> total = <span class="number">1000000</span>;</span><br><span class="line">  <span class="comment">// 一次插入的数据</span></span><br><span class="line">  <span class="keyword">const</span> once = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 插入数据需要的次数</span></span><br><span class="line">  <span class="keyword">const</span> loopCount = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(total / once);</span><br><span class="line">  <span class="keyword">let</span> countOfRender = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">  <span class="comment">// 添加数据的方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; once; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">      li.<span class="property">innerText</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * total);</span><br><span class="line">      fragment.<span class="title function_">appendChild</span>(li);</span><br><span class="line">    &#125;</span><br><span class="line">    ul.<span class="title function_">appendChild</span>(fragment);</span><br><span class="line">    countOfRender += <span class="number">1</span>;</span><br><span class="line">    <span class="title function_">loop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (countOfRender &lt; loopCount) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(add);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">loop</span>();</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>CPU 节能：页面隐藏(不可见)时停止</li></ul><h3 id="iframe-详细"><a href="#iframe-详细" class="headerlink" title="iframe 详细"></a>iframe 详细</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframe&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.iframe引入一些网站需要关闭 高级 &gt; 隐私设置和安全性 &gt; 内容设置 &gt; Cookie &gt; 阻止第三方Cookie</span></span><br><span class="line"><span class="comment">2.引入不同源页面，无法正常操作子页面</span></span><br><span class="line"><span class="comment">    跨域概念:协议与域名相同，就不算跨域</span></span><br><span class="line"><span class="comment">    跨域顶多只能实现页面跳转window.location.href.</span></span><br><span class="line"><span class="comment">    通过postMessage父子页面消息传递</span></span><br><span class="line"><span class="comment">        父页面（子）</span></span><br><span class="line"><span class="comment">            iframe.contentWindow.postMessage(&#x27;要发送的数据&#x27;或&#123;msg: &#x27;data to parent&#x27;&#125;,&#x27;*&#x27;);</span></span><br><span class="line"><span class="comment">            参数</span></span><br><span class="line"><span class="comment">                data：postMessage传递进来的值</span></span><br><span class="line"><span class="comment">                origin：发送消息的文档所在的域</span></span><br><span class="line"><span class="comment">                source：发送消息文档的window对象的代理</span></span><br><span class="line"><span class="comment">        子页面接收（父）</span></span><br><span class="line"><span class="comment">            window.addEventListener(&quot;message&quot;,(data)=&gt;&#123;console.log(data)&#125;, false);</span></span><br><span class="line"><span class="comment">3.同源情况下父页面操作子页面，或获取子页面消息数据</span></span><br><span class="line"><span class="comment">    子页面Win:iframe.contentWindow || window.frames[&#x27;framesName&#x27;]</span></span><br><span class="line"><span class="comment">    子页面Docs:iframe.contentDocument.getElementById(&quot;xxxxx&quot;)</span></span><br><span class="line"><span class="comment">4.同源情况下子页面操作父页面，或获取父页面消息数据</span></span><br><span class="line"><span class="comment">    子页面</span></span><br><span class="line"><span class="comment">        操作父页面:window.parent.ifrmLoaded(&#x27;window.parent.ifrmLoaded&#x27;);</span></span><br><span class="line"><span class="comment">        多层iframe最顶层:window.top</span></span><br><span class="line"><span class="comment">    父页面接收</span></span><br><span class="line"><span class="comment">        function ifrmLoaded(data)&#123;</span></span><br><span class="line"><span class="comment">            console.log(&#x27;接收子页面操作&#x27;+ data)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">5.iframe的事件操作</span></span><br><span class="line"><span class="comment">    iframe.onload=()=&gt;&#123;&#125;; //子页面加载完成后执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6.iframe标签常用属性</span></span><br><span class="line"><span class="comment">    iframe常用属性:</span></span><br><span class="line"><span class="comment">        1.frameborder:是否显示边框，1(yes),0(no)</span></span><br><span class="line"><span class="comment">        2.height:框架作为一个普通元素的高度，建议在使用css设置。</span></span><br><span class="line"><span class="comment">        3.width:框架作为一个普通元素的宽度，建议使用css设置。</span></span><br><span class="line"><span class="comment">        4.name:框架的名称，window.frames[name]时专用的属性。</span></span><br><span class="line"><span class="comment">        5.scrolling:框架的是否滚动。yes,no,auto。</span></span><br><span class="line"><span class="comment">        6.src：内框架的地址，可以使页面地址，也可以是图片的地址。</span></span><br><span class="line"><span class="comment">        7.sandbox: 对iframe进行一些列限制，IE10+支持</span></span><br><span class="line"><span class="comment">        8.allowfullscreen：是否允许全屏</span></span><br><span class="line"><span class="comment">        9.allowtransparency：是否允许设置透明</span></span><br><span class="line"><span class="comment">7.安全措施</span></span><br><span class="line"><span class="comment">    防止自己网页被iframe</span></span><br><span class="line"><span class="comment">        1. 手动跳转</span></span><br><span class="line"><span class="comment">            if(window != window.top)&#123;</span></span><br><span class="line"><span class="comment">                window.top.location.href = correctURL;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        或</span></span><br><span class="line"><span class="comment">            if (top.location.host != window.location.host) &#123;</span></span><br><span class="line"><span class="comment">            　　top.location.href = window.location.href;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        2.  响应头 X-Frame-Options</span></span><br><span class="line"><span class="comment">            X-Frame-Options是一个相应头，主要是描述服务器的网页资源的iframe权限。</span></span><br><span class="line"><span class="comment">                DENY：当前页面不能被嵌套iframe里，即便是在相同域名的页面中嵌套也不允许,也不允许网页中有嵌套iframe</span></span><br><span class="line"><span class="comment">                SAMEORIGIN：iframe页面的地址只能为同源域名下的页面</span></span><br><span class="line"><span class="comment">                ALLOW-FROM：可以在指定的origin url的iframe中加载</span></span><br><span class="line"><span class="comment">        3. 响应头 Content Security</span></span><br><span class="line"><span class="comment">            比较强大。。。。。</span></span><br><span class="line"><span class="comment">            Content-Security-Policy: default-src &#x27;self&#x27;</span></span><br><span class="line"><span class="comment">            。。。各种配置</span></span><br><span class="line"><span class="comment">    iframe别人网站</span></span><br><span class="line"><span class="comment">        1.sandbox</span></span><br><span class="line"><span class="comment">            是h5的一个新属性，就是用来给指定iframe设置一个沙盒模型，限制iframe的更多权限.</span></span><br><span class="line"><span class="comment">            allow-forms允许进行提交表单</span></span><br><span class="line"><span class="comment">            allow-scripts运行执行脚本</span></span><br><span class="line"><span class="comment">            allow-same-origin允许同域请求,比如ajax,storage</span></span><br><span class="line"><span class="comment">            allow-top-navigation允许iframe能够主导window.top进行页面跳转</span></span><br><span class="line"><span class="comment">            allow-popups允许iframe中弹出新窗口,比如,window.open,target=&quot;_blank&quot;</span></span><br><span class="line"><span class="comment">            allow-pointer-lock在iframe中可以锁定鼠标，主要和鼠标锁定有关</span></span><br><span class="line"><span class="comment">            &lt;iframe sandbox=&quot;allow-forms allow-same-origin&quot; src=&quot;...&quot;&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="页面滚动到顶部"><a href="#页面滚动到顶部" class="headerlink" title="页面滚动到顶部"></a>页面滚动到顶部</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:快速向上滚动至顶部</span></span><br><span class="line"><span class="comment"> * 描述: scrollTo(x,y) 通过横纵坐标位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">scrollToTop</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> t = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>; <span class="comment">//获取滚动高度</span></span><br><span class="line">  <span class="keyword">if</span> (t &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(scrollToTop); <span class="comment">//浏览器自动判断动画完成之后执行回调</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, t - t / <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">scrollToTop</span>();</span><br></pre></td></tr></table></figure><h3 id="点击复制"><a href="#点击复制" class="headerlink" title="点击复制"></a>点击复制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、 input 复制</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">inputvmodel</span> = <span class="string">&quot;xxxxxx&quot;</span>;</span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputref</span>.<span class="title function_">select</span>();</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>); <span class="comment">//只能复制显示的input</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2、 直接复制元素内容</span></span><br><span class="line"><span class="comment"> *  getSelection 表示用户选择的文本范围或光标的当前位置</span></span><br><span class="line"><span class="comment"> *  selectAllChildren 选中 操作元素所有子节点的innerHTML</span></span><br><span class="line"><span class="comment"> *  document.execCommand 即将废弃 用 clipboard 代替</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (navigator.<span class="property">clipboard</span>.<span class="property">writeText</span>) &#123;</span><br><span class="line">  navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(e.<span class="property">target</span>.<span class="property">innerText</span>); <span class="comment">// 复制，写入剪切板</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clipboard&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">selectAllChildren</span>(e.<span class="property">target</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>);</span><br><span class="line">  <span class="comment">//console.log(window.getSelection().toString()); // 获取选择内容</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">removeAllRanges</span>(); <span class="comment">//清除选择的内容</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;execCommand&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(&#123; <span class="attr">showClose</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;复制成功&quot;</span>, <span class="attr">duration</span>: <span class="number">1500</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 粘贴</span></span><br><span class="line">navigator.<span class="property">clipboard</span></span><br><span class="line">  .<span class="title function_">readText</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">clipText</span>) =&gt;</span> (e.<span class="property">target</span>.<span class="property">innerText</span> = clipText));</span><br></pre></td></tr></table></figure><h3 id="数字转大写"><a href="#数字转大写" class="headerlink" title="数字转大写"></a>数字转大写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">digitUppercase</span> = (<span class="params">n</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> fraction = [<span class="string">&quot;角&quot;</span>, <span class="string">&quot;分&quot;</span>];</span><br><span class="line">  <span class="keyword">var</span> digit = [<span class="string">&quot;零&quot;</span>, <span class="string">&quot;壹&quot;</span>, <span class="string">&quot;贰&quot;</span>, <span class="string">&quot;叁&quot;</span>, <span class="string">&quot;肆&quot;</span>, <span class="string">&quot;伍&quot;</span>, <span class="string">&quot;陆&quot;</span>, <span class="string">&quot;柒&quot;</span>, <span class="string">&quot;捌&quot;</span>, <span class="string">&quot;玖&quot;</span>];</span><br><span class="line">  <span class="keyword">var</span> unit = [</span><br><span class="line">    <span class="comment">//unit[2]均分unit[1], 如:佰元、佰万、佰亿</span></span><br><span class="line">    [<span class="string">&quot;元&quot;</span>, <span class="string">&quot;万&quot;</span>, <span class="string">&quot;亿&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;&quot;</span>, <span class="string">&quot;拾&quot;</span>, <span class="string">&quot;佰&quot;</span>, <span class="string">&quot;仟&quot;</span>],</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//算前:判断是否为负数</span></span><br><span class="line">  <span class="keyword">var</span> head = n &lt; <span class="number">0</span> ? <span class="string">&quot;欠&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  n = <span class="title class_">Math</span>.<span class="title function_">abs</span>(n);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//算小数点后</span></span><br><span class="line">  <span class="keyword">var</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fraction.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//角位置 n*10 =&gt; 移一位小数 =&gt; floor去小数 =&gt; 取除10余数 =&gt; 拼接上角</span></span><br><span class="line">    <span class="comment">//分位置 m*10*10 =&gt; 移两位小数=&gt; floor去小数 =&gt; 取除10余数 =&gt; 拼接上角分</span></span><br><span class="line">    s += (</span><br><span class="line">      digit[<span class="title class_">Math</span>.<span class="title function_">floor</span>(n * <span class="number">10</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, i)) % <span class="number">10</span>] + fraction[i]</span><br><span class="line">    ).<span class="title function_">replace</span>(<span class="regexp">/零./</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//是否有角与分</span></span><br><span class="line">  s = s || <span class="string">&quot;整&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//算整数部分</span></span><br><span class="line">  n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n);</span><br><span class="line">  <span class="comment">//遍历 [&quot;元&quot;, &quot;万&quot;, &quot;亿&quot;]</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; unit[<span class="number">0</span>].<span class="property">length</span> &amp;&amp; n &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//遍历 [&quot;&quot;, &quot;拾&quot;, &quot;佰&quot;, &quot;仟&quot;]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; unit[<span class="number">1</span>].<span class="property">length</span> &amp;&amp; n &gt; <span class="number">0</span>; j++) &#123;</span><br><span class="line">      <span class="comment">//  digit[4]        &quot;&quot;</span></span><br><span class="line">      <span class="comment">//  digit[3]        拾</span></span><br><span class="line">      <span class="comment">//  digit[5]        佰</span></span><br><span class="line">      <span class="comment">//  digit[6]        仟</span></span><br><span class="line">      <span class="comment">//  结束循环添加单位，p保存到s中，进入下一循环</span></span><br><span class="line">      <span class="comment">//  digit[8]        仟</span></span><br><span class="line">      p = digit[n % <span class="number">10</span>] + unit[<span class="number">1</span>][j] + p;</span><br><span class="line">      n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s = p.<span class="title function_">replace</span>(<span class="regexp">/(零.)*零$/</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/^$/</span>, <span class="string">&quot;零&quot;</span>) + unit[<span class="number">0</span>][i] + s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    head +</span><br><span class="line">    s</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/(零.)*零元/</span>, <span class="string">&quot;元&quot;</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/(零.)+/g</span>, <span class="string">&quot;零&quot;</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/^整$/</span>, <span class="string">&quot;零元整&quot;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">digitUppercase</span>(<span class="number">86534.63</span>));</span><br></pre></td></tr></table></figure><h3 id="H5-获取经纬度"><a href="#H5-获取经纬度" class="headerlink" title="H5 获取经纬度"></a>H5 获取经纬度</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// h5 获取经纬度</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">enableHighAccuracy</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">maximumAge</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">pos</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> crd = pos.<span class="property">coords</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Your current position is:&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Latitude : <span class="subst">$&#123;crd.latitude&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Longitude: <span class="subst">$&#123;crd.longitude&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`More or less <span class="subst">$&#123;crd.accuracy&#125;</span> meters.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`ERROR(<span class="subst">$&#123;err.code&#125;</span>): <span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 谷歌浏览器中，navigator.geolocation 只有在https环境下生效, 可以在火狐，edge下调试</span></span><br><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(success, error, options);</span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ul><li>必传参数 ，把函数必传那个参数的默认值 设置成一个函数，函数的作用是抛出一个异常</li><li>数字千分位格式化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">123456.78901</span>;</span><br><span class="line"><span class="keyword">let</span> formNum = num.<span class="title function_">toLocaleString</span>(<span class="string">&quot;en-US&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">minimumFractionDigits</span>: <span class="number">5</span>, <span class="comment">// 小数点后取五位</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formNum);</span><br></pre></td></tr></table></figure><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><h3 id="响应参数"><a href="#响应参数" class="headerlink" title="响应参数"></a>响应参数</h3><ul><li><strong>X-Frame-Options</strong>：iframe 权限参数</li><li><strong>Content-Security-Policy</strong>:服务器通过发送一个 CSP 头部，来告诉浏览器什么是<code>被授权执行的</code>与<code>什么是需要被禁止的</code></li></ul><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html</title>
      <link href="/2023/07/22/web/issues/issues-html/"/>
      <url>/2023/07/22/web/issues/issues-html/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="contenteditable-标签可编辑"><a href="#contenteditable-标签可编辑" class="headerlink" title="contenteditable 标签可编辑"></a>contenteditable 标签可编辑</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="图片懒加载以及方案"><a href="#图片懒加载以及方案" class="headerlink" title="图片懒加载以及方案"></a>图片懒加载以及方案</h4><blockquote><p>延迟到图片出现再加载图片</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">通过图片的loading属性，默认eager，lazy设置成延迟加载</span></span><br><span class="line"><span class="comment">loading=&quot;lazy&quot;</span></span><br><span class="line"><span class="comment">loading=&quot;eager&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="datalist-input输入预提示"><a href="#datalist-input输入预提示" class="headerlink" title="datalist input输入预提示"></a>datalist input输入预提示</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;datalistId&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;database&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Javascript&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Typescript&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="picture-根据分辨率替换图片"><a href="#picture-根据分辨率替换图片" class="headerlink" title="picture 根据分辨率替换图片"></a>picture 根据分辨率替换图片</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:768px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;a.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:500px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;b.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;c.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="头文件-mate-标签"><a href="#头文件-mate-标签" class="headerlink" title="头文件 mate 标签"></a>头文件 mate 标签</h4><ul><li><code>http-equiv</code><ul><li>Refresh:自动跳转刷新</li><li>2s后自动刷新并指向新页面。 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＜meta http-equiv=&quot;Refresh&quot; content=&quot;2；URL=https://www.baidu.com/&quot;＞  </span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos 安装 配置 使用</title>
      <link href="/2023/07/22/linux/linux-centos/"/>
      <url>/2023/07/22/linux/linux-centos/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">VMware</a></p><p><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">7 iso</a></p><p>选择语言 &#x3D;&gt; 选择安装模式等 &#x3D;&gt; 开始安装 &#x3D;&gt; 设置 root 密码 222</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><blockquote><p>vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-enp7s0（或 ifcfg-ens33）</p></blockquote><p>将<code>ONBOOT=no</code>改为<code>yes</code></p><p><strong>BOOTPROTO</strong></p><ul><li><strong>static 静态分配 ip</strong></li><li><strong>bootp bootp 协议</strong></li><li><strong>dhcp DHCP 协议</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将BOOTPROTO=dhcp 改为 BOOTPROTO=static 就能静态分配IP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IPADDR=192.168.203.128  <span class="comment"># ip地址</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NETMASK=255.255.255.0   <span class="comment"># 子网掩码</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GATEWAY=192.168.203.2   <span class="comment"># 网关（最后不能.1）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DNS1=8.8.8.8    <span class="comment"># DNS</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启网络服务</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>编辑&#x2F;虚拟网络设置</p><p><img src="/../..%5Cstatic%5Cimg%5C2023-07-06_083543.jpg"></p><p><img src="/../..%5Cstatic%5Cimg%5C2023-07-06_083630.jpg"></p><h3 id="配置-yum-dnf"><a href="#配置-yum-dnf" class="headerlink" title="配置 yum &#x2F; dnf"></a>配置 yum &#x2F; dnf</h3><blockquote><p>RPM 软件包管理器，配置一些 yum 源</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /etc/yum.repos.d/ 备份、删除默认yum源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里云 yum 源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网易源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中科大</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo &#x27;https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=3&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">epel yum 源</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo (yum install epel-release)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新建立缓存</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用</span></span><br><span class="line">yum install/remove pack-name</span><br></pre></td></tr></table></figure><blockquote><p>dnf <a href="https://wangchujiang.com/linux-command/c/dnf.html">文档</a> <a href="http://mirrors.aliyun.com/repo/">repo</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里云 源列表</span></span><br><span class="line">http://mirrors.aliyun.com/repo/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum install dnf</span><br><span class="line">dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y</span><br><span class="line">dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试状态</span></span><br><span class="line">dnf repolist epel</span><br><span class="line">dnf repolist epel -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立元数据缓存</span></span><br><span class="line">dnf makecache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dnf 扩展工具</span></span><br><span class="line">dnf install dnf-plugins-core  # 就能使用 dnf copr</span><br><span class="line"></span><br><span class="line">epel的全称叫 Extra Packages for Enterprise Linux 。epel是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目</span><br><span class="line">epel相当于一个第三方源。为什么需要 epel？因为 CentOS 官方源包含的大多数的库都是比较旧的。并且很多流行的库也不存在。当然这样做也是无可厚非的，毕竟服务器版本安全稳定是重点。</span><br></pre></td></tr></table></figure><h3 id="配置-git"><a href="#配置-git" class="headerlink" title="配置 git"></a>配置 git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果版本太低</span></span><br><span class="line">yum remove git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟新 rpm</span></span><br><span class="line">rpm -ivh http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-1.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum install</span><br></pre></td></tr></table></figure><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><h3 id="配置-zsh"><a href="#配置-zsh" class="headerlink" title="配置 zsh"></a>配置 zsh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install zsh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chsh -s /bin/zsh 切换shell到zsh，重启，设置~/.zshrc</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$SHELL</span> 查看当前使用的shell</span></span><br></pre></td></tr></table></figure><h3 id="配置-ssh"><a href="#配置-ssh" class="headerlink" title="配置 ssh"></a>配置 ssh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">两个主机都生成公钥私钥</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接主机 `ssh-copy-id -i ./id_rsa.pub root@114.115.212.xxx` 向目标主机114 上传公钥</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssh root@xxx.xxx.xxx.xx  测试、连接远程</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">win 连 linux 可能需要在git bash上操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程主机直接将客户端的公钥加入 ~/.ssh/authorized_keys 文件中</span></span><br></pre></td></tr></table></figure><h3 id="配置-nvm"><a href="#配置-nvm" class="headerlink" title="配置 nvm"></a>配置 nvm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git</span></span><br><span class="line"> wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br><span class="line"> source ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">增删改查</span></span><br><span class="line"> nvm install/uninsell/use/list &lt;node-version&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">淘宝源</span></span><br><span class="line"> npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>常用 npm 包管理工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cnpm yarn pnpm</span><br></pre></td></tr></table></figure><h3 id="配置-pm2"><a href="#配置-pm2" class="headerlink" title="配置 pm2"></a>配置 pm2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">cnpm install pm2 -g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">=================使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动某一个node程序</span></span><br><span class="line">pm2 start xxx.js --name=自定义名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动ssr项目，npm run start 成功后 ，再执行，也可以直接执行</span></span><br><span class="line">pm2 --name=nuxtName start npm -- run start</span><br><span class="line"></span><br><span class="line">pm2 list   # 查看进程列表</span><br><span class="line">pm2 logs   # 查看日志</span><br><span class="line">pm2 monit  # 监控进程</span><br><span class="line">pm2 show app_name|app_id # 查看进程详细</span><br><span class="line">pm2 stop app_name|app_id|all # 停止进程</span><br><span class="line">pm2 delete app_name|app_id|all # 删除进程</span><br><span class="line">pm2 restart/reload app_name|app_id|all # 重启进程</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动多个程序</span></span><br><span class="line">touch appxx.json</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入</span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;app&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;api&quot;,</span><br><span class="line">            &quot;script&quot;:&quot;server/index.js&quot;, # 找到程序路径</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;node-n&quot;,</span><br><span class="line">            &quot;script&quot;:&quot;client/index.js&quot;, # 找到其他node程序路径</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pm2 start appxx.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">=============================设置开机自启</span></span><br><span class="line">pm2 startup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存为开机自启</span></span><br><span class="line">pm2 save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除pm2 save的操作</span></span><br><span class="line">pm2 unstartup systemd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当 node.js 版本更新时，请一定要卸载并新建 自启动脚本</span></span><br><span class="line">pm2 unstartup</span><br><span class="line">pm2 startup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复上一次保存的自启动列表</span></span><br><span class="line">pm2 resurrect</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台运行pm2,启动4个app.js 实现负载均衡</span></span><br><span class="line">pm2 start app.js -i 4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看端口</span></span><br><span class="line">netstat -lntp</span><br></pre></td></tr></table></figure><h3 id="设置-firewall-cmd"><a href="#设置-firewall-cmd" class="headerlink" title="设置 firewall-cmd"></a>设置 firewall-cmd</h3><blockquote><p>开启防火墙后远程无法访问服务器的，开放对应端口才能访问 (相当于云服务器的安全组)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙状态</span></span><br><span class="line">systemctl status firewalld.servic | service firewalld status | firewall-cmd --state</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启防火墙</span></span><br><span class="line">systemctl start firewalld.service | service firewalld start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启防火墙</span></span><br><span class="line">systemctl restart firewalld.service | service firewalld restart | firewall-cmd --reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防火墙开机启动</span></span><br><span class="line">systemctl enable firewalld.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><blockquote><p>防火墙端口设置（设置完一定要重启防火墙）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--zone=public 设置区域，默认就是public</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    public（公共区域）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    trusted（信任区域)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--permanent 表示设置为持久(写入配置文件中)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常见port/service 21/ftp</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过指令开放端口/服务</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8080-8083/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-service=ssh --permanent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件 /etc/firewalld/zones/public.xml zone标签最后一行添加</span></span><br><span class="line">&lt;port protocol=&quot;tcp&quot; port=&quot;80&quot;/&gt;</span><br><span class="line">&lt;port protocol=&quot;tcp&quot; port=&quot;8080-8083&quot;/&gt;</span><br><span class="line">&lt;service name=&quot;ssh&quot;/&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除/查看端口</span></span><br><span class="line">firewall-cmd --remove-port=80/tcp # 或配置文件直接删除</span><br><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接受来自指定ip的所有请求</span></span><br><span class="line">firewall-cmd --permanent --add-source=xxx.xxx.xxx.xxx --zone=trusted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看开放的端口</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line">firewall-cmd --list-ports # 开放的端口</span><br><span class="line">firewall-cmd --list-service # 查看已开通的服务</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>华为云</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">华为云开放端口使可以在页面访问</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、安全组 Sys-WebServer 添加 端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、防火墙开放端口或关闭防火墙</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务器解析第三方域名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务器设置域名解析，添加第三方域名，第三方将域名dns配置设置服务器提供的dns</span></span><br></pre></td></tr></table></figure><blockquote><p>扩展 iptables</p></blockquote><h3 id="配置-mysql"><a href="#配置-mysql" class="headerlink" title="配置 mysql"></a>配置 mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载MySQL安装包 并安装</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line">rpm -ivh mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟新秘钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum 就能找到 mysql-server</span></span><br><span class="line">yum install mysql mysql-server mysql-deve</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">systemctl start/enable mysqld</span><br></pre></td></tr></table></figure><h3 id="配置-NFS"><a href="#配置-NFS" class="headerlink" title="配置 NFS"></a>配置 NFS</h3><blockquote><p>文件共享（window 上可以访问 linux 系统的共享的目录）</p></blockquote><p>linux 端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、安装 rpcbind、nfs-utils</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、配置共享文件 /etc/exports</span></span><br><span class="line">/root/nfsshare *(ro)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">权限规则</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ro: 可读</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、启动服务 rpcbind</span></span><br><span class="line">systemctl start rpcbind</span><br><span class="line">netstat -tunlp|grep 111</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、给共享文件夹 /root/nfsshare 添加访问权限</span></span><br><span class="line">chmod -Rf 777 /root/nfsshare # 强制递归给与权限</span><br><span class="line">chown -r nfsnobody:nfsnobody /root/nfsshare</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、启动 NFS 服务</span></span><br><span class="line">systemctl start nfs-server.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、检测本地共享情况</span></span><br><span class="line">showmount -e 127.0.0.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、检测共享参数</span></span><br><span class="line">cat /var/lib/nfs/etab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已经分享成功，后面可以省略</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8、本地挂载测试</span></span><br><span class="line">mount -t nfs 192.168.203.132:/root/nfsshare /mnt</span><br><span class="line">umount /mnt # 取消挂载</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9、永久挂载 /etc/fstab</span></span><br><span class="line">192.168.203.132:/root/nfsshare /mnt nfs defaults 0 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看挂载情况</span></span><br><span class="line">df -h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙，selinux</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">非要开启防火墙</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到配置文件 /etc/sysconfig/nfs</span></span><br><span class="line">LOCKD_TCPPORT=32803                                                                                         LOCKD_UDPPORT=32769</span><br><span class="line">MOUNTD_PORT=892</span><br><span class="line">STATD_PORT=662</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再开启 111、2049 六个端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 firewall、nfs-server、rpcbind</span></span><br></pre></td></tr></table></figure><p>window 端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从 启用或关闭windows功能 勾选 NFS</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务器开启的NFS共享</span></span><br><span class="line">showmount -e 192.168.203.132</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启电脑 计算机/网络 搜索</span></span><br><span class="line">\\192.168.203.132\root\nfsshare</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件夹挂载到window某个目录</span></span><br><span class="line">window 网络右键 &gt; 映射驱动器 &gt; 选择盘符，选择远程地址 \\192.168.203.132\root\nfsshare</span><br></pre></td></tr></table></figure><h3 id="配置-cifs-utils"><a href="#配置-cifs-utils" class="headerlink" title="配置 cifs-utils"></a>配置 cifs-utils</h3><blockquote><p>将 window 共享的远程文件夹挂载到 linux</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装: cifs-utils</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">共享: window 新建共享文件夹-&gt;高级共享中设置`共享名称` -&gt; 权限给予`读写执行`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载: mount -t cifs -o username=<span class="string">&quot;Administrator&quot;</span>,password=<span class="string">&quot;1&quot;</span>   //192.168.12.40/nmon /mnt/share</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     mount -t cifs -o username=<span class="string">&quot;win 用户名&quot;</span>,    password=<span class="string">&quot;密码&quot;</span> //win ip/共享名称     linux挂载目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     <span class="built_in">ls</span> /mnt/share 查看共享文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动挂载 /etc/fstab</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">//192.168.12.40/nmon /mnt/share cifs defaults,username=名字,password=你的密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">//192.168.3.24/共享文件 /mnt/window cifs defaults,username=!·ujcliaozx,password=ujcliaozx123</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本机案例</span></span><br><span class="line">mount -t cifs -o username=&quot;xun lzo&quot;,password=&quot;lzx123456&quot; //172.22.112.1/lzo-redmi-share /mnt/lzo-redmi-share</span><br></pre></td></tr></table></figure><h3 id="配置-cron"><a href="#配置-cron" class="headerlink" title="配置 cron"></a>配置 cron</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install cronie</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件位置 vim /etc/crontab</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 crontab -e</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 crontab -l</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行记录</span></span><br><span class="line">cat /var/log/cron</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vimrc 报错，.zshrc 加入</span></span><br><span class="line">export EDITOR=/usr/bin/vim</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="安装-autojump"><a href="#安装-autojump" class="headerlink" title="安装 autojump"></a>安装 autojump</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/wting/autojump.git</span><br><span class="line">cd autojump&amp;&amp;./install.py</span><br><span class="line">[[-s ~/.autojump/etc/profile.d/autojump.zsh]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.zsh  到~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缓存数据库位置:`~/.local/shart/autojump/autojump.txt`</span></span><br></pre></td></tr></table></figure><h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h3><blockquote><p>必须 zsh shell 下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos 安装</span></span><br><span class="line">wget https://gitee.com/heyuanfly/install-oh-my-zsh/raw/master/centos-install-oh-my-zsh.sh</span><br><span class="line">chmod +x centos-install-oh-my-zsh.sh</span><br><span class="line">./centos-install-oh-my-zsh.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.zshrc 中 ZSH_THEME=<span class="string">&quot;主题名称&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主题都在 `/usr/share/oh-my-zsh/theme`下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   推荐主题:`duellj`、`suvash`、`xiong-chiamiov`、`pygmalion`、`fino`、`steeef`、`ys`,`norm`、obraun</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zsh vi 模式(使用 vim 快捷键)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   .zshrc 添加 <span class="built_in">bindkey</span> -v</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[插件扩展 powerlevel10k](https://github.com/romkatv/powerlevel10k/blob/master/README.md<span class="comment">#oh-my-zsh)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   `git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   将 ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k 设置为 oh-my-zsh主题</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   `p10k configure`:第一次需要配置，这样重新配置</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">命令行高亮</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">    yay -S zsh-syntax-highlighting zsh-autosuggestions  或 github 下载</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">    如果不生效</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">    sudo ln -s /usr/share/zsh/plugins/zsh-syntax-highlighting /usr/share/oh-my-zsh/custom/plugins/</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">    sudo ln -s /usr/share/zsh/plugins/zsh-autosuggestions /usr/share/oh-my-zsh/custom/plugins/  （zsh-autosuggestions 放入.zshrc plugins中）</span></span></span><br></pre></td></tr></table></figure><h3 id="安装-lazygit"><a href="#安装-lazygit" class="headerlink" title="安装 lazygit"></a>安装 lazygit</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先安装 go /docs/server/go/go-bash.md</span></span><br><span class="line"></span><br><span class="line">git clone https://github.com/jesseduffield/lazygit.git</span><br><span class="line">cd lazygit</span><br><span class="line">go install</span><br></pre></td></tr></table></figure><h3 id="安装-tig（ing…）"><a href="#安装-tig（ing…）" class="headerlink" title="安装 tig（ing…）"></a>安装 tig（ing…）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git 分支数查看</span></span><br><span class="line">yum install tig</span><br></pre></td></tr></table></figure><h3 id="安装-ranger"><a href="#安装-ranger" class="headerlink" title="安装 ranger"></a>安装 ranger</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装python3和pip3</span></span><br><span class="line">yum install python3 python3-devel -y</span><br><span class="line">pip3 install ranger-fm -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、</span></span><br><span class="line">ranger --copy-config=all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、</span></span><br><span class="line">~/.config/ranger</span><br><span class="line">    rc.conf-选项设置和快捷键</span><br><span class="line">    commands.py-能通过:执行的命令</span><br><span class="line">    commands_full.py-全套命令</span><br><span class="line">    rifle.conf-指定不同类型的文件的默认打开程序</span><br><span class="line">    scope.conf-负责各种文件预览</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、</span></span><br><span class="line">echo &quot;export RANGER_LOAD_DEFAULT_RC=false&quot;&gt;&gt;~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、操作</span></span><br><span class="line">修改配置文件~/.config/ranger/rc.conf</span><br><span class="line">显示边框set draw_borders both</span><br><span class="line">显示序号set line_numbers true</span><br><span class="line">序号从1开始set one_indexed true</span><br></pre></td></tr></table></figure><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><blockquote><p>图标</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">myfork https://hub.fgit.ml/liaozhongxun/ranger_devicons.git</span></span><br><span class="line">git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons</span><br><span class="line">echo &quot;default_linemode devicons&quot; &gt;&gt; $HOME/.config/ranger/rc.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">乱码 https://github.com/ryanoasis/nerd-fonts</span></span><br></pre></td></tr></table></figure><blockquote><p>压缩包预览</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install atool</span><br></pre></td></tr></table></figure><h3 id="安装-tmux"><a href="#安装-tmux" class="headerlink" title="安装 tmux"></a>安装 tmux</h3><p>安装 libevent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz</span><br><span class="line">tar -zxvf libevent-2.1.12-stable.tar.gz</span><br><span class="line">cd libevent-2.1.12-stable</span><br><span class="line">./configure --disable-openssl</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有报错</span></span><br><span class="line">sudo ln -s /usr/local/lib/libevent-2.1.so.7 /usr/lib64/</span><br></pre></td></tr></table></figure><p>安装 tmux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tmux/tmux.git</span><br><span class="line">cd tmux</span><br><span class="line">sh autogen.sh</span><br><span class="line">./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>异常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error while loading shared libraries: libevent_core-2.1.so.7: cannot open shared object file: No such file or directory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">程序无法找到libevent-2.1.so.7这个动态库</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加配置到 ld.so.conf 文件中</span></span><br><span class="line">sudo echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟新配置</span></span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line">tmux new -s tm</span><br></pre></td></tr></table></figure><p>主题包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/Arise_/article/details/127085812</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主题包 oh-my-tmux</span></span><br><span class="line">cd ~</span><br><span class="line">git clone https://github.com/gpakosz/.tmux.git</span><br><span class="line">ln -s -f .tmux/.tmux.conf  #创建软连接</span><br><span class="line">cp .tmux/.tmux.conf.local . #复制local文件到当前文件夹 可以覆盖默认配置</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tmux source-file ~/.tmux.conf  从新加载配置</span></span><br></pre></td></tr></table></figure><h3 id="安装-vim"><a href="#安装-vim" class="headerlink" title="安装 vim"></a>安装 vim</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim 包管理工具 vimplus</span></span><br><span class="line">git clone https://github.com/chxuan/vimplus.git ~/.vimplus</span><br><span class="line">cd ~/.vimplus</span><br><span class="line">./install.sh</span><br><span class="line">./update.sh # 更新</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装插件</span></span><br><span class="line">:PlugInstall</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插件位置</span></span><br><span class="line">~/.vim/plugged</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">`~/.vimrc为vimplus`的默认配置，一般不做修改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">`~/.vimrc.custom.plugins`为用户自定义插件列表，用户增加、卸载插件请修改该文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">`~/.vimrc.custom.config`为用户自定义配置文件，一般性配置请放入该文件，可覆盖~/.vimrc 里的配置</span></span><br></pre></td></tr></table></figure><h3 id="安装-fzf"><a href="#安装-fzf" class="headerlink" title="安装 fzf"></a>安装 fzf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf</span><br><span class="line">~/.fzf/install</span><br><span class="line"></span><br><span class="line">npmc install -g fd-find</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fd 缺少 glibc-2.18</span></span><br><span class="line">curl -O http://ftp.gnu.org/gnu/glibc/glibc-2.18.tar.gz</span><br><span class="line">tar zxf glibc-2.18.tar.gz</span><br><span class="line">cd glibc-2.18/</span><br><span class="line">mkdir build</span><br><span class="line">cd build/</span><br><span class="line">../configure --prefix=/usr</span><br><span class="line">make -j2</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>高亮搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~/.zshrc</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">界面展示这些参数在 fzf --<span class="built_in">help</span> 中都有，按需配置即可 highlight 预览高亮可能需要安装</span></span><br><span class="line">export FZF_DEFAULT_OPTS=&quot;--border --preview &#x27;(highlight -O ansi &#123;&#125; || cat &#123;&#125;) 3&gt; /dev/null | head -500&#x27;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fzf查找配安装 fd-find (可搜索隐藏文件)</span></span><br><span class="line">export FZF_DEFAULT_COMMAND=&quot;fd --exclude=&#123;.git,.idea,.vscode,.sass-cache,node_modules,build&#125; --type f --hidden&quot;</span><br></pre></td></tr></table></figure><h3 id="安装-htop"><a href="#安装-htop" class="headerlink" title="安装 htop"></a>安装 htop</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过上下左右控制，不能HJKL</span></span><br><span class="line">-   `F1`:帮助</span><br><span class="line">-`F2`:设置</span><br><span class="line">-   `F3`:搜索</span><br><span class="line">-   `F4`:过滤(隐藏不匹配的进程)</span><br><span class="line">-   `F5`:进程树</span><br><span class="line">-`F6`:排序</span><br><span class="line">-   `F9`:杀死选中的进程</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">快捷键</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">u         选择用户，查看指定用户相关的进程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">shift</span>+p   按CPU占用大小排序</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">shift</span>+m   按占用内存大小排序</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">shift</span>+i   反转排序</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">空格       标记进程，批量操作</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装-SHC"><a href="#安装-SHC" class="headerlink" title="安装 SHC"></a>安装 SHC</h3><blockquote><p>加密工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将脚本加密，同意可以运行，打开查看的缺少密文</span></span><br><span class="line">yum install shc</span><br><span class="line"></span><br><span class="line">shc -f test.sh # 成功后生成 test.sh.x ,可执行的密文</span><br></pre></td></tr></table></figure><h3 id="安装-screenFetch"><a href="#安装-screenFetch" class="headerlink" title="安装 screenFetch"></a>安装 screenFetch</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS screenfetch</span><br><span class="line">cd /usr/local/src</span><br><span class="line">git clone https://github.com/liaozhongxun/screenFetch.git</span><br><span class="line">cp screenFetch/screenfetch-dev /usr/local/bin/screenfetch</span><br><span class="line">chmod 755 /usr/local/bin/screenfetch</span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="df-磁盘占用"><a href="#df-磁盘占用" class="headerlink" title="df (磁盘占用)"></a>df (磁盘占用)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df -h # 人性化显示大小</span><br><span class="line">df -T # 查看文件系统格式</span><br></pre></td></tr></table></figure><h3 id="du-文件大小"><a href="#du-文件大小" class="headerlink" title="du (文件大小)"></a>du (文件大小)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">du -h # 人性化显示</span><br><span class="line">du -s # 汇总，查看目录所有文件占用磁盘空间</span><br></pre></td></tr></table></figure><h3 id="tar-压缩包"><a href="#tar-压缩包" class="headerlink" title="tar (压缩包)"></a>tar (压缩包)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tar 压缩</span></span><br><span class="line">tar -zcvf fileName.tar /root/dist # -z 打包方式 gzip，-c 打包，-v 列出详情 -f 新文件名</span><br><span class="line">tar -xf fileName.tar -C /target_dir # -x 解包，-f 解压的文件</span><br><span class="line">tar -tf fileName.tar.gz # 不解包直接查看压缩包内容</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zip 将 /root/dist 压缩为 fileName.zip</span></span><br><span class="line">zip -q -r fileName.zip /root/dist # -r 递归处理文件夹 -q 不显示执行过程</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zip 从 fileName.zip 压缩 删除 index.html 文件</span></span><br><span class="line">zip -dv fileName.zip index.html # -d 从压缩文件内删除指定文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压 unzip</span></span><br><span class="line">unzip fileName.zip</span><br><span class="line">unzip fileName.zip -d /home/xxx # -d 解压文件到当指定目录，-n 不覆盖原有文件,-o 覆盖</span><br><span class="line">unzip -v fileName.zip # 查看信息不解压</span><br></pre></td></tr></table></figure><h3 id="scp-跨机文件复制"><a href="#scp-跨机文件复制" class="headerlink" title="scp (跨机文件复制)"></a>scp (跨机文件复制)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">`scp`:命令用于 Linux 之间复制文件和目录(全量完整复制，效率不太好)</span></span><br><span class="line">scp -P 22 `本机文件` `root@对面IP:对面位置`   # 文件上传</span><br><span class="line">scp -rP 22 `本机文件夹` `root@对面IP:对面位置` # 文件夹上传</span><br><span class="line">scp -P 22 `root@对面IP:对面文件位置` `本机位置` # 文件下载</span><br><span class="line">scp -rP 22 `root@对面IP:对面文件夹位置` `本机位置` #文件夹下载</span><br></pre></td></tr></table></figure><h3 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h3><blockquote><p>先判断已经存在的数据和新数据的差异，只有数据不同时才会把不相同的部分覆盖。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rsync `本机文件` `root@对面IP:对面位置` # 拷贝文件,文件上传</span><br><span class="line">rsync -r `本机文件夹/*` `root@对面IP:对面位置` # 拷贝文件夹</span><br><span class="line">rsync -r -v --exclude tile `本机文件夹` `root@对面IP:对面位置` # 排除单个文件夹</span><br><span class="line">rsync -r -v --exclude=tile `本机文件夹` `root@对面IP:对面位置` # 排除单个文件夹</span><br><span class="line">rsync -r -v --exclude=tile --exclude=jpg `本机文件夹` `root@对面IP:对面位置` # 排除多个文件夹</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也能像 scp 那样</span></span><br><span class="line">rsync -rv --exclude=node_modules `root@对面IP:对面文件夹位置` `本机位置`</span><br><span class="line">rsync -rv --exclude=node_modules root@192.168.203.133:/opt/git-packs/nginxconfig.io .    </span><br></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="文件锁"><a href="#文件锁" class="headerlink" title="文件锁"></a>文件锁</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存文件时 :X</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入两次密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">:wq 退出</span></span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><blockquote><p>删除指定文件外的所有</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find * | grep -v 1.txt | xargs rm</span><br><span class="line">find * | grep -v &#x27;\(1.txt\|2.txt\)&#x27; | xargs rm</span><br></pre></td></tr></table></figure><blockquote><p>替换指定目录下，所有文件的指定内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s#https#http#g&quot; `grep http -rl VERO` # 将 VERO 下所有子目录所有文件里的 http 替换成 https</span><br><span class="line">sed -i &quot;s#456#789#g&quot; `grep 456 -rl ./lianxi` # 将 lianxi 下所有子目录所有文件里的 456 替换成 789</span><br></pre></td></tr></table></figure><blockquote><p>查询存在指定内容的文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 456 -rl ./lianxi # 找到 lianxi 下所有存在 456 的文件</span><br></pre></td></tr></table></figure><blockquote><p>查询存在指定内容的文件并打印</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep 456 -r ./lianxi</span><br><span class="line"></span><br><span class="line">grep -2 -r &#x27;456&#x27; ./     # 输出查找内容前后五行</span><br><span class="line">grep -A 2 -r &#x27;456&#x27; ./   # 输出查找内容后五行</span><br><span class="line">grep -B 2 -r &#x27;456&#x27; ./   # 输出查找内容前五行</span><br></pre></td></tr></table></figure><h3 id="通过端口查数据"><a href="#通过端口查数据" class="headerlink" title="通过端口查数据"></a>通过端口查数据</h3><blockquote><p>通过端口，查看占用的程序名称</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有 pid进程号/程序名</span></span><br><span class="line">netstat -anp | grep 3306</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有程序名、pid进程号</span></span><br><span class="line">lsof -i :3306</span><br></pre></td></tr></table></figure><h3 id="通过-PID-查数据"><a href="#通过-PID-查数据" class="headerlink" title="通过 PID 查数据"></a>通过 PID 查数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antup|grep pid</span><br></pre></td></tr></table></figure><h3 id="通过进程名查数据"><a href="#通过进程名查数据" class="headerlink" title="通过进程名查数据"></a>通过进程名查数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antup|grep nginx</span><br></pre></td></tr></table></figure><h3 id="查看进程关联的文件"><a href="#查看进程关联的文件" class="headerlink" title="查看进程关联的文件"></a>查看进程关联的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -c Pid # 打印指定进程使用到的文件</span><br></pre></td></tr></table></figure><h3 id="通过域名查-IP"><a href="#通过域名查-IP" class="headerlink" title="通过域名查 IP"></a>通过域名查 IP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup github.com</span><br></pre></td></tr></table></figure><h3 id="统计文件行数"><a href="#统计文件行数" class="headerlink" title="统计文件行数"></a>统计文件行数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">grep 找到当前文件夹下所有文件 | 排除不需要统计的目录或文件 | 输出所有文件空行取反 | 查看内容行数</span></span><br><span class="line">grep . -rl --exclude-dir=&#123;node_modules,dist&#125; --exclude=&#123;yarn.lock&#125; ./|xargs grep -v &quot;^$&quot;|wc -l</span><br></pre></td></tr></table></figure><h3 id="排除某个文件的批量操作"><a href="#排除某个文件的批量操作" class="headerlink" title="排除某个文件的批量操作"></a>排除某个文件的批量操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制单前目录下除了bak文件夹的其他所有文件到 bak目录</span></span><br><span class="line">ls | grep -v bak | xargs -i cp -r &#123;&#125; bak/</span><br></pre></td></tr></table></figure><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><blockquote><p>适用于匹配文件<strong>名</strong>的操作</p></blockquote><table><thead><tr><th>字符</th><th align="center">通配符</th><th>正则</th><th>同效</th></tr></thead><tbody><tr><td>*</td><td align="center">匹配任意数量（包括 0 个字符） 如：ls *.txt (列出所有以.txt 结尾的文件)</td><td>前面分组 0 或多个</td><td>.*</td></tr><tr><td>?</td><td align="center">匹配单个字符 如： ls ?.txt (1.txt&#x2F;a.txt&#x2F;n.txt)</td><td>前面分组可有可无</td><td>.</td></tr><tr><td>[]</td><td align="center">匹配括号内给定的任何一个字符 如：ls [abc].txt</td><td>相同</td><td>[]</td></tr><tr><td>{}</td><td align="center">指定可选项集合 如：cp file{1,2}.txt dir (将 file1.txt 和 file2.txt 放入 dir 目录中)</td><td>前面分组个数限定</td><td>|</td></tr></tbody></table><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><blockquote><p>适用于匹配文件<strong>内容</strong>的操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过lsb</span></span><br><span class="line">yum install -y redhat-lsb-core</span><br><span class="line">lsb_release -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 screenfetch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 top/htop</span></span><br></pre></td></tr></table></figure><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ls -la /usr/lib/systemd/system|grep runlevel</span><br><span class="line"></span><br><span class="line"> -   <span class="string">`runlevel0.target`</span>: poweroff.<span class="title function_">target</span>(<span class="string">`不运行服务 关机`</span>)</span><br><span class="line"> -   <span class="string">`runlevel1.target`</span>: resuce.<span class="title function_">target</span>(<span class="string">`救援|单例|安全模式`</span>)</span><br><span class="line"> -   <span class="string">`runlevel2.target`</span>: multi-user.<span class="property">target</span></span><br><span class="line"> -   <span class="string">`runlevel3.target`</span>: multi-user.<span class="property">target</span></span><br><span class="line"> -   <span class="string">`runlevel4.target`</span>: multi-user.<span class="title function_">target</span>(<span class="string">`2，3，4多用户模式`</span>，不运行图形界面级相关服务，字符界面)</span><br><span class="line"> -   <span class="string">`runlevel5.target`</span>: graphical.<span class="title function_">target</span>(<span class="string">`图形相关服务`</span>)</span><br><span class="line"> -   <span class="string">`runlevel6.target`</span>: reboot.<span class="title function_">target</span>(<span class="string">`重启`</span>)</span><br><span class="line"></span><br><span class="line">systemctl get-<span class="keyword">default</span>   <span class="comment">// 查看默认运行级别</span></span><br><span class="line">systemctl set-<span class="keyword">default</span> multi-user.<span class="property">target</span></span><br><span class="line">runlevel <span class="comment">// 查看单前级别</span></span><br><span class="line">init n <span class="comment">// 临时切换运行级别</span></span><br></pre></td></tr></table></figure><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> - 通过扩展名查找文件：</span><br><span class="line">   find 指定目录 -name <span class="string">&#x27;*.ext&#x27;</span></span><br><span class="line"></span><br><span class="line"> - 查找匹配多个路径或名称模式的文件：</span><br><span class="line">   find 指定目录 -path <span class="string">&#x27;**/path/**/*.ext&#x27;</span> -or -name <span class="string">&#x27;*pattern*&#x27;</span></span><br><span class="line"></span><br><span class="line"> - 查找匹配指定名称的目录，不区分大小写：</span><br><span class="line">   find 指定目录 -type d -iname <span class="string">&#x27;*lib*&#x27;</span></span><br><span class="line"></span><br><span class="line"> - 查找匹配指定模式的文件，排除特定路径：</span><br><span class="line">   find 指定目录 -name <span class="string">&#x27;*.py&#x27;</span> -not -path <span class="string">&#x27;*/site-packages/*&#x27;</span></span><br><span class="line"></span><br><span class="line"> - 查找符合指定大小范围的文件：</span><br><span class="line">   find 指定目录 -size +500k -size -10M</span><br><span class="line"></span><br><span class="line"> - 对每个文件运行命令（在命令中使用 <span class="string">`&#123;&#125;`</span> 代表当前文件）：</span><br><span class="line">   find 指定目录 -name <span class="string">&#x27;*.ext&#x27;</span> -exec wc -l &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"> - 查找最近 <span class="number">7</span> 天修改的文件并删除：</span><br><span class="line">   find 指定目录 -daystart -mtime -<span class="number">7</span> -<span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"> - 查找空（<span class="number">0</span> 字节）的文件并删除：</span><br><span class="line">   find 指定目录 -type f -empty -<span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"> -- 找到指定文件夹下所有文件进行操作</span><br><span class="line">find 指定目录 <span class="string">&quot;.*&quot;</span> -exec chown <span class="attr">lzoxun</span>:lzoxun &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="nikto"><a href="#nikto" class="headerlink" title="nikto"></a>nikto</h3><blockquote><p>网站检测</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto -h www.lzoxun.top</span><br></pre></td></tr></table></figure><p><img src="/../../static/img/2023-07-22_003615.jpg"></p><h3 id="lrzsz"><a href="#lrzsz" class="headerlink" title="lrzsz"></a>lrzsz</h3><blockquote><p>用上传下载的 SSH 连接工具，终端直连无效</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dnf install lrzsz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传</span></span><br><span class="line">rz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">sz &lt;file-name&gt;</span><br></pre></td></tr></table></figure><h3 id="ncdu"><a href="#ncdu" class="headerlink" title="ncdu"></a>ncdu</h3><blockquote><p>树结构统计文件大小，du 指令优化</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- c # 显示目录子目录文件总数</span><br><span class="line">- d # 删除文件</span><br><span class="line">- e # 隐藏文件显示</span><br><span class="line">- g # 百分比</span><br><span class="line">- h/j/k/l # 上级/向下/向上/下级</span><br><span class="line">- i # 显示文件相关信息</span><br><span class="line">- r # 刷新</span><br></pre></td></tr></table></figure><h3 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h3><blockquote><p>简洁文档</p></blockquote><h3 id="cloc"><a href="#cloc" class="headerlink" title="cloc"></a>cloc</h3><blockquote><p>文件数(files)、空白行数(blank)、注释行数(comment)和代码行数(code)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloc ./dist</span><br></pre></td></tr></table></figure><h3 id="asciinema"><a href="#asciinema" class="headerlink" title="asciinema"></a>asciinema</h3><blockquote><p>终端下非常棒的录屏和回放软件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">录制</span></span><br><span class="line">asciinema rec</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结束录制</span></span><br><span class="line">ctrl+d 或 exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enter 上传，生成地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ctrl+c 取消</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">播放</span></span><br><span class="line">asciinema play https://asciinema.org/a/aJ8I9rH4Ob5wbNAywiskRu0cz</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h3><p><code>tig dns查询</code></p><h3 id="包下载器"><a href="#包下载器" class="headerlink" title="包下载器"></a>包下载器</h3><p><code>yum</code>、 <code>pip3</code>、<code>dnf</code>、<code>wget</code>、<code>curl</code></p><h3 id="连接工具"><a href="#连接工具" class="headerlink" title="连接工具"></a>连接工具</h3><p><a href="https://mobaxterm.mobatek.net/">MobaXterm</a> <a href="http://www.hostbuf.com/t/988.html">FinalShell</a> <a href="https://github.com/kingToolbox/WindTerm/releases">WindTerm</a></p><h2 id="个人配置"><a href="#个人配置" class="headerlink" title="个人配置"></a>个人配置</h2><h3 id="linux-alias"><a href="#linux-alias" class="headerlink" title="linux alias"></a>linux alias</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">alias jsr=&quot;systemctl restart&quot;</span><br><span class="line">alias jss=&quot;systemctl start&quot;</span><br><span class="line">alias jst=&quot;systemctl stop&quot;</span><br><span class="line">alias jse=&quot;systemctl enable&quot;</span><br><span class="line"></span><br><span class="line">alias tm=&quot;tmux new -t tm&quot;</span><br><span class="line"></span><br><span class="line">alias lg=&quot;lazygit&quot;</span><br><span class="line">alias ll=&#x27;ls -la&#x27;</span><br><span class="line">alias n=&#x27;npm run dev&#x27;</span><br><span class="line">alias nse=&#x27;npm run serve&#x27;</span><br><span class="line">alias nst=&#x27;npm run start&#x27;</span><br><span class="line">alias nb=&#x27;npm run build&#x27;</span><br><span class="line"></span><br><span class="line">alias gs=&#x27;git status&#x27;</span><br><span class="line">alias ga=&#x27;git add .&#x27;</span><br><span class="line">alias gcm=&#x27;git commit -m&#x27;</span><br><span class="line">alias gph=&#x27;git push origin&#x27;</span><br><span class="line">alias gpl=&#x27;git pull origin&#x27;</span><br><span class="line">alias gl=&#x27;git log&#x27;</span><br><span class="line">alias gb=&#x27;git branch&#x27;</span><br><span class="line">alias gc=&#x27;git checkout&#x27;</span><br><span class="line">bindkey -v</span><br></pre></td></tr></table></figure><h3 id="window-alias"><a href="#window-alias" class="headerlink" title="window alias"></a>window alias</h3>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习资源</title>
      <link href="/2023/07/22/other-weblinks/"/>
      <url>/2023/07/22/other-weblinks/</url>
      
        <content type="html"><![CDATA[<h2 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h2><ul><li><p><a href="https://www.u.tools/">uTools</a> <code>工具集合</code></p></li><li><p><a href="https://www.sourcetreeapp.com/">git GUI 工具</a></p></li><li><p><a href="https://www.charlesproxy.com/">charles 抓包</a> <code>抓包</code></p></li><li><p><a href="http://www.navicat.com.cn/">数据库管理工具</a> <code>MySql,MongoDB...</code></p></li><li><p><a href="https://freefilesync.com/">FreeFileSync</a> <code>数据备份同步</code></p></li><li><p><a href="https://www.axureshop.com/">产品原型业务流程</a> <code>从演示中参考业务的流程</code></p></li><li><p><a href="https://caniuse.com/">CSS3 caniuse</a> <code>兼容性查询</code></p></li><li><p><a href="https://codepen.io/">线上代码编辑 codepan</a></p></li><li><p><a href="https://www.fastmock.site/#/">mockjs</a> <code>模拟接口数据生成</code></p></li><li><p><a href="https://www.jiumodiary.com/">电子书下载</a></p></li><li><p><a href="https://www.bootcdn.cn/">CDN 插件引用</a></p></li><li><p><a href="https://tool.oschina.net/commons">服务端返回 Content-Type 类型对照表</a></p></li><li><p><a href="https://www.ipaddress.com/">根据域名查询 ip</a></p></li><li><p><a href="https://www.jisuapi.com/my/apply?classid=4">极速 api 接口</a></p></li><li><p><a href="https://www.ipaddress.com/">githubIp 查询</a> 刷新 DNS <code>ipconfig /flushdns</code></p></li><li><p><a href="https://www.extfans.com/installation/">扩展迷</a> <code>各个浏览器插件</code></p></li></ul><hr><h2 id="视频学习网站"><a href="#视频学习网站" class="headerlink" title="视频学习网站"></a>视频学习网站</h2><ul><li><a href="https://www.bilibili.com/">哔哩哔哩</a></li></ul><hr><h2 id="文档学习网站"><a href="#文档学习网站" class="headerlink" title="文档学习网站"></a>文档学习网站</h2><ul><li><a href="https://devhints.io/">各种技术文档 devhints</a></li><li><a href="https://vue-composition-api-rfc.netlify.app/zh/api.html">Vue3 组合式 API</a></li><li><a href="https://www.vue3js.cn/docs/zh/guide/installation.html">vue3 中文文档</a></li><li><a href="https://www.xp.cn/css3/">CSS3 参考手册</a></li><li><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/extended-bg-position">You-need-to-know(CSS3)</a></li><li><a href="https://zh.javascript.info/">现代 JavaScript 教程文档</a></li><li><a href="https://developer.mozilla.org/zh-CN/">WEB MDN</a></li><li><a href="https://www.lodashjs.com/">lodash 工具库</a>[^③]</li><li><a href="https://24kcs.github.io/vue3_study">Vue3+TS 快速上手</a></li><li><a href="https://www.linuxcool.com/">Linux 手册</a></li><li><a href="https://stackoverflow.com/">stack overflow 社区</a></li></ul><h2 id="GIT-项目"><a href="#GIT-项目" class="headerlink" title="GIT 项目"></a>GIT 项目</h2><ul><li><a href="https://github.com/chokcoco/CSS-Inspiration">CSS-Inspiration(CSS3)</a></li><li><a href="https://github.com/lydiahallie/javascript-questions">javascript-questions 题库</a></li><li><a href="https://gitee.com/lzo-gitee/DataGearDashboardTemplate">监控大屏项目</a></li><li><a href="https://gitee.com/lzo-gitee/DaShuJuZhiDaPingZhanShi">监控大屏项目 2</a></li></ul><h2 id="插件、库"><a href="#插件、库" class="headerlink" title="插件、库"></a>插件、库</h2><ul><li><a href="https://vant-contrib.gitee.io/vant/next/#/zh-CN/quickstart">vue3 移动端 ui 库 vant 3.x.x</a></li><li><a href="http://adminlte.xueyao.org/pages/invoice.html">adminLET 模板</a></li><li><a href="https://antv.vision/zh">可视化库 AntV</a></li><li><a href="https://www.amcharts.com/">amcharts</a></li><li><a href="https://github.com/IanLunn/Hover">Style:hover 动画</a></li><li><a href="https://swiperjs.com/get-started">swiper</a></li><li><a href="https://www.imgcook.com/">通过设计搞生成布局</a><ul><li>如果只是一些简单布局的静态页面倒还有用，原理倒是可以研究一下</li></ul></li></ul><hr><h3 id="css-库"><a href="#css-库" class="headerlink" title="css 库"></a>css 库</h3><ul><li><a href="https://csslayout.io/ribbon/">css layout</a> <code>常用布局代码生成</code></li><li><a href="https://purecss.io/base/">pure css</a> css <code>响应式插件</code></li><li><a href="https://loading.io/spinner/">动画下载</a></li><li><a href="https://griddy.io/">grid 学习工具</a></li><li><a href="https://cssgrid-generator.netlify.app/">grid 学习工具 2</a></li><li><a href="https://www.bestcssbuttongenerator.com/">button 样式参考</a></li><li><a href="https://html-css-js.com/">html-css-js</a></li><li><a href="http://www.spritecow.com/">查看图片，或设计稿图标的信息</a></li></ul><h2 id="可-s-用素材"><a href="#可-s-用素材" class="headerlink" title="可 s 用素材"></a>可 s 用素材</h2><h3 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h3><ul><li><a href="http://www.gaoimg.com/">高图网</a></li><li><a href="https://pixabay.com/zh/">pixabay</a></li><li><a href="https://www.everypixel.com/">综合搜索</a></li><li><a href="https://isoflat.com/">isoflat</a></li><li><a href="https://mixkit.co/">miskit</a></li><li><a href="https://www.pexels.com/zh-cn/">pexeis</a></li><li><a href="https://unsplash.com/">unsplash</a></li><li><a href="https://stocksnap.io/">stocksnap</a></li><li><a href="https://pxhere.com/">pxhere</a></li><li><a href="https://www.hippopx.com/zh">hippop</a></li><li><a href="https://www.photock.jp/">photock</a></li><li><a href="https://pickupimage.com/">pickupimage</a></li><li><a href="https://colorhub.me/">colorhub</a></li><li><a href="https://www.ssyer.com/">ssyer</a></li></ul><h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><ul><li><a href="https://www.iconfont.cn/">阿里图标库</a></li><li><a href="https://pictogram2.com/">矢量小人图标</a></li><li><a href="https://undraw.co/illustrations">免费 SVG 插图</a></li><li><a href="https://www.remove.bg/zh/">抠图</a></li></ul><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><ul><li><a href="https://www.tosound.com/">tosound 音效网站</a></li><li><a href="https://mazwai.com/">免费视频剪辑</a></li><li><a href="https://www.videvo.net/">videvo</a></li></ul><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><ul><li><a href="https://www.qiuziti.com/">求字体</a></li><li><a href="https://www.hellofont.cn/font-list?tag=73">hellofont 选择免费字体</a></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><a href="http://zhongguose.com/">中国色配色网</a></li><li><a href="https://search.chongbuluo.com/">聚合类-虫部落搜索导航</a></li><li><a href="http://doyoudo.com/tools">聚合类-doyoudo</a></li><li><a href="https://maliquankai.com/">聚合类-马力全开</a></li><li><a href="http://hao.shejidaren.com/">聚合类-设计导航</a></li><li><a href="https://site.sciping.com/">聚合类-科塔学术</a></li><li><a href="https://www.seeseed.com/">seeseed</a></li></ul><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul><li><a href="https://grafana.com/">grafana</a></li><li><a href="https://www.cloudwise.ai/flyFish.html">cloudwise</a><ul><li><a href="https://www.bilibili.com/video/BV1z44y1n77Y/">video</a></li></ul></li><li><a href="https://avuejs.com/default/sign.html">avuejs</a></li></ul><h2 id="web-零散"><a href="#web-零散" class="headerlink" title="web 零散"></a>web 零散</h2><ul><li><a href="https://www.cleanpng.com/">cleanpng 免抠 PNG 素材</a></li><li><a href="http://pngimg.com/">png 图片</a></li><li><a href="https://www.stickpng.com/">stickpng</a></li><li><a href="https://www.shapedivider.app/">曲线背景图片生成</a></li><li><a href="https://squoosh.app/">图片处理网站</a></li><li><a href="https://devdocs.io/">web 综合手册</a></li><li><a href="https://ihateregex.io/">自动生成正则</a></li><li><a href="https://csslayout.io/">快速布局生成工具</a></li><li><a href="https://cssgr.id/">gird 布局生成</a></li><li><a href="https://www.layoutit.com/">layoutit</a></li><li><a href="https://flukeout.github.io/">css 闯关游戏</a></li><li><a href="https://loading.io/">加载动画生成</a></li><li><a href="https://zh.learnlayout.com/display.html">css 流程指引</a></li><li><a href="http://fanyi.youdao.com/web2/">有道翻译 2.0</a></li><li><a href="https://www.juhe.cn/apiservice">聚合数据 免费 API</a></li></ul><h2 id="题库"><a href="#题库" class="headerlink" title="题库"></a>题库</h2><ul><li><a href="https://www.nowcoder.com/">牛客</a></li><li><a href="https://leetcode.cn/">leetcode</a></li></ul><h2 id="素材参考网址"><a href="#素材参考网址" class="headerlink" title="素材参考网址"></a>素材参考网址</h2><ul><li><a href="https://dycharts.com/channel-inviteu/index.html">镝数图表</a></li><li><a href="https://www.gaoding.com/">稿定设计</a></li></ul><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="http://tc.sigma-rt.com.cn/">total 手机投屏软件</a></li><li><a href="https://zh.snipaste.com/">snipaste 截图</a></li><li><a href="https://lanhuapp.com/web/#/item">蓝湖 产品原型设计软件</a></li><li><a href="https://www.mydockfinder.com/">window mydock</a></li><li><a href="http://www.netbian.com/">彼岸壁纸</a></li><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10">win10</a></li></ul><h2 id="win-软件"><a href="#win-软件" class="headerlink" title="win 软件"></a>win 软件</h2><ul><li><a href="https://www.voidtools.com/zh-cn/">Everything 文件查找</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站收藏</title>
      <link href="/2023/07/22/other-weblinks-yule/"/>
      <url>/2023/07/22/other-weblinks-yule/</url>
      
        <content type="html"><![CDATA[<h2 id="网点资源"><a href="#网点资源" class="headerlink" title="网点资源"></a>网点资源</h2><ul><li><a href="https://wallhaven.cc/">wallhaven</a></li><li><a href="https://bz.zzzmh.cn/index#anime/">极简壁纸</a></li><li><a href="https://www.bxvpn.com/">暴雪 VPN</a></li><li><a href="https://www.owlook.com.cn/">owlook 小说</a></li><li><a href="https://yixi.tv/#/home">演讲</a></li><li><a href="https://pptsupermarket.com/">PPT 超级市场</a></li><li><a href="https://toonme.com/">照片动漫化</a></li><li><a href="https://trace.moe/">截图找动漫</a></li><li><a href="https://www.screentogif.com/">gif 生成工具</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git代码托管服务</title>
      <link href="/2023/01/01/other/other-git/"/>
      <url>/2023/01/01/other/other-git/</url>
      
        <content type="html"><![CDATA[<p>常用远程托管平台<a href="https://github.com/">GigHub</a> | <a href="https://gitee.com/">码云</a> | <a href="https://about.gitlab.com/">GitLab</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@qq.com&quot;</span><br><span class="line"></span><br><span class="line">git config --[local/global/system] obj.键 + 空格 + 值 //修改、添加配置</span><br><span class="line">git config --[local/global/system] --unset obj.键  //删除配置</span><br><span class="line"></span><br><span class="line">查看</span><br><span class="line">git config --list</span><br><span class="line">git config user.name</span><br><span class="line"></span><br><span class="line">git 配置分为三部分</span><br><span class="line">    1、本地配置位于本地仓库的隐藏文件夹.git/config 文件  默认以core开头</span><br><span class="line">       git config --local --list (只 本地配置)</span><br><span class="line"></span><br><span class="line">    2、全局配置位于用户的根目录下 .gitconfig  //需要进行过全局配置才会有该文件</span><br><span class="line">       git config --global --list (只 全局配置)</span><br><span class="line"></span><br><span class="line">    3、系统配置位于git的安装目录下</span><br><span class="line">       git config --system --list (只 系统配置)</span><br><span class="line"></span><br><span class="line">    (优先级依次降低 如果三个配置文件中都有同样的配置优先以本地为准)</span><br><span class="line"></span><br><span class="line">命令行汉化</span><br><span class="line">echo &quot;alias git=&#x27;LANG=zh_CN.utf8 git&#x27;&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><blockquote><p>操作完成之后信息保存在<strong>C 盘的用户</strong>下**.gitconfig**文件中，作用只是标识你是谁,与远程仓库账户无关</p></blockquote><h3 id="获取仓库"><a href="#获取仓库" class="headerlink" title="获取仓库"></a>获取仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init #生成隐藏文件夹.git</span><br><span class="line">或</span><br><span class="line">git clone 项目地址</span><br></pre></td></tr></table></figure><h3 id="工作区间"><a href="#工作区间" class="headerlink" title="工作区间"></a>工作区间</h3><blockquote><p>工作区：包含.git 版本库的目录<br>暂存区：.git 版本库下的 index 文件就是暂存区(stage),是一个临时保存修改文件的地方<br>版本库：项目文件夹下.git 隐藏文件夹就是版本库,储存这项目配置信息、日志信息、文件版本等<br>远程仓库：</p></blockquote><p>工作区 git add . 到暂存区 commit 版本库 push 远程仓库</p><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">untracked : # 未跟踪(未被纳入版本控制)</span><br><span class="line">tracked   : # 以跟踪(纳入版本控制)</span><br><span class="line">    Unmodified # 未修改</span><br><span class="line">    Modified   # 已修改</span><br><span class="line">    Staged     # 已暂存</span><br><span class="line"></span><br><span class="line">git status # 指令查看文件状态</span><br></pre></td></tr></table></figure><h3 id="从本地到远程仓库流程"><a href="#从本地到远程仓库流程" class="headerlink" title="从本地到远程仓库流程"></a>从本地到远程仓库流程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir project</span><br><span class="line">cd project</span><br><span class="line">git init</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://gitee.com/liaozhongxun/project.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">git status [-s]# 查看文件状态</span><br><span class="line">git add file|.|* # 将指定文件、所有新增编辑文件、所有编辑文件 添加到暂存区</span><br><span class="line">git reset &lt;file-name&gt;           # 从暂存区 commit 的修改恢复指定到工作区</span><br><span class="line">git reset -- .                  # 从暂存区恢复所有文件到工作区</span><br><span class="line">git reset --hard                # 把暂存区的修改退回到工作区</span><br><span class="line">git reset --hard HEAD~1         # 回头n个版本</span><br><span class="line">git commit -m &#x27;日志信息&#x27; # 将暂存区文件提交到版本库(状态变为已跟踪未修改 看不到了)</span><br><span class="line">git commit -a -m &#x27;日志信息&#x27; # 不用add 直接添加到版本库</span><br><span class="line">git commit 回车(进入编辑器) --&gt; i(进入编辑模式) --&gt; esc (退出编辑模式) --&gt; :wq(保存并退出)</span><br><span class="line"></span><br><span class="line">git stash  # 工作区的修改和暂存区的修改</span><br><span class="line">git stash pop # 恢复</span><br><span class="line"></span><br><span class="line">git log # 查看日志记录</span><br><span class="line">commit id  重要</span><br><span class="line">git log --oneline  //以简洁的一行显示，包含简洁哈希索引值</span><br><span class="line">git log --pretty=oneline //查看日志且并且显示版本</span><br><span class="line">git log --stat     //显示每个commit中哪些文件被修改,分别添加或删除了多少行</span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><blockquote><p>git revert 是用一次新的 commit 来回滚之前的 commit，git reset 是直接删除指定的 commit。看似达到的效果是一样的，其实完全不同：<br>1、上面我们说的如果你已经 push 到线上代码库，reset 删除指定 commit 以后，你 git push 可能导致一大堆冲突，但是 revert 不会。<br>2、如果在日后现有分支和历史分支需要合并的时候，reset 恢复部分的代码依然会出现在历史分支里，但是 revert 方向提交的 commit 并不会出现在历史分支里。<br>3、reset 是在正常的 commit 历史中，删除了指定的 commit，这时 HEAD 是向后移动了。而 revert 是在正常的 commit 历史中再 commit 一次，只不过是反向提交，它的 HEAD 是一直向前的。</p></blockquote><ul><li>撤销指定 commit<ul><li>reset(工作区回退)<ul><li><code>git reset --hard commit_id</code><ul><li><code>--soft</code>:保留源码，只回退 commit 信息到某个版本，不涉及 index 的回退。如果还需要提交，直接 commit 即可。</li><li><code>--mixed</code>：会保留源码，只是将 git commit 和 index 的信息回退到了某个版本。（git reset 默认的就是–mixed 模式，即 git reset 等价于 git reset –mixed）</li><li><code>--hard</code>：源码也会回退到某个版本，commit 和 index 都会回退到某个版本。(注意这种方式是会改变本地代码仓库源码)</li></ul></li><li>当然有人在 push 代码以后，也使用 reset –hard 回退代码到某个版本之前。但是这样会有一个问题，你线上的代码没有变，线上 commit、index 都没有变，当你把本地代码修改完提交的时候你会发现全是冲突……..所以，这种情况你要使用下面的方式</li></ul></li><li>revert<ul><li>同时回滚远程线上代码</li><li><code>git revert commit_id</code></li></ul></li></ul></li><li>撤销工作区修改<ul><li>未跟踪<ul><li><code>git clean -fd</code> 丢弃所有位跟踪</li></ul></li><li>未 add<ul><li><code>git checkout files</code></li><li><code>git checkout -- .</code> 撤销所有修改过没有 add 的改变</li></ul></li><li>已经 git add<ul><li><code>git reset HEAD</code> 撤销暂存状态回到 add 前,再<code>git checkout files</code>回到修改前</li><li><code>git reset file</code>撤销指定文件</li><li><code>git reset</code>撤销所有文件</li><li><code>HEAD</code> 代表回到 HEAD 指向的 commit</li></ul></li><li>已 add 并再次修改<ul><li>先 1 在 2</li></ul></li></ul></li></ul><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git remote [-v]# 查看远程仓库</span><br><span class="line">git remote show origin # 查看远程仓库名为origin的详细信息</span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt; # 添加远程仓库name建议用origin,一个项目可以添加到多个远程仓库</span><br><span class="line"># &lt;name&gt;为本地自定义远程仓库别名，clone项目默认都是origin</span><br><span class="line">git remote rm &lt;name&gt; # 端口与指定名称的远程仓库的关联</span><br><span class="line">                     # 远程项目改名 github 会帮你重定向到此项目，不更新remote也能正常提交</span><br><span class="line">git push &lt;name&gt; &lt;branch&gt; # 提交到远程,如果后期不需要跟换仓库名与分支可以直接git push</span><br><span class="line"></span><br><span class="line">git clone &lt;url&gt; # 从远程克隆项目</span><br><span class="line">git pull # 从远程拉去最新内容，与fetch的差别pull会自动合并</span><br><span class="line">         # 第一次链接远程且本地有文件，pull时不允许合并添加 --allow-unrelated-histories强行合并</span><br><span class="line">git fetch # 从远程拉去最新内容</span><br><span class="line">    git merge origin/master # 手动指定仓库名/分支合并到工作区</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><blockquote><p>分支分为本地放在(本地操作是后面跟的那个如 master)和远程分支(远程 tags 旁边那个如 origin&#x2F;master)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">git branch # 查看所有本地分支</span><br><span class="line">git branch -r # 查看所有远程分支</span><br><span class="line">git branch -a # 查看本地与远程的分支（远程分支前面会有remotes表示这是远程的）</span><br><span class="line"></span><br><span class="line">git branch &lt;branch name&gt; # 创建本地分支</span><br><span class="line">git checkout &lt;branch name&gt; # 切换分支</span><br><span class="line">    # 切换分支前，需要将修改通过 commit 提交贮藏</span><br><span class="line">    # 切换分支后，没有add的文件，会跟到新分区</span><br><span class="line">git checkout -b &lt;branch name&gt; # 创建并切换</span><br><span class="line">git push origin &lt;branch name&gt; # 将本地分支推送到远程( 推送非当前分支的其他分支，与当前分支的改变无关 )</span><br><span class="line">git checkout -b &lt;new branch name&gt; origin/远程分支名 # 拉取指定远程分支</span><br><span class="line">git checkout --track origin/abranch # 拉取远程分支，使用相同的名字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git checkout . # 放弃所有的文件修改</span><br><span class="line">此命令用来放弃掉所有还没有加入到缓存区（就是 git add 命令）的修改：内容修改与整个文件删除。但是此命令不会删除掉刚新建的文件。因为刚新建的文件还没已有加入到 git 的管理系统中。所以对于git是未知的。自己手动删除就好了。</span><br><span class="line"></span><br><span class="line">git checkout -f # 丢弃本地修改,还可以删除没有跟踪的</span><br><span class="line"></span><br><span class="line">git clone -b branchA http://xxx #直接隆指定分支</span><br><span class="line"></span><br><span class="line">git cherry-pick &lt;commitHash&gt; #当前分支如果需要某个分支的指定提交,</span><br><span class="line">                             #你需要另一个分支的所有代码变动就用 merge</span><br><span class="line">git merge &lt;branch name&gt; # 将指定分支版本库内容合并到当前分支</span><br><span class="line">                        # 如果两个分支多同一个文件同一部分进行不同修改，会产生冲突</span><br><span class="line">                        # 解决方法打开文件去除不要的在提交上去就行了</span><br><span class="line"></span><br><span class="line">git branch -d &lt;branch name&gt; # 删除本地分支(要在其他分支上操作，并且新增内容要提交到远程才能成功)</span><br><span class="line">git branch -D &lt;branch name&gt; # 删除本地分支(要在其他分支上操作，并且新增内容可以不用提交,D就是强行删除)</span><br><span class="line">git push origin -d &lt;branch name&gt; # 删除远程分支</span><br><span class="line"></span><br><span class="line">``checko`</span><br><span class="line"></span><br><span class="line">分支的运用案例</span><br><span class="line">![](../../static/img/gitbranch.png)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 标签</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">记录特定事件点的状态</span></span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">git tag &lt;tag name&gt; # 创建标签</span><br><span class="line">git tag -a v1.4 -m &quot;my version 1.4&quot;</span><br><span class="line">git show &lt;tag name&gt; # 查看标签</span><br><span class="line">git push origin &lt;tag name&gt; # 将指定标签推送到远程</span><br><span class="line">git checkout -b &lt;branch name&gt; &lt;tag name&gt; # 检出指定分支 指定标签的代码</span><br><span class="line"></span><br><span class="line">git tag -d &lt;tag name&gt; # 删除标签</span><br><span class="line">git push origin :refs/tags/&lt;tag name&gt; # 删除远程标签</span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm file # 删除工作区文件(要通过commit提交到版本库才会删除仓库中的文件)</span><br><span class="line">touch .gitignore # 创建文件</span><br></pre></td></tr></table></figure><h2 id="忽略文件-gitignore"><a href="#忽略文件-gitignore" class="headerlink" title="忽略文件 .gitignore"></a>忽略文件 .gitignore</h2><blockquote><p>.gitignore 只能忽略那些原来没有被追踪的文件,否则无效（要通过 git rm .env.development –cached ）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*.txt  # 忽略所有.txt格式文件</span><br><span class="line">!list.txt # 不需要忽略指定文件</span><br><span class="line">/filename # 忽略指定文件名</span><br><span class="line">build/    # 忽略指定文件夹</span><br><span class="line">doc/*.txt # 忽略doc文件夹下的.txt文件</span><br><span class="line">doc/**/*.txt # 忽略doc下所有.txt文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GIT-协议"><a href="#GIT-协议" class="headerlink" title="GIT 协议"></a>GIT 协议</h2><p>git 支持一下四种协议</p><ul><li>本地协议(Local)</li><li>HTTPS 协议</li><li>SSH 协议</li><li>GiT 协议</li></ul><blockquote><p>GitHub 与码云目前常用 HTTPS 与 SSH 协议,平时大多使用 HTTPS 协议</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/liaozhongxun/xxx.git</span><br></pre></td></tr></table></figure><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><blockquote><p>SSH (Secure Shell 安全外壳协议) 的缩写 可以不要每次输入用户名密码，而是利用公钥和私钥进行比对</p></blockquote><p>1、git 下输入 ssh-keygen|ssh-keygen -t rsa 连续回车生成公私钥（公私钥与本台计算机有关）</p><ul><li>linux 需要安装 <code>openssh</code></li></ul><p>2、公私钥匙用户家目录下的 .ssh 文件夹中<br>私钥 : id_rsa<br>公钥 : id_rsa.pub</p><p>3、复制公钥的内容到远程仓库(GitHub 或 开源中国等）<br>添加成功后本台计算机就能和远程仓库进行 ssh 交互了</p><p><a href="https://www.bilibili.com/video/BV1yz4y1y7RQ?p=40">参考资料 后续继续</a></p><h3 id="linux-与-linux-ssh-设置"><a href="#linux-与-linux-ssh-设置" class="headerlink" title="linux 与 linux ssh 设置"></a>linux 与 linux ssh 设置</h3><p>1、两个主机都生成公钥私钥<br>2、连接主机 <code>ssh-copy-id -i ./id_rsa.pub root@114.115.212.xxx</code> 向目标主机 114 上传公钥<br>3、ssh <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#64;&#x78;&#x78;&#120;&#x2e;&#120;&#x78;&#x78;&#46;&#x78;&#120;&#120;&#46;&#x78;&#120;">&#x72;&#x6f;&#x6f;&#116;&#64;&#x78;&#x78;&#120;&#x2e;&#120;&#x78;&#x78;&#46;&#x78;&#120;&#120;&#46;&#x78;&#120;</a> 测试是否可用直接连接</p><p>win 连 linux 可能需要在 git bash 上操作</p><p>或<br>远程主机直接将客户端的公钥加入 ~&#x2F;.ssh&#x2F;authorized_keys 文件中</p><h2 id="git-服务器环境搭建"><a href="#git-服务器环境搭建" class="headerlink" title="git 服务器环境搭建"></a>git 服务器环境搭建</h2><ul><li>进入 &#x2F;usr&#x2F;src 下载 gitisos</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python python-setuptools git-core # 系统一般有自动基本可以不用安装</span><br><span class="line">git clone git://github.com/res0nat0r/gitosis.git</span><br><span class="line">cd gitosis</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><ul><li>管理员客户端通过 ssh 生成公钥</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa # 用户目录下 /.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>初始化项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">新建一个git用户</span></span><br><span class="line">useradd -m git</span><br><span class="line">su - git</span><br><span class="line">gitosis-init&lt; 管理员id_rsa.pub所在路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/home/git下面生成gitosis和repositories</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保/home/git/repositories/gitosis-admin.git/hooks/post-update具有执行权限</span></span><br></pre></td></tr></table></figure><ul><li>管理员的客户端</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@&lt; server ip &gt;:gitosis-admin.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitosis-admin项目下有一个gitosis.conf文件和一个keydir目录</span></span><br></pre></td></tr></table></figure><p>1、<code>gitosis.conf</code>用来配置 git 项目和用户,<code>keydir</code>存放用户的公钥,公钥必须 pub 结尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[gitosis]</span><br><span class="line"></span><br><span class="line">[group gitosis-admin] # gitosis-admin管理所以项目</span><br><span class="line">members = lzoxunc@LAPTOP-DGM7G15T</span><br><span class="line">writable = gitosis-admin  # 对应keydir下有一个 lzoxunc@LAPTOP-DGM7G15T.pub 公钥文件</span><br></pre></td></tr></table></figure><ul><li>添加新项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[gitosis]</span><br><span class="line"></span><br><span class="line">[group gitosis-admin] # gitosis-admin管理所以项目</span><br><span class="line">members = lzoxunc@LAPTOP-DGM7G15T</span><br><span class="line">writable = gitosis-admin  # 对应keydir下有一个 lzoxunc@LAPTOP-DGM7G15T.pub 公钥文件</span><br><span class="line"></span><br><span class="line">[group new-project]  # 手动添加 ，相当于在github创建新项目 产生一个地址 git@192.168.152.130:new-project.git</span><br><span class="line">writable = new-project</span><br><span class="line">members = lzoxunc@LAPTOP-DGM7G15T username2 #多个用户用空格分开,这时keydir下需要存在username2.pub 公钥，</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多用户，只要username2客户端可以ping 通服务器ip 那么就可以正常使用了</span></span><br></pre></td></tr></table></figure><ul><li>发布内容</li></ul><blockquote><p>这时 &#x2F;home&#x2F;git&#x2F;repositories 下只有 gitosis-admin.get 一个项目</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> new-project members 存在的用户客户端任意位置</span></span><br><span class="line">mkdir new-project</span><br><span class="line">cd new-project</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit xxx</span><br><span class="line"></span><br><span class="line">git remote add origin git@&lt; server ip &gt;:new-project.git</span><br><span class="line">git push origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这时 /home/git/repositories 下会多一个new-project.git</span></span><br></pre></td></tr></table></figure><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><ul><li>快查看代码<ul><li>找到线上项目,按句号，或者将项目添加 1s,如:<a href="https://github1s.com/lzoxun/xxxxx.git%E7%9B%B4%E6%8E%A5%E7%BC%96%E8%BE%91%E5%99%A8%E6%96%B9%E5%BC%8F%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE">https://github1s.com/lzoxun/xxxxx.git直接编辑器方式打开项目</a></li></ul></li><li>查看项目信息<ul><li><code>https://api.github.com/repos/用户名称/项目名称</code></li></ul></li></ul><h3 id="命令行操作-GitHub-远程仓库"><a href="#命令行操作-GitHub-远程仓库" class="headerlink" title="命令行操作 GitHub 远程仓库"></a>命令行操作 GitHub 远程仓库</h3><p>生成 token<br>GitHub 主页 &gt; settings &gt; Developer settings &gt; Personal access tokens –&gt; Generate new token &gt; 勾选权限 &gt; 生成 token 令牌<br>类似 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lzO<br>tolen 使用场景文档<br><a href="https://docs.github.com/cn/rest">DOCS</a><br>命令行直接创建仓库<br>curl -u “$username:$token” <a href="https://api.github.com/user/repos">https://api.github.com/user/repos</a> -d ‘{“name”:”‘$repo_name’”}’<br>curl -u “liaozhongxunlzx:ghp_xxx” <a href="https://api.github.com/user/repos">https://api.github.com/user/repos</a> -d ‘{“name”:”‘lzo-name’”}’<br>就可以直接<br>git remote add origin <a href="https://github.com/liaozhongxunlzx/lzo-name.git">https://github.com/liaozhongxunlzx/lzo-name.git</a></p><p>获取 GitHub 项目列表<br>curl -H “Authorization: token ghp_xxxxx” <a href="https://api.github.com/users/liaozhongxun/repos">https://api.github.com/users/liaozhongxun/repos</a><br>完整的仓库列表<br>curl -H “Accept: application&#x2F;vnd.github+json” -H “Authorization: token ghp_xxx” <a href="https://api.github.com/users/liaozhongxun/repos/?page%5C=1%5C&per_page%5C=1000">https://api.github.com/users/liaozhongxun/repos\?page\=1\&amp;per_page\=1000</a></p><p>搜索 Github 其他人的项目<br>curl -H “Accept: application&#x2F;vnd.github+json” <a href="https://api.github.com/search/repositories/?q%5C=NAME%5C&sort%5C=stars%5C&page%5C=1%5C&per_page%5C=100%60%60">https://api.github.com/search/repositories\?q\=NAME\&amp;sort\=stars\&amp;page\=1\&amp;per_page\=100``</a></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>远程 ssh: connect to host github.com port 22: Connection refused</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$ vim ~/.ssh/config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Add section below to it</span></span><br><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User github的邮箱 如果有邮箱的key</span></span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$ ssh -T git@github.com</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Git </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 基础</title>
      <link href="/2023/01/01/linux/linux/"/>
      <url>/2023/01/01/linux/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="基础简介"><a href="#基础简介" class="headerlink" title="基础简介"></a>基础简介</h2><ul><li>安装<a href="http://mirrors.aliyun.com/centos/">国内阿里云镜像</a> <a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">7 iso</a></li><li>安装<a href="http://mirrors.aliyun.com/ubuntu-releases/20.10/">国内阿里云镜像</a></li><li>安装<a href="http://mirrors.sohu.com/">国内搜狐镜像</a></li></ul><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">-   虚拟机</span><br><span class="line">    -   快照：保持当前状态，后期玩坏了随时可回到这里</span><br><span class="line">    -   克隆：完全克隆与连接克隆，链接克隆相当于创建一个子系统，只要父系统没事，子系统就能随便搞</span><br><span class="line">    -   重建：安装系统的目录下有一个 vmdk 文件，如果保持好，其他系统安装的时候选择现有磁盘，再选择这个 vmdk 文件，那么系统就能还原</span><br><span class="line">-   <span class="title class_">Linux</span> 发行版(<span class="title class_">Ubuntu</span>、<span class="title class_">CentOs</span>;同一个内核在市场上有三百多个发行版),在 <span class="title class_">Linux</span> 内核上安装软件上</span><br><span class="line"></span><br><span class="line">    -   红帽(<span class="title class_">RedHat</span>)系列</span><br><span class="line">        -   红帽企业版 收费</span><br><span class="line">        -   <span class="title class_">CentOs</span> 相当于免费红帽企业版系统，后期也被红帽公司收购了</span><br><span class="line">    -   debian 系列</span><br><span class="line">        -   <span class="title class_">Ubuntu</span>(在 <span class="title class_">Debian</span> 上二次开发的系统，图形界面效果好)</span><br><span class="line"></span><br><span class="line">-   <span class="variable constant_">GNU</span> 计划：崇尚代码开源</span><br><span class="line">-   <span class="title class_">Shell</span>：指用户界面，包括图形界面（<span class="variable constant_">GUI</span>）和字符界面（<span class="variable constant_">CLI</span>），<span class="title class_">Linux</span> 以字符界面为主，所以字符界面称为是<span class="string">`Shell`</span></span><br><span class="line"></span><br><span class="line">    -   通过字符界面操作的指令叫做 shell 指令（cat /etc/shells）查看 <span class="title class_">Shell</span> 目录</span><br><span class="line">    -   <span class="title class_">Linux</span> 默认使用的是目录中的 <span class="string">`/bin/bash`</span>(通过 echo $SHELL 可以查看)</span><br><span class="line">    -   进入图形界面： <span class="string">`ctrl+alt+f1`</span></span><br><span class="line">    -   进入字符界面： <span class="string">`ctrl+alt+f2~6`</span> ,打开五个字符 <span class="title class_">Shell</span>(<span class="string">`虚拟终端 tty`</span>)</span><br><span class="line">    -   通过远程连的终端： 伪终端<span class="string">`pts`</span></span><br><span class="line">    -   <span class="string">`tty`</span>指令查看当前终端设备文件</span><br><span class="line"></span><br><span class="line">    -   echo 查看$变量值</span><br><span class="line">    -   shell 通常有<span class="string">`自带`</span>一些命令称为<span class="string">`内部命令`</span>如 cd、pwd,但是大多数都是<span class="string">`外部命令`</span>,通过 <span class="string">`stype cd`</span> 查看</span><br><span class="line">    -   外部命令 (<span class="string">`which ls`</span>通过 which 查看指定命令位置)</span><br><span class="line">        -   每个外部命令都对应一个可执行文件，存在系统中</span><br><span class="line">        -   普通命令:<span class="regexp">/bin、/u</span>sr/bin、/usr/local/bin</span><br><span class="line">        -   管理员命令:<span class="regexp">/sbin、/u</span>sr/sbin、/usr/local/sbin</span><br><span class="line"></span><br><span class="line">-   终端：通常把一套键盘鼠标显示屏这样的输入输出设备叫做<span class="string">`终端`</span></span><br><span class="line">    -   笔记本这样的叫做<span class="string">`物理终端`</span>，一个设备只有一个</span><br><span class="line">    -   通过各种软件打开的字符界面叫<span class="string">`虚拟终端`</span>可以很多个</span><br><span class="line">    -   tty ： 查看当前使用终端的名称</span><br><span class="line">-   远程工具</span><br><span class="line">    -   <span class="title class_">Xshell</span>：通过远程 <span class="title class_">Linux</span> 的 ip，连接到远程</span><br><span class="line">        -   必须能 ping 通的才行</span><br><span class="line">        -   win10 默认不让其他人 ping 的，要去防火墙入站规则中设置</span><br><span class="line">        -   拥有账户</span><br><span class="line">    -   <span class="variable constant_">XMANAGER</span></span><br><span class="line">-   命令提示符：[lzoxun@bogon ~]$ --&gt; <span class="string">`[用户名@计算机名 所在目录]`</span></span><br><span class="line">    -   ~ ：指用户家目录，每个用户都不一样</span><br><span class="line">    -   $ ：普通用户</span><br><span class="line">    -   \# ：root 用户</span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   格式 ： 命令 + [选项] + [参数]</span><br><span class="line">-   参数 ： 命令要<span class="string">`处理的对象`</span></span><br><span class="line">-   选项 ： <span class="string">`调节`</span>命令的具体功能，带 - 前缀</span><br><span class="line">-   tab 补全目录| ；多个命令用分号隔离</span><br></pre></td></tr></table></figure><h3 id="基本操作命令"><a href="#基本操作命令" class="headerlink" title="基本操作命令"></a>基本操作命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`pwd`</span> ：查看当前所在路径</span><br><span class="line">    -   <span class="string">`-P`</span>: 对于软连接文件 显示真实所在的路径 并非快捷方式的路径</span><br><span class="line">-   <span class="string">`su &lt;user-name&gt;`</span> ： 切换用户</span><br><span class="line">-   <span class="string">`passwd &lt;user-name&gt;`</span> ：更改用户密码（需要交互）</span><br><span class="line">    -   <span class="string">`echo &#x27;123&#x27; | passwd --stdin &lt;user-name&gt;`</span>：直接设置</span><br><span class="line">-   <span class="string">`ln`</span>: ln -s 源文件 快捷方式文 件</span><br><span class="line">    -   源文件路径最好用绝对路径</span><br><span class="line">-   <span class="string">`alias`</span>: 创建别名(<span class="string">`/home/xxx/.bashrc`</span>)</span><br><span class="line">    -   <span class="string">`alias`</span>:查看系统中存在的别名</span><br><span class="line">    -   <span class="string">`alias xxx =&#x27;cat /etc/passwd&#x27;`</span> : xxx 的作用就是查看 passwd</span><br><span class="line">    -   <span class="string">`unalias xxx`</span>:撤销指定别名</span><br><span class="line">-   <span class="string">`history`</span>：</span><br><span class="line">    -   <span class="string">`-d num`</span>:删除指定历史指令</span><br><span class="line">    -   <span class="string">`!num`</span>:执行指定历史指令</span><br><span class="line">    -   <span class="string">`!!`</span>:执行指上一次命令</span><br><span class="line">    -   <span class="string">`-c`</span>:清除缓存的历史命令</span><br><span class="line">-   <span class="string">`man`</span> :查看帮助（help xxx 这里的 xxx 只能是内部指令）</span><br><span class="line">-   <span class="string">`clear|Ctrl+l`</span>:清除屏幕</span><br><span class="line">-   标准输入输出</span><br><span class="line">    -   <span class="string">`Stdin`</span>:标准输入，文件面描述符号 <span class="number">0</span>,鼠标键盘</span><br><span class="line">    -   <span class="string">`Stdout`</span>:标准输出，文件面描述符号 <span class="number">1</span>，显示器</span><br><span class="line">    -   <span class="string">`Stderr`</span>:错误输出，文件面描述符号 <span class="number">2</span>，显示器</span><br><span class="line">    -   重定向</span><br><span class="line">        -   输入重定向 <span class="string">`&gt;`</span> 或 <span class="string">`&gt;&gt;`</span>,将输出到屏幕的内容转到指定文件中</span><br><span class="line">            -   <span class="string">`cat 1.txt 2.txt &gt; 3.txt`</span> :合并文件 <span class="number">1</span> 与文件 <span class="number">2</span></span><br><span class="line">            -   <span class="string">`cat &gt; 4.txt`</span>:编辑文件，回车进入输入模式，ctrl+d结束保存数据</span><br><span class="line">        -   错误信息从定向 <span class="string">`2&gt;`</span> ;将错误信息从定向到指定文件</span><br><span class="line">            -   <span class="string">`cmd xxxxxx 2&gt; filepath`</span></span><br><span class="line">            -   <span class="string">`cmd xxxxxx 2&gt; /dev/null`</span> :将错误信息不存储不打印</span><br><span class="line">        -   <span class="string">`&amp;&gt;`</span> 错误和正确的全部从定向</span><br><span class="line">        -   输出重定向 <span class="string">`&lt;`</span> 或 <span class="string">`&lt;&lt;`</span> ,将键盘的输入重定向到指定文件，详单与查看文件内容如：cat</span><br><span class="line">            -   <span class="string">`cat &gt; /etc/passwd`</span></span><br><span class="line">            -   <span class="string">`cat &gt;&gt; xxx`</span>:进入一个输入模式，无限输入，输入 xxx 后生成文件，结束此状态</span><br><span class="line">-   查找指令已经相关文件位置</span><br><span class="line">    -   <span class="string">`whereis`</span>,<span class="string">`where`</span>,<span class="string">`which`</span></span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`cd`</span> ：进入</span><br><span class="line">    -   <span class="string">`cd -`</span> ：进入之前所在目录</span><br><span class="line">-   <span class="string">`ls`</span>：查看目录的文件</span><br><span class="line">    -   <span class="string">`-l`</span> ：查看详细信息</span><br><span class="line">    -   <span class="string">`-a`</span> ： 查看所以文件包括隐藏文件</span><br><span class="line">    -   <span class="string">`-d`</span> ： 查看目录<span class="string">`自己的`</span>信息</span><br><span class="line">    -   <span class="string">`-h`</span> ： 以 k、M 格式显示文件大小</span><br><span class="line">    -   <span class="string">`-R`</span> ：当前目录为根节点，列出所有子节点</span><br><span class="line">    -   <span class="string">`-i`</span> : 查看文件唯一编号 inode</span><br><span class="line">    -   <span class="string">`--help`</span> ：单词一般都有两个杠</span><br><span class="line">-   <span class="string">`touch &lt;file-name&gt;`</span>：创建空文件</span><br><span class="line">-   <span class="string">`mkdir &lt;name1&gt; &lt;name2&gt;`</span>：创建空文件夹</span><br><span class="line">    -   <span class="string">`-p a/b/c`</span> ：创建多级目录</span><br><span class="line">-   <span class="string">`rmdir &lt;name1&gt;`</span>： 删除空目录</span><br><span class="line">-   <span class="string">`rm &lt;file-name&gt;`</span>： 删除文件</span><br><span class="line">    -   <span class="string">`-f`</span>：直接删除</span><br><span class="line">    -   <span class="string">`-r`</span>：删除目录</span><br><span class="line">    -   <span class="string">`-rf`</span>：强制删除目录下所有文件与文件夹</span><br><span class="line">    -   <span class="string">`find * | grep -v 1.txt | xargs rm`</span>：删除指定文件外的所有</span><br><span class="line">    -   <span class="string">`find * | grep -v &#x27;\(1.txt\|2.txt\)&#x27; | xargs rm`</span></span><br><span class="line">-   <span class="string">`cp &lt;old-file&gt; &lt;new-file&gt; `</span>： 复制文件(<span class="keyword">new</span>-file 有-复制，无-改名)</span><br><span class="line">    -   <span class="string">`-r`</span> ：复制目标可以是目录</span><br><span class="line">    -   <span class="string">`-p`</span> ：保留复制目标文件属性</span><br><span class="line">-   <span class="string">`rsync &lt;old-file&gt; &lt;new-file&gt; `</span></span><br><span class="line">    -   <span class="string">`-r`</span>:递归复制子目录</span><br><span class="line">    -   <span class="string">`-v`</span>:查看复制的文件</span><br><span class="line">    -   <span class="string">`-u`</span>：只复制修改过的文件</span><br><span class="line">-   <span class="string">`mv &lt;old-file&gt; &lt;new-file&gt; `</span>： 剪切（剪切目录不要 -r）</span><br><span class="line">    -   安装 mmv</span><br><span class="line">    -   <span class="string">`mmv &#x27;_._._._&#x27; &#x27;#1.#2&#x27;`</span></span><br><span class="line">    -   <span class="string">`mmv &#x27;file\*.rar&#x27; &#x27;text#1.zip&#x27;`</span></span><br><span class="line">    -   #<span class="number">1</span> 代表第一个<span class="string">`*`</span>号匹配的内容，#<span class="number">2</span> 代表第二个*号代表的内容</span><br><span class="line">-   <span class="string">`dd if=/dev/zero of=/tmp/test bs=1M count=60`</span>:构造一个 <span class="number">60</span> 个 1M 大小的文件，从/dev/zero 文件放到/tmp/</span><br><span class="line">-   文件属性设置</span><br><span class="line"></span><br><span class="line">    -   文件或者目录设置扩展属性后 root 也要按照规则操作</span><br><span class="line">    -   <span class="string">`chattr [-RV] +或- i或a 文件`</span></span><br><span class="line">        -   <span class="string">`-R`</span>:递归修改文件夹子目录文件</span><br><span class="line">        -   <span class="string">`-V`</span>: 显示指令执行过程</span><br><span class="line">        -   <span class="string">`+-`</span>:添加或删除</span><br><span class="line">        -   <span class="string">`i`</span>:只读属性，添加后 root 也无法修改</span><br><span class="line">        -   <span class="string">`a`</span>:只能往文件中增加内容，不允许删除</span><br><span class="line">        -   <span class="string">`s`</span>：彻底删除文件，不可恢复</span><br><span class="line">    -   <span class="string">`lsattr 文件`</span>:查看属性</span><br><span class="line"></span><br><span class="line">-   文件查找</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`locate &lt;file name&gt;`</span>:返回文件所在路径,根据索引数据库查找，一段时间后数据库自动更新</span><br><span class="line">    -   <span class="string">`find`</span>: find &lt;查找起始路径&gt; &lt;选项&gt; &lt;查找条件&gt; &lt;处理动作&gt;</span><br><span class="line">        -   <span class="string">`起始路径`</span>:</span><br><span class="line">        -   <span class="string">`选项`</span>:</span><br><span class="line">            -   <span class="string">`-name`</span> :按文件名查找</span><br><span class="line">            -   <span class="string">`-empty`</span> :空文件或文件夹</span><br><span class="line">            -   <span class="string">`-type 文件类型`</span> :查找指定类型的文件(f、d、l、b、c) f 代替 - 普通文件</span><br><span class="line">            -   <span class="string">`-not`</span>:取反</span><br><span class="line">            -   <span class="string">`-ls`</span>:显示匹配文件的</span><br><span class="line">            -   <span class="string">`-size`</span>:</span><br><span class="line">            -   <span class="string">`-i`</span>:忽略大小写</span><br><span class="line">            -   权限相关</span><br><span class="line">                -   <span class="string">`-user root`</span>:查找所有者是 root 的文件</span><br><span class="line">                -   <span class="string">`-group`</span></span><br><span class="line">                -   <span class="string">`-uid`</span></span><br><span class="line">                -   <span class="string">`-gid`</span></span><br><span class="line">                -   <span class="string">`-nouser`</span>:没有所有者的文件(用户被删除)</span><br><span class="line">                -   <span class="string">`-nogroup`</span>:没有所属组的文件</span><br><span class="line">                -   <span class="string">`-perm 755`</span>:按权限查找</span><br><span class="line">                    -   模糊查询</span><br><span class="line">                        -   <span class="string">`perm /620`</span> :查找出所有者拥有 r 或 w 权限，或者所属组有 w 权限的文件，<span class="string">`0代表不理会`</span></span><br><span class="line">                        -   <span class="string">`perm -220`</span>:并且</span><br><span class="line">                    -   特殊权限查找(<span class="variable constant_">SUID</span> <span class="number">4</span>、<span class="variable constant_">SGID</span> <span class="number">2</span>、<span class="title class_">Sbit</span> <span class="number">1</span>)</span><br><span class="line">                        -   <span class="string">`perm /7000`</span>:最高位是特殊权限，umask 查看</span><br><span class="line"></span><br><span class="line">        -   <span class="string">`查找条件`</span>:文件名称是什么、文件大小、文件类型、从属关系、权限等（通配符）</span><br><span class="line">        -   <span class="string">`处理动作`</span>:对找到的文件 进行指令操作</span><br><span class="line">            -   <span class="string">`find`</span> 找到的是文本信息内容可以直接 | 加指令操作</span><br><span class="line">            -   -exec ls xxx &#123;&#125; \; 找到结果当做文件处理，但是指令后面需要加 &#123;&#125; \;结尾,| &#123;&#125; 代表找到的文件 \结束</span><br><span class="line">            -   | xargs ls xxx 通过管道使用，功能与-exec 类似</span><br><span class="line">                -   | xargs -i cp &#123;&#125; /root 加-i 可以用&#123;&#125;的功能</span><br><span class="line">                -   echo <span class="string">&quot;a b c&quot;</span>|xargs mkdir 直接新建a、b、c目录</span><br><span class="line">                -   xargs单独使用</span><br><span class="line">                    -   xargs (默认跟echo命令),将用户输入作为标准输出,用在后面跟的命令上</span><br><span class="line">        -   根据时间戳查找</span><br><span class="line">            -   天 : <span class="string">`-atime`</span>(访问时间) 、<span class="string">`-mtime`</span>(更改内容时间)、<span class="string">`-ctime`</span>(改动时间)</span><br><span class="line">                -   find /etc -atime +<span class="number">7</span> (七天内没有被访问过的文件)</span><br><span class="line">                -   find /etc -atime -<span class="number">7</span> (七天内被访问过的文件)</span><br><span class="line">            -   分 : <span class="string">`-amin`</span>(访问时间) 、<span class="string">`-mmin`</span>(更改内容时间)、<span class="string">`-cmin`</span>(改动时间)</span><br><span class="line">                -   find /etc -amin -<span class="number">7</span> (七分钟内被访问过的文件)</span><br></pre></td></tr></table></figure><h3 id="文件内容操作"><a href="#文件内容操作" class="headerlink" title="文件内容操作"></a>文件内容操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`cat`</span>：查看文本文件内容</span><br><span class="line">    -   <span class="string">`-n`</span>：显示行号</span><br><span class="line">-   <span class="string">`more`</span>：查看文本文件内容，分页功能满屏幕自动暂停，底部自动退出</span><br><span class="line">-   <span class="string">`less`</span>：查看文本文件内容，分页功能满屏幕自动暂停，手动按 Q 退出</span><br><span class="line">-   <span class="string">`head -3 和 tail -3`</span>：查看文件前 n 行或最后 n 行，指定行数</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`-f`</span>：监听文件数据变化</span><br><span class="line"></span><br><span class="line">-   <span class="string">`wc -l`</span>：查看文件行数</span><br><span class="line">-   <span class="string">`echo &#x27;abc&#x27;`</span>：输出内容，查看变量内容</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`&gt; a.txt`</span>: 内容重定向到指定文件</span><br><span class="line"></span><br><span class="line">-   <span class="string">`sed`</span>:[sed -i <span class="string">&quot;s#https#http#g&quot;</span> <span class="string">`grep http -rl VERO`</span>] 将 <span class="variable constant_">VERO</span> 下所有子目录所有文件里的 http 替换成 https</span><br><span class="line">    -   <span class="string">`-i`</span>:直接修改文件</span><br><span class="line">-   <span class="string">`grep &quot;key&quot; &lt;file-path&gt;`</span>:从指定文件中查找关键字（支持正则不支持通配符）</span><br><span class="line">    -   <span class="string">`&quot;^key$&quot;`</span>：正则直接操作关键字</span><br><span class="line">    -   <span class="string">`-n`</span>：行号</span><br><span class="line">    -   <span class="string">`-v`</span>：查找关键字规则不匹配的</span><br><span class="line">    -   <span class="string">`-i`</span>：不区分大小写</span><br><span class="line">    -   <span class="string">`-w`</span>：独立单词</span><br><span class="line">    -   <span class="string">`-r`</span>：递归查询子目录文件内容</span><br><span class="line">    -   <span class="string">`-o`</span>:只显示匹配到的</span><br><span class="line">    -   <span class="string">`-l`</span>:只输出匹配内容的文件名</span><br><span class="line">-   <span class="string">`diff &lt;file-name&gt; &lt;file-name2&gt;`</span>:比较两个文件，列出不同的内容</span><br><span class="line"></span><br><span class="line">    -   对比规则</span><br><span class="line">        -   <span class="string">`a`</span>:增加</span><br><span class="line">        -   <span class="string">`d`</span>:删除</span><br><span class="line">        -   <span class="string">`c`</span>:改变</span><br><span class="line">        -   <span class="string">`&lt;`</span>:前面文件 <span class="number">1</span></span><br><span class="line">        -   <span class="string">`&gt;`</span>:后面文件 <span class="number">2</span></span><br><span class="line">    -   <span class="string">`12a13;&gt;abcd`</span>:文件 <span class="number">2</span> 比文件 <span class="number">1</span> 新增加了一行内容，文件 <span class="number">2</span> 多出 abcd</span><br><span class="line"></span><br><span class="line">-   <span class="string">`stat`</span>:查看文件元数据（文件自生的属性权限时间）</span><br><span class="line">    -   <span class="string">`modify time`</span>:文件内容改变的时候（通过这个可以指定有人改了文件内容）</span><br><span class="line">    -   <span class="string">`change time`</span>:文件元数据改变的时候</span><br></pre></td></tr></table></figure><h3 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-   时间操作</span><br><span class="line">    -   <span class="string">`date`</span>: 系统时间</span><br><span class="line">        -   <span class="string">`+&quot;%F %T&quot;`</span>:<span class="number">2020</span>-<span class="number">09</span>-<span class="number">10</span> <span class="number">10</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    -   <span class="string">`hwclock`</span>:硬件 <span class="variable constant_">BIOS</span> 时间</span><br><span class="line">    -   <span class="string">`cat`</span>:日历</span><br><span class="line">    -   <span class="string">`sudo timedatectl set-local-rtc 1`</span>:同步系统时间</span><br></pre></td></tr></table></figure><h3 id="基本系统运用指令"><a href="#基本系统运用指令" class="headerlink" title="基本系统运用指令"></a>基本系统运用指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`ifconfig`</span> ：查看 ip （ens33 格式、lo、virbr0 虚拟网卡）等网卡</span><br><span class="line">    -   <span class="string">`watch -n 1 ifconfig`</span> 实时查看网络状态，<span class="attr">RX</span>:接收，<span class="attr">TX</span>:发送 =&gt; (<span class="variable constant_">KB</span> = 数值/<span class="number">1000</span>)</span><br><span class="line">-   <span class="string">`reboot|init 6`</span> ：重启</span><br><span class="line">-   <span class="string">`poweroff|init 0`</span> ：关机</span><br><span class="line">-   <span class="string">`shutdown`</span></span><br><span class="line">    -   -h now ：立即关机</span><br><span class="line">    -   -h +<span class="number">15</span> ：一段时间后关机</span><br><span class="line">    -   -r now ：立即重启</span><br><span class="line">    -   -r +<span class="number">15</span> <span class="string">&quot;给其他在线用户发送信息&quot;</span> ：一段时间后重启</span><br><span class="line">    -   -c ：取消之前 shutdown 的操作</span><br></pre></td></tr></table></figure><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-   通配符(一般文件路径操作是通配符,文件内容操作用正则)</span><br><span class="line">    -   <span class="string">`*`</span>：匹配任意数量任意字符 -&gt; 正则 <span class="string">`.*`</span></span><br><span class="line">    -   <span class="string">`?`</span>：匹配单个任意字符 -&gt; 正则 <span class="string">`.`</span></span><br><span class="line">    -   <span class="string">`[]`</span>： 匹配指定范围内任意单个字符 如：[<span class="number">0</span>-<span class="number">9</span>]其中之一，[!<span class="number">12</span>]不能是 <span class="number">1</span> <span class="number">2</span></span><br><span class="line">-   <span class="string">`&#123;&#125;`</span>：可展开如：mkdir /home/&#123;a,b,c&#125; 创建三个文件</span><br><span class="line">-   <span class="string">`|`</span>:管道（将管道左边的执行结果作为管道右边命令的输入）</span><br><span class="line">    -   将很多命令链接起来执行</span><br></pre></td></tr></table></figure><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="用户、组"><a href="#用户、组" class="headerlink" title="用户、组"></a>用户、组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">-   用户(<span class="string">`/etc/passwd`</span>)</span><br><span class="line">    -   基础信息</span><br><span class="line">        -   <span class="string">`id UserName`</span>:查看用户 <span class="variable constant_">ID</span>，组 <span class="variable constant_">ID</span> 信息</span><br><span class="line">        -   <span class="string">`useradd UserName`</span>:添加用户</span><br><span class="line">            -   <span class="string">`-u 1110`</span>:指定 <span class="variable constant_">UID</span></span><br><span class="line">            -   <span class="string">`-d /HomeDir`</span>:指定家目录</span><br><span class="line">            -   <span class="string">`-g GroupName`</span>:指定基本组不用默认的</span><br><span class="line">            -   <span class="string">`-G GroupName`</span>:直接添加附加组，基本组不影响</span><br><span class="line">            -   <span class="string">`-e 2020-02-02`</span>:用户有效期到 <span class="number">2020</span>-<span class="number">02</span>-<span class="number">02</span></span><br><span class="line">            -   <span class="string">`-M`</span>:不创建家目录(一般配合<span class="string">`-s /sbin/nologin`</span>使用)</span><br><span class="line">            -   <span class="string">`-m`</span>:创建家目录</span><br><span class="line">            -   <span class="string">`-s`</span>:设置用户默认 shell</span><br><span class="line">        -   <span class="string">`usermod UserName`</span>:编辑用户属性（与 useradd 的参数基本一致）</span><br><span class="line">            -   <span class="string">`-m -d /HomeDir`</span>:指定新的家目录(-m 删除旧的)</span><br><span class="line">            -   <span class="string">`-l newUserName`</span>:更改用户名字</span><br><span class="line">            -   <span class="string">`-G GroupName`</span>:把该用户原来所以的附加组替换成这一个附加组</span><br><span class="line">            -   <span class="string">`-a -G GroupName`</span>:添加一个新的附加组</span><br><span class="line">        -   <span class="string">`su UserName`</span>:切换用户</span><br><span class="line">            -   <span class="string">`su - UserName`</span>:完全切换到新用户，环境工作路径等</span><br><span class="line">            -   <span class="string">`su -`</span>:切换到管理员 root</span><br><span class="line">                -   su 配置文件<span class="string">`/etc/pam.d/su`</span></span><br><span class="line">                -   取消注释 <span class="string">`auth required pam_wheel.so use_uid`</span>行</span><br><span class="line">                    -   只有<span class="string">`wheel`</span>组的用户才能切换 root</span><br><span class="line">        -   <span class="string">`sudo`</span>:临时获取管理员权限 ,配置文件<span class="string">`/etc/sudoers`</span></span><br><span class="line"></span><br><span class="line">            -   <span class="string">`lisi ALL=ALL`</span>:用户<span class="string">`lisi`</span>使用<span class="string">`sudo命令`</span>可以执行<span class="string">`root的所有`</span>操作</span><br><span class="line">            -   <span class="string">`lisi2 ALL=/usr/sbin/useradd,/usr/sbin/usermod`</span>:<span class="string">`lisi2`</span>使用<span class="string">`sudo`</span>只能执行这<span class="string">`指定的`</span>命令</span><br><span class="line">            -   <span class="string">`echo &quot;1&quot; | sudo -S /usr/local/nginx/sbin/nginx`</span>:sudo 直接输入密码，通过 -S</span><br><span class="line"></span><br><span class="line">        -   <span class="string">`userdel UserName`</span>:删除用户</span><br><span class="line">            -   <span class="string">`-r`</span>:同时删除家目录</span><br><span class="line"></span><br><span class="line">    -   用户类型</span><br><span class="line"></span><br><span class="line">        -   超级管理员用户:拥有最高权限的 <span class="title function_">root</span>(<span class="number">0</span>)</span><br><span class="line">        -   普通用户：创建的用户(<span class="number">1000</span> - <span class="number">60000</span>)</span><br><span class="line">        -   系统用户：不能登录的，系统自己创建用来运行某些程序的用户（程序都必须以某个用户的身份来运行）(<span class="number">1</span> - <span class="number">999</span>)</span><br><span class="line"></span><br><span class="line">    -   配置文件属性</span><br><span class="line">        -   属性:<span class="string">`lzoxun:x:1001:1001:lzoxun:/home/lzoxun:/bin/bash`</span></span><br><span class="line">        -   解析:<span class="string">`用户名:密码占位符:UID(用户ID):GID(基本组ID):描述 :家目录 :默认shell`</span></span><br><span class="line">    -   用户密码(<span class="string">`/etc/shadow`</span>)影子文件</span><br><span class="line">        -   <span class="string">`passwd UserName`</span>:设置密码</span><br><span class="line">            -   <span class="string">`-d`</span>:清除密码</span><br><span class="line">            -   <span class="string">`-l`</span>:锁定用户（在 shadow 密码前添加两个!!）</span><br><span class="line">            -   <span class="string">`-u`</span>:解除锁定</span><br><span class="line">            -   <span class="string">`--stdin`</span>:改变标准输入的地方(减少交互)</span><br><span class="line">                -   <span class="string">`echo &#x27;123&#x27;|passwd --stdin UserName`</span></span><br><span class="line">        -   加密</span><br><span class="line">            -   密码是通过 sha 加密的</span><br><span class="line">            -   <span class="string">`echo &#x27;123&#x27;|md5sum`</span>:md5 加密</span><br><span class="line">            -   <span class="string">`echo &#x27;123&#x27;|sha1sum`</span>:sha 加密 ...</span><br><span class="line"></span><br><span class="line">-   组(<span class="string">`/etc/group`</span>)</span><br><span class="line">    -   基础信息</span><br><span class="line">        -   创建用户时自动创建一个与用户同名的基本组</span><br><span class="line">        -   <span class="title class_">Linux</span> 用户必须有一个组,默认归属的<span class="string">`基本组(一个)`</span>,</span><br><span class="line">        -   <span class="title class_">Linux</span> 用户后期可以动态加入其他组，叫做<span class="string">`附加组(多个)`</span>,</span><br><span class="line">        -   <span class="string">`groupadd GroupName`</span>:创建组</span><br><span class="line">            -   <span class="string">`-g xxx`</span>:指定组 id</span><br><span class="line">        -   <span class="string">`groupdel GroupName`</span>:删除组（不能是用户的基本组）</span><br><span class="line">        -   <span class="string">`gpasswd -a UserName GroupName`</span>:给用户添加附加组,从而<span class="string">`得到新组所拥有的权限`</span></span><br><span class="line">        -   <span class="string">`gpasswd -d UserName GroupName`</span>:从组里删除用户</span><br><span class="line">    -   配置文件属性</span><br><span class="line">        -   属性:<span class="string">`root:x:1001:lzoxun`</span></span><br><span class="line">        -   解析:<span class="string">`组名:密码占位符:GID(组ID):哪些用户以root组作为附属组`</span></span><br></pre></td></tr></table></figure><h3 id="文件的权限与归属"><a href="#文件的权限与归属" class="headerlink" title="文件的权限与归属"></a>文件的权限与归属</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">-   权限（以下限制对 root 无效）</span><br><span class="line"></span><br><span class="line">    -   文件</span><br><span class="line">        -   <span class="title function_">read</span>(r):文件读取</span><br><span class="line">        -   <span class="title function_">write</span>(w):文件写入</span><br><span class="line">        -   <span class="title function_">execute</span>(x):文件执行(脚本文件并且有执行的权限就能运行了)</span><br><span class="line">    -   目录</span><br><span class="line">        -   <span class="title function_">read</span>(r):显示子目录,文件列表</span><br><span class="line">        -   <span class="title function_">write</span>(w):目录中新建、删除、子文件或目录(目录写权限可以删除目录内的所有文件)</span><br><span class="line">        -   <span class="title function_">execute</span>(x):使用 cd 命令进入,或退出目录</span><br><span class="line">    -   基础操作</span><br><span class="line">        -   <span class="string">`chmod 777 path`</span>:设置权限</span><br><span class="line">            -   数字操作</span><br><span class="line">                -   <span class="title function_">r</span>(<span class="number">4</span>)、<span class="title function_">w</span>(<span class="number">2</span>)、<span class="title function_">x</span>(<span class="number">1</span>)</span><br><span class="line">            -   字母操作</span><br><span class="line">                -   <span class="string">`chmod [ugoa][+-=][rwx] path`</span></span><br><span class="line">                -   <span class="title function_">u</span>(所有者)、<span class="title function_">g</span>(所属组)、<span class="title function_">o</span>(其他用户)、<span class="title function_">a</span>(全部)</span><br><span class="line">                -   +(添加)、-(减少)、=(直接设置新的权限)</span><br><span class="line">                -   <span class="string">`chmod o=r-x path`</span>:指定其他用户只有读和执行权限</span><br><span class="line">                -   <span class="string">`chmod a+w path`</span>:所有用户添加可写权限<span class="string">`a可省略`</span></span><br><span class="line">            -   chmod -<span class="title class_">Rf</span> <span class="number">777</span> <span class="attr">path</span>:强制递归授权</span><br><span class="line"></span><br><span class="line">-   归属</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`chown`</span>:更改文件或目录的所有者、所属组</span><br><span class="line">        -   <span class="string">`chown root:admin FilePath`</span>:更改所有者与所属组</span><br><span class="line">        -   <span class="string">`chown root FilePath`</span>:更改所有者</span><br><span class="line">        -   <span class="string">`chown :admin FilePath`</span>:更改所属组</span><br><span class="line"></span><br><span class="line">-   高级权限</span><br><span class="line">    -   访问控制列表<span class="string">`facl`</span></span><br><span class="line">        -   前面的权限针对，所有者、所属组、其他人三类进行限制</span><br><span class="line">        -   优先级高于用户的基本权限</span><br><span class="line">        -   <span class="string">`facl`</span>可以针对某一个用户进行权限设置</span><br><span class="line">            -   <span class="string">`setfacl -m u:UserName:rwx FilePath`</span>:设置用户<span class="string">`UserName`</span>对<span class="string">`FilePath`</span>的 facl 控制权限为<span class="string">`rwx`</span></span><br><span class="line">            -   <span class="string">`setfacl -x u:UserName FilePath`</span>:取消用户<span class="string">`UserName`</span>对<span class="string">`FilePath`</span>的 facl 控制权限</span><br><span class="line">            -   <span class="string">`setfacl -b FilePath`</span>:取消所有人<span class="string">`FilePath`</span>的 facl 控制权限</span><br><span class="line">            -   <span class="string">`getfacl FilePath`</span>: 查看<span class="string">`FilePath`</span>facl 详细信息，以及相关用户</span><br><span class="line">                -   <span class="string">`mask 权限`</span>:某个文件所有用户 facl 权限最大值，文件设置 facl 后，原先组权限位置含义将替换成这个，组的权限在 facl 的 group 中有</span><br><span class="line">-   特殊权限</span><br><span class="line"></span><br><span class="line">    -   <span class="variable constant_">SET</span> 位权限（针对可执行文件或目录）</span><br><span class="line"></span><br><span class="line">        -   <span class="variable constant_">SUID</span>（对所有者设置 <span class="variable constant_">SET</span> 位权限）,权限值<span class="string">`0755`</span> <span class="number">0</span> 位置 +<span class="number">4</span></span><br><span class="line">            -   <span class="string">`-rws------`</span>:使执行该文件的<span class="string">`所有用户`</span>自动具有该文件<span class="string">`所有者`</span>的权限（所有者是 root,那么这些用户就有 root 权限）</span><br><span class="line">            -   如果给 cat 程序添加 <span class="variable constant_">SET</span> 权限，那么执行 cat 时所有用户都有管理员权限，都能参看任意文件了</span><br><span class="line">            -   <span class="string">` chmod u+s xxx`</span>:本来有执行权限加 <span class="variable constant_">SET</span> 位-&gt;显示小 s,否则显示大 S，<span class="string">`s只是占了位置不影响原来是否有x`</span></span><br><span class="line">        -   <span class="variable constant_">SGID</span>（对所属组内用户设置 <span class="variable constant_">SET</span> 位权限）,权限值<span class="string">`0755`</span> <span class="number">0</span> 位置 +<span class="number">2</span></span><br><span class="line">            -   给一个<span class="string">`目录设置了SGID`</span>,那么以后<span class="string">`这个目录`</span>下<span class="string">`创建`</span>了<span class="string">`文件`</span>或<span class="string">`目录`</span>，他们的<span class="string">`所属组`</span>都是<span class="string">`SGID目录的所属组`</span>，不是<span class="string">`所有者`</span>的基本组</span><br><span class="line">            -   作用是<span class="string">`目录设置了SGID`</span>所属组的用户，创建的文件可以互相更改，适合协同办公</span><br><span class="line">            -   <span class="string">` chmod g+s xxx`</span></span><br><span class="line"></span><br><span class="line">    -   粘滞位权限(<span class="title class_">Sticky</span> <span class="title class_">Bit</span>) <span class="variable constant_">SBIT</span> ,权限值<span class="string">`0755`</span> <span class="number">0</span> 位置 +<span class="number">1</span></span><br><span class="line">        -   把对一个东西权限范围限制在直接的身上</span><br><span class="line">        -   如对一个目录有写的权限，本来是可以删除目录下所有文件的，限制成只能删除你自己的文件</span><br><span class="line">        -   <span class="string">` chmod o+t xxx`</span></span><br><span class="line">        -   <span class="number">777</span> 权限的文件夹比较需要</span><br><span class="line"></span><br><span class="line">-   其他</span><br><span class="line">    -   umask（掩码）</span><br><span class="line">        -   直接只有命令输入当前用户的 umask 值</span><br><span class="line">        -   普通目录权限<span class="string">`最大值777`</span>，普通文件不能执行的<span class="string">`最大权限666`</span></span><br><span class="line">        -   如果当前用户<span class="string">`umask`</span>为<span class="string">`022`</span>,那么创建文件夹默认权限是<span class="string">`777去掉022=755`</span>，文件默认<span class="string">`666去掉022=644`</span></span><br><span class="line">        -   <span class="string">`umask xxx`</span>:临时修改 umask 值，就是修改默认文件的权限, (永久修改需要在启动文件执行该命令)</span><br></pre></td></tr></table></figure><h3 id="其他特殊权限-（暂时跳过-课程-1-66-75-）"><a href="#其他特殊权限-（暂时跳过-课程-1-66-75-）" class="headerlink" title="其他特殊权限 （暂时跳过 课程 1 66~75 ）"></a>其他特殊权限 （暂时跳过 课程 1 66~75 ）</h3><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><blockquote><p>ls -l 查看文件详情</p></blockquote><h3 id="文件详情"><a href="#文件详情" class="headerlink" title="文件详情"></a>文件详情</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`第一组 权限`</span>：[类型][rwx rwx rwx]</span><br><span class="line">    -   第一位代表类型</span><br><span class="line">        -   <span class="string">`-`</span>：普通文件</span><br><span class="line">        -   <span class="string">`d`</span>：文件夹</span><br><span class="line">        -   <span class="string">`l`</span>：软链接，快捷方式</span><br><span class="line">        -   <span class="string">`c`</span>：字符设备</span><br><span class="line">        -   <span class="string">`b`</span>：块设备</span><br><span class="line">    -   第一组[rwx]读写执行</span><br><span class="line">        -   <span class="string">`所有者`</span>对文件的操作权限</span><br><span class="line">    -   第二组[rwx]读写执行</span><br><span class="line">        -   <span class="string">`所属组`</span>对文件的操作权限（文件未设置 facl 权限的话，否则代表 mask 的值）</span><br><span class="line">        -   其他用户的附加组是该文件的所属组，那么那个用户的权限就是第二个[rwx]</span><br><span class="line">        -   或这个所属组的所有成员(<span class="string">`/etc/group`</span>中最后那个位置)，权限都是第二个[rwx]</span><br><span class="line">    -   第三组[rwx]读写执行</span><br><span class="line">        -   <span class="string">`其他用户`</span>对文件的操作权限</span><br><span class="line">        -   其他用户指的是所有者与所属组成员<span class="string">`之外`</span>的用户</span><br><span class="line">    -   <span class="string">`.`</span> (默认是. 当用 facl 对该文件进行设置时会变成 <span class="string">`+`</span>)、</span><br><span class="line">-   <span class="string">`第二组`</span>：被硬链接的次数</span><br><span class="line">-   <span class="string">`第三组`</span>：文件所有者(创建文件的用户)</span><br><span class="line">-   <span class="string">`第四组`</span>：文件所属组(创建文件用户的基本组)</span><br><span class="line">-   <span class="string">`第五组`</span>：文件大小</span><br><span class="line">-   <span class="string">`第六组`</span>：创建或最后一次修改时间</span><br><span class="line">-   <span class="string">`第七组`</span>：文件名（.当前目录、.. 上级目录）</span><br></pre></td></tr></table></figure><h3 id="目录信息"><a href="#目录信息" class="headerlink" title="目录信息"></a>目录信息</h3><blockquote><p>一切皆文件 、绝对路径、相对路径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`/`</span>：跟目录(所以文件的起点)</span><br><span class="line">-   <span class="string">`/boot`</span>：存系统启动相关文件，<span class="title class_">Kernel</span> 内核的位置，通常独立划分区</span><br><span class="line">-   <span class="string">`/etc`</span>：存各种配置文件，类似 <span class="variable language_">window</span> 注册表</span><br><span class="line">-   <span class="string">`/dev`</span>：存硬盘、光驱、鼠标等硬件设备</span><br><span class="line">-   <span class="string">`/bin`</span>：存最常用的基本命令，<span class="string">`任何用户`</span>都有权限访问</span><br><span class="line">-   <span class="string">`/sbin`</span>：存最基本管理命令，<span class="string">`管理员`</span>才有权限访问</span><br><span class="line">-   <span class="string">`/usr`</span>：默认软件安装路径</span><br><span class="line">-   <span class="string">`/home`</span>：普通用户家目录</span><br><span class="line">-   <span class="string">`/root`</span>：root 户家目录</span><br><span class="line">-   <span class="string">`/mnt`</span>：<span class="string">`临时`</span>挂载存储设备</span><br><span class="line">-   <span class="string">`/media`</span>：系统自动挂载可移动存储设备</span><br><span class="line">-   <span class="string">`/var`</span>：存放<span class="string">`经常变化`</span>的文件</span><br><span class="line">-   <span class="string">`/proc`</span>：存放进程文件,伪文件系统（存的是内存里的数据）</span><br><span class="line">-   <span class="string">`/run`</span>：存放临时文件，重启消失</span><br><span class="line">-   <span class="string">`/lib、/lib64`</span> ： 链接库</span><br><span class="line"></span><br><span class="line">-   <span class="string">`srv`</span></span><br><span class="line">-   <span class="string">`tmp`</span></span><br><span class="line">-   <span class="string">`sys`</span></span><br><span class="line">-   <span class="string">`/opt`</span>:第三方应用程序</span><br></pre></td></tr></table></figure><h2 id="vi-与-vim"><a href="#vi-与-vim" class="headerlink" title="vi 与 vim"></a>vi 与 vim</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">-   vi 老版本编辑器，功能不齐全</span><br><span class="line">-   vim</span><br><span class="line">    -   工作模式</span><br><span class="line">        -   <span class="string">`命令模式`</span>（移动光标、字符串查找、删除、复制、粘贴等操作）</span><br><span class="line">            -   默认命令模式</span><br><span class="line">        -   <span class="string">`插入模式`</span>（修改文件内容）</span><br><span class="line">            -   命令模式下 <span class="title function_">a</span>(after)、i、<span class="title function_">o</span>(添加行插入) 进入</span><br><span class="line">            -   <span class="string">`Esc`</span> 退出到命令模式</span><br><span class="line">        -   <span class="string">`行末模式`</span>（保存、退出、文件内容查找与替换）</span><br><span class="line">            -   命令模式下按 “:” 进入</span><br><span class="line">            -   <span class="string">`Esc`</span> 退出到命令模式</span><br><span class="line">        -   <span class="string">`可视模式`</span>（可进行选择）</span><br><span class="line">            -   <span class="string">`v`</span>:按字符选</span><br><span class="line">            -   <span class="string">`V`</span>:按行选</span><br><span class="line">    -   命令模式常用操作</span><br><span class="line">        -   移动光标</span><br><span class="line">            -   <span class="string">`G`</span>:移到最后</span><br><span class="line">            -   <span class="string">`gg`</span>:移到第一行</span><br><span class="line">            -   <span class="string">`行号 G | 行号 gg`</span>:跳到指定行</span><br><span class="line">            -   <span class="string">`Home | ^ | 0 `</span>:回到行首</span><br><span class="line">            -   <span class="string">`End | $`</span>:回到行尾</span><br><span class="line">            -   <span class="string">`n 上下左右`</span>:向指定方向移动 n 位</span><br><span class="line">        -   上下翻页</span><br><span class="line">            -   <span class="string">`Ctrl+B | Page Up`</span></span><br><span class="line">            -   <span class="string">`Ctrl+F | Page Down`</span></span><br><span class="line">        -   复制、粘贴、删除</span><br><span class="line">            -   <span class="string">`x|Del`</span>:删除单个字符</span><br><span class="line">            -   <span class="string">`d`</span>:删除</span><br><span class="line">                -   <span class="string">`dd`</span>:&lt;字符功能&gt;一整行</span><br><span class="line">                -   <span class="string">`#dd`</span>:&lt;字符功能&gt;从光标从光标出开始的#行字符</span><br><span class="line">                -   <span class="string">`d^`</span>:&lt;字符功能&gt;从光标之前到行首的字符</span><br><span class="line">                -   <span class="string">`d$`</span>:&lt;字符功能&gt;从光标之处到行尾的字符</span><br><span class="line">            -   <span class="string">`y`</span>:复制</span><br><span class="line">            -   <span class="string">`p`</span>:粘贴</span><br><span class="line">        -   查找</span><br><span class="line">            -   <span class="string">`/查找的内容`</span>：回车查找，按 <span class="string">`n下N上`</span> 查找其他</span><br><span class="line">            -   <span class="string">`?查找的内容`</span>：从下往上查找</span><br><span class="line">        -   撤销</span><br><span class="line">            -   <span class="string">`u`</span>:撤销</span><br><span class="line">    -   末行模式常用操作</span><br><span class="line">        -   <span class="string">`:wq | :x `</span>:保存并退出</span><br><span class="line">        -   <span class="string">`:q`</span>:未修改退出</span><br><span class="line">        -   <span class="string">`:q!`</span>:放弃修改并强制退出</span><br><span class="line">        -   <span class="string">`:w path`</span>:另存为</span><br><span class="line">        -   替换</span><br><span class="line">            -   <span class="string">`:[范围] s/替换的内容/新内容[/g][/c]`</span>:[]可有可无</span><br><span class="line">            -   <span class="string">`:% s/word/newword/gc`</span></span><br><span class="line">            -   <span class="string">`:1,10 s/word/newword/gc`</span></span><br><span class="line">    -   常用设置</span><br><span class="line">        -   <span class="string">`:set nu |:set nu`</span> 设置行号</span><br></pre></td></tr></table></figure><h2 id="磁盘管理与文件管理系统"><a href="#磁盘管理与文件管理系统" class="headerlink" title="磁盘管理与文件管理系统"></a>磁盘管理与文件管理系统</h2><h3 id="磁盘分区与格式化"><a href="#磁盘分区与格式化" class="headerlink" title="磁盘分区与格式化"></a>磁盘分区与格式化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">-   存储设备</span><br><span class="line">    -   硬盘接口 <span class="title function_">IDE</span>(I)、<span class="title function_">SCSI</span>(S)(服务器常用)、<span class="title function_">SATA</span>(A)、<span class="title class_">NVMe</span>(V)等</span><br><span class="line">    -   分区：早期硬盘只能有四个主分区，后面越来越多，四个不够，就可以拿一个变成扩展分区,扩展分区里可以创建很多的逻辑分区（如果需要的分区不超过四个就没必要使用逻辑分区）</span><br><span class="line">    -   <span class="title class_">Linux</span> 中每个磁盘，以及磁盘中的每个分区都是用<span class="string">`文件表示`</span>的</span><br><span class="line">    -   <span class="variable constant_">USB</span> 接口移动设备读书 sd 开头，光驱光盘默认都是/dev/cdrom</span><br><span class="line">    -   硬盘:第一块硬盘 sda、第二块 sdb、第三块 sdc....</span><br><span class="line">        -   普通分区 sda1、sda2、sda3、sda4 或 sdb1、sdb2..</span><br><span class="line">        -   逻辑分区 从 <span class="number">5</span> 开始，sda5</span><br><span class="line">        -   <span class="string">`fdisk`</span>:分区指令</span><br><span class="line">            -   <span class="string">`fdisk -l /dev/sda`</span>:查看 sda 硬盘详细信息</span><br><span class="line">            -   <span class="string">`fdisk /dev/sdb`</span>:分区硬盘 <span class="number">2</span></span><br><span class="line">                -   主分区</span><br><span class="line">                    -   p 主分区，e 扩展分区</span><br><span class="line">                    -   选择分区号</span><br><span class="line">                    -   起始扇区（可以默认）</span><br><span class="line">                    -   结束扇区（可以 +10G）</span><br><span class="line">                    -   输入 p 查看，n 继续创建新分区</span><br><span class="line">                -   扩展分区</span><br><span class="line">                    -   p 主分区，e 扩展分区</span><br><span class="line">                    -   选择分区号</span><br><span class="line">                    -   起始扇区（可以默认）</span><br><span class="line">                    -   结束扇区(不填直接到结尾)</span><br><span class="line">                -   如果有了扩展分区，那么继续按 n 时，就没有 e 了，只能选择 p 和 <span class="title function_">l</span>(逻辑分区)</span><br><span class="line">                -   <span class="string">`w`</span>：保存退出，<span class="string">`q`</span>:不保存，<span class="string">`Ctrl+退格可以撤销`</span></span><br><span class="line">                -   <span class="string">`cat /proc/partitions`</span> :查看是否生效</span><br><span class="line">                -   执行指令按 d 删除分区</span><br><span class="line">            -   swap 交换分区，虚拟内存(内存不够是从硬盘临时拿出一点单做内存用)</span><br><span class="line">        -   格式化</span><br><span class="line">            -   低级格式化：划分磁道与扇区（物理操作，对硬盘硬件影响大）</span><br><span class="line">            -   高级格式化</span><br><span class="line">                -   文件系统 <span class="string">`/etc/filesystems`</span></span><br><span class="line">                    -   win：主要有 <span class="string">`NTFS`</span> 、<span class="string">`FAT32`</span>(单文件大小不能超过 4G)等</span><br><span class="line">                    -   <span class="title class_">Linux</span>:</span><br><span class="line">                        -   ext 系列</span><br><span class="line">                        -   xfs 系列</span><br><span class="line">                -   格式化操作，创建文件系统</span><br><span class="line">                    -   <span class="string">`mkfs -t xfs /dev/sdb5`</span>:以 xfs 文件系统格式化第二块硬盘第五分区</span><br><span class="line">        -   挂载</span><br><span class="line">            -   挂载就是<span class="string">`指定一个目录`</span>作为挂载点(分区入口)，用户通过操作这个目录数据对硬盘分区进行<span class="string">`数据存取操作`</span></span><br><span class="line">            -   根目录默认，被单做挂载点的目录会被从这边分离出去</span><br><span class="line">            -   不论指定那个目录作为挂载点，成功后都会与从原来的地方分离开，成为空目录，卸载后复原</span><br><span class="line">            -   <span class="string">`mount [-t 文件系统类型] 设备文件名 挂载点目录`</span></span><br><span class="line">                -   <span class="string">`mount -a`</span>:安装 <span class="string">`/etc/fstab`</span> 配置项目自动挂载</span><br><span class="line">            -   <span class="attr">autofs</span>:如果挂载很多，有不经常用,光盘、U盘、<span class="variable constant_">NFS</span>等 可以通过 autofs服务 动态挂载</span><br><span class="line">                -   autofs 守护进程他会在后台自动检测用户要访问却还未挂载的文件系统,自动检测该文件系统是否存在，如果存在则自动挂载，一段时间没有使用会自动卸载</span><br><span class="line">                -   缺点：不适合高并发场景</span><br><span class="line">                -   <span class="string">`/etc/auto.master`</span> 里 <span class="string">`/misc /etc/auto.misc`</span> 下 添加自动挂载配置文件 <span class="string">`/- /etc/auto.home`</span></span><br><span class="line">                -   <span class="string">`/etc/auto.home`</span> =&gt; 本地文件夹位置/share -rw,soft,intr 远程<span class="attr">IP</span>:<span class="regexp">/xxxx/</span>xx (或移动硬盘类型 /dev/sdb1)</span><br><span class="line">                -   检测本地关注情况，systemctl start autofs 启动服务，访问/share 此时已经自动挂载好了</span><br><span class="line">            -   <span class="string">`df`</span>:查看所以以及挂载设备</span><br><span class="line">                -   <span class="string">`-h`</span></span><br><span class="line">                -   <span class="string">`-T`</span>: 查看文件系统格式</span><br><span class="line">            -   <span class="string">`umount 挂载点`</span>:卸载</span><br><span class="line">                -   前提 设备不能处于 busy 状态</span><br><span class="line">            -   <span class="title class_">Linux</span> 至少<span class="string">`/`</span>、<span class="string">`/boot(启动引导)`</span>，swap 交换分区三个分区</span><br><span class="line">        -   新硬盘经过分区、格式化、挂载之后就可以正常使用了</span><br><span class="line">    -   光盘</span><br><span class="line">        -   <span class="string">`mount /dev/cdroom /xxxx`</span></span><br><span class="line">    -   U 盘插入之后会多个 sdxx,虚拟机的话要先断开与主机的链接</span><br><span class="line">        -   右键 -&gt; 可移动设备 -&gt; 找到 <span class="variable constant_">USB</span> - &gt;断开与主机的链接</span><br><span class="line">    -   iso 镜像文件</span><br><span class="line"></span><br><span class="line">        -   <span class="string">`mount -o loop isoPosition /xxx`</span></span><br><span class="line"></span><br><span class="line">    -   配置文件自动挂载<span class="string">`/etc/fstab`</span></span><br><span class="line">        -   得到设备 <span class="attr">UUID</span>:<span class="string">`blkid /dev/sdb1`</span></span><br><span class="line">        -   属性</span><br><span class="line">            -   <span class="variable constant_">UUID</span>=7051740a-<span class="number">3450</span>-4f9f-<span class="number">9879</span>-aa3ba007d06b, /boot, xfs, defaults , <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            -   <span class="variable constant_">UUID</span> 或分区名 挂载点 文件系统类型 挂载选项(入 iso 的-o ，一般 <span class="keyword">default</span>) 是否备份(<span class="number">0</span> 不要) 是否开机检测硬盘(<span class="number">0</span> 不要，<span class="number">1</span> 先检查，<span class="number">2</span> 后检测)</span><br><span class="line"></span><br><span class="line">-   手动安装发行版分区</span><br><span class="line">    -   300M 左右- 挂载 boot 和 esp - fat32 ：引导分区</span><br><span class="line">    -   10G+ - 挂载 opt - ext4 ：第三方程序</span><br><span class="line">    -   20G+ - 挂载 / - ext4</span><br><span class="line">    -   8G - 无挂载 - <span class="attr">linuxswap</span>:虚拟内存交互分区</span><br><span class="line">    -   其他 - 挂载 /home - ext4</span><br></pre></td></tr></table></figure><h3 id="quota-磁盘配额"><a href="#quota-磁盘配额" class="headerlink" title="quota 磁盘配额"></a>quota 磁盘配额</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-   对磁盘容量或文件数量进行限制</span><br><span class="line">-   磁盘配额需要手动启用,只在指定的分区中有效</span><br><span class="line">-   主要针对系统中指定的<span class="string">`用户`</span>，<span class="string">`组`</span>进行限制，没指定的不受影响</span><br><span class="line">    -   如果是组，那么组内<span class="string">`基本组`</span>成员使用的<span class="string">`容量`</span>或<span class="string">`文件数量`</span>,<span class="string">`之和`</span>不能超过限制</span><br><span class="line">    -   <span class="string">` user`</span> 的附加组为<span class="string">` wheel`</span>,给 <span class="string">`wheel`</span> 设置权限配额,<span class="string">`与 suser 无关`</span></span><br><span class="line">-   限制方法</span><br><span class="line">    -   软限制：可以短时间超过,但指定时间得处理掉</span><br><span class="line">    -   硬限制：绝对不能超过限制</span><br><span class="line">-   设置配置文件 <span class="string">`/etc/fstab`</span></span><br><span class="line"></span><br><span class="line">    -   <span class="string">`quota -u UserName`</span>:<span class="string">`查看用户`</span>在哪个分区存在配额限制</span><br><span class="line">    -   <span class="string">`quota -g GroupName`</span>:查看<span class="string">`指定组`</span>在哪个分区存在配额限制</span><br><span class="line">    -   <span class="string">`repquota 分区挂载点目录`</span>:<span class="string">`查看该分区`</span>限制的用户详细</span><br><span class="line"></span><br><span class="line">    -   通过挂载选项启用配额:<span class="string">`defaults,acl,uquota,gquota`</span></span><br><span class="line">        -   <span class="string">`acl`</span>: 使新分区支持 facl 权限列表</span><br><span class="line">        -   <span class="string">`gquota`</span>: 对组设置权限配额</span><br><span class="line">        -   <span class="string">`uquota`</span>: 对用户设置权限配额</span><br><span class="line">    -   <span class="string">`edquota -u UserName`</span>: 如果挂载选择存在 uquota</span><br><span class="line"></span><br><span class="line">        -   编辑选项:</span><br><span class="line"></span><br><span class="line">            -   <span class="string">`Filesystem`</span>:分区</span><br><span class="line"></span><br><span class="line">            -   <span class="string">`blocks`</span>:对磁盘空间进行限制(值是已用空间)</span><br><span class="line">            -   <span class="string">`soft`</span>:软限制(单位 k)</span><br><span class="line">            -   <span class="string">`hard`</span>:硬限制(手动输入限制大小,单位 k)</span><br><span class="line"></span><br><span class="line">            -   <span class="string">`inodes`</span>:文件个数进行限制(值是已消耗个数)</span><br><span class="line">            -   <span class="string">`soft`</span>:软限制(个)</span><br><span class="line">            -   <span class="string">`hard`</span>:硬限制(手动输入限制个数,单位个)</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`edquota -g GroupName`</span>: 如果挂载选择存在 gquota</span><br></pre></td></tr></table></figure><h3 id="RAID-磁盘阵列（暂时跳过-课程-1-92-104-）"><a href="#RAID-磁盘阵列（暂时跳过-课程-1-92-104-）" class="headerlink" title="RAID 磁盘阵列（暂时跳过 课程 1 92~104 ）"></a>RAID 磁盘阵列（暂时跳过 课程 1 92~104 ）</h3><blockquote><p>RAID 将多块<code>独立的硬盘</code>按照<code>不同方式</code>组合起来形成一个<code>硬盘组</code>，从而提供比单个硬盘<code>更高的储存性能</code>和<code>提供数据备份</code>的技术</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-   组合方式一 | <span class="string">`READ0`</span></span><br><span class="line">    -   优点:将<span class="string">`数据`</span>保持到<span class="string">`多块`</span>硬盘，多块硬盘<span class="string">`同时`</span>进行工作，从而<span class="string">`提升效率`</span></span><br><span class="line">    -   缺点:一块硬盘坏了，数据就没用了</span><br><span class="line">-   组合方式二 | <span class="string">`READ1`</span></span><br><span class="line">    -   优点:将写入一个硬盘的数据原样复制到其他硬盘，不提升效率，但是提升物理安全性</span><br><span class="line">    -   缺点:不提升效率</span><br><span class="line">-   组合方式三 | <span class="string">`READ1 + 0`</span></span><br><span class="line">    -   至少需要四块硬盘，合并前面两种</span><br><span class="line">-   组合方式四 | <span class="string">`READ5`</span></span><br></pre></td></tr></table></figure><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-   知识点</span><br><span class="line">    -   <span class="attr">block</span>:<span class="title class_">Linux</span> 基本存储单位，大小是 <span class="number">8</span> 个扇区(512B)组合而成,大小 4k</span><br><span class="line">-   <span class="string">`du`</span>:查看文件占用磁盘空间（ll 查看的是文件的大小）</span><br><span class="line">    -   <span class="string">`-h`</span>:人性化显示</span><br><span class="line">    -   <span class="string">`-s`</span>:汇总，查看目录占用磁盘空间</span><br><span class="line">-   <span class="string">`tar`</span>:文件的打包 tar 可以调用 gzip、bzip2、xz 等方式进行压缩或解压</span><br><span class="line"></span><br><span class="line">    -   参数: tar [选项] 打包或压缩后的文件名 需要打包的源文件或目录</span><br><span class="line">    -   <span class="string">`tar -zcvf newName.tar /etc`</span>:参数 f 必须放最后 f 与新文件名有关</span><br><span class="line"></span><br><span class="line">        -   <span class="string">`-c`</span>:穿件 tar 格式包文件，并不会对包文件进行压缩</span><br><span class="line">        -   <span class="string">`-v`</span>:查看列出打包详情</span><br><span class="line">        -   <span class="string">`-f`</span>:新文件名</span><br><span class="line"></span><br><span class="line">        -   <span class="string">`-z`</span>:选定压缩方式为<span class="string">`gzip`</span>,<span class="string">`.tar.gz`</span>，结果:大、快</span><br><span class="line">        -   <span class="string">`-j`</span>:选定压缩方式为<span class="string">`bzip2`</span>,<span class="string">`.tar.bz2`</span>，结果:中、中</span><br><span class="line">        -   <span class="string">`-J`</span>:选定压缩方式为<span class="string">`xz`</span>,<span class="string">`.tar.xz`</span>,结果:小、慢</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`tar -xf newName.tar -C 解到目录`</span>:解包</span><br><span class="line">        -   <span class="string">`-x`</span>:解包</span><br><span class="line">    -   <span class="string">`tar -zxf newName.tar.gz -C 解到目录`</span>:解压缩解包（解压-z|j|J 可以省略）</span><br><span class="line">        -   <span class="string">`-z`</span>:解 gzip 压缩</span><br><span class="line">        -   <span class="string">`-j`</span>:解 bzip2 压缩</span><br><span class="line">        -   <span class="string">`-J`</span>:解 xz 压缩</span><br><span class="line">    -   <span class="string">`tar -tf newName.tar.gz`</span>:不解压的情况查看包的内容</span><br><span class="line">-   zip操作</span><br><span class="line">    -   <span class="string">`zip`</span>：压缩</span><br><span class="line">        -   <span class="string">`zip -q -r html.zip /home/html`</span>:将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.<span class="property">zip</span></span><br><span class="line">        -   <span class="string">`zip -q -r html.zip *`</span>: <span class="regexp">/home/</span>html 目录下直接执行压缩</span><br><span class="line">        -   <span class="string">`zip -dv html.zip index.html`</span>:从压缩包html.<span class="property">zip</span>中删除index.<span class="property">html</span>这个文件</span><br><span class="line">        -   参数</span><br><span class="line">            -   <span class="string">`-r`</span>：递归处理</span><br><span class="line">            -   <span class="string">`-q`</span>:不显示执行过程</span><br><span class="line">            -   <span class="string">`-d`</span>:从压缩文件内删除指定文件</span><br><span class="line">            -   <span class="string">`-v`</span>:显示指令执行过程或显示版本信息</span><br><span class="line">    -   <span class="string">`unzip`</span>：解压</span><br><span class="line">        -   <span class="string">`unzip apc.zip`</span>:解压文件到当前目录</span><br><span class="line">        -   <span class="string">`unzip -n apc.zip -d /home/xxx`</span>:-d 解压文件到当指定目录，-n 不覆盖原有文件,-o 覆盖</span><br><span class="line">        -   <span class="string">`unzip -v abc.zip`</span>:查看zip信息，不解压</span><br><span class="line">        -   <span class="string">`unzip -l abc.zip`</span>:查看zip简洁信息，不解压</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><blockquote><p>用户获得源代码之后,需要自行编译代码并解决许多软件依赖关系，比较困难，<code>适合所有发行版</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-   必须存在编译软件 如:gcc</span><br><span class="line">    -   <span class="string">`wget`</span>:将程序源码下载到本地</span><br><span class="line">-   步骤</span><br><span class="line">    -   解包：<span class="string">`tar`</span></span><br><span class="line">        -   得到源码并解压,得到源码文件，并进入</span><br><span class="line">    -   配置：<span class="string">`./configure`</span></span><br><span class="line">        -   <span class="string">`./configure --prefix=/usr/local/xxxxx`</span>:配置程序安装目录</span><br><span class="line">        -   配置结果保存在源码目录的<span class="string">`makefile`</span>文件里</span><br><span class="line">    -   编译:<span class="string">`make`</span></span><br><span class="line">        -   将源码转二进制数</span><br><span class="line">    -   安装与部署：<span class="string">`make install`</span></span><br><span class="line">-   使用</span><br><span class="line">    -   进入<span class="string">`/usr/local/xxxxx/bin</span></span><br><span class="line"><span class="string">    -   执行 ./xxxxx.probe 主程序</span></span><br></pre></td></tr></table></figure><h3 id="rpm-RedHat-Packet-Manager"><a href="#rpm-RedHat-Packet-Manager" class="headerlink" title="rpm(RedHat Packet Manager)"></a>rpm(RedHat Packet Manager)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-   红帽公司将源码<span class="string">`编译好了`</span>,可以直接使用的<span class="string">`.rpm`</span>软件包</span><br><span class="line">-   只能在红帽派系发行版本中使用</span><br><span class="line">-   rpm 软件包直接存在着复杂的依赖关系</span><br><span class="line">-   结构</span><br><span class="line">    -   <span class="string">`软件名称`</span>-<span class="string">`版本号`</span>-<span class="string">`发布号`</span>.<span class="string">`硬件平台`</span>.<span class="property">rpm</span></span><br><span class="line">    -   <span class="string">`yum info xxx`</span>可以查看 rpm 包详细信息</span><br><span class="line">-   <span class="string">`rpm -q 服务`</span>:查询服务是否安装</span><br><span class="line">    -   <span class="string">`rpm -qa | grep ssh`</span>:查询已安装与 ssh 有关的软件包信息</span><br><span class="line">    -   <span class="string">`-qi`</span>:已安装软件包的详细信息</span><br><span class="line">    -   <span class="string">`-ql`</span>:查看服务各个文件的安装目录（安装之后系统的相关文件）</span><br><span class="line">        <span class="string">`-qc`</span>:查看<span class="string">`服务配置文件`</span>位置</span><br><span class="line">        <span class="string">`-qf file`</span>:查看<span class="string">`文件属于哪个服务安装`</span>的</span><br></pre></td></tr></table></figure><h3 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">-   自动解决 rpm 的依赖问题(自动安装需要的依赖，不需要手动安装)</span><br><span class="line">-   配置 yum 源或 yum 仓库(yum repo)</span><br><span class="line">    -   仓库中存放大量 rpm 软件包，以及软件包相关的元数据文件（repodata 目录下）</span><br><span class="line">    -   <span class="string">`yum源`</span>配置定义文件以 <span class="string">`.repo`</span>为后缀，存放在<span class="string">`/etc/yum.repos.d/`</span>目录下</span><br><span class="line">    -   <span class="string">`yum源`</span>获取获取方式</span><br><span class="line">        -   <span class="number">1</span>、来自网上服务器</span><br><span class="line">        -   <span class="number">2</span>、本地系统光盘安装(.<span class="property">ios</span> 系统镜像 )</span><br><span class="line">    -   安装阿里云 yum 源：</span><br><span class="line">        -   备份或删除 /etc/yum.<span class="property">repos</span>.<span class="property">d</span>/下的 yum 源文件</span><br><span class="line">        -   wget -O /etc/yum.<span class="property">repos</span>.<span class="property">d</span>/<span class="title class_">CentOS</span>-<span class="title class_">Base</span>.<span class="property">repo</span> <span class="attr">http</span>:<span class="comment">//mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line">        -   wget <span class="attr">http</span>:<span class="comment">//mirrors.aliyun.com/repo/epel-7.repo --directory-prefix=/etc/yum.repos.d</span></span><br><span class="line">        -   yum clean all &amp;&amp; yum makecache</span><br><span class="line">        -   <span class="string">`yum makecache`</span> 更新 yum 源</span><br><span class="line">        -   <span class="string">`yum repolist`</span> 查看 yum 源</span><br><span class="line">-   yum 源文件详解</span><br><span class="line">    -   <span class="string">`[xxxxx]`</span>:yum 源的名称，自定义且唯一</span><br><span class="line">    -   <span class="string">`name=xxxx xx`</span>:自定义 yum 源的描述这个 yum 源的信息</span><br><span class="line">    -   <span class="string">`baseurl`</span>:指定 yum 源的访问路径</span><br><span class="line">        -   <span class="string">`baseurl=http://xxx`</span>:指向外部网站</span><br><span class="line">        -   <span class="string">`baseurl=ftp://xxx`</span>:指向 <span class="variable constant_">FTP</span> 服务器</span><br><span class="line">        -   <span class="string">`baseurl=file://xxx`</span>:指向本地的某个目录</span><br><span class="line">    -   <span class="string">`enabled`</span>:<span class="number">1</span> 启用，<span class="number">0</span> 禁用，没有的话默认为 <span class="number">1</span></span><br><span class="line">    -   <span class="string">`gpgcheck`</span>:检测 rpm 包来源的合法性</span><br><span class="line">        -   <span class="number">0</span> 不检查</span><br><span class="line">        -   <span class="number">1</span> 检查，并且要加 gpgkey=<span class="attr">file</span>:<span class="comment">///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7 指定公钥位置</span></span><br><span class="line">        -   数字签名</span><br><span class="line">        -   centos7 的公钥位置：<span class="string">`/etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7`</span></span><br><span class="line">-   yum 指令</span><br><span class="line">    -   <span class="string">`yum list`</span>:查看系统已安装的软件包(@开头)与可安装的软件包(无@)</span><br><span class="line">    -   <span class="string">`yum repolist`</span>:yum 源列表</span><br><span class="line">    -   <span class="string">`yum info 服务`</span>:查看 info 信息</span><br><span class="line">    -   <span class="string">`yum install 服务`</span>:安装服务</span><br><span class="line">        -   <span class="string">`yum install 服务 -y`</span>:不用询问</span><br><span class="line">    -   <span class="string">`yum remove 服务`</span>:删除软件包</span><br><span class="line">    -   <span class="string">`yum clean all`</span>:清除</span><br><span class="line">        -   重新构建缓存：yum makecache 然后再执行yum update</span><br><span class="line">    -   <span class="string">`yum search ifconfig`</span>:查看 ifconfig 属于哪个软件包</span><br><span class="line">-   常用服务</span><br><span class="line">    -   <span class="string">`lrzsz`</span>:远程文件上传下载</span><br><span class="line">        -   <span class="string">`rz`</span>:从客户端上传文件到 linux</span><br><span class="line">        -   <span class="string">`sz filename`</span>:从 linux 下载文件到客户端</span><br><span class="line">    -   安装rpm</span><br><span class="line">        -   wget <span class="attr">https</span>:<span class="comment">//dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</span></span><br><span class="line">        -   sudo yum install ./google-chrome-stable_current_*.<span class="property">rpm</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载新的repo文件</span></span><br><span class="line">wget https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo -O /etc/yum.repos.d/Centos-vault-8.5.2111.repo</span><br><span class="line">wget https://mirrors.aliyun.com/repo/epel-archive-8.repo -O /etc/yum.repos.d/epel-archive-8.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换源地址</span></span><br><span class="line">sed -i &#x27;s/mirrors.cloud.aliyuncs.com/mirrors.aliyun.com/g&#x27;  /etc/yum.repos.d/Centos-vault-8.5.2111.repo</span><br><span class="line">sed -i &#x27;s/mirrors.cloud.aliyuncs.com/mirrors.aliyun.com/g&#x27;  /etc/yum.repos.d/epel-archive-8.repo</span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h3 id="DNF-新的-yum"><a href="#DNF-新的-yum" class="headerlink" title="DNF (新的 yum)"></a>DNF (新的 yum)</h3><blockquote><p>新一代的 RPM 软件包管理器</p></blockquote><p><a href="https://wangchujiang.com/linux-command/c/dnf.html">文档</a><br><a href="http://mirrors.aliyun.com/repo/">http://mirrors.aliyun.com/repo/</a> 阿里云源下载列表</p><p>centos8 添加 epel 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试状态</span></span><br><span class="line">dnf repolist epel</span><br><span class="line">dnf repolist epel -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立元数据缓存</span></span><br><span class="line">dnf makecache</span><br></pre></td></tr></table></figure><p>指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnf search mysql-server <span class="comment">// 查询包</span></span><br><span class="line">dnf info mysql-server <span class="comment">// 查看它提供包的版本信息</span></span><br></pre></td></tr></table></figure><h2 id="进程与服务管理"><a href="#进程与服务管理" class="headerlink" title="进程与服务管理"></a>进程与服务管理</h2><h3 id="进程（PID）"><a href="#进程（PID）" class="headerlink" title="进程（PID）"></a>进程（PID）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">-   概念</span><br><span class="line">    -   程序与进程的差别</span><br><span class="line">        -   程序:静态的，放在磁盘上的可执行文件</span><br><span class="line">        -   进程:动态的,运行中的程序实例</span><br><span class="line">        -   程序是一些指令的<span class="string">`有序集合`</span>，进程是<span class="string">`程序执行的过程`</span>，进程的<span class="string">`状态是变化`</span>的包括创建、调度、和消亡</span><br><span class="line">        -   程序只要运行，就成了是<span class="string">`进程`</span>,<span class="string">`每运行一次`</span>就会创建一个进程</span><br><span class="line">    -   进程就是系统<span class="string">`内存`</span>中<span class="string">`正在运行`</span>的程序，某些程序可以同时产生<span class="string">`多个`</span>进程</span><br><span class="line">    -   <span class="variable constant_">CPU</span> 通过内存去处理这些程序，所以核对线程多处理进程速度越快</span><br><span class="line">    -   没有运行的程序只占用硬盘空间，不消耗系统资源</span><br><span class="line">    -   每个进程都一个父进程来触发它，除非起始进程</span><br><span class="line">    -   linux scentos7 起始进程 <span class="string">`systemd`</span>，开机后第一个进程，其他进程都是通过起始进程运行的子进程</span><br><span class="line">    -   子进程是父进程创建的，父进程结束，需要自觉把子进程杀死，如果特殊情况没有结束的子进程，就是<span class="string">`僵尸状态`</span></span><br><span class="line">-   基础状态</span><br><span class="line">    -   运行态</span><br><span class="line">        -   某个进程分配到 cpu 正在处理器上执行的状态，单 <span class="variable constant_">CPU</span> 单线程的处理器，一个时间最多有一个</span><br><span class="line">        -   正在占用 cpu 运行，四核八线程可以同时存在八个运行态进程</span><br><span class="line">    -   就绪态</span><br><span class="line">        -   准备好，等前面进程 cpu 时间片时间到，进程调度轮到自己时，直接可以开始工作</span><br><span class="line">    -   阻塞态</span><br><span class="line">        -   等待一个时机到来触发的程序，触发后转就绪态， 如:I/O 交互</span><br><span class="line">    -   进程调度通过<span class="string">`时间片轮转、上下文切换`</span></span><br><span class="line">-   进程控制块(task_struct 结构 中的 <span class="variable constant_">PCB</span>)??</span><br><span class="line">-   <span class="title class_">Linux</span> 详细状态</span><br><span class="line">    -   <span class="string">`R`</span>:可运行状态</span><br><span class="line">    -   <span class="string">`S`</span>:可中断的等待状态</span><br><span class="line">    -   <span class="string">`D`</span>:不可中断的等待状态</span><br><span class="line">    -   <span class="string">`Z`</span>:僵尸状态</span><br><span class="line">    -   <span class="string">`T`</span>:暂停状态</span><br><span class="line">    -   下级分类</span><br><span class="line">        -   <span class="string">`S+`</span>:前台进程</span><br><span class="line">        -   <span class="string">`l`</span>:多线程进程</span><br><span class="line">        -   <span class="string">`N`</span>:低优先级进程</span><br><span class="line">        -   <span class="string">`&lt;`</span>:高优先级进程</span><br><span class="line">        -   <span class="string">`s`</span>:改进程是会话领导者</span><br><span class="line">-   属性</span><br><span class="line">    -   <span class="string">`PID`</span>:名称</span><br><span class="line">    -   <span class="string">`PPID`</span>:父级 <span class="variable constant_">ID</span></span><br><span class="line">    -   <span class="string">`UID`</span>:启动进程的用户(系统自建的一些用户就是拿来启动特定进程的)</span><br><span class="line">    -   <span class="string">`STAT`</span>:进程状态</span><br><span class="line">    -   <span class="string">`SZ|%MEM`</span>:用掉的內存的大小、百分比</span><br><span class="line">    -</span><br><span class="line">-   管理</span><br><span class="line">    -   <span class="string">`pidof 进程`</span>:查看指定进程 <span class="title function_">PID</span>(处理起始进程 <span class="variable constant_">PID</span> 固定为 <span class="number">1</span>，其他的都是随机变化的)</span><br><span class="line">    -   <span class="string">`ps`</span>:当前用户当前终端启动的线程</span><br><span class="line">        -   <span class="string">`a`</span>:显示与当前终端有关的所有进程</span><br><span class="line">        -   <span class="string">`x`</span>:显示与当前终端无关的所有进程</span><br><span class="line">        -   <span class="string">`u`</span>:显示影响用户的信息(用户名、cpu、内存等)</span><br><span class="line">        -   <span class="string">`-aux`</span>: 风格一</span><br><span class="line">        -   <span class="string">`-ef`</span>:风格二 显示所有运行的进程，bin显示启动进程的命令（可以看到 <span class="variable constant_">PPID</span>）</span><br><span class="line">        -   <span class="string">`ajx`</span>:...</span><br><span class="line">    -   <span class="string">`top`</span>:查看动态进程信息(htop 插件的作用)</span><br><span class="line">        -   第一行:<span class="string">`当前时间`</span> up <span class="string">`运行多久`</span>,<span class="string">`几个用户上线`</span>, load <span class="attr">average</span>:<span class="string">`过去1、5、15分钟内CPU平均负载`</span></span><br><span class="line">        -   第二行:<span class="title class_">Tasks</span> 任务:<span class="string">`任务总数`</span>,<span class="string">`运行态个数`</span>,<span class="string">`就绪态个数`</span>,<span class="string">`阻塞态个数`</span>,<span class="string">`僵死态个数`</span></span><br><span class="line">        -   第三行:%<span class="attr">CPU</span>:<span class="string">`用户开进程占比`</span>,<span class="string">`系统进程占比`</span>,,<span class="string">`闲置CPU`</span></span><br><span class="line">        -   第四行:<span class="title class_">Mem</span> 内存:总内存，可用量，已用量，缓冲或缓存</span><br><span class="line">        -   第五行:虚拟内存信息</span><br><span class="line">    -   <span class="string">`who`</span>:查看当前那些用户在登录</span><br><span class="line">    -   <span class="string">`systemctl start httpd`</span>:启动 httpd 这个服务</span><br><span class="line">-   控制进程</span><br><span class="line">    -   手工启动</span><br><span class="line">        -   前台启动</span><br><span class="line">        -   后台启动</span><br><span class="line">            -   某些操作一直监听不会断，在指令后面添加 <span class="string">`&amp; `</span>转入后台运行,打印编号[n]</span><br><span class="line">            -   或<span class="string">`ctrl+z`</span>临时转入后台</span><br><span class="line">            -   <span class="string">`jobs -l`</span> 查看后台进程列表</span><br><span class="line">            -   <span class="string">`fg n`</span>:转前台进程</span><br><span class="line">            -   <span class="string">`kill 进程ID`</span>:中断进程</span><br><span class="line">    -   调度启动</span><br><span class="line">    -   关闭终端所有程序自动关闭</span><br><span class="line">        -   <span class="string">`nohup nc xxx &amp;`</span>:解除 nc 服务与终端的关系，使终端关闭程序继续运行</span><br><span class="line">        -   与服务器如果关闭终端，程序也会关闭的话，可以用exit退出，而不是直接关闭</span><br><span class="line">        -   <span class="string">`tmux`</span> 不属于当前终端，里面开启的进程也不会随着终端关闭二停止</span><br><span class="line">    -   终止进程</span><br><span class="line">        -   <span class="string">`ctrl+c`</span></span><br><span class="line">        -   <span class="string">`kill PID`</span>:结束指定进程</span><br><span class="line">            -   <span class="string">`-9`</span>:强制终止</span><br><span class="line">        -   <span class="string">`killall 程序名`</span>:删除与指定程序的所有子进程</span><br><span class="line">-   监视系统信息</span><br><span class="line">    -   监视用户信息</span><br><span class="line">        -   <span class="string">`users`</span>:查看几个用户在登录</span><br><span class="line">        -   <span class="string">`who`</span>:查看几个用户在登录详情</span><br><span class="line">        -   <span class="string">`w`</span>:查看几个用户在登录，查看更详细信息</span><br><span class="line">        -   <span class="string">`last`</span>:登录信息，查看某个用户从哪里登录过系统<span class="string">`通过日志`</span></span><br><span class="line">        -   找到用户后 通过杀死终端进程把用户踢走</span><br><span class="line">    -   资源占用信息</span><br><span class="line">        -   <span class="string">`cat /proc/cpuinfo `</span>:查看 cpu 信息</span><br><span class="line">        -   <span class="string">`free`</span>:查看内存情况</span><br><span class="line">            -   <span class="string">`-h`</span>:人性化显示</span><br><span class="line">            -   <span class="string">`-s 3`</span>:动态显示 <span class="number">3</span> 秒更新</span><br><span class="line">            -   <span class="attr">available</span>:可用容量，大于空闲分区 free，不够用可以从缓存中取一部分</span><br><span class="line">            -   如果用户从来没使用过交换分区(used <span class="number">0</span>),说明物理内存充足</span><br></pre></td></tr></table></figure><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-   概念</span><br><span class="line">    -   服务实在系统后台运行、并等待用户或其他软件调用的一类特殊程序</span><br><span class="line">    -   父进程是初始化进程 <span class="variable constant_">PPID</span> 为 <span class="number">1</span>，与终端无关 ,<span class="number">0</span> 一般为调度进程(交换进程)</span><br><span class="line">    -   服务程序结尾一般带<span class="string">`d`</span></span><br><span class="line">    -   比较重要的是一项对外提供功能的网络服务,运行后，通常系统中都会开发相应的端口</span><br><span class="line">-   指令</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`pstree`</span>:查看进程数</span><br><span class="line">    -   <span class="string">`systemd`</span>:cenos7 的初始化进程（之前的是<span class="string">`init`</span>）</span><br><span class="line"></span><br><span class="line">        -   核心概念 <span class="title function_">unit</span>(单元)</span><br><span class="line"></span><br><span class="line">            -   <span class="title class_">Server</span> unit</span><br><span class="line">                -   systemd 通过 unit 管理功能，每个<span class="string">`unit`</span>都有一个配置文件，存在/usr/lib/systemd/system 或 /etc/systemd/system 中</span><br><span class="line">                -   配置文件都以<span class="string">`.service`</span>结尾</span><br><span class="line">            -   <span class="title class_">Target</span> unit</span><br><span class="line"></span><br><span class="line">                -   .<span class="property">target</span> 结尾</span><br><span class="line">                -   设置运行级别</span><br><span class="line"></span><br><span class="line">            -   。。。。</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`systemctl`</span>:服务管理(sshd 开启了才能远程链接，防火墙设置允许)</span><br><span class="line">        -   <span class="string">`start|stop|status|restart|reload &lt;server-name&gt;`</span>:启动|停止|查看状态|重启|重新加载 服务</span><br><span class="line">        -   restart 与 reload 的差别，重启是停止再启动，重新加载是不停止重新读取配置文件</span><br><span class="line">        -   <span class="string">`systemctl enable sshd.service`</span>:设置开机自启</span><br><span class="line">        -   <span class="string">`systemctl is-enabled sshd`</span>:查看是否开机自启</span><br><span class="line">        -   <span class="string">`list-unit-files --type service`</span>:查看开机自启的服务列表</span><br><span class="line">        -   <span class="string">`list-units`</span>:查看所以单元</span><br><span class="line">            -   <span class="string">`--type=service`</span>:只看 service 类型正在运行的服务</span><br><span class="line">            -   <span class="string">`--type=service --all`</span>:只看 service 类型所有的服务</span><br><span class="line"></span><br><span class="line">-   完整的服务管理流程</span><br><span class="line">    -   安装相关服务程序</span><br><span class="line">    -   运行服务</span><br><span class="line">    -   将服务设置开机自启</span><br><span class="line">    -   对服务进行配置</span><br><span class="line">    -   重启或者从新加载服务</span><br><span class="line">-   常用服务以及作用</span><br><span class="line">    -   <span class="string">`vsftpd`</span>:作用:使远程通过 ftp 上传下载</span><br></pre></td></tr></table></figure><h3 id="运行级别（目标）"><a href="#运行级别（目标）" class="headerlink" title="运行级别（目标）"></a>运行级别（目标）</h3><blockquote><p>指定级别可启动的特定服务类型（os7 以前用 init 表示，现在 runlevel[0~6]）表示 ctrl+alt+f3</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-   目标(<span class="string">`/usr/lib/systemd/system`</span>)</span><br><span class="line">    -   <span class="string">`runlevel0.target`</span>: poweroff.<span class="title function_">target</span>(<span class="string">`不运行服务 关机`</span>)</span><br><span class="line">    -   <span class="string">`runlevel1.target`</span>: resuce.<span class="title function_">target</span>(<span class="string">`救援|单例|安全模式`</span>)</span><br><span class="line">    -   <span class="string">`runlevel2.target`</span>: multi-user.<span class="property">target</span></span><br><span class="line">    -   <span class="string">`runlevel3.target`</span>: multi-user.<span class="property">target</span></span><br><span class="line">    -   <span class="string">`runlevel4.target`</span>: multi-user.<span class="title function_">target</span>(<span class="string">`2，3，4多用户模式`</span>，不运行图形界面级相关服务，字符界面)</span><br><span class="line">    -   <span class="string">`runlevel5.target`</span>: graphical.<span class="title function_">target</span>(<span class="string">`图形相关服务`</span>)</span><br><span class="line">    -   <span class="string">`runlevel6.target`</span>: reboot.<span class="title function_">target</span>(<span class="string">`重启`</span>)</span><br><span class="line">-   操作</span><br><span class="line">    -   os7 用<span class="string">`systemctl`</span> 代替以前的<span class="string">`runlevel和init`</span></span><br><span class="line">    -   <span class="string">`systemctl get-default`</span>:查看默认运行级别</span><br><span class="line">    -   <span class="string">`systemctl set-default multi-user.target`</span>:设置默认运行级别</span><br><span class="line">    -   <span class="string">`systemctl set-default graphical.target`</span>:默认图像界面启动</span><br><span class="line">    -   <span class="string">`runlevel`</span>:查看当前运行级别（N <span class="number">5</span>,从 <span class="title class_">Null</span> 到 <span class="number">5</span>）</span><br><span class="line">    -   <span class="string">`init 运行级别数字`</span>:临时切换运行级别</span><br><span class="line">    -   os7 中 本质是将：<span class="string">`/etc/systemd/system/default.target`</span> 软连接指向 运行级别所在的文件</span><br><span class="line">-   通过救援模式重置 root 密码</span><br><span class="line">    -   只能在本地登录才能使用，不能通过远程操作</span><br><span class="line">    -   启动是按 e 进入引导界面</span><br><span class="line">    -   找到系统版本 root=xxx 那一段</span><br><span class="line">    -   找到 <span class="variable constant_">LANG</span>=zh_CN.<span class="property">UTF</span>-<span class="number">8</span></span><br><span class="line">    -   后面+ 空格 + rd.<span class="property">break</span> 进入救援模式</span><br><span class="line">    -   按 ctrl+x 重新进入系统</span><br></pre></td></tr></table></figure><p><img src="/../../static/img/resetrootpwd.png" alt="操作"></p><h3 id="计划任务-从未设置成功"><a href="#计划任务-从未设置成功" class="headerlink" title="计划任务(从未设置成功)"></a>计划任务(从未设置成功)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">-   一次性计划任务<span class="string">`at`</span></span><br><span class="line">    -   设置：</span><br><span class="line">        -   <span class="string">`at 时间14:00`</span></span><br><span class="line">        -   回车进入 at 交互模式,设置指定时间要做的事情</span><br><span class="line">        -   <span class="string">`ctrl+d`</span> 保存退出</span><br><span class="line">        -   模式内<span class="string">`ctrl+退格`</span>删除</span><br><span class="line"></span><br><span class="line">        -   echo <span class="string">&quot;ls&quot;</span> | at 时间</span><br><span class="line"></span><br><span class="line">    -   通过邮件接收</span><br><span class="line">        -   <span class="string">`mailx`</span>:查看邮件</span><br><span class="line">        -   输入邮件编号，打开指定邮件</span><br><span class="line">        -   <span class="string">`exit`</span>退出</span><br><span class="line">    -   参数</span><br><span class="line">        -   时间格式</span><br><span class="line">            -   <span class="string">`10:00 2021-04-13`</span></span><br><span class="line">            -   <span class="string">`10:00 tomorrow`</span></span><br><span class="line">            -   <span class="string">`now+3(minutes|hours|days)`</span>:三分钟后</span><br><span class="line">            -   <span class="string">`10:00`</span></span><br><span class="line">        -   查看任务列表</span><br><span class="line">            -   <span class="string">`at -l`</span>:任务列表</span><br><span class="line">            -   <span class="string">`at -c 编号`</span>:指定查看任务</span><br><span class="line">            -   <span class="string">`at -d 编号`</span>:删除任务</span><br><span class="line"></span><br><span class="line">-   周期性任务<span class="string">`cron|cronie(不要加d)`</span></span><br><span class="line">    -   <span class="string">`crontab -e`</span> 进入设置</span><br><span class="line">    -   <span class="string">`crontab -l`</span> 查看列表</span><br><span class="line">    -   时间周期格式</span><br><span class="line">        -   分钟 <span class="number">0</span>-<span class="number">59</span></span><br><span class="line">        -   小时 <span class="number">0</span>-<span class="number">23</span></span><br><span class="line">        -   日期 <span class="number">1</span>-<span class="number">31</span></span><br><span class="line">        -   月份 <span class="number">1</span>-<span class="number">12</span></span><br><span class="line">        -   星期 <span class="number">0</span>-<span class="number">6</span>，linux 的 <span class="number">0</span> 和 <span class="number">7</span> 都代表星期天(程序中cron表达式有的<span class="number">1</span>-<span class="number">7</span>，<span class="number">1</span>-星期天)</span><br><span class="line">        -   特殊符号:</span><br><span class="line">            -   <span class="string">`*`</span> 该范围任何时间</span><br><span class="line">            -   <span class="string">`,`</span> 多个选择 <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span></span><br><span class="line">            -   <span class="string">`-`</span> 多个选择 <span class="number">1</span>-<span class="number">3</span></span><br><span class="line">            -   <span class="string">`/`</span> 小时段: <span class="string">`8-18/2`</span> <span class="number">8</span> 点到 <span class="number">18</span> 点之间每隔 <span class="number">2</span> 小时执行一次</span><br><span class="line">                -   <span class="string">`0/4`</span>:从<span class="number">0</span>开始，每隔<span class="number">4</span>分/秒/小时。。执行一次</span><br><span class="line">                -   <span class="string">`*/4`</span>:从程序启动开始，每隔<span class="number">4</span>分/秒/小时。。执行一次</span><br><span class="line">    -   任务内容(<span class="string">`cron`</span>，<span class="string">`cronie`</span>不用路径)</span><br><span class="line">        -   指令必须带路径<span class="string">`where`</span> 可找到指令路径</span><br><span class="line">        -   任务与终端无关，无法获取到环境变量</span><br><span class="line">    -   案例</span><br><span class="line">        -   <span class="string">`30 20 12 4 * /usr/bin/cat /etc/passwd`</span></span><br><span class="line">        -   <span class="string">`30 * * * * * /usr/bin/cat /etc/passwd`</span></span><br><span class="line"></span><br><span class="line">    -   高级(<span class="title class_">Linux</span> cron 可能不支持)</span><br><span class="line">        -   cron的字符:<span class="string">&#x27;* , - / # ? L W C&#x27;</span></span><br><span class="line">        -   <span class="number">2</span>#<span class="number">3</span>:周<span class="number">0</span>-<span class="number">6</span>:某月第三个星期二,<span class="number">1</span>-<span class="number">7</span>表示第三个星期一</span><br><span class="line">        -   2<span class="attr">W</span>:天段，表示某月第二个工作日,<span class="variable constant_">LW</span>,某月最后一个工作日</span><br><span class="line">        -   <span class="attr">L</span>:天段,某月最后一天·,周段，5L某月最后一个星期五</span><br><span class="line">        -   <span class="attr">C</span>: 天段, 5C,某月<span class="number">5</span>号后的第一天 或 某月从第一天开始的后五天</span><br><span class="line">        -   <span class="attr">C</span>: 周段,1C,某月星期一后第一天</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="bashrc"><a href="#bashrc" class="headerlink" title=".bashrc"></a>.bashrc</h3><blockquote><p>bash 在每次启动时都会加载 <code>.bashrc</code> 文件内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-   别名</span><br><span class="line">    -   <span class="string">`alias ll = &quot;ls -lha&quot;`</span>:执行<span class="string">`ll`</span>就相当于执行<span class="string">`ls -lha`</span></span><br><span class="line">-   颜色设置</span><br><span class="line">    -   用户名颜色</span><br><span class="line">        -   <span class="string">`echo &quot;PS1=&#x27;\[\e[37;40m\][\[\e[32;40m\]\u\[\e[37;40m\]@\h \[\e[35;40m\]\W\[\e[0m\]]\$&#x27;&quot; &gt;&gt; ~/.bashrc`</span></span><br><span class="line">        -   <span class="attr">https</span>:<span class="comment">//blog.csdn.net/woshizhangliang999/article/details/103553567</span></span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 md <span class="built_in">dir</span> 创建<span class="built_in">dir</span>并进入</span></span><br><span class="line">md () &#123;</span><br><span class="line">    mkdir -p $1</span><br><span class="line">    cd $1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="提升效率"><a href="#提升效率" class="headerlink" title="提升效率"></a>提升效率</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`tab`</span> 补全目录</span><br><span class="line">-   <span class="string">`history`</span>：查看历史命令</span><br><span class="line">-   <span class="string">`esc + .`</span>：快速得到上一次指令中的路径</span><br><span class="line">-   <span class="string">`--help`</span>：查看指令详细信息</span><br></pre></td></tr></table></figure><h3 id="不重要"><a href="#不重要" class="headerlink" title="不重要"></a>不重要</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`$SHELL`</span> :一般全大写的系统自带环境变量</span><br><span class="line">-   <span class="string">`echo $PATH`</span> :查看环境变量</span><br><span class="line">-   <span class="string">`echo $?`</span> :查看上一条命令执行结果的对错(<span class="number">0</span>:正确，非 <span class="number">0</span>:错误)</span><br><span class="line">-   <span class="string">`source ~/.bashrc`</span>：更新配置文件立即生效</span><br><span class="line">-   <span class="string">`wall`</span> ：登陆的终端发送消息</span><br><span class="line">-   <span class="string">`alias`</span>：查看定义了的别名</span><br><span class="line">-   <span class="string">`unalias name`</span>:删除别名</span><br><span class="line">-   bash模式默认快捷键</span><br><span class="line">    -   ctrl+a 到行首</span><br><span class="line">    -   ctrl+e 到行尾</span><br><span class="line">    -   ctrl+u 删除光标之前的内容</span><br><span class="line">    -   ctrl+k 删除光标之后的内容</span><br><span class="line">    -   ctrl+l 清屏</span><br><span class="line">    -   tab 补全$PATH的存在内容</span><br><span class="line">-   查找相关统计</span><br><span class="line">    -   whoami</span><br><span class="line">    -   who</span><br><span class="line">    -   which</span><br><span class="line">    -   whereis</span><br></pre></td></tr></table></figure><h3 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`uname -a`</span> :查看系统信息</span><br><span class="line">-   <span class="string">`cat /proc/version`</span> :查看当前操作系统版本信息</span><br><span class="line">-   <span class="string">`cat /etc/issue`</span>:查看当前操作系统发行版信息</span><br><span class="line">-   <span class="string">`cat /proc/cpuinfo`</span>:<span class="variable constant_">CPU</span>信息</span><br><span class="line">-   <span class="string">`getconf LONG_BIT`</span>:多少位</span><br><span class="line">-   <span class="string">`cat /etc/sysconfig/network-scripts/xxx网卡`</span>:查看网络配置</span><br><span class="line">-   <span class="string">`lsblk 、fdisk -l、df -h`</span>:磁盘信息</span><br><span class="line">-   <span class="string">`free -mh`</span>:查看内存信息</span><br><span class="line">-   <span class="string">`netstat -lntp`</span>：查看监听的端口</span><br><span class="line">-   <span class="string">`cut -d: -f1 /etc/passwd`</span>:查看所有用户</span><br></pre></td></tr></table></figure><h3 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`chsh -s /bin/zsh`</span>:切换 shell</span><br><span class="line">-   <span class="string">`whereis cmmand`</span>:查询指令的可执行文件,源码文件,帮助文件的位置</span><br><span class="line">-   <span class="string">`ntpdate -u ntp.api.bz`</span>:矫正时间</span><br><span class="line">-   <span class="string">`/etc/os-release`</span>:操作系统表示</span><br></pre></td></tr></table></figure><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><p>学习网络协议是计算机网络的核心概念<br>协议是计算机网络进行数据交互而建立的一种规则、约定、或标准的集合<br>网络协议与语言一样多种多样，后面出现了 TCP&#x2F;IP 网络协议标准已经是 internet 中的标准语言了（类似普通话）</p><blockquote><p>为了让不同计算机厂家的计算机能够进行沟通，在大范围进行网络同学，（ISO 国际标准化组织）划分成了七层 - ISO 七层模型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">- <span class="number">1</span>、物理层</span><br><span class="line">- <span class="number">2</span>、数据链路层</span><br><span class="line">    -   <span class="number">1</span>,<span class="number">2</span> -&gt; 物理链路层</span><br><span class="line">    -   功能：以二进制的数据形式在物理媒介上进行传输数据</span><br><span class="line">    -   协议：<span class="variable constant_">ISO</span>@<span class="number">2100</span></span><br><span class="line">- <span class="number">3</span>、网络层</span><br><span class="line">    -   <span class="number">3</span>   -&gt; 网络</span><br><span class="line">    -   功能：为数据包选择路由(最快的路线)</span><br><span class="line">    -   协议：<span class="variable constant_">IP</span>、<span class="variable constant_">ICMP</span>、<span class="variable constant_">BGP</span>、<span class="variable constant_">OSPF</span>等</span><br><span class="line">- <span class="number">4</span>、传输层</span><br><span class="line">    -   <span class="number">4</span>   -&gt; 传输</span><br><span class="line">    -   功能：提供端对端的接口 <span class="variable constant_">IP</span> <span class="title class_">Port</span></span><br><span class="line">    -   协议：<span class="variable constant_">TCP</span>、<span class="variable constant_">UDP</span></span><br><span class="line">- <span class="number">5</span>、会话层</span><br><span class="line">- <span class="number">6</span>、表示层</span><br><span class="line">- <span class="number">7</span>、应用层</span><br><span class="line">    -   <span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> -&gt; 最接近用户的使用的三层</span><br><span class="line">    -   功能：提供文件传输、邮件、文件共享、数据加密等</span><br><span class="line">    -   协议：<span class="variable constant_">HTTP</span>、<span class="variable constant_">SNMP</span>、<span class="variable constant_">FTP</span>、<span class="variable constant_">NFS</span>、<span class="variable constant_">DNS</span>等</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 应用层</span><br><span class="line">通过进层间的数据交互来完成特定的网络应用</span><br><span class="line">对于不同的网络应用需要用不同的网络协议</span><br><span class="line">    域名解析系统 <span class="variable constant_">DNS</span>协议</span><br><span class="line">    <span class="variable constant_">WEB</span>服务应用 <span class="variable constant_">HTTP</span>协议</span><br><span class="line">    邮件传输 <span class="variable constant_">SMTP</span>协议</span><br><span class="line">我们把应用层交互的数据称为**报文**</span><br><span class="line"></span><br><span class="line">-   <span class="variable constant_">DNS</span>协议</span><br><span class="line">域名解析系统，是一个互联网的分布式数据库，主要储存<span class="variable constant_">IP</span>和域名的对应关系，使用户可以通过域名访问互联网</span><br><span class="line"></span><br><span class="line">-   <span class="variable constant_">HTTP</span>协议</span><br><span class="line">超文本传输协议，是互联网上应用最广泛的网络协议，最初目的是为了发布和接收<span class="variable constant_">HTML</span>文件的</span><br><span class="line"></span><br><span class="line">&gt; 传输层</span><br><span class="line">向两台主机直接的进程进行提供数据传输,主要有两种(<span class="variable constant_">UDP</span>/<span class="variable constant_">TCP</span>)</span><br><span class="line"></span><br><span class="line">-   <span class="variable constant_">TCP</span> 传输控制协议</span><br><span class="line">    -   提供面向连接**可靠的**而数据传输协议</span><br><span class="line">    -   会与对方确认，没问题在给</span><br><span class="line">    -   可靠报文数据不重复不丢失</span><br><span class="line">-   <span class="variable constant_">UDP</span> 用户数据协议</span><br><span class="line">    -   提供无连接的，尽到他最大努力进行数据传输，不保证数据的而安全</span><br><span class="line">    -   不会确认，直接把数据仍给他</span><br><span class="line">    -   没有报文的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改网络信息"><a href="#修改网络信息" class="headerlink" title="修改网络信息"></a>修改网络信息</h3><blockquote><p>ifconfig 临时修改, 配置文件中才能永久修改</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入/etc/sysconfig/network-script,打开网卡文件</span></span><br><span class="line">BOOTPROTO=&quot;dhcp/static&quot; # 动态/静态吗，static可以设置固定内网IP</span><br><span class="line">ONBOOT=&quot;yes&quot; # 开机读取</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="attr">ifconfig</span>:可能要自己安装</span><br><span class="line">    -   <span class="string">`ifconfig`</span></span><br><span class="line">        -   yum install net-tools 就有了</span><br><span class="line">        -   <span class="regexp">/etc/</span>sysconfig/network-script 网卡文件位置</span><br><span class="line">        -   <span class="title function_">inet</span>(<span class="title class_">IPV4</span>地址)、<span class="title function_">netmask</span>(子网掩码、<span class="title function_">broadcast</span>(广播地址)</span><br><span class="line">        -   <span class="variable constant_">RX</span>/<span class="variable constant_">TX</span> packages 网卡收/发流量数据包大小</span><br><span class="line">        -   ether <span class="attr">xx</span>:<span class="attr">xx</span>:<span class="attr">xx</span>:xx <span class="variable constant_">MAC</span>地址</span><br><span class="line">    -   ifconfig 网卡名 down/up：停止/启用网卡(危险操作)</span><br><span class="line">    -   ifconfig 可以临时更改网络信息ip mac地址等</span><br><span class="line"></span><br><span class="line">-   <span class="string">`route`</span>:源主机数据到目标主机的转发过程路线，路由类似互联网中转站，网络中的数据包就是通过一个个路由转发到目的地的</span><br><span class="line">    -   静态路由：<span class="title class_">Linux</span>机器配置的都是静态路由，运维人员通过route命令管理</span><br><span class="line">    -   动态路由：无需人为干预有路由器交换机自动分配规则</span><br><span class="line">    -   router -n：直接查看路由表</span><br><span class="line">        -   <span class="title class_">Destination</span>：网络号</span><br><span class="line">        -   <span class="title class_">Gateway</span>：网关地址，网络是通过改<span class="variable constant_">IP</span>出口，<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>表示改路由信息是冲本机发出去的</span><br><span class="line">        -   <span class="title class_">Genmask</span>：子网掩码地址，<span class="variable constant_">IP</span>配合网整的子网掩码才是完整的网络信息</span><br><span class="line">        -   <span class="title class_">Flags</span>：标记网络状态，</span><br><span class="line">            -   U 运行的状态</span><br><span class="line">            -   G 表示这个是网关路由器</span><br><span class="line">            -   H 这个网关是一个主机</span><br><span class="line">            -   ！当前路由已经禁止</span><br><span class="line">-   <span class="string">`ip`</span>:</span><br><span class="line">    -   ip addr show：查看网络设备信息</span><br><span class="line">-   <span class="string">`ssh`</span>:openssh软件包的套件命令，xshell远程需要依赖服务器上的sshd这个服务</span><br><span class="line">    -   <span class="variable language_">window</span>/linux 的终端</span><br><span class="line">        -   ssh username@<span class="variable constant_">IP</span> 连接进目标机器</span><br><span class="line">        -   如果目标<span class="variable constant_">IP</span>端口改了通过 -p xxx 指定</span><br><span class="line">        -   ssh username@<span class="variable constant_">IP</span> <span class="string">&quot;free -m&quot;</span> 控制远程服务器发送 free -m 这条指令</span><br><span class="line">    -   <span class="string">`ssh-copy-id`</span></span><br><span class="line">        -   连接主机 <span class="string">`ssh-copy-id -i ./id_rsa.pub root@114.115.212.xxx`</span> 向目标主机<span class="number">114</span> 上传公钥, 就可以不需要密码直连</span><br><span class="line">-   <span class="string">`scp`</span>:命令用于 <span class="title class_">Linux</span> 之间复制文件和目录(全量完整复制，效率不太好)</span><br><span class="line">    -   scp -P <span class="number">22</span> 本机文件 root@对面<span class="attr">IP</span>:对面位置 =&gt; 文件上传</span><br><span class="line">    -   scp -r -P <span class="number">22</span> 本机文件夹 root@对面<span class="attr">IP</span>:对面位置 =&gt; 文件夹上传</span><br><span class="line">    -   scp -P <span class="number">22</span> root@对面<span class="attr">IP</span>:对面文件位置 本机位置 =&gt; 文件下载</span><br><span class="line">    -   scp -r -P <span class="number">22</span> root@对面<span class="attr">IP</span>:对面文件夹位置 本机位置 =&gt; 文件夹下载</span><br><span class="line">-   <span class="string">`rsync`</span>:增量的复制</span><br><span class="line">    -   不同于 cp 或 scp 的一点是，使用 rsync 命令备份数据时，不会直接覆盖以前的数据（如果数据已经存在），而是先判断已经存在的数据和新数据的差异，只有数据不同时才会把不相同的部分覆盖。</span><br><span class="line">    -   <span class="string">`rsync -av /etc/passwd 192.168.188.128:/tmp/1.txt`</span></span><br><span class="line">-   <span class="string">`wget`</span>:非常稳定，断点续传，支持ftp http等协议 下载网络资源</span><br><span class="line">    -   wget url：直接下载</span><br><span class="line">    -   wget -o path/name url：下载并改名</span><br><span class="line">    -   wget --limit-rate=1k url：限制下载速度</span><br><span class="line">    -   wget -c --limit-rate=1k 下到一半的url：断点续传</span><br><span class="line">    -   wget -b url：后台下载</span><br><span class="line">-   <span class="string">`telnet`</span>:用于登入远程主机，以及监测远程端口是否打开，采用名文传输，安全性低，后来被ssh取代</span><br><span class="line">    -   telnet <span class="number">111.111</span><span class="number">.111</span><span class="number">.111</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line">-   <span class="string">`ping`</span>:<span class="string">`ping www.baidu.com -c 6 -i 0.6`</span> ,ping6次 间隔<span class="number">0.6</span>秒</span><br><span class="line">-   <span class="string">`curl url`</span>:获取网站源码</span><br><span class="line">    -   curl url &gt; xxx.<span class="property">html</span> 下载网页源码</span><br><span class="line">    -   curl -o xxx.<span class="property">html</span> 同样下载网页源码</span><br><span class="line">    -   curl -o /dev/<span class="literal">null</span> -s -w %&#123;http_code&#125; url 测试网页是否存活,返回状态码(echo $?测试是执行成功，<span class="number">0</span>就说明成功了)</span><br><span class="line">    -   curl -o /dev/<span class="literal">null</span> -s -c xxx.<span class="property">txt</span> url 获取指定网址提供的cookie保存到xxx中</span><br><span class="line">    -   curl -O xxxx.<span class="property">png</span> 直接下载文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="端口服务进程号配置查询"><a href="#端口服务进程号配置查询" class="headerlink" title="端口服务进程号配置查询"></a>端口服务进程号配置查询</h4><blockquote><p>服务器中端口需要开放才能访问</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`ps`</span></span><br><span class="line">    -   <span class="string">`ps -aux|-af |grep &lt;server-name&gt;`</span></span><br><span class="line">-   <span class="string">`netstat`</span></span><br><span class="line">    -   <span class="string">`netstat -anp|grep 21`</span>:查询端口是否被使用</span><br><span class="line">    -   <span class="string">`netstat -antup|grep pid`</span>:根据 pid 查看端口使用者</span><br><span class="line">    -   <span class="string">`netstat -tlnp`</span>:查看监听的端口</span><br><span class="line">    -   <span class="string">`netstat -antp`</span>:查看系统网络服务</span><br><span class="line">-   <span class="string">`ss`</span></span><br><span class="line">-   <span class="string">`ip xxx`</span></span><br><span class="line">-   <span class="string">`lsof`</span>:需要安装</span><br><span class="line">    -   lsof abc.<span class="property">txt</span> 显示开启文件abc.<span class="property">txt</span>的进程</span><br><span class="line">    -   lsof -c abc 显示abc进程现在打开的文件</span><br><span class="line">    -   lsof -i :<span class="number">22</span>  查看<span class="number">22</span>端口现在运行什么程序</span><br><span class="line">-   <span class="string">`nslookup lzoxun.top`</span>：根据域名查询<span class="variable constant_">IP</span></span><br></pre></td></tr></table></figure><h3 id="xshell-中文设置"><a href="#xshell-中文设置" class="headerlink" title="xshell 中文设置"></a>xshell 中文设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`echo $LANG`</span>:查看当前编码</span><br><span class="line">-   <span class="string">`locale`</span>:查看系统拥有的编码</span><br><span class="line">-   <span class="string">`yum groupinstall chinese-support`</span>:安装中文包</span><br><span class="line">-   <span class="string">`yum install -y langpacks-zh_CN`</span>:或安装这个</span><br><span class="line">-   <span class="string">`LANG=&quot;zh_CN.UTF-8&quot;`</span>:临时改成中文</span><br><span class="line">-   <span class="string">`yum-langpacks`</span>:语言包</span><br><span class="line">-   <span class="string">`/etc/locale.conf`</span>:centos7 语言配置文件</span><br><span class="line">-   <span class="regexp">/etc/</span>locale.<span class="property">gen</span> - 配置文件: <span class="string">`/etc/yum/pluginconf.d/langpacks.conf`</span></span><br></pre></td></tr></table></figure><h3 id="去除-centos-滴滴提示音"><a href="#去除-centos-滴滴提示音" class="headerlink" title="去除 centos 滴滴提示音"></a>去除 centos 滴滴提示音</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.执行</span></span><br><span class="line">vi /etc/inputrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 <span class="comment">#set bell-style none 把这一行的#去掉</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、执行</span></span><br><span class="line">vim ~/.bashrc | /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加：setterm –blength 0</span></span><br><span class="line">3、执行：reboot</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-   新系统需要的一些设置</span><br><span class="line">    -   设置中文编码</span><br><span class="line">        -   echo <span class="variable constant_">LANG</span>=<span class="string">&quot;zh_CN.gbk&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>locale.<span class="property">conf</span></span><br><span class="line">    -   开启网卡（最小化安装时没开的 不能使用 ifconfig 指令）</span><br><span class="line">        -   echo <span class="variable constant_">ONBOOT</span>=yes &gt;&gt; <span class="regexp">/etc/</span>sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p><a href="https://www.bt.cn/">管理平台-宝塔</a></p><ul><li><code>bt default</code>:获取密码<br><a href="https://www.bilibili.com/video/BV1uZ4y1u7Ca?p=104&spm_id_from=pageDriver">课程 1</a><br><a href="https://distrowatch.com/dwres.php?resource=popularity">发行版排行</a><br><a href="https://www.deepin.org/zh/">国内 deepin</a><br><a href="https://www.ubuntukylin.com/downloads/">国内优麒麟</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/m/ma/manjaro/xfce/21.0-pre1/">manjaro</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a><br><a href="https://wiki.archlinux.org/">archlinux</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2023/01/01/web/RegExp/index/"/>
      <url>/2023/01/01/web/RegExp/index/</url>
      
        <content type="html"><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   数据隐藏(<span class="string">`180****9356`</span>)</span><br><span class="line">-   数据采集(爬虫)</span><br><span class="line">-   数据过滤(<span class="string">`你是****`</span>)</span><br><span class="line">-   数据验证(手机好，网址...)</span><br></pre></td></tr></table></figure><h3 id="JS-正则方法"><a href="#JS-正则方法" class="headerlink" title="JS 正则方法"></a>JS 正则方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-   创建正则</span><br><span class="line">    -   <span class="string">`var reg = /^xxx/ig`</span>：字面量方式</span><br><span class="line">    -   <span class="string">`var reg = new RegExp(&quot;^xxx&quot;,&quot;ig&quot;)`</span> 或 <span class="string">`new RegExp(/xyz/i)`</span>：构造行数创建</span><br><span class="line">    -   第一中正则在编译时就创建，实例的正则在运行是才创建</span><br><span class="line">-   匹配模式(修饰符)</span><br><span class="line">    -   表示正则的附加规则，放在最后面</span><br><span class="line">    -   <span class="string">`i:ignore`</span> 忽略大小写</span><br><span class="line">    -   <span class="string">`g:global`</span> 全局匹配，匹配字符串中所有匹配的词</span><br><span class="line">    -   <span class="string">`m:多行修饰符`</span></span><br><span class="line">        -   <span class="string">`/^(abcd|2345)$/m.test(&quot;abcd\n2345&quot;)`</span> 匹配到 abcd 和 <span class="number">2345</span></span><br><span class="line"></span><br><span class="line">-   <span class="variable constant_">JS</span> 正则对象提供的方法</span><br><span class="line">    -   <span class="string">`reg.test(&quot;str&quot;);`</span>:test 验证 str 中是否存在符合规则的子字符串</span><br><span class="line">    -   <span class="string">`reg.test([&quot;str1&quot;,&quot;str2&quot;,&quot;strn&quot;])`</span>:只要一个符合条件就返回<span class="literal">true</span></span><br><span class="line">    -   <span class="string">`reg.exec(&quot;str&quot;);`</span>:exec 返回 str 中，匹配到的符合规则的第一个子字符串,与<span class="string">`小括号包裹`</span>的子表达式，不匹配返回<span class="string">`null`</span></span><br><span class="line">        -   reg.<span class="title function_">exec</span>(<span class="string">&quot;str&quot;</span>); 第一次调用返回第一个匹配的字符串，第二次调用返回第二个匹配的字符串，没了返回<span class="literal">null</span></span><br><span class="line">        -   reg.<span class="property">index</span> 查看匹配字符串的索引</span><br><span class="line">-   一些属性</span><br><span class="line">    -   <span class="string">`reg.lastIndex`</span></span><br><span class="line">        -   正则的实例属性 lastIndex,初始情况下都是从零开始，当第二次调用这个实例匹配字符串时是从</span><br><span class="line">        -   上一次匹配完成位置的下一个位置开始。（当然正则实例是开启全局的 g或y）</span><br><span class="line">            -   <span class="number">1.</span>如果上次匹配到了一个位置大于等于此次匹配的字符串的长度，那么此次匹配返回<span class="literal">false</span>或空数组</span><br><span class="line">            -   <span class="number">2.</span>如果上次没有匹配到，那么此次匹配还是从零开始</span><br><span class="line">    -   <span class="string">`reg.source`</span></span><br><span class="line">        -   <span class="string">`/abc/ig.source`</span> 返回正文 abc</span><br><span class="line">    </span><br><span class="line">-   <span class="title class_">String</span> 方法提供的方法</span><br><span class="line">    -   <span class="string">`str.search(reg)`</span>:从 str 中查找 reg 匹配到子字符串的<span class="string">`起始位置`</span>,没有返回<span class="string">`-1`</span></span><br><span class="line">    -   <span class="string">`str.match(reg)`</span>:以数组模式返回 str 中所以符合 reg 要求的子字符串,和正则的<span class="string">`exec`</span>类似,并通过 g 获取所以匹配项</span><br><span class="line">    -   <span class="string">`str.replace(reg，callback|char)`</span>:把匹配到的子字符串进行替换</span><br><span class="line">        -   callback参数</span><br><span class="line">            -   如果没有子表达式，参数二是匹配字符串起始位置</span><br><span class="line">                -   <span class="title function_">callback</span>(<span class="function">(<span class="params">每次匹配,小括号<span class="number">1</span>，index</span>)=&gt;</span>&#123;xxx&#125;)</span><br><span class="line">            -   如果存在子表达式，参数是，匹配字符串、子<span class="number">1</span>、子n、匹配字符串起始位置</span><br><span class="line">                -   <span class="title function_">callback</span>(<span class="function">(<span class="params">每次匹配,小括号<span class="number">1</span>，小括号n,index</span>)=&gt;</span>&#123;xxx&#125;)</span><br><span class="line">        -   <span class="string">&quot;12liao34zhong56xun&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/([a-zA-Z]+)/g</span>,<span class="function">(<span class="params">item</span>)=&gt;</span> item.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">1</span>).<span class="title function_">toUpperCase</span>()+item.<span class="title function_">substring</span>(<span class="number">1</span>))</span><br><span class="line">        - 将匹配到的数据处理后使用:<span class="string">`&quot;hello&quot;.replace(/^\S/, s =&gt; s.toUpperCase())`</span></span><br><span class="line">    -   <span class="string">`str.replaceAll(reg，callback|char)`</span></span><br><span class="line">        -   正则reg必须加g全局匹配</span><br><span class="line">    -   <span class="string">`str.split(reg)`</span>:通过 str 中 reg 匹配到的子字符串进行分割(默认 g)</span><br></pre></td></tr></table></figure><h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-   子表达式\</span><br><span class="line">    -   通过小括号括起来的内容称<span class="string">`子表达式`</span></span><br><span class="line">-   捕获</span><br><span class="line">    -   字表达式匹配到内容时，系统会捕获这个行为，然后将字表达式匹配到的内容放到缓存区中，成为<span class="string">`捕获`</span></span><br><span class="line">    -   第一个捕获编号 <span class="number">1</span>,等 n 个编号 n</span><br><span class="line">-   反向引用</span><br><span class="line">    -   通过\<span class="title function_">n</span>(n&gt;<span class="number">0</span> 的，代表缓存区编号)来获取缓存区域的内容</span><br><span class="line">    -   在表达式中使用已近查到的结果</span><br><span class="line">-   经典案例(str = <span class="string">&quot;abc22333444&quot;</span>)</span><br><span class="line">    -   找到至少连续的三位相同数字</span><br><span class="line">        -   <span class="string">`/(\d)\1\1/g`</span>:(\d)捕获，通过反向拿到缓存区 <span class="number">1</span> 中的内容</span><br></pre></td></tr></table></figure><h3 id="小阔号的功能"><a href="#小阔号的功能" class="headerlink" title="小阔号的功能"></a>小阔号的功能</h3><blockquote><p>查询处符合条件的字符串，只要一个符合条件则反 true,判断全部 &#x3D;&gt; (?&lt;!xxx) 只要一个不符合条件返回true,所有不符合返回false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-   ():默认捕获效果，可通过\n 反向引用匹配的值</span><br><span class="line">-   (?:xxx):非捕获匹配，不会影响\n</span><br><span class="line">    -   (?:X)在正则中表示所匹配的子组X不作为结果输出</span><br><span class="line">-   (?=xxx):非捕获匹配，<span class="string">`正向肯定预查|先行断言`</span>,相当与添加条件限制<span class="string">`/^(?=.*8060$)xxxx`</span>,表达式必须以 <span class="number">8060</span> 结尾</span><br><span class="line">    -   <span class="string">`/hello(?=\d&#123;3&#125;)/.exec(&quot;hello123&quot;)`</span>:hello 后面必须是三个数字</span><br><span class="line">    -   我要提取的只是 hello,但是这个 hello 后面必须跟着 <span class="number">3</span> 个数字</span><br><span class="line">    -   <span class="string">`/(?=\d&#123;3&#125;)/.exec(&quot;hello123&quot;)`</span>：如果没有hello，匹配的就是后面有三个数字的位置</span><br><span class="line">-   (?!xxx):非捕获匹配,<span class="string">`正向否定预查|先行否定断言`</span>,相当于添加条件限制<span class="string">`/^(?!.*8060$)xxxx`</span>,表达式不能以 <span class="number">8060</span> 结尾</span><br><span class="line">    -   <span class="string">`/\d&#123;4&#125;(?![a-zA-Z])/exec(&quot;3243##&quot;)`</span>:数字后面不能出现字母</span><br><span class="line">-   (?\&lt;=xxx):非捕获匹配,<span class="string">`反向肯定预查`</span>,相当于添加条件限制（先找到四个字母，再看看四个字母左边是否出现三个数字 ）</span><br><span class="line">    -   <span class="string">`/(?&lt;=\d&#123;3&#125;)[a-zA-Z]&#123;4&#125;/.exec(&quot;123fdsf&quot;)`</span>:连续 <span class="number">4</span> 个字母左边必须出现 <span class="number">3</span> 个数字</span><br><span class="line">    -   先确定字符串中有 <span class="number">3</span> 个连续数字，找到了，再看后面的字符是否匹配</span><br><span class="line">-   (?\&lt;!xxx):非捕获匹配,<span class="string">`反向否定预查`</span>,相当于添加条件限制</span><br><span class="line">    -   <span class="string">`/(?&lt;!\d&#123;3&#125;)[a-zA-Z]&#123;4&#125;/.exec(&quot;123fdsf&quot;)`</span>:连续 <span class="number">4</span> 个字母左边不能是 <span class="number">3</span> 个数字</span><br><span class="line">    -   字符串中只要<span class="number">1</span>个连续 <span class="number">4</span> 个字母左边不是<span class="number">3</span>个数字,就返回<span class="literal">true</span>,全部都不是返回<span class="literal">false</span></span><br><span class="line">        -   是否全部str|max前面都是$</span><br><span class="line">            -   <span class="string">`!/(?&lt;!\$)(str|max)/.test(&quot;xx$strxx$maxxxx$strxxx$max&quot;)`</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前瞻：</span></span><br><span class="line"><span class="title function_">exp1</span>(?=exp2) 查找exp2前面的exp1</span><br><span class="line"><span class="comment">// 后顾：</span></span><br><span class="line">(?&lt;=exp2)exp1 查找exp2后面的exp1</span><br><span class="line"><span class="comment">// 负前瞻：</span></span><br><span class="line"><span class="title function_">exp1</span>(?!exp2) 查找后面不是exp2的exp1</span><br><span class="line"><span class="comment">// 负后顾：</span></span><br><span class="line">(?&lt;!exp2)exp1 查找前面不是exp2的exp1</span><br></pre></td></tr></table></figure><h3 id="编写规则"><a href="#编写规则" class="headerlink" title="编写规则"></a>编写规则</h3><blockquote><p>正则表达式是由所有字符以及特殊字符(元字符组成)的<code>文字模式</code>， 正则表达式作为一个模板，将<code>文字模式</code>与搜索到的字符串进行匹配</p></blockquote><h4 id="查什么-匹配符"><a href="#查什么-匹配符" class="headerlink" title="查什么(匹配符)"></a>查什么(匹配符)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-   需要什么字符就填什么字符，元字符就前面加反斜杠\</span><br><span class="line">-   js 可以直接匹配具体汉字，有些语言是不可以的</span><br><span class="line">-   字符簇</span><br><span class="line">    -   [a-zA-<span class="variable constant_">Z0</span>-<span class="number">9</span>]</span><br><span class="line">        -   [<span class="variable constant_">ASCII</span>]从上到下的顺序都可以如：[Z-a]可以匹配 Z、、\[、\],^ 等字符</span><br><span class="line">    -   [abc]: 匹配A或B或C</span><br><span class="line">    -   [^abc]: 取反，就不匹配 A、B、C</span><br><span class="line">    -   [\u4e00-\u9fa5]: 匹配中文</span><br><span class="line">-   <span class="string">`\d`</span>:匹配纯数字，<span class="string">`\D`</span>取反</span><br><span class="line">-   <span class="string">`\w`</span>:数字字母下划线，<span class="string">`\W`</span>取反</span><br><span class="line">-   <span class="string">`\s`</span>:任意空白字符,<span class="string">`\S`</span>取反，非空白字符</span><br><span class="line">-   <span class="string">`.`</span>:匹配处理回车<span class="string">`\n`</span>外任意单个字符 =&gt; 任意单字符<span class="string">`[^]`</span></span><br></pre></td></tr></table></figure><h4 id="差多少-限定符"><a href="#差多少-限定符" class="headerlink" title="差多少(限定符)"></a>差多少(限定符)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`*`</span>:匹配前面次数 <span class="number">0</span> 次或多次&#123;<span class="number">0</span>,&#125;,<span class="string">`.*`</span>任意多次任意字符</span><br><span class="line">-   <span class="string">`+`</span>:匹配前面次数 <span class="number">1</span> 次或多次&#123;<span class="number">1</span>,&#125;</span><br><span class="line">-   <span class="string">`?`</span>:匹配前面次数 <span class="number">0</span> 次或 <span class="number">1</span> 次</span><br><span class="line">-   <span class="string">`&#123;n&#125;`</span>:n 次</span><br><span class="line">-   <span class="string">`&#123;n,&#125;`</span>:至少 n 次</span><br><span class="line">-   <span class="string">`&#123;n,m&#125;`</span>:n 次到 m 次</span><br></pre></td></tr></table></figure><h4 id="从哪差-定位符"><a href="#从哪差-定位符" class="headerlink" title="从哪差(定位符)"></a>从哪差(定位符)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`^`</span>:<span class="string">`[]`</span>外，匹配字符串开始位置</span><br><span class="line">-   <span class="string">`$`</span>:匹配字符串结束位置</span><br><span class="line">-   <span class="string">`\b`</span>:匹配单词边界(小数点也是单词边界)</span><br><span class="line">    -   <span class="string">`/\b\zhong\b/.test(&quot;liao zhong 123&quot;)`</span>:匹配字符串中是否有 zhong，并且是单词</span><br><span class="line">-   <span class="string">`\B`</span>:匹配非单词边界</span><br><span class="line">    -   <span class="string">`/\B\zhong\B/.test(&quot;liaozhong123&quot;)`</span>:匹配字符串中是否有 zhong，并且是不能是单词</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`\`:反斜杠，转义使特殊字符变成普通字符，`</span>\.<span class="string">`这里的.只能代表.</span></span><br><span class="line"><span class="string">-   `</span>|<span class="string">`:或，(a|b|c)</span></span><br></pre></td></tr></table></figure><h3 id="Es6-正则"><a href="#Es6-正则" class="headerlink" title="Es6 正则"></a>Es6 正则</h3><h4 id="es6正则扩展"><a href="#es6正则扩展" class="headerlink" title="es6正则扩展"></a>es6正则扩展</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-    <span class="string">`new RegExp(/xyz/ig,&quot;i&quot;)`</span>：/xyz/i i覆盖ig</span><br><span class="line">-    <span class="string">`u`</span>:修饰符 </span><br><span class="line">    -   使<span class="string">`.`</span>，或其他符号可以识别\uFFFF外的字符 <span class="string">`/^.$/u.test(&quot;𠮷&quot;)`</span> <span class="string">`/^\S$/.test(&#x27;𠮷&#x27;)`</span></span><br><span class="line">    -   <span class="string">`/\u&#123;61&#125;/u.test(&#x27;a&#x27;)`</span> <span class="comment">// true</span></span><br><span class="line">    -   无效转义报错 <span class="string">`/\,/u.test(&#x27;,&#x27;)`</span> 本来就不需要转</span><br><span class="line">    -   通过 <span class="string">`/xxx/.unicode`</span> 查看是否设置了u字符</span><br><span class="line">-   <span class="string">`y`</span>:粘连（sticky）修饰符。 </span><br><span class="line">    -   后一次匹配都从上一次匹配成功的下一个位置开始。(第一次必须首位开始,或者通过<span class="string">`reg.lastIndex`</span>设置起始匹配位置)</span><br><span class="line">    -   与g类似，试试y匹配的是一次或多次连续符合规则的字符</span><br><span class="line">    -   类似于在每次匹配前面加了 ^</span><br><span class="line">    -   <span class="string">`reg.sticky`</span> 查看是否设置了y</span><br><span class="line">-   <span class="string">`s`</span>:<span class="string">`.`</span>默认不包括<span class="string">`行终止符`</span>,加s就可以包括 (<span class="title class_">ES2018</span> dotAll模式)</span><br><span class="line">        -   U+000A 换行符（\n）</span><br><span class="line">        -   U+000D 回车符（\r）</span><br><span class="line">        -   U+<span class="number">2028</span> 行分隔符（line separator）</span><br><span class="line">        -   U+<span class="number">2029</span> 段分隔符（paragraph separator）</span><br><span class="line">        -   <span class="string">`res.dotAll`</span> 查看是否处在dotAll模式 </span><br><span class="line">-   <span class="string">`/abc/ig.flags`</span>:es6 返回正则表达式的修饰符</span><br><span class="line">-   <span class="string">`\p&#123;...&#125;`</span>: 匹配某一类<span class="title class_">Unicode</span>字符</span><br></pre></td></tr></table></figure><h4 id="具名组匹配"><a href="#具名组匹配" class="headerlink" title="具名组匹配"></a>具名组匹配</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-   `/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/.exec(<span class="string">&#x27;1999-12-31&#x27;</span>).groups.year;`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-   <span class="built_in">let</span> re = /(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/u;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-   <span class="string">&#x27;2015-01-02&#x27;</span>.replace(re, <span class="string">&#x27;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#x27;</span>)</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值和替换"><a href="#解构赋值和替换" class="headerlink" title="解构赋值和替换"></a>解构赋值和替换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;2015-01-02&#x27;</span>.<span class="title function_">replace</span>(re, <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    matched, <span class="comment">// 整个匹配结果 2015-01-02</span></span></span></span><br><span class="line"><span class="params"><span class="function">    capture1, <span class="comment">// 第一个组匹配 2015</span></span></span></span><br><span class="line"><span class="params"><span class="function">    capture2, <span class="comment">// 第二个组匹配 01</span></span></span></span><br><span class="line"><span class="params"><span class="function">    capture3, <span class="comment">// 第三个组匹配 02</span></span></span></span><br><span class="line"><span class="params"><span class="function">    position, <span class="comment">// 匹配开始的位置 0</span></span></span></span><br><span class="line"><span class="params"><span class="function">    S, <span class="comment">// 原字符串 2015-01-02</span></span></span></span><br><span class="line"><span class="params"><span class="function">    groups <span class="comment">// 具名组构成的一个对象 &#123;year, month, day&#125;</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;day, month, year&#125; = groups;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;day&#125;</span>/<span class="subst">$&#123;month&#125;</span>/<span class="subst">$&#123;year&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>引用 <code>\k&lt;组名&gt;</code> 功能以前的\1效果一样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;$/.<span class="title function_">test</span>(<span class="string">&#x27;abc!abc&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>匹配索引 reg.exec(str).indices <code>暂时不支持使用</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="string">&quot;xaaaz&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> m1 = re1.<span class="title function_">exec</span>(s1);</span><br><span class="line">m1.<span class="property">indices</span>[<span class="number">0</span>][<span class="number">0</span>] === <span class="number">1</span>;</span><br><span class="line">m1.<span class="property">indices</span>[<span class="number">0</span>][<span class="number">1</span>] === <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次匹配起始结束 位置 第三阶段提案， https://github.com/tc39/proposal-regexp-match-Indices</span></span><br></pre></td></tr></table></figure><blockquote><p>一次性取出所有匹配</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&#x27;test1test2test3&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/t(e)(st(\d?))/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">matchAll</span>(regex)) <span class="comment">//返回一个 Iterator遍历器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> string.<span class="title function_">matchAll</span>(regex)) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linux-正则-与-通配符"><a href="#linux-正则-与-通配符" class="headerlink" title="linux 正则 与 通配符"></a>linux 正则 与 通配符</h3><blockquote><p>linux 指令中一般操作文件路径的用<code>通配符</code>,如:find，ls，cp 等,操作文件内容的用<code>正则</code>,如 grep</p></blockquote><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`*`</span>：匹配零或多个任意字符</span><br><span class="line">-   <span class="string">`?`</span>:匹配任意单个字符</span><br><span class="line">-   <span class="string">`[]`</span>：指定中括号内的多个字符，如：[rwc]或[r,w,c]都行</span><br><span class="line">-   <span class="string">`[^]或[!]`</span>：除了中括号内字符外匹配任一个字符</span><br><span class="line">-   <span class="string">`&#123;a,b,c&#125;/&#123;a..z&#125;`</span>:a 或 b 或 c / a 到 z</span><br></pre></td></tr></table></figure><h4 id="linux-正则"><a href="#linux-正则" class="headerlink" title="linux 正则"></a>linux 正则</h4><p><a href="https://www.linuxprobe.com/linux-regular-expression.html">文章</a><br><a href="https://www.linuxprobe.com/docs/LinuxProbe.pdf">pdf</a></p><blockquote><p>匹配内容用正则，匹配文件名用通配符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-   元字符(<span class="variable constant_">BRE</span> 基本字符)</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`*`</span>：匹配前面的字符零次或多次</span><br><span class="line">    -   <span class="string">`.`</span>：匹配任意一个字符</span><br><span class="line">    -   <span class="string">`[]`</span>：和通配符完全一样</span><br><span class="line">    -   <span class="string">`[^]`</span>：和通配符一样，但是没有[!]的写法</span><br><span class="line">    -   <span class="string">`^h、$h、\&lt;h、h\&gt;`</span>:行头 h、行尾 h、h 开头的单词、h 结束的单词</span><br><span class="line"></span><br><span class="line">-   特殊含义扩展元字符(扩展正则正常使用，默认需要加\，加上功能参数-e既可以不需要\了)</span><br><span class="line">    -   <span class="string">`?`</span>：前面的字符零次或一次，基本正则是?  好像没有</span><br><span class="line">    -   <span class="string">`+`</span>：前面的字符至少一次，基本正则是+</span><br><span class="line">    -   <span class="string">`|`</span>: 或</span><br><span class="line">    -   <span class="string">`()`</span></span><br><span class="line">    -   <span class="string">`&#123;&#125;`</span></span><br><span class="line">-   默认正则</span><br><span class="line">    -   特殊含义字符<span class="string">`默认没有功能`</span>,加上\才是功能元字符</span><br><span class="line">    -   ?、+、&#123;&#125;、()、、、需要反斜杠\，</span><br><span class="line">        -   <span class="string">`ro\?t`</span>(r 开头 t 结尾，o 可有可无)</span><br><span class="line">        -   <span class="string">`ro\+t`</span>(r 开头 t 结尾，o 至少一次，root、rot)</span><br><span class="line">-   扩展正则</span><br><span class="line">    -   把有特殊含义的符号，<span class="string">`默认拥有功能`</span>，如果要匹配字符要加上\转义</span><br><span class="line">    -   各个命令开启方式</span><br><span class="line">        -   <span class="attr">grep</span>: 一般 <span class="string">`-E参数`</span> 或 egrep 开启扩展正则</span><br><span class="line">    -   扩展正则新增操作</span><br><span class="line">        -   grep -E <span class="string">&quot;reg1|reg2&quot;</span></span><br><span class="line">-   其他</span><br><span class="line">    -   <span class="string">`=~`</span>:判断变量是否符合正则(<span class="string">`num=10;[[ $num =~ [0-9]&#123;2&#125; ]]`</span>)</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><blockquote><p>判断回文字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">huiwenVis</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="comment">//判断是否回文字符串，通过反向引用\n判断最后一个是否为第一个字符，中间类推</span></span><br><span class="line">    <span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(str.<span class="property">length</span> / <span class="number">2</span>) &#125;);</span><br><span class="line">    <span class="keyword">const</span> regExpStr = arr</span><br><span class="line">        .<span class="title function_">fill</span>(<span class="string">&quot;(.)&quot;</span>)</span><br><span class="line">        .<span class="title function_">concat</span>(str.<span class="property">length</span> % <span class="number">2</span> ? [<span class="string">&quot;.&quot;</span>] : [])</span><br><span class="line">        .<span class="title function_">concat</span>(arr.<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> <span class="string">`\\<span class="subst">$&#123;arr.length - index&#125;</span>`</span>))</span><br><span class="line">        .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^<span class="subst">$&#123;regExpStr&#125;</span>$`</span>).<span class="title function_">test</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">huiwenVis</span>(<span class="string">&quot;abccba&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他方法: x.toString() === x.toString().split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span></span><br></pre></td></tr></table></figure><blockquote><p>ip 端口地址验证</p></blockquote><blockquote><p>解析 rul</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = <span class="string">&quot;https://www.baidu.com?a=1&amp;b=2&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> q = &#123;&#125;;</span><br><span class="line">urls.<span class="title function_">replace</span>(<span class="regexp">/([^?&amp;=]+)=([^&amp;]+)/g</span>, <span class="function">(<span class="params">_, k, v</span>) =&gt;</span> (q[k] = v));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(q);</span><br></pre></td></tr></table></figure><blockquote><p>数字分割</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(?!$) 后面不能是结束位置</span></span><br><span class="line"><span class="string">&#x27;1234567890&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/\d&#123;3&#125;(?!$)/g</span>,<span class="function">(<span class="params">a</span>)=&gt;</span>a+<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (?=(p)) 匹配找到 符合p子模式 前面的 那个位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;18060849356&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/(?=(\d&#123;3&#125;)+$)/g</span>,<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// 3的倍数字符串 第一位也会替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从左往右以贪婪模式匹配以三个数字为一组(重复n&gt;=1次)结尾的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;18060849356&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span>,<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &quot;123&quot;</span></span><br><span class="line"><span class="comment"> * \b它匹配的是一个位置，如同^和$代表字符串开头和结束的位置</span></span><br><span class="line"><span class="comment"> * \B 非单词边界, \B 匹配的的是1~2，2~3直接的位置 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * (?=) =&gt; x(?=y) 就是说x后面是y我们才去匹配x</span></span><br><span class="line"><span class="comment"> *      所以这边 (?=(\d&#123;3&#125;)+) 要的是后面存在 3的倍数 个数字的那个位置  </span></span><br><span class="line"><span class="comment"> *          所以 &#x27;18060849356&#x27;.replace(/\B(?=(\d&#123;3&#125;)+)/g, &#x27;-&#x27;) 结果是 1-8-0-6-0-8-4-9-356 </span></span><br><span class="line"><span class="comment"> *          9~3 之间后面是 356</span></span><br><span class="line"><span class="comment"> *          4~9 之间后面是 935</span></span><br><span class="line"><span class="comment"> *          0~8 之间后面是 849356  </span></span><br><span class="line"><span class="comment"> *          所以我们还要去掉那些，不是三个数字的间隔符</span></span><br><span class="line"><span class="comment"> * (?=(\d&#123;3&#125;)+(?!\d)) 是说 </span></span><br><span class="line"><span class="comment"> *    要的是后面存在 3的倍数 个数字的那个位置,并且这个 3的倍数 字符串后面不能是数字</span></span><br><span class="line"><span class="comment"> *    这边不是数字的只有结尾</span></span><br><span class="line"><span class="comment"> *    所以只有 符合\B条件的位置，后面的所有/3 要没有余数才行，否则它后面 3倍数字符串 后面就是余数，是数字，就不符合 (?!\d)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  所有上面 用 $ 代替 (?!\d) 的方案，如果最后三个中有其他符号，是无法替换的，最后三个不符合\d&#123;3&#125;, 没有三个数字后面是结尾位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;18060849356&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">&#x27;2&#x27;</span>)); </span><br></pre></td></tr></table></figure><blockquote><p>去除字符串中多出指定规则的内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同时去除字符串前两位与后四位</span></span><br><span class="line"><span class="string">&#x27;12werty5678&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/^\w&#123;2&#125;|\w&#123;4&#125;$/g</span>,<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>判断单词是否由其他指定字符串组成</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(hello|word|add)&#123;<span class="number">1</span>,&#125;$/.<span class="title function_">test</span>(<span class="string">&#x27;helloword&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>指定字符变色</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item.<span class="property">value</span> = <span class="string">&#x27;xxxxabcxxxx&#x27;</span></span><br><span class="line"><span class="keyword">let</span> word = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">let</span> beflen = number;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`(?&lt;=.&#123;<span class="subst">$&#123;beflen&#125;</span>&#125;)<span class="subst">$&#123;word&#125;</span>`</span>);</span><br><span class="line">item.<span class="property">htmtmp</span> = item.<span class="property">value</span>.<span class="title function_">replace</span>(reg,<span class="function">(<span class="params">item</span>)=&gt;</span><span class="string">`&lt;span style=&quot;color:#f00;font-weight: bold;&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/span&gt;`</span>);</span><br></pre></td></tr></table></figure><blockquote><p>split</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不保留符号</span></span><br><span class="line"><span class="string">&quot;split&gt;=1xx&lt;=2xx&amp;&amp;3xx&quot;</span>.<span class="title function_">split</span>(<span class="regexp">/&gt;=|&lt;=|&amp;&amp;/</span>) <span class="comment">// [&#x27;split&#x27;, &#x27;1xx&#x27;, &#x27;2xx&#x27;, &#x27;3xx&#x27;]</span></span><br><span class="line"><span class="comment">// 保留符号</span></span><br><span class="line"><span class="string">&quot;split&gt;=1xx&lt;=2xx&amp;&amp;3xx&quot;</span>.<span class="title function_">split</span>(<span class="regexp">/(&gt;=|&lt;=|&amp;&amp;)&#123;1&#125;/</span>) <span class="comment">// [&#x27;split&#x27;, &#x27;&gt;=&#x27;, &#x27;1xx&#x27;, &#x27;&lt;=&#x27;, &#x27;2xx&#x27;, &#x27;&amp;&amp;&#x27;, &#x27;3xx&#x27;]</span></span><br><span class="line"><span class="comment">// 优先级</span></span><br><span class="line"><span class="string">&quot;split&gt;=111=222&gt;=333&quot;</span>.<span class="title function_">split</span>(<span class="regexp">/(&gt;=|=)&#123;1&#125;/</span>) <span class="comment">//[&#x27;split&#x27;, &#x27;&gt;=&#x27;, &#x27;111&#x27;, &#x27;=&#x27;, &#x27;222&#x27;, &#x27;&gt;=&#x27;, &#x27;333&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a><a href="https://www.habaijian.com/">ASCII</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="title class_">Unicode</span>-中文 [\u4e00-\u9fa5] 专注于简体 </span><br><span class="line">    -   经测试 [\u4e00-\u9fe6] 都是汉字 =&gt; 9fa5龥 、9fa6龦</span><br><span class="line">    -   经测试 [\u9fe7-\u9FFF] 都是空白 </span><br><span class="line">    -   所以说 [\u4e00-\u9FFF] 验证中文都是可以的</span><br><span class="line">-   十进制为<span class="number">0</span>到<span class="number">255</span>的字符 [\x00-\xFF]</span><br><span class="line">    -   字符串字节长度 str.<span class="title function_">replace</span>(<span class="regexp">/[^\x00-\xFF]/g</span>,<span class="string">&#x27;**&#x27;</span>).<span class="property">length</span>; </span><br><span class="line">    -   十六进制表示范围最大是<span class="number">0</span>-<span class="number">255</span> [\x00-\xFF] =&gt; 和 [\u0000-\u00FF] 是一样的</span><br><span class="line">    -   超过<span class="number">255</span>的如 <span class="string">`/[\x100]/.test(&#x27;   &#x27;)`</span> = <span class="literal">false</span>; <span class="string">`/[\u0100]/.test(&#x27;Ā&#x27;)`</span> = <span class="literal">true</span>;</span><br><span class="line">-   unicode的字符编码和utf-<span class="number">8</span>的存储编码表示是不同的</span><br><span class="line">    ![utf8转换](../../<span class="keyword">static</span>/img/<span class="number">20201231182051351.</span>png)</span><br><span class="line">-   utf-<span class="number">8</span>是变长的,<span class="variable constant_">UTF</span>规定：</span><br><span class="line">    -   <span class="string">`如果一个符号只占一个字节，那么这个8位字节的第一位就为0`</span> </span><br><span class="line">        -   **有效比特位 &lt;=<span class="number">7</span> 的unicode的字符编码二进制** [\u0000-\u007F]</span><br><span class="line">        -   如 <span class="number">0041</span> 的二进制位 <span class="number">00000000</span> <span class="number">01000001</span>    =&gt; <span class="string">&quot;A&quot;</span></span><br><span class="line">            -   <span class="number">01000001</span>  utf-<span class="number">8</span></span><br><span class="line"></span><br><span class="line">    -   <span class="string">`如果为两个字节，那么规定第一个字节的前两位都为1，然后第一个字节的第三位为0，第二个字节的前两位为10`</span></span><br><span class="line">        -  **有效比特位 &gt;<span class="number">7</span> &amp;&amp; &lt;=<span class="number">11</span> 的unicode的字符编码二进制** [\u0080-\u07FF]</span><br><span class="line">        - 如 00FF 的二进制位 <span class="number">00000000</span> <span class="number">11111111</span>  =&gt; <span class="string">&quot;ÿ&quot;</span></span><br><span class="line">            -   拆分 <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> (<span class="title class_">Unicode</span>字符编码)</span><br><span class="line">            -   拆分 <span class="number">1100</span> <span class="number">0011</span> <span class="number">1011</span> <span class="number">1111</span> = <span class="title function_">C3BF</span>(转<span class="variable constant_">UTF</span>-<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`然后如果是三个字节的话，那么第一个字节的前三位为111，第四位为0，剩余的两个字节的前两位都为10。`</span></span><br><span class="line">        -  **有效比特位 &gt;<span class="number">11</span> &amp;&amp; &lt;=<span class="number">16</span> 的unicode的字符编码二进制** [\u0800-\uFFFF]</span><br><span class="line">        -   如 <span class="number">4E25</span> 的二进制位 <span class="number">0100</span>,<span class="number">1110</span>,<span class="number">0010</span>,<span class="number">0101</span></span><br><span class="line">            -   拆分      <span class="number">0100</span>   <span class="number">11</span> <span class="number">1000</span>   <span class="number">10</span> <span class="number">0101</span>  (<span class="title class_">Unicode</span>字符编码)</span><br><span class="line">            -   拆分 <span class="number">1110</span> <span class="number">0100</span> <span class="number">1011</span> <span class="number">1000</span> <span class="number">1010</span> <span class="number">0101</span>  = <span class="variable constant_">E4B8A5</span> (转<span class="variable constant_">UTF</span>-<span class="number">8</span>)</span><br><span class="line">                    补四      补<span class="number">10</span>      补<span class="number">10</span></span><br><span class="line">    -   四个字节 有效比特位 &lt;=<span class="number">21</span></span><br><span class="line">    -   五个字节 有效比特位 &lt;=<span class="number">26</span></span><br><span class="line">    -   六个字节 有效比特位 &lt;=<span class="number">31</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Shell </tag>
            
            <tag> script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js工具函数</title>
      <link href="/2023/01/01/web/JavaScript/utils/util-js/"/>
      <url>/2023/01/01/web/JavaScript/utils/util-js/</url>
      
        <content type="html"><![CDATA[<h3 id="Array-相关"><a href="#Array-相关" class="headerlink" title="Array 相关"></a>Array 相关</h3><h4 id="sort-计算最大元素"><a href="#sort-计算最大元素" class="headerlink" title="sort 计算最大元素"></a>sort 计算最大元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:获取数组中的最大数字</span></span><br><span class="line"><span class="comment"> * 描述:sort 返回值(b - a)大于0 则交换元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">maxItemOfArray</span> = (<span class="params">arr</span>) =&gt; arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> maxItem = <span class="title function_">maxItemOfArray</span>([<span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">5</span>]); <span class="comment">//12</span></span><br></pre></td></tr></table></figure><h4 id="reduce-计算平均值"><a href="#reduce-计算平均值" class="headerlink" title="reduce 计算平均值"></a>reduce 计算平均值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:求给定数字的平均值</span></span><br><span class="line"><span class="comment"> * 描述:...args 收集所有参数类数组, 收集剩余参数 show(a,b,...args)</span></span><br><span class="line"><span class="comment"> *      args.reduce((a初始值, 或者计算结束后的返回值, b当前元素) =&gt; a + b, 传递给函数的初始值)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">averageOf</span> = (<span class="params">...args</span>) =&gt; args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>) / args.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">let</span> average = <span class="title function_">averageOf</span>(<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>); <span class="comment">// 4.5</span></span><br></pre></td></tr></table></figure><h4 id="every-判断所有元素相等"><a href="#every-判断所有元素相等" class="headerlink" title="every 判断所有元素相等"></a>every 判断所有元素相等</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:检查数组的所有项是否相等</span></span><br><span class="line"><span class="comment"> * 描述:方法用于检测数组所有元素是否都符合指定条件 ,一个不满足，则返回 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">areAllEqual</span> = (<span class="params">array</span>) =&gt; array.<span class="title function_">every</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item === array[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">let</span> check1 = <span class="title function_">areAllEqual</span>([<span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="filter-清除空元素"><a href="#filter-清除空元素" class="headerlink" title="filter 清除空元素"></a>filter 清除空元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:从数组中删除false值，包括false，undefined，NaN，empty</span></span><br><span class="line"><span class="comment"> * 描述:arr.filter 返回检测通过(返回值为true)的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">rmFalseVal</span> = (<span class="params">arr</span>) =&gt; arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item);</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title function_">rmFalseVal</span>([<span class="number">3</span>, <span class="number">4</span>, <span class="literal">false</span>, <span class="string">&quot;&quot;</span>, <span class="number">5</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="title class_">NaN</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="number">0</span>]); <span class="comment">// [3, 4, 5, true, &quot;0&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="new-Set-数组去重"><a href="#new-Set-数组去重" class="headerlink" title="new Set() 数组去重"></a><strong>new Set()</strong> 数组去重</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:从数组中删除重复的项</span></span><br><span class="line"><span class="comment"> * 描述:Set 结构成员不会添加重复的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removeDuplicatedValues</span> = (<span class="params">array</span>) =&gt; [...<span class="keyword">new</span> <span class="title class_">Set</span>(array)];</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title function_">removeDuplicatedValues</span>([<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>]); <span class="comment">// [5, 3, 2, 6, 1]</span></span><br></pre></td></tr></table></figure><h4 id="删除数组指定元素"><a href="#删除数组指定元素" class="headerlink" title="删除数组指定元素"></a>删除数组指定元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:删除数组中指定元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removeAaaryObj</span> = (<span class="params">arr, el</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> array = [];</span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item != el) &#123;</span><br><span class="line">      array.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arrayre = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cad&quot;</span>];</span><br><span class="line"><span class="title function_">removeAaaryObj</span>(arrayre, <span class="string">&quot;ab&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="数组乱序"><a href="#数组乱序" class="headerlink" title="数组乱序"></a>数组乱序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shuffleArray</span> = (<span class="params">arr</span>) =&gt; arr.<span class="title function_">sort</span>(<span class="function">() =&gt;</span> <span class="number">0.5</span> - <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">shuffleArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="指定字符替换"><a href="#指定字符替换" class="headerlink" title="指定字符替换"></a>指定字符替换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">findAndReplace</span> = (<span class="params">string, old, newchar</span>) =&gt;</span><br><span class="line">  string.<span class="title function_">split</span>(old).<span class="title function_">join</span>(newchar);</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">findAndReplace</span>(<span class="string">&quot;I like banana&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;g&quot;</span>); <span class="comment">// I like apple</span></span><br></pre></td></tr></table></figure><h4 id="指定字符串两边添加"><a href="#指定字符串两边添加" class="headerlink" title="指定字符串两边添加"></a>指定字符串两边添加</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">findAndAdd</span> = (<span class="params">s, o, l, r</span>) =&gt;</span><br><span class="line">  s.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(o, <span class="string">&quot;g&quot;</span>), <span class="function">(<span class="params">item</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;l&#125;</span><span class="subst">$&#123;item&#125;</span><span class="subst">$&#123;r&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">findAndAdd</span>(<span class="string">&quot;I like banana&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>); <span class="comment">// &quot;I like b&lt;a&gt;n&lt;a&gt;n&lt;a&gt;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过数组 reverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reverseString</span> = (<span class="params">str</span>) =&gt; [...str].<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">reverseString</span>(<span class="string">&quot;Have a nice day!&quot;</span>); <span class="comment">// !yad ecin a eva</span></span><br></pre></td></tr></table></figure><h4 id="首字母大小"><a href="#首字母大小" class="headerlink" title="首字母大小"></a>首字母大小</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:将字符串中所有单词的第一个字母大写</span></span><br><span class="line"><span class="comment"> * 描述: \b 匹配单词开头或结尾 ，/\b[a-z0-9]/g 匹配单词-&gt; 取一位 -&gt;所有单词</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">capitalizeAllWords</span> = (<span class="params">str</span>) =&gt;</span><br><span class="line">  str.<span class="title function_">replace</span>(<span class="regexp">/\b[a-z]/g</span>, <span class="function">(<span class="params">char</span>) =&gt;</span> char.<span class="title function_">toUpperCase</span>());</span><br><span class="line"><span class="keyword">let</span> claw = <span class="title function_">capitalizeAllWords</span>(<span class="string">&quot;i love reading book&quot;</span>); <span class="comment">// I Love Reading Book</span></span><br></pre></td></tr></table></figure><h4 id="指定规则分割字符串"><a href="#指定规则分割字符串" class="headerlink" title="指定规则分割字符串"></a>指定规则分割字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:字符串转换为单词数组</span></span><br><span class="line"><span class="comment"> * 描述:split(regexp) 只要匹配的字符都当做切割符号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toWords</span> = (<span class="params">string, pattern = /[^a-zA-Z-]+/</span>) =&gt; string.<span class="title function_">split</span>(pattern);</span><br><span class="line"><span class="keyword">let</span> words = <span class="title function_">toWords</span>(<span class="string">&quot;I 5 5 wa5nt to be55 come a great false nan programm5er&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="清除字符串两边空格"><a href="#清除字符串两边空格" class="headerlink" title="清除字符串两边空格"></a>清除字符串两边空格</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">trim</span> = (<span class="params">str</span>) =&gt; str.<span class="title function_">replace</span>(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="判断字符串-JSON"><a href="#判断字符串-JSON" class="headerlink" title="判断字符串 JSON"></a>判断字符串 JSON</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:字符串是否是有效的JSON</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isValidJSON</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// JSON.parse(str) 会通过 123 &quot;123&quot; 数组</span></span><br><span class="line">      <span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line">      <span class="comment">// 数组 &#x27;[object Array]&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) == <span class="string">&quot;[object Object]&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> ivjson1 = <span class="title function_">isValidJSON</span>(<span class="string">&quot;1&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> ivjson2 = <span class="title function_">isValidJSON</span>(<span class="string">&#x27;&#123;&quot;title&quot;: &quot;javascript&quot;, &quot;price&quot;: 14&#125;&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> ivjson3 = <span class="title function_">isValidJSON</span>(<span class="string">&#x27;&#123;&quot;title&quot;: &quot;javascript&quot;, &quot;price&quot;: 14, subtitle&#125;&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="字符串高亮"><a href="#字符串高亮" class="headerlink" title="字符串高亮"></a>字符串高亮</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;font&quot;</span>；</span><br><span class="line"><span class="keyword">let</span> item = &#123;<span class="attr">name</span>:<span class="string">&#x27;itemfonttmp&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`[<span class="subst">$&#123;name&#125;</span>]&#123;1&#125;`</span>,<span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">item.<span class="property">highlight</span> = item.<span class="property">name</span>.<span class="title function_">replace</span>(reg,<span class="function">(<span class="params">item</span>)=&gt;</span><span class="string">`&lt;span style=&quot;color:#f00&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/span&gt;`</span>);</span><br></pre></td></tr></table></figure><h4 id="解析-query"><a href="#解析-query" class="headerlink" title="解析 query"></a>解析 query</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getParameters</span> = (<span class="params">URL</span>) =&gt;</span><br><span class="line">  <span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">    <span class="string">`&#123;&quot;<span class="subst">$&#123;<span class="built_in">decodeURI</span>(URL.split(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>])</span></span></span><br><span class="line"><span class="subst"><span class="string">      .replace(/<span class="string">&quot;/g, &#x27;\\&quot;</span><span class="string">&#x27;)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      .replace(/&amp;/g, &#x27;</span><span class="string">&quot;,&quot;</span><span class="string">&#x27;)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      .replace(/=/g, &#x27;</span><span class="string">&quot;:&quot;</span><span class="string">&#x27;)&#125;&quot;&#125;`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  );</span></span></span></span><br></pre></td></tr></table></figure><h4 id="单词首字母大写"><a href="#单词首字母大写" class="headerlink" title="单词首字母大写"></a>单词首字母大写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">tuc</span> = (<span class="params">str</span>) =&gt; str.<span class="title function_">replace</span>(<span class="regexp">/(?=\b)\w/g</span>, <span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="title function_">toUpperCase</span>());</span><br><span class="line"><span class="title function_">tuc</span>(<span class="string">&quot;follow for more&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Math-相关"><a href="#Math-相关" class="headerlink" title="Math 相关"></a>Math 相关</h3><h4 id="指定范围随机数"><a href="#指定范围随机数" class="headerlink" title="指定范围随机数"></a>指定范围随机数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过最小范围 + 最大减最小所得到的随机数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomNum</span> = (<span class="params">min, max</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(min + <span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">randomNum</span>(<span class="number">5</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure><h4 id="随机颜色"><a href="#随机颜色" class="headerlink" title="随机颜色"></a>随机颜色</h4><ul><li><p><strong>0x1000000</strong>: <code>#ffffff + 1</code> (16777216)</p></li><li><p><strong>&lt;&lt; 0</strong>：去除小数(按位运算内部会调用<strong>Call <a href="http://bclary.com/2004/11/07/#a-9.5">ToInt32()</a></strong>,里面有调用一个 <code>floor(x)&#123;return x-(x % 1)&#125;</code>)</p></li><li><p><strong>.slice(-6)</strong>: 补 0,从后面截取 6 位数</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">randomColor</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="string">&quot;#&quot;</span> + (<span class="string">&quot;00000&quot;</span> + ((<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">0x1000000</span>) &lt;&lt; <span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">slice</span>(-<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">randomColor</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomHexColor</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="string">`#<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">    .toString(<span class="number">16</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">    .padEnd(<span class="number">6</span>, <span class="string">&quot;0&quot;</span>)&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">randomHexColor</span>());</span><br></pre></td></tr></table></figure><h4 id="RGB-转十六进制"><a href="#RGB-转十六进制" class="headerlink" title="RGB 转十六进制"></a>RGB 转十六进制</h4><ul><li><strong>padStart(6, “0”)</strong>:不足六位的值 用 0 在前面填充到六位</li><li><strong>位置调整</strong>:<code>(r &lt;&lt; 16) + (g &lt;&lt; 8) + b</code>( r 移到 56 位置，g 移动 34 位置，b 12 位置不变 )</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">RGBToHex</span> = (<span class="params">r, g, b</span>) =&gt;</span><br><span class="line">  ((r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">6</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> hex = <span class="title class_">RGBToHex</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>); <span class="comment">// ffffff</span></span><br></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="检测对象是否为空"><a href="#检测对象是否为空" class="headerlink" title="检测对象是否为空 {}"></a>检测对象是否为空 {}</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reflect.ownKeys(obj) 获取对象自身的属性键组成的数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isEmpty</span> = (<span class="params">obj</span>) =&gt;</span><br><span class="line">  <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="property">length</span> === <span class="number">0</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br></pre></td></tr></table></figure><h3 id="Date-相关"><a href="#Date-相关" class="headerlink" title="Date 相关"></a>Date 相关</h3><h4 id="直接获取时间"><a href="#直接获取时间" class="headerlink" title="直接获取时间"></a>直接获取时间</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:返回时间</span></span><br><span class="line"><span class="comment"> * 描述:date.toTimeString   11:19:44 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">    console.log(new Date(1597894083000).toLocaleString())      // 2020/8/20 上午11:26:29</span></span><br><span class="line"><span class="comment">       console.log(new Date().toLocaleTimeString())</span></span><br><span class="line"><span class="comment">    console.log(new Date(1597894083000).toLocaleDateString())  // 2020/8/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getTimeFromDate</span> = (<span class="params">date</span>) =&gt; date.<span class="title function_">toTimeString</span>().<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">let</span> time1 = <span class="title function_">getTimeFromDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// 09:46:08</span></span><br></pre></td></tr></table></figure><h4 id="通过日期查询-年终天数"><a href="#通过日期查询-年终天数" class="headerlink" title="通过日期查询 年终天数"></a>通过日期查询 年终天数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">dayOfYear</span> = (<span class="params">date</span>) =&gt;</span><br><span class="line">  <span class="title class_">Math</span>.<span class="title function_">floor</span>((date - <span class="keyword">new</span> <span class="title class_">Date</span>(date.<span class="title function_">getFullYear</span>(), <span class="number">0</span>, <span class="number">0</span>)) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line"><span class="title function_">dayOfYear</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br></pre></td></tr></table></figure><h3 id="Number-相关"><a href="#Number-相关" class="headerlink" title="Number 相关"></a>Number 相关</h3><h4 id="判断是否数组"><a href="#判断是否数组" class="headerlink" title="判断是否数组"></a>判断是否数组</h4><blockquote><p>isFinite、parseFloat、Number</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:验证数字是否有效</span></span><br><span class="line"><span class="comment"> * 描述: parseFloat(n) 第一个字符不能被转换为数字，那么会返回 NaN,否则返回第一个数值</span></span><br><span class="line"><span class="comment"> isFinite(n) number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。</span></span><br><span class="line"><span class="comment"> Number(n) 将对象转数字</span></span><br><span class="line"><span class="comment"> Number(Infinity) === Infinity //true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isValidNumber</span> = (<span class="params">n</span>) =&gt;</span><br><span class="line">  !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n) &amp;&amp; <span class="title class_">Number</span>(n) === n;</span><br><span class="line"><span class="keyword">let</span> ivn = <span class="title function_">isValidNumber</span>(<span class="number">10</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> ivn2 = <span class="title function_">isValidNumber</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="环境判断相关"><a href="#环境判断相关" class="headerlink" title="环境判断相关"></a>环境判断相关</h3><h4 id="判断是否是手机"><a href="#判断是否是手机" class="headerlink" title="判断是否是手机"></a>判断是否是手机</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">isMobile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>)</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检测设备类型"><a href="#检测设备类型" class="headerlink" title="检测设备类型"></a>检测设备类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">judgeDeviceType</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini/i</span>.<span class="title function_">test</span>(</span><br><span class="line">    navigator.<span class="property">userAgent</span></span><br><span class="line">  )</span><br><span class="line">    ? <span class="string">&quot;Mobile&quot;</span></span><br><span class="line">    : <span class="string">&quot;PC&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="浏览器选项卡是否激活"><a href="#浏览器选项卡是否激活" class="headerlink" title="浏览器选项卡是否激活"></a>浏览器选项卡是否激活</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isTabActive</span> = (<span class="params"></span>) =&gt; !<span class="variable language_">document</span>.<span class="property">hidden</span>;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="获取选择的文本"><a href="#获取选择的文本" class="headerlink" title="获取选择的文本"></a>获取选择的文本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSelectedText</span> = (<span class="params"></span>) =&gt; <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>();</span><br><span class="line"><span class="title function_">getSelectedText</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Web </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 基础</title>
      <link href="/2023/01/01/web/vue/vue-vue3-coderw/"/>
      <url>/2023/01/01/web/vue/vue-vue3-coderw/</url>
      
        <content type="html"><![CDATA[<h2 id="Options-Api-选项-API"><a href="#Options-Api-选项-API" class="headerlink" title="Options Api (选项 API)"></a>Options Api (选项 API)</h2><h4 id="开启-vue"><a href="#开启-vue" class="headerlink" title="开启 vue"></a>开启 vue</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、引入</span></span><br><span class="line">&lt;script src=<span class="string">&#x27;https://unpkg.com/vue@next&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、创建模板内容 2.0的 options Api</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;h2&gt;hello &#123;&#123;msg&#125;&#125;!&lt;/h2`</span>, <span class="comment">// template的内容会覆盖app里的html，如果没写 temp vue将挂载节点里的html作为熏染模板，</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 劫持返回的对象数据，通过 Object.defineProperty 或 new Proxy 添加到vue的响应式系统</span></span><br><span class="line">    <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">// 3.0 所有场景必须是函数</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;word&quot;</span>,</span><br><span class="line">            <span class="attr">info</span>: <span class="string">&quot;this a info&quot;</span>,</span><br><span class="line">            <span class="attr">coutn</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">imgurl</span>: <span class="string">&quot;http://xxx/xxx/xxx.jpg&quot;</span>,</span><br><span class="line">            <span class="attr">infos</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="comment">// filters 部分代码 vue3已经删除，功能通过 methods 或 computed 的可以实现</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可以用箭头函数(箭头无作用域，里面的this无法指向vue对象)</span></span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">connect_met</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">info</span> +“ ”+ <span class="variable language_">this</span>.<span class="property">msg</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">getData</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算属性, （包含响应式数据的计算），涉及到的属性变化，结果跟着变化</span></span><br><span class="line"><span class="comment">     * connect 会被混入到实例中, 可以通过 this.connetc 使用</span></span><br><span class="line"><span class="comment">     * 和 methods差别 存在缓存</span></span><br><span class="line"><span class="comment">     *     模板中 &#123;&#123; connect_met() &#125;&#125; 使用三次,执行了三次</span></span><br><span class="line"><span class="comment">     *     模板中 &#123;&#123; connect &#125;&#125; 使用三次，只会计算一次</span></span><br><span class="line"><span class="comment">     *     this.info 和 this.msg 发生变化，自动更新 connect</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">        <span class="title function_">connect</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">info</span> +<span class="string">&quot; &quot;</span>+ <span class="variable language_">this</span>.<span class="property">msg</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">connect2</span>:&#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">info</span> +<span class="string">&quot; &quot;</span>+ <span class="variable language_">this</span>.<span class="property">msg</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">                <span class="comment">// 一些列操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册局部组件</span></span><br><span class="line"><span class="comment">     * 导入的时候尽量大驼峰取名，组件名与组件是一样的就可以缩写了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="string">&quot;ProductItem&quot;</span>:<span class="title class_">ProductItem</span>,</span><br><span class="line">         <span class="title class_">ProductItem</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听属性变化，某个属性变化，去做一件事情</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">        <span class="title function_">info</span>(<span class="params">n,o</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">infos</span>(<span class="params">n,o</span>)&#123;</span><br><span class="line">            <span class="comment">// 整个infos发生变化，得到的n是一个 Proxy对象</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Vue</span>.<span class="title function_">toRaw</span>(n)) <span class="comment">// 获取原生对象</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">infos</span>:&#123;</span><br><span class="line">            <span class="title function_">handler</span>(<span class="params">n,o</span>)&#123;</span><br><span class="line">                <span class="comment">// 侦听对象某个属性变化，默认无法深度监听</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Vue</span>.<span class="title function_">toRaw</span>(n)) <span class="comment">// 获取原生对象</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">immediate</span>:<span class="literal">true</span>  <span class="comment">// 第一次立即执行</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;infos.a&quot;</span>:(n,o)&#123;</span><br><span class="line">            <span class="comment">// 直接侦听对象属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   生命周期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">     <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="variable language_">this</span>.$watch(<span class="string">&quot;msg&quot;</span>,<span class="function">(<span class="params">n,o</span>)=&gt;</span>&#123;&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">// 逻辑中监听</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、挂载到页面已存在的节点</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><blockquote><p>template 中的语法 (react 通过 jsx 编写)</p></blockquote><p>mustache 语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment"> * &#123;&#123;msg&#125;&#125;  普通数据绑定</span></span><br><span class="line"><span class="comment"> * &#123;&#123;count*2&#125;&#125; &#123;&#123;info.split(&quot; &quot;)&#125;&#125; &#123;&#123;a&gt;2?&quot;0&quot;:&quot;1&quot;&#125;&#125; 表达式,对 data 的数据进行加工再渲染</span></span><br><span class="line"><span class="comment"> * &#123;&#123;count*2&#125;&#125; &#123;&#123;info.split(&quot; &quot;)&#125;&#125; &#123;&#123;a&gt;2?&quot;0&quot;:&quot;1&quot;&#125;&#125; 表达式,对 data 的数据进行加工再渲染</span></span><br><span class="line"><span class="comment"> * &#123;&#123; getData(msg) &#125;&#125; 调用methods 的方法，传入data的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>基本指令</p><blockquote><p>标签中使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-ones   只渲染一次，数据变化指令标签内部所有data不更新</span></span><br><span class="line"><span class="comment"> * v-text 与 v-html 是否将带html标签的数据效果呈现</span></span><br><span class="line"><span class="comment"> * v-pre  标签里所有东西当做字符串 包括 &#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment"> * v-cloak 防止js未加载出来时，页面出现&#123;&#123;msg&#125;&#125; 的问题 （配合 style [v-cloak]&#123;display:none&#125; 才行）</span></span><br><span class="line"><span class="comment"> * v-memo=[name,msg] 3.2+  v-memo指令作用的标签内部(子树)数据不实时更新，只有name 或 msg数据变化了，再一起更新</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>v-bang、绑定 class 和 style</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-bind  缩写 : 动态绑定属性的值</span></span><br><span class="line"><span class="comment"> * v-bind:src=&quot;imgurl&quot;  或  :src=&quot;imgurl&quot;</span></span><br><span class="line"><span class="comment"> * :class=&#123;active:bool&#125; 或  :class=&quot;getClassList()&quot;    函数中 retrun &#123;active:true,msg:false&#125;</span></span><br><span class="line"><span class="comment"> * :style=&#123;&quot;font-size&quot;:size + &quot;px&quot;&#125;  驼峰或引号都行</span></span><br><span class="line"><span class="comment"> * :[namexxx]=&quot;123&quot; // 动态绑定属性名</span></span><br><span class="line"><span class="comment"> * v-bind=&quot;infos&quot; // 绑定一个对象 infos:&#123;a:1,b:2&#125; 直接绑定a和b连个属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>绑定事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-on 缩写 @</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@click</span>=&quot;getData&quot; // 事件发生时做一件事情，直接做，或通过函数做</span></span><br><span class="line"><span class="comment"> * v-on=&#123;click:getData,mousemove:getData2&#125; 批量绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@click</span>=&quot;getData&quot; // 没参数 event 参数默认存在</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@click</span>=&quot;getData($event,msg)&quot; // 有参数，需要手动传入事件对象</span></span><br><span class="line"><span class="comment"> * 事件修饰符</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@click</span>.stop=&quot;xxx&quot; 阻止事件冒泡 (原生通过 event.stopPropagation() 阻止)</span></span><br><span class="line"><span class="comment"> *         .prevent    阻止默认行为(原生通过 event.preventDefault() 阻止)</span></span><br><span class="line"><span class="comment"> *           .capture    使用捕获模式</span></span><br><span class="line"><span class="comment"> *           .self       事件绑定原生自己触发事件才生效</span></span><br><span class="line"><span class="comment"> *           .ones       只触发一次</span></span><br><span class="line"><span class="comment"> *           .left/right/middle 点击左/右/中按键时才触发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>v-model</p><blockquote><p>表单设置双向数据绑定 ，如果手动实现，@input 的时候执行函数，手动让 其他数据变化</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;selectText&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;searchText&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符，可多个同时使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-model.lazy  失去焦点时绑定 防抖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-model.number  自动将值转换为数字（vue2 中即使input type设置成number 依然会被转成字符串）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-model.trim 去除首位空格--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多选框中，v-model绑定的是一个数组列表，需要额外设置每一项的value --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单选框中，需要用相同的 name 关联 ，v-model如果绑定同一个data,就可以不需要name了 ，需要额外设置value --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--select中，直接给select标签v-model,value全在option中 --&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>v-model 在组件上使用</p></blockquote><p>条件渲染</p><blockquote><p>这些指令最好加到 <code>template</code> 元素中, 这样就不会渲染到页面，类似小程序的<code>block</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-if/vi-else-if/v-else 节点的删除创建</span></span><br><span class="line"><span class="comment"> * v-show  // display 的显示隐藏</span></span><br><span class="line"><span class="comment"> * v-for=&quot;(item,index) in array&quot;</span></span><br><span class="line"><span class="comment"> * v-for=&quot;(item, key,index) in object&quot;</span></span><br><span class="line"><span class="comment"> * 可迭代对象如字符串都是可以遍历的</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>数组更新的检测，只有改变原数组，或调用可改变元素组的方法，才会更新</p></blockquote><p>key</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-for key 属性的作用</span></span><br><span class="line"><span class="comment"> *   唯一的，一般用id</span></span><br><span class="line"><span class="comment"> *  主要用在Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes</span></span><br><span class="line"><span class="comment"> *    没使用key，有一种算法，使用key会用一种更好的算法（基于key的变化重新排列元素顺序，并移除不存在的元素）</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li><p>VNode: <code>Virtual Node</code> 虚拟节点</p><ul><li>位置： 存在于 vue template 到 真实 DOM 之间</li><li>本质：是一个 JavaScript 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// template: &lt;div class=&quot;title&quot; style=&quot;font-size:30px&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vnode = &#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;div&quot;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">class</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">        <span class="attr">style</span>: &#123;</span><br><span class="line">            <span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;30px&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&quot;内容&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DOM: &lt;div class=&quot;title&quot; style=&quot;font-size:30px&quot;&gt;内容&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>虚拟 DOM：很多<code>VNode</code>形成的 <code>VNode Tree</code></p><ul><li><p>方便跨平台</p><ul><li>可以转 真实 DOM 对象</li><li>可以转 移动端的 <code>button/view/image</code></li><li>可以转 IOS <code>UIButtono/UIView</code></li><li><code>JavaScript</code> ，是<strong>脚本语言</strong>，可以将 转换为<strong>各个平台想要显示的东西</strong></li></ul></li><li><p>方便 diff 算法</p><ul><li><strong>没有 Key</strong> ：当遍历的<strong>数组发生变化</strong>时，<strong>销毁所有</strong>的<strong>虚拟 DOM</strong>，在按照新的数据<strong>全部重新创建</strong></li></ul><p><img src="/../../../static/img/not-key.jpg"></p><ul><li><strong>存在唯一 Key</strong>：虚拟 DOM 会<strong>通过 key</strong>认识，<strong>变化后的某个节点，就是变化前的那个节点</strong>，不销毁进行重新排序</li></ul><p><img src="/../../../static/img/has-key.jpg"></p></li></ul></li></ul><h4 id="MVC-与-MVVM"><a href="#MVC-与-MVVM" class="headerlink" title="MVC 与 MVVM"></a>MVC 与 MVVM</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MVC: `Model - View - Controller` 的简称，（前端也符合，html view - js 控制器）</span></span><br><span class="line"><span class="comment"> *     准备好界面  控制器去服务器获取数据  得到数据转换为模型给页面使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * MVVM: `Model（script，data等） - View（template） - ViewModel（Vue框架`） 的简称 ，Vue给Model和View建立桥梁</span></span><br><span class="line"><span class="comment"> *     ViewModel 把 Model数据 绑定到界面</span></span><br><span class="line"><span class="comment"> *     ViewModel 把 View事件 监听到 Model</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><ul><li>初始化 App 就是根组件，一个 vue 项目就是一棵组件树</li><li>单向数据流 -&gt; 子组件不能直接修改 props 的数据，如果非要修改，父组件监听子组件 emit，在父组件中修改</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个全局组件</span></span><br><span class="line"><span class="keyword">const</span> productItem = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;h1&gt;组件&lt;/h1&gt;`</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 注册一个全局组件，组件名称 短横线 或 大驼峰命名</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;product-item&quot;</span>, productItem);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册局部组件, 选项components</span></span><br><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">  productItem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>组件通信</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件传递与接收 组件标签通过--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn-name</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:info</span>=<span class="string">&quot;InfoObj&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">receive</span>=<span class="string">&quot;xxxx&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:vis</span>=<span class="string">&quot;a&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">abc</span>=<span class="string">&quot;123&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">cpn-name</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收 prop 属性接收 ，横杆和驼峰命名都可以</span></span><br><span class="line"><span class="comment">// 父级传递 没用prop接收的属性，会变成组件中根节点的属性</span></span><br><span class="line"><span class="comment">// 使用 inheritAttrs:false 选项禁止, 也能手动在子节点上 通过 $attrs.abc 给其他子节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;name&quot;</span>],</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">InfoObj</span>: &#123;</span><br><span class="line">      <span class="comment">// 对象或数字默认值必须从函数中返回</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">vis</span>: &#123;</span><br><span class="line">      <span class="comment">// 自定义验证</span></span><br><span class="line">      <span class="title function_">validator</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].<span class="title function_">includes</span>(value);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&quot;receive&quot;</span>], <span class="comment">// 注册一下，外面用的时候会有提示,也可以验证函数返回</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&quot;receive&quot;</span>, data); <span class="comment">//子传父</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>非父子组件通信</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provide 和 Inject 依赖注入</span></span><br><span class="line"><span class="comment"> *     无论层级多深，父组件都可以通过 Provide 向它下面所有子组件提供数据</span></span><br><span class="line"><span class="comment"> *     子组件通过inject接收</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        retrun &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;liao&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">provide</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;liao&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">16</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">provide</span>(<span class="params"></span>)&#123; <span class="comment">// 通过行数使用动态数据，数据改变不会更新</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">16</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">provide</span>(<span class="params"></span>)&#123; <span class="comment">// 通过行数使用动态数据，数据改变更新</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="title function_">computed</span>(<span class="function">()=&gt;</span> <span class="variable language_">this</span>.<span class="property">name</span>), <span class="comment">// computed 需要从vue引入， 子组件中需要 this.name.value 展示</span></span><br><span class="line">            <span class="attr">age</span>:<span class="number">16</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">inject</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件总线</span></span><br><span class="line"><span class="comment"> *    mitt 或 tiny-emitter 库，Vue2 是有自带的</span></span><br><span class="line"><span class="comment"> *    全局 导入总线对象 EventBusxxx</span></span><br><span class="line"><span class="comment"> *    需要用的地方导入 EventBusxxx，EventBusxxx.emit(&quot;EventName&quot;,data); 发出事件</span></span><br><span class="line"><span class="comment"> *    需要用的地方导入 EventBusxxx，EventBusxxx.on(&quot;EventName&quot;,(data)=&gt;&#123;console.log(data)&#125;); 监听事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态管理库 vuex</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>组件的生命周期（生命开始到结束经历变化的一系列过程）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、创建  ---  beforeCreate、 created  （创建好后这里有一个 从 html模板编译到虚拟DOM的过程）</span></span><br><span class="line"><span class="comment"> *     发送网络请求、事件监听</span></span><br><span class="line"><span class="comment"> * 2、挂载到组件树（虚拟DOM） --- beforeMount、 mounted （挂到虚拟DOM后，同时将映射到真实DOM，界面上就可以看到）</span></span><br><span class="line"><span class="comment"> *     获取/使用DOM</span></span><br><span class="line"><span class="comment"> * 3、修改更新数据 --- beforeUpdate、 updated （根据新数据生成新VNode,形成新的虚拟DOM，根据diff算法更新真实DOM）</span></span><br><span class="line"><span class="comment"> * 4、卸载 --- beforeUnmount、unmounted （通过v-if可以卸载）</span></span><br><span class="line"><span class="comment"> *     回收操作，取消定时器/事件监听</span></span><br><span class="line"><span class="comment"> * 特殊阶段</span></span><br><span class="line"><span class="comment"> *     缓存组件的生命周期</span></span><br><span class="line"><span class="comment"> *     activated()&#123;&#125;, 激活</span></span><br><span class="line"><span class="comment"> *     deactivated()&#123;&#125; 离开</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 我们可以在经历某个阶段做特定的逻辑代码</span></span><br><span class="line"><span class="comment"> * 我们可以通过生命周期函（钩子函数、回调函数）数知道所在的阶段</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>ref 属性绑定 DOM 或组件实例，this.$refs.xxx 获取实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">cpnRefName</span>; <span class="comment">// 直接操作组件里的dom、方法等</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">cpnRefName</span>.<span class="property">$el</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this.$paren、this.$root 、this.$children 操作父组件、根组件、子组件（vue 2）</span></span><br></pre></td></tr></table></figure><blockquote><p>动态组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 全局或局部注册的组件 v-for cpnList 内部--&gt;</span><br><span class="line">    &lt;components :is=&quot;cpnList[index]&quot;&gt;&lt;/components&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    cpnList: [cpn1, cpn2, cpn3];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>keep-alive 组件切换保持存活，缓存数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--根据组件name,只缓存这包含的组件 或 exclude=&quot;cpn1&quot; 排除 --&gt;</span><br><span class="line">    &lt;!-- max=3 最多缓存3个 --&gt;</span><br><span class="line">    &lt;keep-alive include=&quot;cpn2,cpn3&quot;&gt;</span><br><span class="line">      &lt;cpn1&gt;&lt;/cpn1&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        cpn1,</span><br><span class="line">        cpn2,</span><br><span class="line">        cpn3</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 组件内部</span><br><span class="line">activated()&#123;&#125;,</span><br><span class="line">deactivated()&#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>异步组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&quot;./components/cpn1.vue&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;) <span class="comment">// 可以对导入的文件进行分包处理 ,打包成单独文件</span></span><br><span class="line"># vue 异步引入组件</span><br><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Cpn1</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./components/cpn1.vue&quot;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>组件 v-model</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;cpn1 v-model=&quot;msg&quot;&gt;&lt;/cpn1&gt;</span><br><span class="line">    &lt;cpn1 :model-value=&quot;msg&quot; @update:model-value=&quot;xxx&quot;&gt;&lt;/cpn1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;cpn1 v-model:msg2=&quot;msg2&quot;&gt;&lt;/cpn1&gt;</span><br><span class="line">    &lt;cpn1 :msg2=&quot;msg2&quot; @update:msg2=&quot;msg2 = xxx&quot;&gt;&lt;/cpn1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">msg:&quot;123&quot;,</span><br><span class="line">        msg2:&quot;456&quot;</span><br><span class="line">&#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        cpn1,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Mixin 混入 (不常用)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多组件、页面都需要用的方法、属性统一抽取</span></span><br><span class="line"><span class="comment">// 单独js 文件 mixin.js 定义一些东西</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>:<span class="number">123</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">showMsg</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独引入</span></span><br><span class="line"><span class="keyword">import</span> msgmixin <span class="keyword">from</span> <span class="string">&quot;../xxx/mixin&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">mixins</span>:[msgmixin], <span class="comment">// 使用，组件中的东西会和mixin合并，如果名字一样，组件中覆盖mixin</span></span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">showMsg</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><blockquote><p>渲染作用域：插槽所有内容都是父组件里的数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通插槽父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>普通插槽内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>没使用插槽默认展示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button&gt;普通插槽内容&lt;/button&gt; 插入这里name=&quot;default&quot;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 具名插槽父组件 v-slot:[可以是变量] #warp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:warp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>外面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:inner</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>里面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;warp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据向外传递 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只有默认的，可以简写成 v-slot=&quot;props&quot; 或 #default=&quot;props&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;&#123;props.item&#125;&#125; - &#123;&#123;props.title&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">title</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Composition-Api-（组合-API）"><a href="#Composition-Api-（组合-API）" class="headerlink" title="Composition Api （组合 API）"></a>Composition Api （组合 API）</h2><blockquote><p>将 data 数据，监听数据，方法数据，需要用到的组合起来完成，放在一个地方，选项 API 逻辑太过分散</p></blockquote><blockquote><p>组合在一起 抽取封装方便 (hooks)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 hook  useCount.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useCounter</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="title function_">ref</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        counter.<span class="property">value</span>++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        counter.<span class="property">value</span>--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; counter, increment, decrement&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中引用</span></span><br><span class="line"><span class="keyword">import</span> useCounter <span class="keyword">from</span> <span class="string">&quot;./hooks/useCounter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; counter, increment, decrement &#125; = <span class="title function_">useCounter</span>();</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="comment">// 直接就能用复用</span></span><br><span class="line">            counter,</span><br><span class="line">            increment,</span><br><span class="line">            decrement</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数式变成思想，以前对象里的功能转变为函数的调用</p></blockquote><p>setup</p><ol><li><code>setup</code> 无 this</li><li><strong>两个属性</strong>：props 存放父组件传递的参数，context 有 <code>attrs、slots、emit</code></li><li>template 需要用的东西 需要从 setup 中 <code>return</code> 出去</li><li>setup 内部使用变量需要加 .value ,retrun 到 template 中的不需要写 .value</li></ol><h4 id="Setup-上下文"><a href="#Setup-上下文" class="headerlink" title="Setup 上下文"></a>Setup 上下文</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 透传 Attributes（非响应式的对象，等价于 $attrs）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">attrs</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插槽（非响应式的对象，等价于 $slots）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">slots</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件（函数，等价于 $emit）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">emit</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露公共属性（函数）,父组件通过ref得到子组件实例，仅能访问expose的内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">expose</span>);</span><br></pre></td></tr></table></figure><h4 id="Setup-实现-data-数据"><a href="#Setup-实现-data-数据" class="headerlink" title="Setup 实现 data 数据"></a>Setup 实现 data 数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- vue 自动将count ref对象解包 不能带value，深层对象修改时需要带.value --&gt;</span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;&#123; infos.username &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;TestPage&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // ref 简单响应式数据,也可以是复杂类型数据</span><br><span class="line">    let count = ref(100); // count 对应 ref对象的value</span><br><span class="line">    count.value++;</span><br><span class="line">    console.log(count.value);</span><br><span class="line"></span><br><span class="line">    let data = ref([]); // 网络请求数据，默认[]</span><br><span class="line">    const res = [&#123; a: 1 &#125;, &#123; b: 2 &#125;];</span><br><span class="line">    data.value = res;</span><br><span class="line">    console.log(data.value);</span><br><span class="line"></span><br><span class="line">    // reactive 复杂数据类型依赖收集, 不要关心value</span><br><span class="line">    const infos = reactive(&#123;</span><br><span class="line">      username: &quot;lzoxun&quot;,</span><br><span class="line">      passwd: &quot;123456&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">    infos.username = &quot;abc&quot;;</span><br><span class="line"></span><br><span class="line">    // readonly 只读代理 普通/ref/reactive对象都能传入</span><br><span class="line">    const readonlys = readonly(infos);</span><br><span class="line">    readonlys.username = &quot;456&quot;; // 无法修改</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      data,</span><br><span class="line">      readonlys,</span><br><span class="line">      infos,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>响应式数据相关工具方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">isProxy; <span class="comment">// 检测数据是否由reactive或readonly穿件的proxy</span></span><br><span class="line">isReactave; <span class="comment">// 检测是否由reactive创建的响应式代理，readonly包裹reactive对象创建的也会返回true</span></span><br><span class="line">isReadonly; <span class="comment">// 是否有有readonly创建的只读代理</span></span><br><span class="line">isRef; <span class="comment">// 数据是否有ref创建</span></span><br><span class="line"></span><br><span class="line">shallowReactive; <span class="comment">// 浅层作用: 一级属性可以响应式，但深层的不可以，只是普通数据</span></span><br><span class="line">shallowReadonly; <span class="comment">// 浅层作用：一级属性无法修改，但深层的可以</span></span><br><span class="line">shallowRef;</span><br><span class="line"></span><br><span class="line">toRaw; <span class="comment">// 返回 reactive 或 readonly 代理的原始对象，去除Proxy效果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; username, passwd &#125; = <span class="title function_">toRefs</span>(infos); <span class="comment">// 结构reactive数据, 成 ref数据</span></span><br><span class="line"><span class="keyword">const</span> username = <span class="title function_">toRef</span>(infos, <span class="string">&quot;username&quot;</span>); <span class="comment">//结构单个</span></span><br><span class="line"><span class="keyword">const</span> uncount = <span class="title function_">unref</span>(count); <span class="comment">// isRef(val) ? val.val : val;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">triggerRef</span>(count); <span class="comment">// 特殊情况改变完没有响应，手动强制响应</span></span><br></pre></td></tr></table></figure><h4 id="Setup-实现-计算属性"><a href="#Setup-实现-计算属性" class="headerlink" title="Setup 实现 计算属性"></a>Setup 实现 计算属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;TestPage&quot;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> plusOne = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> + <span class="number">1</span>); <span class="comment">// 计算属性也是一个  ref</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(plusOne.<span class="property">value</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      plusOne,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Setup-实现-生命周期"><a href="#Setup-实现-生命周期" class="headerlink" title="Setup 实现 生命周期"></a>Setup 实现 生命周期</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;TestPage&quot;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// setup 本身 取代了 created 和 beforeCreated 这连个生命周期</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// 组件挂载之前</span></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// 组件挂载完成执行</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// 响应式数据变更之前</span></span><br><span class="line">    <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// 响应式数据变更</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// 组件十六卸载之前</span></span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// 组件实例被卸载</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">onActivated</span>(<span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// &lt;KeepAlive&gt; 的组件激活</span></span><br><span class="line">    <span class="title function_">onDeactivated</span>(<span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// &lt;KeepAlive&gt; 的组件卸载</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">onErrorCaptured</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">    <span class="title function_">onRenderTracked</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">    <span class="title function_">onRenderTriggered</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">    <span class="title function_">onServerPrefetch</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>ref 获取 dom 节点</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;titleRef&quot;&gt;标题&lt;/div&gt;</span><br><span class="line">  &lt;button ref=&quot;btnRef&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const titleRef = ref();</span><br><span class="line">    const btnRef = ref();</span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      console.log(titleRef.value);</span><br><span class="line">      console.log(btnRef.value);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      // 一定要 return</span><br><span class="line">      btnRef,</span><br><span class="line">      titleRef,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Setup-实现-Provide-Inject"><a href="#Setup-实现-Provide-Inject" class="headerlink" title="Setup 实现 Provide&#x2F;Inject"></a>Setup 实现 Provide&#x2F;Inject</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;TestPage&quot;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 提供静态值</span></span><br><span class="line">        <span class="title function_">provide</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提供响应式的值</span></span><br><span class="line">        <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="title function_">provide</span>(<span class="string">&#x27;count&#x27;</span>, count)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下级组件中</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;TestPage&quot;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 注入值的默认方式</span></span><br><span class="line">        <span class="keyword">const</span> foo = <span class="title function_">inject</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注入响应式的值</span></span><br><span class="line">        <span class="keyword">const</span> count = <span class="title function_">inject</span>(<span class="string">&#x27;count&#x27;</span>,<span class="string">&#x27;default value&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Setup-实现-watch-watchEffect"><a href="#Setup-实现-watch-watchEffect" class="headerlink" title="Setup 实现 watch&#x2F;watchEffect"></a>Setup 实现 watch&#x2F;watchEffect</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch, watchEffect &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;TestPage&quot;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;hello word&quot;</span>);</span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      message,</span><br><span class="line">      <span class="function">(<span class="params">n, o</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// [msg1,msg2] 可以监听多个</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(n, o);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">// 先执行一次</span></span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 深度监听，默认true</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> (&#123; ...infos &#125;),</span><br><span class="line">      <span class="function">(<span class="params">n, o</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 自动收集infos 里面的所有依赖，不加小括号,大括号会被当成代码块</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(n, o);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 里面的函数自动被执行</span></span><br><span class="line"><span class="comment">     * 函数内部涉及到的依赖会被自动收集，只要监听到一个发生变化，就自动再次执行这个函数</span></span><br><span class="line"><span class="comment">     * 返回值 调用就停止监听了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> stopWatchxx = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Setup-script-语法糖"><a href="#Setup-script-语法糖" class="headerlink" title="Setup script 语法糖"></a>Setup script 语法糖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">1、引入组件直接使用不需要注册</span><br><span class="line">    2、顶层（非函数内）的代码默认暴露给template，可以直接使用不需要return</span><br><span class="line">    3、defineProps(&#123;&#125;),代替props定义 组件接收的数据（setup语法中直接用，不需要引入）</span><br><span class="line">    4、defineEmits([&quot;infoBtnClick&quot;]) </span><br><span class="line">    5、defineExports  暴露属性或方法到组件外（通过ref拿到组件时可以调用暴露出的方法）</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const message = ref(&quot;msg&quot;); // 不要 return 就可以直接使用</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &quot;首页&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const emits = defineEmits([&quot;infoBtnClick&quot;]);</span><br><span class="line">function showInfoBtnClick() &#123;</span><br><span class="line">  emits(&quot;infoBtnClicks&quot;, &quot;data&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 暴露方法</span><br><span class="line">function foo() &#123;</span><br><span class="line">  console.log(&quot;foo &quot;);</span><br><span class="line">&#125;</span><br><span class="line">defineExports(&#123;</span><br><span class="line">  foo,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由名称来源于网络架构的<strong>路由器</strong>，<strong>路由器</strong>主要维护着一个<strong>映射表</strong>，<strong>映射表</strong>会绝对数据的流向</p><p>路由器映射表<strong>存放</strong> 它分配的 <strong>IP 地址 –&gt; 目标设备 mac 地</strong>址 的关系映射表（每个硬件设备都有一个独一无二的固定的 mac 地址）</p><blockquote><p>后端路由</p></blockquote><p>后端维护着 <strong>不同 URL –&gt; 对应页面</strong> 的关系<strong>映射表</strong>，后端<strong>根据不同 URL</strong>，渲染出<strong>不同的页面</strong>，<strong>整个页面</strong>返回给客户端</p><p>后端维护着 <strong>不同 API –&gt; 对应数据</strong> 的关系<strong>映射表</strong>，后端<strong>根据不同 API</strong>，整理出<strong>不同的数据</strong>，再把<strong>数据</strong>返回给客户端</p><blockquote><p>前端路由</p></blockquote><p>来源于 <strong>SPA</strong> 单页面应用，在前后端分离的情况下，前端自己实现显示更换</p><p>前端来维护 不<strong>同 URL –&gt; 对应组件</strong> 的关系 <strong>映射表</strong>，前端<strong>根据不同 URL</strong>，渲染<strong>不同组件</strong></p><p>改变 URL 页面不刷新的两种模式</p><p>​ <strong>hash 实现</strong> ：监听 hashchange 事件时，就可以不刷新页面，而去做一些事情</p><p>​ <strong>history 实现</strong> pushState、replaceState 等方法切换路径，可以修改 url 而不刷新页面</p><hr><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><blockquote><p>下载包 –&gt; 导入 –&gt; 创建 –&gt; 选择模式 –&gt; 设置映射表 app.use</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(), <span class="comment">// createWebHistory() history 模式</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 默认替换到App.vue 的 &lt;router-view&gt; 位置</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * import 实现懒加载</span></span><br><span class="line"><span class="comment">       * import 打包分包，用户只要一个页面，没必要把下载所有组件，全在app.js文件中就全部都要下载了</span></span><br><span class="line"><span class="comment">       * 魔法注释，分包后的包名</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">        <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;home&#x27; */</span> <span class="string">&quot;../views/Home.vue&quot;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">      <span class="attr">mate</span>: &#123;&#125;, <span class="comment">// 自定义数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/pather&quot;</span>,</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 子路由</span></span><br><span class="line"><span class="comment">       * 访问: /pather/profile</span></span><br><span class="line"><span class="comment">       * Profile 将被渲染到 Home 的 &lt;router-view&gt; 内部</span></span><br><span class="line"><span class="comment">       * ???</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">ChiMain</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;profile&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Profile</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 动态路由 js 中通过 $route.params.id 获取</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/User.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 放在最后 $route.params.pathMatch 取到具体的错误路径</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/:pathMatch(.*)&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/404.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 router-link 和 router-view 跳转 展示组件</span></span><br></pre></td></tr></table></figure><blockquote><p>router-link 和 router-view</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">replace 使用 replace 跳转 默认push</span><br><span class="line">active-class 属性设置激活的class 名称 默认 .router-link active</span><br><span class="line">--&gt;</span><br><span class="line">&lt;router-link to=&quot;/index&quot; replace active-class=&quot;active&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">占位，路由跳转时组件替换</span><br><span class="line">--&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><blockquote><p>$router 和 $route</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$router</span> 大对象，一般用于路由跳转</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$route</span> 某个路由对象 `this.<span class="variable">$route</span>.path`  `this.<span class="variable">$route</span>.name` 获取单前路由的一些信息，routes映射数组的一个元素</span></span><br></pre></td></tr></table></figure><blockquote><p>setup 中通过 hook 函数使用路由</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const &#123; useRouter, useRoute, onBeforeRouteUpdate &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">   const route = useRoute();</span><br><span class="line">   console.log(route.path)</span><br><span class="line">   console.log(route.params.id)</span><br><span class="line"></span><br><span class="line">   // 导航守卫</span><br><span class="line">   onBeforeRouteUpdate((to,from)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   // 路由跳转</span><br><span class="line">   const router = useRouter();</span><br><span class="line">   router.push(&quot;/home&quot;);</span><br><span class="line">   router.replace(&quot;/home&quot;);</span><br><span class="line">   router.back();</span><br><span class="line">   router.forward();</span><br><span class="line">   router.go(+-n);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="动态配置路由"><a href="#动态配置路由" class="headerlink" title="动态配置路由"></a>动态配置路由</h4><blockquote><p>管理系统中，每个角色<strong>路由</strong>通过<strong>接口获取</strong>，给不同角色，组成不同路由（直接写死的路由实现管理系统，只是普通的菜单显示隐藏）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/User.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isAdmin = <span class="literal">true</span>; <span class="comment">// 真实环境下等用户登录，判断他有什么角色</span></span><br><span class="line"><span class="keyword">if</span> (isAdmin) &#123;</span><br><span class="line">  router.<span class="title function_">addRoute</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/admin&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/AdminPage.vue&quot;</span>),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 动态添加二级域名</span></span><br><span class="line">  router.<span class="title function_">addRoute</span>(<span class="string">&quot;home&quot;</span>, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  删除路由</span></span><br><span class="line"><span class="comment">   *  1、添加一个重名的路由，覆盖掉要删除的，路由name是唯一的</span></span><br><span class="line"><span class="comment">   *  2、router.removeRoute(&quot;admin&quot;)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他一下方法</span></span><br><span class="line">router.<span class="title function_">getRoutes</span>(); <span class="comment">// 获取路由</span></span><br><span class="line">router.<span class="title function_">hasRoute</span>(); <span class="comment">// 检测路由是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br></pre></td></tr></table></figure><blockquote><p>导航守卫，路由拦截 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB">文档</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、判断用户是否登录，否则返回登录页面</span></span><br><span class="line"><span class="comment"> * 2、从一个页面跳转到另一个页面做一些事情</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、任何路由跳转之前都会进入回调</span></span><br><span class="line"><span class="comment"> * 2、to 即将进入的路由对象</span></span><br><span class="line"><span class="comment"> * 3、from 即将离开的路由对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> != <span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">        retrun <span class="string">&#x27;/login&#x27;</span> <span class="comment">// 返回指定页面，和 router.push 一样</span></span><br><span class="line">        retrun <span class="literal">false</span> <span class="comment">// 取消单前导航</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>推荐 <code>options Api</code> 使用</p><p>单一状态是，整个项目只有一个<code>store</code>实例</p><blockquote><p>状态管理</p></blockquote><p>全局保存<strong>数据状态(State)<strong>，任何组件都能</strong>共享</strong>和<strong>修改</strong>，</p><p>把各个组件中<strong>复杂的状态</strong>抽取到一个公共<strong>store 仓库</strong></p><p><img src="/../../../static/img/vuex.png"></p><p>1、中间虚线是 vuex 部分，<strong>State</strong>保存全局<strong>数据</strong>，应用程角度可以<strong>叫做状态</strong></p><p>2、<strong>Vue Components</strong> 获取 <strong>State</strong> 数据 <strong>Rander</strong>渲染到页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; $store.state.counter &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;!--模板直接获取状态--&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; name &#125;&#125; - &#123;&#123; level &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;incr&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- options API --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState, mapGetters  &#125; from vuex;</span><br><span class="line">export default &#123;</span><br><span class="line">    componend:&#123;</span><br><span class="line">        ...mapState([&quot;name&quot;,&quot;level&quot;]), // store的state映射过来，得到 name函数 和 level函数 结构到计算属性中</span><br><span class="line">        ...mapState(&#123;</span><br><span class="line">            sName: state =&gt; state.name // 重命名</span><br><span class="line">        &#125;),</span><br><span class="line">        ...mapGetters([&quot;message&quot;]) // 和 mapState 一样</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- composition API --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useStore, mapState, toRefs &#125; from &quot;vuex&quot;; // 通过 hook</span><br><span class="line"></span><br><span class="line">const store = useStore();</span><br><span class="line">const &#123; counter &#125; = toRefs(store.state);</span><br><span class="line">console.log(counter);</span><br><span class="line">console.log(store.state.counter); // 获取状态无法响应式</span><br><span class="line"></span><br><span class="line">const &#123; name &#125; = mapState([&quot;name&quot;]); // 得到一个 name 函数 ，可以分组到 hook</span><br><span class="line">const sName = computed(name.bind(&#123; $store: store &#125;)); //因为内部通过 this.$store.stete.name 获取</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3、<strong>Vue Components</strong> 同 <strong>Dispatch</strong> 触发 <strong>Actions</strong> 异步方法，在 Actives 调用网络请求 <strong>Backend API</strong> 等异步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 如果存在异步操作 dispatch Actions 从 Actions 提交 mutations --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; $store.state.level &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- options API --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapActions &#125; from &quot;vuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      &quot;changeLevelAction&quot;,</span><br><span class="line">    ]) /* 将store 的 actions 里的方法映射过来 */,</span><br><span class="line">    dispatchAction() &#123;</span><br><span class="line">      /* 直接派发 */</span><br><span class="line">      this.$store.dispatch(&quot;changeLevelAction&quot;, &quot;xun&quot;);</span><br><span class="line"></span><br><span class="line">      /* 使用映射过来的方法 */</span><br><span class="line">      this.changeLevelAction(&quot;xun&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- composition API --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useStore, mapActions &#125; from &quot;vuex&quot;; // 通过 hook</span><br><span class="line">const store = useStore();</span><br><span class="line"></span><br><span class="line">/* 映射过来，处理this问题， 内部 this.$store.dispatch */</span><br><span class="line">const actions = mapActions([&quot;changeLevelAction&quot;]);</span><br><span class="line">const newActions = &#123;&#125;;</span><br><span class="line">Object.keys(actions).forEach((key) =&gt; &#123;</span><br><span class="line">  newActions[key] = actions[key].bind(&#123; $store: store &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">const &#123; changeLevelAction &#125; = newActions;</span><br><span class="line"></span><br><span class="line">function changeState() &#123;</span><br><span class="line">  /* 不使用映射的方法直接调用 */</span><br><span class="line">  store.dispatch(&quot;changeLevelAction&quot;);</span><br><span class="line">  /* 如果返回的是Promise，直接拿到数据, async行数默认返回的就是Promise */</span><br><span class="line">  store.dispatch(&quot;changeLevelAction&quot;).then((res) =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  /* 使用映射过来的方法 */</span><br><span class="line">  changeLevelAction();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>4、要求数据必须 <strong>Commit</strong> 提交到 <strong>Mutatios</strong> 中，才能从 <strong>Mutations</strong> 中修改 <strong>State</strong> 的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 如果不存在异步操作 直接提交 mutations --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; $store.state.counter &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- options API --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapMutations &#125; from &quot;vuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      &quot;increment&quot;,</span><br><span class="line">      CHANGE_NAME,</span><br><span class="line">    ]) /* 将store 的 mutations 里的方法映射过来 */,</span><br><span class="line">    changeState() &#123;</span><br><span class="line">      /**</span><br><span class="line">       * increment 名称永远要与 store mutations定义的保持一致</span><br><span class="line">       *  所有mutations名字经常会被提取到常量中</span><br><span class="line">       */</span><br><span class="line">      this.$store.commit(&quot;increment&quot;, &quot;lzoxun&quot;);</span><br><span class="line"></span><br><span class="line">      /* 使用映射过来的方法 */</span><br><span class="line">      this.increment(&quot;lzoxun&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- composition API --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;; // 通过 hook</span><br><span class="line">const store = useStore();</span><br><span class="line"></span><br><span class="line">/* 映射过来，处理this问题， 内部 this.$store.commit */</span><br><span class="line">import &#123; mapMutations &#125; from &quot;vuex&quot;;</span><br><span class="line">const mutations = mapMutations([&quot;increment&quot;]);</span><br><span class="line">const newMutations = &#123;&#125;;</span><br><span class="line">Object.keys(mutations).forEach((key) =&gt; &#123;</span><br><span class="line">  newMutations[key] = mutations[key].bind(&#123; $store: store &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">const &#123; incrment &#125; = newMutations;</span><br><span class="line"></span><br><span class="line">function changeState() &#123;</span><br><span class="line">  store.commit(&quot;increment&quot;); // 直接commit mutations,从mutations的 increment 修改数据</span><br><span class="line"></span><br><span class="line">  /* 使用映射过来的方法 */</span><br><span class="line">  incrment();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>5、<strong>Mutations</strong> 中修改 <strong>State</strong> 的状态可以受到 <strong>Devtools</strong> 工具跟踪，直接修改也能成功，但工具无法跟踪</p><p>6、<strong>Modules</strong> 的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* store/modules/home.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">homeGetter</span>(<span class="params">state,getters,rootState</span>)&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">homeMutation</span>(<span class="params">state</span>)&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* store 中导入module */</span></span><br><span class="line"><span class="keyword">import</span> homeModule form <span class="string">&quot;./modules/home&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        homeModule</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从模块中获取 State 数据 */</span></span><br><span class="line">$store.<span class="property">state</span>.<span class="property">home</span>.<span class="property">name</span> <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *默认情况 getters、mutations、action 不需要加模块名，会被合并到store中，与外面store的用法一致</span></span><br><span class="line"><span class="comment"> *  容易名字冲突</span></span><br><span class="line"><span class="comment"> *  开启命名空间</span></span><br><span class="line"><span class="comment"> *     namespaced:true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$store.<span class="property">getters</span>[<span class="string">&quot;home/homeGetters&quot;</span>]</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="string">&quot;home/homeAction&quot;</span>,<span class="literal">null</span>,&#123;<span class="attr">root</span>:<span class="literal">true</span>&#125;) <span class="comment">// &#123;root:true&#125; 那么里面就能修改根store的数据</span></span><br><span class="line">store.<span class="title function_">commit</span>(<span class="string">&quot;home/homeMutation&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>store 仓库的定义</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install vuex;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  src/store/index.js 创建 store</span></span><br><span class="line"><span class="comment"> *  state 所有状态都是响应式的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;lzo&quot;</span>,</span><br><span class="line">    <span class="attr">level</span>: <span class="number">10</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">doubleCounter</span>(<span class="params">state, getters</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">counter</span> * <span class="number">2</span> + getters.<span class="property">message</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">message</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">level</span> + <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">func</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id + state.<span class="property">level</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// $store.getters.func(5)  --&gt; 15</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">/* 先导入常量 CHANGE_NAME，commit  的时候同样导入 */</span></span><br><span class="line">    [<span class="variable constant_">CHANGE_NAME</span>](state, payload) &#123;</span><br><span class="line">      state.<span class="property">counter</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">      state.<span class="property">counter</span>++;</span><br><span class="line">      state.<span class="property">name</span> = payload || <span class="string">&quot;lzo&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">fromAction</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">      state.<span class="property">level</span> = payload;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">changeLevelAction</span>(<span class="params">context, payload</span>) &#123;</span><br><span class="line">      <span class="comment">/* context 上下文  和  store 有相同的属性和方法 */</span></span><br><span class="line">      <span class="comment">/* context.commit(&quot;increment&quot;) 提交 mutation */</span></span><br><span class="line">      <span class="comment">/* context.state 和 context.getters 来获取State 或 Getters 数据*/</span></span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&quot;fromAction&quot;</span>, payload);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line">app.<span class="title function_">use</span>(store);</span><br></pre></td></tr></table></figure><blockquote><p>核心概念 State、Getters、Mutations、Actions、Modules；</p></blockquote><p><strong>State</strong> 状态对象集合</p><p><strong>Getters</strong> 将 state 中的数据需要经过加工之后再使用，<strong>类似计算属性</strong></p><p><strong>Mutations</strong> 更改 vuex 状态的<strong>唯一标准方法</strong>是 <code>commit</code> 提交 <code>mutations</code></p><p>​ ( Mutations <strong>同步操</strong>作，<strong>可以</strong>但是<strong>不要做异步操作</strong>，如果要，可以经过<strong>Actions</strong>异步操作，再<strong>从 Actions 提交 Mutations</strong>)</p><p><strong>Action</strong> 类似 mutation，不同在于 Action 可以包含异步操作，但是不能直接修改 state，而是要 commit 到 mutation 去改变</p><p>​ ( 打算将公共数据存在 store，就可以在 Action 获取数据，其他地方直接从 store 获取 )</p><p><strong>Modules</strong> 将 store 数据 拆分管理</p><h2 id="Pinia-Vuex-5"><a href="#Pinia-Vuex-5" class="headerlink" title="Pinia(Vuex 5)"></a>Pinia(Vuex 5)</h2><p>推荐在 <code>vue3 setup</code> 中使用</p><blockquote><p>与 vuex 的区别</p></blockquote><ul><li><code>mutations</code> 不存在了，action 就能直接修改 state</li><li>更友好的<code>TypeScrip</code>支持，Vuex 对 TS 很不友好</li><li>没有了 <code>modules</code> 的嵌套结构<ul><li>可以灵活使用多个<code>store</code>，通过<strong>扁平化</strong>的方式<strong>交互使用</strong></li><li>没有了命名空间的概念</li></ul></li></ul><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1、npm install pinia  安装*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2、/store/index.js 引入 配置 关联vue */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3、app.use(pinia) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4、可以关闭 /store/index 了，新增数据，建立对应的文件，如同级创建 home.js */</span></span><br></pre></td></tr></table></figure><blockquote><p>数据仓库基本定义与使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* home.js */</span></span><br><span class="line"><span class="comment">/* 定义store */</span></span><br><span class="line"><span class="keyword">import</span> &#123;  defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义 store 唯一 名为 home，并返回一个hook函数 */</span></span><br><span class="line"><span class="keyword">const</span> useHome = <span class="title function_">defineStore</span>(<span class="string">&#x27;home&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;lzoxun&#x27;</span>,</span><br><span class="line">        <span class="attr">count</span>:<span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">doubleCount</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">doubleCountAdd</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="comment">// this 是 store 实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doubleCount</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">dynamicParams</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> state.<span class="property">count</span> + id;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;,</span><br><span class="line">        <span class="title function_">otherStore</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> userStore = <span class="title function_">useUser</span>(); <span class="comment">// 需要先 导入</span></span><br><span class="line">            <span class="keyword">return</span> userStore.<span class="property">name</span> + state.<span class="property">name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">incrment</span>(<span class="params">payload</span>)&#123; <span class="comment">// 没有state，直接是参数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useStoretag;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页面 setup 中 */</span></span><br><span class="line"><span class="keyword">import</span> useHome <span class="keyword">from</span> <span class="string">&quot;@/store/home&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> homeStore = <span class="title function_">useHome</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; name &#125; = <span class="title function_">storeToRefs</span>(homeStore); <span class="comment">// 类似 toRefs 解构之后还能响应式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用或修改 store 数据 */</span></span><br><span class="line">homeStore.<span class="property">name</span></span><br><span class="line">homeStore.<span class="property">name</span> = <span class="string">&#x27;xun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改多个状态 */</span></span><br><span class="line">homeStore.$patch(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;789&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重置 store 数据到最初始的状态 */</span></span><br><span class="line">homeStore.$reset()</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 替换整个state */</span></span><br><span class="line">homeStore.<span class="property">$state</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* getters 方法 */</span></span><br><span class="line">homeStore.<span class="title function_">doubleCount</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* actions 方法, 如果返回的是promise，可以通过then监听异步结果 */</span></span><br><span class="line">homeStore.<span class="title function_">incrment</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="三个核心概念"><a href="#三个核心概念" class="headerlink" title="三个核心概念"></a>三个核心概念</h3><p><code>state</code>、<code>getters</code>、<code>actions</code> 等同于组件的 <code>data</code>、<code>computed</code>、<code>methods</code>，定义成功后可以直接使用</p><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局安装 vue</span></span><br><span class="line">npm install @vue/cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建项目</span></span><br><span class="line">vue create &lt;project-name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>browserslist 设置 babel 转换代码的标准</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt; 1%&quot;</span>, <span class="comment">// 适配市场占有率大于1%的浏览器</span></span><br><span class="line"><span class="string">&quot;last 2 versions&quot;</span>,</span><br><span class="line"><span class="string">&quot;not dead&quot;</span>,</span><br><span class="line"><span class="string">&quot;not ie 11&quot;</span>, <span class="comment">// 不需要支持ie11</span></span><br></pre></td></tr></table></figure><blockquote><p>jsconfig.json 让 vscode 提供友好的代码提示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// paths中src相对路径</span></span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>],  <span class="comment">// 当用户输入@，vscode就会提示去src/下找东西</span></span><br><span class="line">      <span class="string">&quot;utils/*&quot;</span>:[src/utils<span class="comment">/*] // 当用户输入utils，vscode就会提示去src/utils下找东西</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    &quot;lib&quot;: [&quot;esnext&quot;, &quot;dom&quot;, &quot;dom.iterable&quot;, &quot;scripthost&quot;]</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>引入 vue 构建版本问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译过程：模板html --createVnode()--&gt; VNode -&gt; 虚拟DOM -&gt; 真实DOM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 预先编译</span></span><br><span class="line"><span class="comment"> * 默认 import &#123; createApp &#125; from &quot;vue&quot;</span></span><br><span class="line"><span class="comment"> *     不支持template选项，需要通过.vue文件引入</span></span><br><span class="line"><span class="comment"> *     以前的runtime版本</span></span><br><span class="line"><span class="comment"> *     编译功能的实现代码，不是存在vue源码中</span></span><br><span class="line"><span class="comment"> *            webpack处理vue-loader处理.vue 时预先编译就实现了 html --createVnode()的过程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  运行时编译</span></span><br><span class="line"><span class="comment"> *  import &#123; createApp &#125; from &quot;vue/dist/vue.esm-bundler&quot;</span></span><br><span class="line"><span class="comment"> *     支持template选项，模板html在属性中，vue-loader无法处理，所有编译代码集成到vue.esm-bundler源码中</span></span><br><span class="line"><span class="comment"> *     以前的runtime+compile版本  runtime+编译</span></span><br><span class="line"><span class="comment"> *     编译功能的实现代码，存放在vue.esm-bundler，vue源码中</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">app.xxxxx.js            默认存放所有自己编写的代码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chunk-vendors.xxxx.js   保持所有的第三方库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器渲染需要把 app,vendors 下载才能渲染（如果把app拆分，把单前页面的文件下载就可以渲染）</span></span><br><span class="line"></span><br><span class="line">import(&quot;./components/cpn1.vue&quot;).then(res=&gt;&#123;&#125;) # 可以对导入的文件进行分包处理</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vue 异步引入组件</span></span><br><span class="line">import &#123; defineAsyncComponent &#125; from &quot;vue&quot;;</span><br><span class="line">const Cpn1 = defineAsyncComponent(()=&gt; import(&quot;./components/cpn1.vue&quot;))</span><br></pre></td></tr></table></figure><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><blockquote><p>浏览器原生网络请求 <strong>XMLHttpRequire</strong>、<strong>fetch</strong></p></blockquote><h4 id="认识-Axios"><a href="#认识-Axios" class="headerlink" title="认识 Axios"></a>认识 Axios</h4><p>特点</p><ul><li>在浏览器发送 <strong>XMLHttpRequire</strong> ，Node 环境自动发送 <strong>http</strong> 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li></ul><h4 id="axios-发送请求"><a href="#axios-发送请求" class="headerlink" title="axios 发送请求"></a>axios 发送请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基本用法 */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>; <span class="comment">// 提取出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1、 get 带参数 */</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">`/juhe/video/update`</span>, &#123; <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2、 post 带参数 */</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">`/users/login`</span>, &#123; <span class="string">&quot;nam e&quot;</span>: <span class="string">&quot;zhong&quot;</span>, <span class="attr">passwd</span>: <span class="string">&quot;456&quot;</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3、 axios request */</span></span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/users/login`</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;zhong&quot;</span>, <span class="attr">passwd</span>: <span class="string">&quot;456&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4、 axios all =&gt; Promist.all  全部成功再走then*/</span></span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">all</span>([</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">`/juhe/video/update`</span>, &#123; <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;),</span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">`/users/login`</span>, &#123; <span class="string">&quot;nam e&quot;</span>: <span class="string">&quot;zhong&quot;</span>, <span class="attr">passwd</span>: <span class="string">&quot;456&quot;</span> &#125;),</span><br><span class="line">  ])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="axios-创建实例"><a href="#axios-创建实例" class="headerlink" title="axios 创建实例"></a>axios 创建实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baseURL = <span class="string">&quot;/&quot;</span>; <span class="comment">/* 为了兼容vue跨域代理，设置地址的话代理无效 */</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">  baseURL = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* service 实例的公共配置，如果要从多个服务器调接口，可以配置多个实例  */</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">service.<span class="title function_">get</span>(<span class="string">`/juhe/video/update`</span>, &#123; <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baseURL = <span class="string">&quot;/&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">  baseURL = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 请求拦截 请求之前，拦截提交的配置，处理完再继续发送 */</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求成功拦截回调&quot;</span>);</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&quot;token&quot;</span>] = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求失败拦截回调&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 响应拦截 响应给用户之前，拦截响应的数据，处理完成在继续响应*/</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应成功回调&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应失败回调&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">service.<span class="title function_">get</span>(<span class="string">`/juhe/video/update`</span>, &#123; <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="axios-请求封装"><a href="#axios-请求封装" class="headerlink" title="axios 请求封装"></a>axios 请求封装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LzoRequest</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> baseURL = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">      baseURL = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">service</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 请求拦截 请求之前，拦截提交的配置，处理完再继续发送 */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">service</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求成功拦截回调&quot;</span>);</span><br><span class="line">        config.<span class="property">headers</span>[<span class="string">&quot;token&quot;</span>] = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求失败拦截回调&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 响应拦截 响应给用户之前，拦截响应的数据，处理完成在继续响应*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">service</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应成功回调&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应失败回调&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">service</span></span><br><span class="line">        .<span class="title function_">request</span>(config)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;get&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">post</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;post&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lzor = <span class="keyword">new</span> <span class="title class_">LzoRequest</span>();</span><br><span class="line"></span><br><span class="line">lzor.<span class="title function_">get</span>(&#123; <span class="attr">url</span>: <span class="string">`/juhe/video/update`</span>, <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="number">37</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> lzor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import Lzo from &quot;./utils/axios&quot;</span></span><br><span class="line"><span class="comment">// Lzo.get(&#123; url: `/juhe/video/update`, params: &#123; id: 1 &#125; &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(res,38)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="安装-谷歌插件-dev-tools"><a href="#安装-谷歌插件-dev-tools" class="headerlink" title="安装 谷歌插件 dev-tools"></a>安装 谷歌插件 dev-tools</h4><blockquote><p>如果商店进不了 ，<a href="https://github.com/vuejs/devtools">dev-tools</a> clone 源码 ，npm run build 打包</p></blockquote><blockquote><p>google 浏览器中 加载已解压的扩展程序</p></blockquote><h4 id="scoped-实现原理"><a href="#scoped-实现原理" class="headerlink" title="scoped 实现原理"></a>scoped 实现原理</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">scoped</span></span><br><span class="line"><span class="comment">vue 中 设置scoped , 就会在该组件最顶层元素添加 自定义属性 data-v-xxxxxxx</span></span><br><span class="line"><span class="comment">所有子元素也会添加上同样的 data-v-xxxxxxx</span></span><br><span class="line"><span class="comment">嵌套的组件,如果是单根元素，也会添加同样的 data-v-xxxxxxx，如果有多个根节点增不会有</span></span><br><span class="line"><span class="comment">所以 scoped 的样式某个组件中，可以设置存在 data-v-xxxxxxx 节点的样式(包括本组件所有元素与嵌套组件根元素)</span></span><br><span class="line"><span class="comment">如果 向设置嵌套组件里面的其他元素 需要用 :deep(&#x27;选择器&#x27;) 才能深度设置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果是挂载到 #app 外面的元素，需要 :global(&#x27;选择器&#x27;) 才能设置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果页面中嵌套logo组件，并且logo组件唯一根元素的class是logo</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="comment">/* 有效 */</span></span><br><span class="line">  :<span class="built_in">deep</span>(.font) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">:<span class="built_in">deep</span>(.logo) &#123;</span><br><span class="line">  <span class="comment">/* 有效 */</span></span><br><span class="line">  <span class="selector-class">.font</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="comment">/* 无效 */</span></span><br><span class="line">  <span class="selector-class">.font</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/01/01/database/mysql-v2/"/>
      <url>/2023/01/01/database/mysql-v2/</url>
      
        <content type="html"><![CDATA[<p>关系型数据库<br>MySQL、Oracle、SQLServer ….<br>关系可以理解为，数据库中存在很多报表，表与表之间存在各种关系，通过一个属性，就可以关联出与它有关系的表的某些数据<br>非关系型数据库(Not only SQL)<br>MongoDB、Redis…..<br>它相关的数据都可以存在在文档的下级 JSON 中，不写要太大表与表之间的操作，性能更高</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.mysql.com/">官网</a><br><a href="https://dev.mysql.com/downloads/mysql/">下载</a></p><h4 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_42218986/article/details/125893503</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载MySQL安装包 并安装</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line">rpm -ivh mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟新秘钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum install mysql mysql-server mysql-deve # 直接安装</span><br><span class="line">rpm -qi mysql-server # 查看版本</span><br><span class="line">systemctl start mysql # 开启服务</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录</span></span><br><span class="line">mysql -u root -p  回车 输入密码登录</span><br><span class="line">mysql -uroot -pxxx 直接输入也可以，u后面空格随意</span><br></pre></td></tr></table></figure><h4 id="密码设置"><a href="#密码设置" class="headerlink" title="密码设置"></a>密码设置</h4><blockquote><p>规范 包含大小写特殊字符，非连续数字</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、方式1</span></span><br><span class="line">mysqladmin -u root password &#x27;lzx123456&#x27; # 第一次设置mysql root密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、方式2 执行</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置不了就获取临时密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">降低校验轻度</span></span><br><span class="line">set global validate_password_policy=LOW;</span><br><span class="line">set global validate_password_length=1;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果前面设置密码有限制</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到 /etc/my.cnf 最后添加 skip-grant-tables 跳过密码验证（或得到临时密码）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入mysql 执行命令关闭数据库只读属性</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、<span class="built_in">set</span> global read_only=0;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、flush privileges;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、show variables like <span class="string">&#x27;%read_only%&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Lzx542684.@&#x27;</span>;   再次修改密码</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后期修改密码</span></span><br><span class="line">1、set global validate_password_policy=0; # 最小限制</span><br><span class="line">2、set global validate_password_length=1; # 密码长度最小值</span><br></pre></td></tr></table></figure><p><img src="/../..%5Cstatic%5Cimg%5C2023-07-05_201917.jpg"></p><h4 id="远程授权"><a href="#远程授权" class="headerlink" title="远程授权"></a>远程授权</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql2 conn 都拿不到时</span></span><br><span class="line"></span><br><span class="line">use mysql</span><br><span class="line">update user set host=&#x27;%&#x27; where user=root; # mysql user root 的 localhost 改成 %</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">grant 权限列表 on 数据库 to ‘用户名’@’访问主机’ ;</span></span><br><span class="line">GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过update语句直接去修改了mysql.user表中的数据的时候，此时我们需要执行flush privileges;命令。</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><ol><li>数据库字符集：默认 <code>utf8mp4</code> ,如果是<code>utf8</code>无法识别<code>emoji</code>表情字符</li><li>排序规则：数据库排序操作时，ASC DSC 的实现规则</li></ol><h4 id="表字段的数据类型"><a href="#表字段的数据类型" class="headerlink" title="表字段的数据类型"></a>表字段的数据类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-   数字类型：<span class="string">`TINYINT`</span> <span class="number">1</span> , <span class="string">`SMALLINT`</span> <span class="number">2</span> , <span class="string">`MEDIUMINT`</span> <span class="number">3</span> ，<span class="string">`INT`</span><span class="number">4</span>,<span class="string">`BINGINT`</span><span class="number">8</span></span><br><span class="line">-   浮点数字类型：<span class="string">`FLOAT`</span><span class="number">4</span> , <span class="string">`DOUBLE`</span><span class="number">8</span> , <span class="string">` DECIAML(大小,小数个数)`</span></span><br><span class="line">-   日期类型：</span><br><span class="line">    -   <span class="function"><span class="params">YEAR</span> =&gt;</span> 年 <span class="string">`1901-2155,0000`</span></span><br><span class="line">    -   <span class="function"><span class="params">DATE</span> =&gt;</span> 年月日 <span class="string">`1000-01-01 - 9999-12-31`</span></span><br><span class="line">    -   <span class="string">`DATETIME`</span> =&gt; 年月日 时分秒 <span class="string">`1000-01-01 00:00:00.000000 - 9999-12-31 23:59:59.999999`</span> 支持六位微妙</span><br><span class="line">    -   <span class="string">`TIMESTAMP`</span>  =&gt; 年月日 时分秒 ( 时间访问是<span class="variable constant_">UTC</span>的时间范围 ) <span class="string">`1970-01-01 00:00:00 - 2038-01-19 03:14:07`</span></span><br><span class="line">-   字符串类型：</span><br><span class="line">    -   <span class="variable constant_">CHAR</span>：固定长度，<span class="number">0</span>-<span class="number">255</span></span><br><span class="line">    -   <span class="string">`VAECHAE`</span>：可变长的字符串，长度可以 <span class="number">0</span>-<span class="number">65535</span>直接的值</span><br><span class="line">    -   <span class="variable constant_">BINARY</span>和<span class="variable constant_">VARBINARY</span>：储存二进制字符串</span><br><span class="line">    -   <span class="variable constant_">BLOB</span>：用于储存大的二进制类型</span><br><span class="line">    -   <span class="variable constant_">TEXT</span>：用于储存大的字符串类型</span><br><span class="line">-   ....不常用</span><br></pre></td></tr></table></figure><h4 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h4><blockquote><p>永远不要将<strong>业务的信息字段</strong>作为唯一性主键</p></blockquote><blockquote><p>每张表为了取反每条记录的<strong>唯一性</strong>，必须有一个<strong>不重复</strong>，<strong>不为空</strong>的字段，设置成主键</p></blockquote><blockquote><p>多列索引，<strong>联合主键</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 新建表</span><br><span class="line">CREATE TABLE IF NOT EXISTS `students` (  # 如果不存在就创建</span><br><span class="line">    `id` INT PRIMARY KEY AUTO_INCREMENT, # 设置位主键并自动递增</span><br><span class="line">`name` VARCHAR(10) NOT NULL, # 不能为空</span><br><span class="line">`norepeat` VARCHAR(10) UNIQUE, # 不能重复</span><br><span class="line">`age` INT DEFAULT 0 # 最后不能有逗号</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 查看数据库 自带几个默认数据库</span><br><span class="line">show databases;</span><br><span class="line">infomation_schema =&gt; 储存MySQL在维护的其他按数据库表等信息</span><br><span class="line">performance_schema =&gt; 性能数据库，记录运行过程中资源消耗相关详细</span><br><span class="line">mysql =&gt; 储存数据库管理者的用户信息、权限信息以及日志信息等</span><br><span class="line">sys =&gt; 简易版的 performance_schema</span><br><span class="line"></span><br><span class="line"># 创建数据库</span><br><span class="line">create database &lt;base-name&gt;;</span><br><span class="line"># 选择使用的数据库</span><br><span class="line">use &lt;base-name&gt;;</span><br><span class="line"># 查看使用的数据库，一切表操作都是基于这个数据库</span><br><span class="line">select database();</span><br><span class="line"># 新建一张表</span><br><span class="line">create table &lt;table-name&gt;(</span><br><span class="line">name varchar(10),</span><br><span class="line">age ing);</span><br><span class="line"># 查看表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"># 插入数据 到表中</span><br><span class="line">insert into users (name,age) values (&quot;lzo&quot;,18);</span><br><span class="line"># 查询表数据</span><br><span class="line">select * from users; # 查询users表中所有信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="variable constant_">SQL</span>语句操作数据库，常见关系数据库<span class="variable constant_">SQL</span>语句都是比较相似的</span><br><span class="line">-   常见规范</span><br><span class="line">    -   通常大写关键字 如 <span class="variable constant_">CREATE</span></span><br><span class="line">    -   语句以封号结尾</span><br><span class="line">    -   如果关键字作为表名或字段名可以使用引号包裹</span><br></pre></td></tr></table></figure><h4 id="DDL-库或表-创建、删除、修改"><a href="#DDL-库或表-创建、删除、修改" class="headerlink" title="DDL 库或表 创建、删除、修改"></a>DDL 库或表 创建、删除、修改</h4><p>DDL 对数据库的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># DDL 数据定义语句，对数据库或表进行 创建、删除、修改等操作 之 数据库操作</span><br><span class="line"> # 查询所有数据库</span><br><span class="line"> SHOW DATABASES;</span><br><span class="line"></span><br><span class="line"> # 选择数据库</span><br><span class="line"> USE lzoxun;</span><br><span class="line"></span><br><span class="line"> # 查看当前正在使用的数据库</span><br><span class="line"> SELECT DATABASE();</span><br><span class="line"></span><br><span class="line"> # 创建新数据库</span><br><span class="line"> # CREATE DATABASE users; # 直接创建</span><br><span class="line"> CREATE DATABASE IF NOT EXISTS users; # 如果不存在就创建</span><br><span class="line"></span><br><span class="line"> # 删除数据库</span><br><span class="line"> DROP DATABASE IF EXISTS users; # 如果存在就删除</span><br><span class="line"></span><br><span class="line"> # 修改数据库 (字符集和排序规则,一般右键数据库直接改)</span><br><span class="line"> ALTER DATABASE users  CHARACTER SET = utf8 COLLATE = utf8_unicode_ci;</span><br></pre></td></tr></table></figure><p>DDL 对表的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># DDL 数据定义语句，对数据库或表进行 创建、删除、修改等操作 之 表的操作</span><br><span class="line"></span><br><span class="line"># 查看所有表</span><br><span class="line">SHOW TABLES;</span><br><span class="line"></span><br><span class="line"># 新建表</span><br><span class="line">CREATE TABLE IF NOT EXISTS `students` (  # 如果不存在就创建</span><br><span class="line">  `id` INT PRIMARY KEY AUTO_INCREMENT, # 设置位主键并自动递增</span><br><span class="line">`name` VARCHAR(10) NOT NULL, # 不能为空</span><br><span class="line">`norepeat` VARCHAR(10) UNIQUE, # 不能重复</span><br><span class="line">`age` INT DEFAULT 0 # 最后不能有逗号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 修改表名字</span><br><span class="line">ALTER TABLE `students2` RENAME TO `students`;</span><br><span class="line"></span><br><span class="line"># 添加新的列</span><br><span class="line">ALTER TABLE `students` ADD `updateTime` TIMESTAMP;</span><br><span class="line"></span><br><span class="line"># 修改字段名称</span><br><span class="line">ALTER TABLE `students` CHANGE `updateTime` `createTime` TIMESTAMP;</span><br><span class="line"></span><br><span class="line"># 修改字段类型</span><br><span class="line">ALTER TABLE `students` MODIFY `name` VARCHAR(30);</span><br><span class="line">ALTER TABLE `students` MODIFY `createTime` TIMESTAMP DEFAULT CURRENT_TIMESTAMP; # 默认创建时间 CURRENT_TIMESTAMP 与 字段类型匹配</span><br><span class="line">ALTER TABLE `students` MODIFY `updateTime` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP; # 默认值为更新时候的时间</span><br><span class="line"></span><br><span class="line"># 删除一个字段</span><br><span class="line">ALTER TABLE `students` DROP `age`;</span><br><span class="line"></span><br><span class="line"># 查看表结构</span><br><span class="line">DESC `students`;</span><br><span class="line"></span><br><span class="line"># 根据表结构创建新表</span><br><span class="line">CREATE TABLE `copytable2` LIKE `students`;</span><br><span class="line"></span><br><span class="line"># 根据表结构和内容创建新表(包括内容一起创建)</span><br><span class="line">CREATE TABLE `copytable3` (SELECT * FROM `students`);</span><br><span class="line"></span><br><span class="line"># 查看创建表时使用的语句</span><br><span class="line">SHOW CREATE TABLE `students`;</span><br><span class="line"></span><br><span class="line"># 删除表</span><br><span class="line">DROP TABLE IF EXISTS `students`; # 如果存在就删除</span><br></pre></td></tr></table></figure><h4 id="DML-数据-添加、删除、修改"><a href="#DML-数据-添加、删除、修改" class="headerlink" title="DML 数据 添加、删除、修改"></a>DML 数据 添加、删除、修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># DML 对表数据进行 添加、删除、修改等操作</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line"># INSERT INTO `students` VALUES (110,&quot;liao&quot;,&#x27;1444&#x27;,&#x27;2022-10-10 12:33:00&#x27;);  # 全表</span><br><span class="line">INSERT INTO `students` (name,norepeat) VALUES (&quot;liao2&quot;,&quot;144453d1&quot;); #插入指定数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除数据</span><br><span class="line">DELETE FROM `students`; # 删除所有数据</span><br><span class="line">DELETE FROM `students` WHERE id = 1;# 删除表中符合条件的数据</span><br><span class="line"></span><br><span class="line"># 更新数据</span><br><span class="line">UPDATE `students` SET name = &#x27;大都是&#x27;, norepeat = &#x27;4589&#x27; WHERE id = 111; # 更新符合条件的数据</span><br></pre></td></tr></table></figure><h4 id="DQL-数据-查询"><a href="#DQL-数据-查询" class="headerlink" title="DQL 数据 查询"></a>DQL 数据 查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># DQL 从数据库中查询记录</span><br><span class="line"></span><br><span class="line"># 普通查询</span><br><span class="line">SELECT * FROM `students`; # 查询所有数据与字段</span><br><span class="line">SELECT name,norepeat FROM `students`; # 查询指定字段</span><br><span class="line">SELECT name as listName,norepeat FROM `students`; # 查询指定字段并起别名</span><br><span class="line"></span><br><span class="line"># 条件判断查询</span><br><span class="line">SELECT * FROM `students` WHERE `norepeat` &gt;= 5; # 查询 norepeat &gt;= 、= 、!=、&lt;&gt; 5 的记录</span><br><span class="line"></span><br><span class="line"># 逻辑运算语句</span><br><span class="line">SELECT * FROM `students` WHERE `norepeat` &gt;= 5 AND `name` = &#x27;liao8&#x27;; # 查询 大于5 并且 name 为liao8 的数据</span><br><span class="line">SELECT * FROM `students` WHERE `norepeat` &gt;= 5 &amp;&amp; `norepeat` != 8; # 查询 大于5 并且 不等于8 的记录</span><br><span class="line">SELECT * FROM `students` WHERE `norepeat` BETWEEN 5 AND 8; # 查询 5-8 的记录</span><br><span class="line"></span><br><span class="line">SELECT * FROM `students` WHERE `norepeat` &gt;= 5 OR `name` = &#x27;liao1&#x27;; # 查询 大于5 或者 name 为liao1 的数据 ( || )</span><br><span class="line">SELECT * FROM `students` WHERE `norepeat` IS NULL; # 查询 norepeat 为 null 的记录</span><br><span class="line"></span><br><span class="line"># 模糊查询</span><br><span class="line">SELECT * FROM `students` WHERE `name` LIKE &quot;%8%&quot;; # % 表示任意个任意字符，只要 name 存在 8，就可以查出来</span><br><span class="line">SELECT * FROM `students` WHERE `name` LIKE &quot;__ao8&quot;; # _ 表示一个任意字符</span><br><span class="line"></span><br><span class="line"># 在列表中的，全都查</span><br><span class="line">SELECT * FROM `students` WHERE `name` IN (&#x27;liao1&#x27;,&#x27;liao2&#x27;,&#x27;liao3&#x27;);</span><br><span class="line"></span><br><span class="line"># 对查询结果排序</span><br><span class="line">SELECT * FROM `students` WHERE `name` LIKE &quot;liao_&quot; ORDER BY norepeat DESC, id ASC; # 将查到的记录通过 norepeat 字段进行降序,再同 id 升序</span><br><span class="line"></span><br><span class="line"># 分页查询</span><br><span class="line">SELECT * FROM students LIMIT 2 OFFSET 0; # 查询 2 条，偏移 0 ((pageSize-1)*pageNumber) 条 , 第一页，查出1-2条记录</span><br><span class="line">SELECT * FROM students LIMIT 2 OFFSET 2; # 查询 2 条，偏移 2 ((pageSize-1)*pageNumber) 条 , 第二页，查出3-4条件记录</span><br><span class="line">SELECT * FROM students LIMIT 2,2; # 也行</span><br><span class="line"></span><br><span class="line"># ============================================================</span><br><span class="line"># 聚合操作</span><br><span class="line">SELECT SUM(norepeat) FROM `students`; # 对 int 类型列进行求和</span><br><span class="line">SELECT SUM(norepeat) FROM `students` WHERE id &gt; 124; # di 大于 124 的记录的norepeat 进行求和</span><br><span class="line">SELECT AVG(norepeat) FROM `students`; # 求平均值 MAX() 最大值、MIN() 最小值、COUNT(*)  统计记录个数，</span><br><span class="line">SELECT COUNT(DISTINCT norepeat) FROM `students`; # 统计个数并去重</span><br><span class="line"></span><br><span class="line"># 分组</span><br><span class="line"># 因为 GROUP BY `group` 所以SELECT 后面可以加 group, 不然不能这么加的</span><br><span class="line">SELECT `group`,AVG(norepeat),COUNT(*) FROM `students` GROUP BY `group`; # 用group分组，计算出每个种类数据，norepleat 的平均值，与记录个数</span><br><span class="line"></span><br><span class="line"># HAVING 作用于组, 和 WHERE作用类似，但是它是在分组后进行过滤的</span><br><span class="line">SELECT `group`,AVG(norepeat),COUNT(*) count FROM `students` GROUP BY `group` HAVING count = 2;</span><br><span class="line"></span><br><span class="line"># 通过 WHERE 过滤完再进行分组, WHERE 作用于表</span><br><span class="line">SELECT `group`,AVG(norepeat),COUNT(*) count FROM `students` WHERE id &gt; 121 GROUP BY `group`;</span><br><span class="line"></span><br><span class="line"># 多表查询</span><br><span class="line"># 主表中有时候，相同类型或组， 数据是很多的，当想给类型，添加额外属性，就需要利用新表，否则，主表每个相同类型都有相同的新属性，难以维护</span><br></pre></td></tr></table></figure><h4 id="DCL-库和表的权限操作"><a href="#DCL-库和表的权限操作" class="headerlink" title="DCL 库和表的权限操作"></a>DCL 库和表的权限操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 数据控制语言，对数据库和表的权限进行相关访问控制操作</span><br></pre></td></tr></table></figure><h3 id="主键外键多表操作"><a href="#主键外键多表操作" class="headerlink" title="主键外键多表操作"></a>主键外键多表操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `brand` (</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">name VARCHAR(20) NOT NULL,</span><br><span class="line">website VARCHAR(100),</span><br><span class="line">phoneRank INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO `brand` (name,website,phoneRank) VALUES (&#x27;华为&#x27;,&#x27;www.huawei.com&#x27;,2);</span><br><span class="line">INSERT INTO `brand` (name,website,phoneRank) VALUES (&#x27;联想&#x27;,&#x27;www.lianxiang.com&#x27;,4);</span><br><span class="line">INSERT INTO `brand` (name,website,phoneRank) VALUES (&#x27;戴尔&#x27;,&#x27;www.daier.com&#x27;,3);</span><br><span class="line">INSERT INTO `brand` (name,website,phoneRank) VALUES (&#x27;苹果&#x27;,&#x27;www.pingguo.com&#x27;,10);</span><br><span class="line">INSERT INTO `brand` (name,website,phoneRank) VALUES (&#x27;小米&#x27;,&#x27;www.xiaomi.com&#x27;,5);</span><br><span class="line">INSERT INTO `brand` (name,website,phoneRank) VALUES (&#x27;oppo&#x27;,&#x27;www.oppo.com&#x27;,8);</span><br><span class="line">INSERT INTO `brand` (name,website,phoneRank) VALUES (&#x27;京东&#x27;,&#x27;www.jingdong.com&#x27;,7);</span><br><span class="line">INSERT INTO `brand` (name,website,phoneRank) VALUES (&#x27;谷歌&#x27;,&#x27;www.google.com&#x27;,9);</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS `products` (</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">brand VARCHAR(20),</span><br><span class="line">title VARCHAR(100),</span><br><span class="line">price FLOAT,</span><br><span class="line">url VARCHAR(100),</span><br><span class="line">score FLOAT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO `products` (brand,price,url,title,score) VALUES (&#x27;华为&#x27;,6666,&#x27;www.xxxxx.com&#x27;,&#x27;华为 nova 2&#x27;,8.5); # 添加数据</span><br><span class="line">INSERT INTO `products` (brand,price,url,title,score) VALUES (&#x27;华为&#x27;,7777,&#x27;www.xxxxx.com&#x27;,&#x27;华为 nova 3&#x27;,9.);</span><br><span class="line"></span><br><span class="line"># 给 products 添加 brand 的外键</span><br><span class="line">ALTER TABLE `products` ADD `brand_id` INT;</span><br><span class="line">ALTER TABLE `products` ADD FOREIGN KEY(brand_id) REFERENCES brand(id); # 设置成外键，并添加外键约束 （brand_id 必须是 brand表中存在的id）</span><br><span class="line"></span><br><span class="line"># 设置brand_id</span><br><span class="line">UPDATE `products` SET `brand_id` = 1 WHERE `brand` = &#x27;华为&#x27;; # 因为 brand 中华为的id就是1</span><br><span class="line">UPDATE `products` SET `brand_id` = 5 WHERE `brand` = &#x27;oppo&#x27;;</span><br><span class="line">UPDATE `products` SET `brand_id` = 4 WHERE `brand` = &#x27;小米&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改和删除被当做外键引用了的id (id 默认不能修改)</span><br><span class="line"># 从工具中表右键 - 设计表 - 外键 有一个删除时的值 RESTRICT ，更新时的值 RESTRICT，界面可以直接修改状态</span><br><span class="line"># 将它们的值 从RESTRICT 该为 CASCADE ，如果id改了，子集引用了这个id的外键会自动更新</span><br><span class="line"># 将它们的值 从RESTRICT 该为 SET NULL ，如果id改了，子集引用了这个id的外键会自动变 NULL</span><br><span class="line"></span><br><span class="line"># SQL 语句修改</span><br><span class="line">SHOW CREATE TABLE `products`; # 查看外键的表 的 创建表的语句，哪里有外键关联信息</span><br><span class="line">ALTER TABLE `products` DROP FOREIGN KEY products_ibfk_1; # 根据名称删除外键</span><br><span class="line"># 重新关联外键，并指定更新时的值为 CASCADE 删除时的默认(如果删除也设置成 CASCADE 那么，父一删除，关联它的id外键也会全部删除)</span><br><span class="line">ALTER TABLE `products` ADD FOREIGN KEY (brand_id) REFERENCES brand(id) ON UPDATE CASCADE ON DELETE RESTORE;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h4><blockquote><p>SQL JOIN</p></blockquote><ul><li>左连接</li><li>有连接</li><li>内连接</li><li>全连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 多表设计查询 - 多表查询 SQL JOIN</span><br><span class="line"># 1、左连接，查询表 products 和 brand 的数据，通过products.brand_id 和 brand.id 进行关联;</span><br><span class="line"></span><br><span class="line"># 作用 以左表为主，查询出 pruducts 所有数据，在把右表中 id 等于 左表 brand_id 的记录，追加到对应记录后面，</span><br><span class="line">SELECT * FROM `products` LEFT JOIN `brand` ON products.brand_id = brand.id;</span><br><span class="line"></span><br><span class="line"># 作用 以左表为主，查询出 pruducts 所有数据，在把右表中 id 等于 左表 brand_id 的记录删除，只留下左表独有的数据</span><br><span class="line">SELECT * FROM `products` LEFT JOIN `brand` ON products.brand_id = brand.id WHERE brand.id IS NULL;</span><br><span class="line"></span><br><span class="line">#=================</span><br><span class="line"># 2、右连接，查询表 products 和 brand 的数据，通过products.brand_id 和 brand.id 进行关联;</span><br><span class="line"></span><br><span class="line"># 作用 以右表为主，查询出 brand 所有数据，在左表中 brand_id 等于 右表 id 的记录，追加到对应记录前面</span><br><span class="line">SELECT * FROM `products` RIGHT JOIN `brand` ON products.brand_id = brand.id;</span><br><span class="line"></span><br><span class="line"># 作用 以右表为主，查询出 brand 所有数据，在左表中 brand_id 等于 右表 id 的记录删除，只留下右边表独有的数据</span><br><span class="line">SELECT * FROM `products` RIGHT JOIN `brand` ON products.brand_id = brand.id WHERE products.brand_id IS NULL;</span><br><span class="line"></span><br><span class="line">#=================</span><br><span class="line"># 3、内连接 查找products.brand_id 能关联上 brand.id , brand.id 也能关联上 products.brand_id 的记录</span><br><span class="line"></span><br><span class="line">SELECT * FROM `products` JOIN `brand` ON products.brand_id = brand.id;</span><br><span class="line"></span><br><span class="line">#=================</span><br><span class="line"># 4、全连接 （左连接 + 有连接 + 删除重复）</span><br><span class="line">(SELECT * FROM `products` LEFT JOIN `brand` ON products.brand_id = brand.id)</span><br><span class="line">UNION</span><br><span class="line">(SELECT * FROM `products` RIGHT JOIN `brand` ON products.brand_id = brand.id);</span><br><span class="line"></span><br><span class="line"># 去交集 只要左边关联不到右边，右边也关联不到左边的数据</span><br><span class="line">(SELECT * FROM `products` LEFT JOIN `brand` ON products.brand_id = brand.id WHERE brand.id IS NULL)</span><br><span class="line">UNION</span><br><span class="line">(SELECT * FROM `products` RIGHT JOIN `brand` ON products.brand_id = brand.id WHERE products.brand_id IS NULL);</span><br></pre></td></tr></table></figure><h4 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h4><blockquote><p>lzoxun 下查询文件</p></blockquote><h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><blockquote><p>**对象映射关系 ** <code>ORM</code> 是一种程序设计方案</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-   效果上，他提供了一个可在变成语言中 使用虚拟对象数据库的效果</span><br><span class="line"></span><br><span class="line">-   <span class="title class_">Node</span> 常用的：<span class="string">`sequelize`</span> ...</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`npm install mysql2 sequelize --save`</span></span><br><span class="line"></span><br><span class="line">-   <span class="variable constant_">JAVA</span> 经常使用的<span class="variable constant_">ORM</span>包括：<span class="string">`Hibernate`</span>、<span class="string">`MyBatis`</span>、...</span><br><span class="line"></span><br><span class="line">    -   不使用<span class="variable constant_">ORM</span>的操作方式</span><br><span class="line">        -    node项目中编写sql语句，传到数据库处理，返回得到的结果到 node项目</span><br><span class="line"></span><br><span class="line">    -   使用<span class="variable constant_">ORM</span>的操作方式</span><br><span class="line">        -    不用变形<span class="variable constant_">SQL</span>语句，操作<span class="variable constant_">ORM</span>库提供的 类 的 方法</span><br><span class="line">        -   <span class="variable constant_">ORM</span>库会将你的操作转换成 <span class="variable constant_">SQL</span>语句，传到数据库处理，返回得到的结果到<span class="variable constant_">ORM</span>，再经过处理返回给用户</span><br></pre></td></tr></table></figure><h4 id="GUR-工具"><a href="#GUR-工具" class="headerlink" title="GUR 工具"></a>GUR 工具</h4><p><a href="http://www.navicat.com.cn/download/direct-download?product=navicat_premium_cs_x64.exe&location=1">Navicat</a></p><p>设置查询文件位置：数据库右键编辑 - 高级 - 位置设置</p><p>数据库连接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接云服务器，需要先开放 3306 端口，在 将服务器mysql数据库中，要连接的用户root的host该为% (默认值是localhost 限制只有本地才能连接)</span></span><br><span class="line"><span class="comment"> * use mysql</span></span><br><span class="line"><span class="comment"> * update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span></span><br><span class="line"><span class="comment"> * 成功后重启mysql</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>数据的导出与导入<br>1、导出的服务器 右键数据库 -&gt; 转储 SQL 文件到本地 -&gt; 生成一个 数据库名.sql 的文件<br>2、导入的服务器 右键运行 SQL 文件 -&gt; 选择刚刚导出的 sql 文件 -&gt; 开始，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">工具快捷键</span><br><span class="line">-   <span class="string">`Ctrl + q`</span>：打开查询界面</span><br><span class="line">-   <span class="string">`Ctrl + r`</span>：运行当前查询界面的sql语句</span><br><span class="line">-   <span class="string">`Ctrl + Shift + r`</span>：运行焦点所在的sql语句</span><br><span class="line">-   <span class="string">`Ctrl + d`</span>：复制当前行</span><br><span class="line">-   <span class="string">`Ctrl + l`</span>：历史日志</span><br><span class="line">-   <span class="string">`F6`</span>：命令行界面</span><br></pre></td></tr></table></figure><p>MySql 报错 only_full_group_by<br>5.7 以上使用 JSON_ARRAYAGG 就必须 GROUP BY 分组，mysql2 有限制，有些 sql 外面工具可以不发分</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode 编辑器</title>
      <link href="/2023/01/01/idea/idea-vscode/"/>
      <url>/2023/01/01/idea/idea-vscode/</url>
      
        <content type="html"><![CDATA[<h2 id="基础运用"><a href="#基础运用" class="headerlink" title="基础运用"></a>基础运用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">        改变引用：光标定义到变量 -&gt; 右键重命名符号(F2) -&gt; 改名回车 全部引用都会一起改变</span></span><br><span class="line"><span class="comment">        显示缩进符号：Editor: Render Whitespase  -&gt; `all`</span></span><br><span class="line"><span class="comment">        设置tab缩进大小：Editor: Tab Size (Tab/Shift+Tab)</span></span><br><span class="line"><span class="comment">        中文环境强制英文标点符号: `ctrl + .`  输入法可以设置 不限于vscode</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="格式化插件"><a href="#格式化插件" class="headerlink" title="格式化插件"></a>格式化插件</h3><ul><li>Prettier - Code formatter (vue 中可能需要安装<strong>vetur</strong>配合才能生效)</li></ul><blockquote><p>首选项-&gt;设置 搜索 formmat On Save 勾选 保存代码自动格式化(如果格式化插件可用的话); 快捷键：<strong>alt+shift+p</strong></p></blockquote><h3 id="找括号"><a href="#找括号" class="headerlink" title="找括号"></a>找括号</h3><ul><li>Bracket Pair Colorizer 2</li></ul><blockquote><p>可以清楚看到多层括号层级关系，并行 js 中对层级划分</p></blockquote><h3 id="tab-缩进上色"><a href="#tab-缩进上色" class="headerlink" title="tab 缩进上色"></a>tab 缩进上色</h3><blockquote><p>shell python 这些无括号的</p></blockquote><ul><li>rainbow indent</li></ul><h3 id="自动更改-HTML-配对标签-1"><a href="#自动更改-HTML-配对标签-1" class="headerlink" title="自动更改 HTML 配对标签 1"></a>自动更改 HTML 配对标签 1</h3><ul><li>Auto Rename Tag</li></ul><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><ul><li>Path Intellisense</li></ul><h3 id="通过类找到样式定义地址"><a href="#通过类找到样式定义地址" class="headerlink" title="通过类找到样式定义地址"></a>通过类找到样式定义地址</h3><ul><li>CSS Peek</li></ul><blockquote><p>选择 class <strong>F12</strong>显示（vue 中无法找到组件内的类）</p></blockquote><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><ul><li>vscode-icon (设置文件夹与文件的图标)</li></ul><h3 id="Emmet-快速生成-html-代码"><a href="#Emmet-快速生成-html-代码" class="headerlink" title="Emmet 快速生成 html 代码"></a>Emmet 快速生成 html 代码</h3><ul><li>Mithril Emmet</li></ul><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(div.<span class="property">headev</span>&gt;div.<span class="property">tags$</span>.<span class="property">tags</span>&#123;tag$&#125;*<span class="number">3</span>)+(div.<span class="property">main</span>&gt;div.<span class="property">center</span>&gt;div.<span class="property">left</span>&#123;left&#125;+div.<span class="property">right</span>&#123;right&#125;&gt;div.<span class="property">top</span>&#123;top&#125;+div.<span class="property">bottom</span>&#123;bottom&#125;)+(dev.<span class="property">footer</span>&gt;a[href=<span class="string">&quot;javascript:&quot;</span>]&#123;连接$&#125;*<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="基础常用"><a href="#基础常用" class="headerlink" title="基础常用"></a>基础常用</h3><ul><li><p>Git Graph</p></li><li><p>Chinese (Simplified) Language Pack for Visual Studio Code (中文汉化包)</p></li><li><p>Vetur (vue2 常用，vue3 支持但不太友好)</p></li><li><p>volar (vue3）</p></li><li><p>Vue VSCode Snippets(vue 文件 输入<code>vbase</code> 快速生成各种版本的基本模板)</p><ul><li>更多模板生成 <a href="https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets">指令</a></li></ul></li><li><p>EditorConfig (是一种被各种编辑器广泛支持的配置 .editorconfig)</p></li><li><p>live server (可运行的静态文件右键直接开启服务 电脑上也要全局安装) &gt;&gt; mi g pro</p></li><li><p>open in browser (静态资源方式打开网页)</p></li><li><p>Better Comments (! * todo &#x2F;&#x2F;美化注释)</p></li><li><p>Autoprefixer 2.2.0 (前缀 shift+ctrl+p 选择 autoprefixer CSS,电脑上也要全局安装)</p></li><li><p>Code Runner (右键运行各种服务端代码)</p></li><li><p>Image Preview (鼠标移入 img 路径显示图片)</p></li><li><p><a href="https://unbug.github.io/codelf/">codelf 右键变量命名</a></p></li><li><p>power mode (输入效果)[^①]</p></li><li><p>Polacode (代码图片生成 ctrl+shilt+p 输入 Polacode -&gt; 选择需要的代码-生成)</p></li><li><p>Turbo Console Log(C+A+l、S+A+c、S+A+u、S+A+d)</p></li><li><p>MongoDB for VS Code (MongoDB 提示补全)</p></li><li><p>vim(Bracket Pairs Colorizer 2 , rainbow indent，关闭缓解卡顿问题)<br>[^①]:Powermode: Enabled 开启插件<br>Powermode: Presets 设置效果<br>Powermode: Enable Shake 去除代码抖动</p></li><li><p>Debugger for Chromes</p></li></ul><h3 id="React-插件"><a href="#React-插件" class="headerlink" title="React 插件"></a>React 插件</h3><ul><li>ES7+ React&#x2F;Redux&#x2F;React-Native snippets 快速生成代码段（最下面 <a href="https://github.com/dsznajder/vscode-es7-javascript-react-snippets/blob/HEAD/docs/Snippets.md">Snippets</a> 查看使用详情）</li><li>vscode-styled-components react&#x3D;&#x3D;&gt;css in js&#x3D;&#x3D;&gt;styled-components 结构高亮</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>常用</p><ul><li><p>ctrl+shift+&#96; 或 5 (打开终端或多个终端)</p></li><li><p>ctrl+k0,ctrl+kj (折叠展开代码)</p></li><li><p>ctrl+alt+F (格式化)</p></li><li><p>ctrl+w (关闭页面)</p></li><li><p>alt+上下键 (移动一行)</p></li><li><p>shift+alt+上下键 (复制一行)</p></li><li><p>ctrl+&#x2F;,ctrl+shift+A (单，多行注释)</p></li><li><p>ctrl+shift+L(选中所有相同内容)</p></li><li></li><li><p>alt+鼠标左键(同时选择多个焦点)</p></li><li><p>Ctrl + Alt+上下键(上下行出现多个光标)</p></li><li><p>shift+alt，再使用鼠标拖动，也可以出现竖直的列光标，同时可以选中多列。</p></li><li><p>ctrl+shift+回车,往上换行</p></li><li><p>ctrl+shift+K, 删除行</p></li><li><p>ctrl + 回车 ,往下换行</p></li><li><p>Home&#x2F;End 行头行尾</p></li><li><p>ctrl+Home&#x2F;End 页头页尾</p></li><li><p>shift + (ctrl?) + Home&#x2F;End&#x2F;上下左右 选择行头到行尾或页头到页尾</p></li><li><p><a href="https://www.cnblogs.com/jpfss/p/10956650.html">参考资料</a></p></li></ul><h2 id="editorconfig-配置"><a href="#editorconfig-配置" class="headerlink" title="editorconfig 配置"></a>editorconfig 配置</h2><p><a href="https://juejin.cn/post/6860440041039069191#heading-10">参考资料</a></p><h2 id="重启-vscode"><a href="#重启-vscode" class="headerlink" title="重启 vscode"></a>重启 vscode</h2><p><code>ctrl + shift + p</code> 输入 <code>Reload Window</code></p><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><ul><li>Markdown All in One (快捷键自动不全编写 markdown 文档)</li><li>Markdown Preview Enhanced (预览)</li><li>Paste Image (快速插入图片，网站随便找图片，复制图片，ctrl+alt+v)</li></ul><h2 id="终端使用-cmder"><a href="#终端使用-cmder" class="headerlink" title="终端使用 cmder"></a>终端使用 cmder</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&quot;,</span></span><br><span class="line">  <span class="attr">&quot;terminal.external.windowsExec&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\WINDOWS\\System32\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\WINDOWS\\System32\\cmd.exe&quot;,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.env.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;CMDER_ROOT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[D:\\install\\cmder\\Cmder]&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shellArgs.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;/k&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;[D:\\install\\cmder\\Cmder]\\vendor\\init.bat&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>配置默认终端<ul><li><code>ctrl+shift+P</code>:输入 <code>&gt;terminal:select default profile</code></li></ul></li></ul><h3 id="配置代码片段"><a href="#配置代码片段" class="headerlink" title="配置代码片段"></a>配置代码片段</h3><p>1、复制需要生成的代码</p><p>2、<a href="https://snippet-generator.app/">生成</a> 该网站生成</p><blockquote><p>${1:home} 每次生成的时候，光标都会定位，可以直接修改</p></blockquote><blockquote><p>如果 有 ${2:home} 生成后按 tab 键 修改下一个</p></blockquote><p><img src="/../../static/img/2023-01-15_160614.jpg"></p><p>3、vscode 首选项添加</p><p>4、新建页面，输入 prefix 值自动导入</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2023/01/01/linux/linux-nginx/"/>
      <url>/2023/01/01/linux/linux-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="开启-nginx"><a href="#开启-nginx" class="headerlink" title="开启 nginx"></a>开启 nginx</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="http://nginx.org/en/download.html">下载</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本</span></span><br><span class="line">Nginx 开源版</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在开源版上添加扩展很多功能</span></span><br><span class="line">Nginx Plus 商业版 https://www.nginx.com</span><br><span class="line">Openresty 其他开源版 http://openresty.org</span><br><span class="line">tengine 其他开源版 http://tengine.taobao.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开源版</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">随便找个位置</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.24.0.tar.gz</span><br><span class="line">tar -xf http://nginx.org/download/nginx-1.24.0.tar.gz</span><br><span class="line">cd nginx-1.24.0</span><br><span class="line">chmod +x configure</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">依赖环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">c编译器</span></span><br><span class="line">yum -y install gcc gcc-c++ autoconf automake make</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解析正则的pcre库</span></span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加对gzip的支持</span></span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SSL</span></span><br><span class="line">yum -y install pcre  pcre-devel zlib  zlib-devel openssl openssl-devel</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始安装</span></span><br><span class="line">./configure --with-stream # 同时安装stream模块，后期处理tcp转发</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他参数</span></span><br><span class="line">--prefix=/usr/local/nginx # 指定安装目录，默认就是这里</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装完成之后编译</span></span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装编译后的文件（成功后位置 `/usr/local/nginx `或`/usr/share/nginx`）</span></span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将ng的sbin位置也添加到PATH环境变量中</span></span><br><span class="line">export PATH=&quot;/usr/local/nginx/sbin/:$PATH&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h3 id="配置-systemctl"><a href="#配置-systemctl" class="headerlink" title="配置 systemctl"></a>配置 systemctl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 nginx.service</span></span><br><span class="line">vim /lib/systemd/system/nginx.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置内容</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx service   # 描述服务</span><br><span class="line">After=network.target  # 描述服务类别</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking  # 是后台运行的形式</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx         # nginx的可执行路径</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">ExecQuit=/usr/local/nginx/sbin/nginx -s quit # 优雅关闭，连接的存在工作中的，等待完成再关闭</span><br><span class="line">PrivateTmp=true # 表示给服务分配独立的临时空间</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target  # 运行级别 自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">systemctl start nginx.service # 启动</span><br><span class="line">systemctl list-unit-files | grep nginx #查看是否自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将/usr/local/nginx 软连接到 /etc下</span></span><br><span class="line">ln -s /usr/local/nginx /etc/nginx</span><br></pre></td></tr></table></figure><h3 id="添加模块"><a href="#添加模块" class="headerlink" title="添加模块"></a>添加模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当时安装时的参数</span></span><br><span class="line">nginx -V</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入nginx 安装包位置，重新安装</span></span><br><span class="line">./configure --with-stream --with-http_ssl_module</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make 编译，不要make install，不然会覆盖你的nginx目录</span></span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份 /usr/local/nginx/sbin/nginx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx-1.24.x/objs 下的 nginx 覆盖到 /usr/local/nginx/sbin/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nginx-源"><a href="#nginx-源" class="headerlink" title="nginx 源"></a>nginx 源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 yum-utils，此插件可让我们自主选择 yum 源</span></span><br><span class="line">yum install yum-utils -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加</span></span><br><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=0</span><br><span class="line">module_hotfixes=true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换 yum 源为 Nginx 稳定版本的 yum 源</span></span><br><span class="line">yum-config-manager --enable nginx-stable</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看yum上的Nginx版本</span></span><br><span class="line">yum info nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum install nginx -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务，关闭防火墙或开发80端口，与服务器还需要去安全组开放80端口</span></span><br><span class="line">xx.xx.xx.xx:80</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conf  # 配置文件</span><br><span class="line">html  # 默认静态文件</span><br><span class="line">logs  # 日志</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">每个人的范围都会写到日志里，无限扩增，一定大小会写到其他文件，如果磁盘满了，就会有各种问题</span></span><br><span class="line">sbin  # 执行指令</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>正常情况下只有本机才能范围 nginx 开启的服务，局域网内其他设备无法访问到的</p><p>其他设备只能访问到本机，访问不到本机上的虚拟机</p><p>解决方案</p><ul><li>本机 window 上安装 nginx，其他设备访问本机，通过 nginx 代理到虚拟机的服务中</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件解析</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一部分全局配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">作用:从文件开始到events直接的部分，主要处理一些影响nginx服务器整体运行的配置指令</span></span><br><span class="line">worker_processes  1; # nginx处理并发的数量（一般 最多设置内核线程数）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第二部事件配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">作用:里面的指令主要音响nginx服务器与用用户的网络链接</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; # 最大链接数目</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第三部分http配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">包括http全局块、server块</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types; # 引入其他文件（用于服务器告诉客户端，响应的数据是什么类型，可以自己加）</span><br><span class="line">    default_type  application/octet-stream;# mime.types 中没有的类型 就用这个默认类型</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on; # 数据 0 拷贝(用户请求数据，Nginx 不从硬盘复制数据转给用户，直接让操作系统从硬盘把数据发给用户)</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    # 负载均衡配置 一</span><br><span class="line">    # 测试:http://192.168.1.104/vod/index.html 刷新会按顺序获取包含服务的相应页面</span><br><span class="line">    upstream myserver &#123; # 配置分发负载的服务器列表</span><br><span class="line">    server 192.168.1.104:8000;</span><br><span class="line">    server 192.168.1.104:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 配置虚拟主机相关信息，可以很多个，互不干扰(重要)</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80; # 防火墙要开通80端口</span><br><span class="line">        server_name  192.168.1.104;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123; # 访问路径（URI 资源，不包括域名端口）符合该正则时做的事情</span><br><span class="line">            root   html;</span><br><span class="line">            proxy_pass http://myserver; # 上面定义的名称</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html; # 500 502 503 504 这些错误码都会到 50x.html 页面</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # 反向代理案例</span><br><span class="line">    # 反向代理转发,访问http://192.168.1.104:9001 时候 根据条件代理到 http://127.0.0.1:8080 和 .....:8000服务器</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       9001;</span><br><span class="line">        server_name  192.168.1.104;</span><br><span class="line">        # = 严格匹配</span><br><span class="line">        # ~ uri包含正则，区分大小写</span><br><span class="line">        # ~* uri包含正则，不区分大小写</span><br><span class="line">        # ~~</span><br><span class="line">        location ~ /edu/ &#123;</span><br><span class="line">            root   html;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080; #80r800 这个服务下面需要有edu这个文件夹</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ /vod/ &#123;</span><br><span class="line">            root   html;</span><br><span class="line">    proxy_pass http://127.0.0.1:8000; #8000 这个服务下面需要有vod这个文件夹</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # 动静分离</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       9002;</span><br><span class="line">        server_name  192.168.1.104;</span><br><span class="line">        location /www/ &#123; # 范围路径有www的时候</span><br><span class="line">            root  /data/; # root /data/ 设置为静态资源服务器  , root 要缓存alias</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        location /image/ &#123;</span><br><span class="line">            root  /data/;</span><br><span class="line">            autoindex on; # 列出当前文件夹的文件列表</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vue <span class="built_in">history</span> 模式 ，如果 URL 不匹配任何静态资源，它应提供与你的应用程序中的 index.html 相同的页面。</span></span><br><span class="line">location / &#123;</span><br><span class="line">  try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>nginx 是一个<code>高性能</code>的<code>HTTP</code>和<code>反向代理服务器</code>,<code>占用内存少</code>、<code>并发能力强</code></li><li><code>热部署</code>:持续运行，在不关闭服务情况下升级软件版本</li><li>nginx -s reload 重新加载配置文件</li><li>nginx -t 查看配置文件错误位置</li></ul><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><blockquote><p>你们各种用户全部来访问我(nginx),我把你们的请求转给其他各个服务</p></blockquote><h3 id="正向代理-客户端配置"><a href="#正向代理-客户端配置" class="headerlink" title="正向代理(客户端配置)"></a>正向代理(客户端配置)</h3><ul><li>在<code>客户端</code>配置<code>代理服务器</code>，通过<code>代理服务器</code>进行互联网访问</li><li>如:电脑不能访问谷歌，配置 vpn，通过 vpn 代理访问<br><img src="/../../static/img/linux-nginx1.png" alt="图1"></li></ul><h3 id="反向代理-服务端配置"><a href="#反向代理-服务端配置" class="headerlink" title="反向代理(服务端配置)"></a>反向代理(服务端配置)</h3><ul><li>客户端不需要任何配置，将请求发送到反向代理服务器,由反向代理服务器去选择目标服务获取数据返回(tomcat)<br><img src="/../../static/img/linux-nginx2.png" alt="图2"></li><li>案例(实现图 6 操作)<ul><li>window 修改 host (无所谓)</li><li>访问 nginx 服务</li><li>nginx 配置 <code>proxy_pass http://127.0.0.1:8080;</code>,让 window 用户访问到服务器上 8080 这个服务</li></ul></li></ul><p><img src="/../../static/img/linux-nginx6.png" alt="图6"></p><h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h2><blockquote><p>如果有三台服务器，先不管负载均衡的权重，第一请求转服务器 1，第二请求转服务器 2，第三请求转服务器 3，第四转 1，论这给</p></blockquote><h2 id="负载-压力-均衡"><a href="#负载-压力-均衡" class="headerlink" title="负载(压力)均衡"></a>负载(压力)均衡</h2><ul><li>资源大的服务器多接点，小的少接点</li><li>场景:传统<code>发送服务器请求</code>-&gt;<code>处理数据</code>-&gt;<code>可能要操作SQL</code>-&gt;<code>返回结果</code></li><li>问题:信息数量、访问、数据、业务复杂度等增长造成请求<code>日益缓慢</code>，<code>并发量大</code>还容易造成服务器崩溃</li><li>解决方案<ul><li>提高服务器配置(不好)</li><li>负载均衡:增加<code>服务器数量</code>，将<code>请求分发</code>到各个服务器上，将原先请求<code>集中到单个服务器</code>的情况改为<code>分发到多个服务器</code>,从而将<code>负载</code>分发到不同的服务器</li><li>实现:请求不是直接发送到服务器,而是发送到反向代理服务器,在分发到各个不同的服务器<br><img src="/../../static/img/linux-nginx3.png" alt="图3"></li></ul></li><li>配置两步</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`http块下`</span><br><span class="line">upstream myserver &#123; # 配置分发负载的服务器列表,三种种分配方式，位置不能变，真实环境一种就可以了</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.1.104:8000 weight=5;</span><br><span class="line">    server 192.168.1.104:8080 weight=10;</span><br><span class="line">    fail;</span><br><span class="line">&#125;</span><br><span class="line">`localhost下`</span><br><span class="line">proxy_pass http://myserver; # 上面定义的名称</span><br></pre></td></tr></table></figure><ul><li>分配策略<ul><li>默认轮训(按顺序)</li><li>权重(weight)<ul><li>默认 1 权重越高，分配的客户端越多</li></ul></li><li>ip_hash<ul><li>每个请求按 ip 的 hash 分配，每个用固定访问一个服务器</li></ul></li><li>fair<ul><li>按照请求的响应时间分配，响应块的服务器优先分配</li></ul></li></ul></li></ul><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><ul><li>概念:动态请求与静态请求通(静态资源)过不同的服务器来解析,加快解析速度，降低单个服务器的压力</li><li>通过 location 指定不同后缀名实现不同转发</li><li>expires 设置缓存过期时间，减少与服务器的交流，缓存后不会去服务器获取，只会返回 304，服务器通过对比文件最后更新时间是否发生变化，判断是否要重新下载<br><img src="/../../static/img/linux-nginx4.png" alt="图4"><br><img src="/../../static/img/linux-nginx7.png" alt="图7"></li></ul><h2 id="location-里的属性"><a href="#location-里的属性" class="headerlink" title="location 里的属性"></a>location 里的属性</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /img/ &#123; # 配置静态资源服务器</span><br><span class="line">    alias /var/www/image/;</span><br><span class="line">    autoindex on; # 列出文件列表</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">若按照上述配置的话，则访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /img/ &#123;</span><br><span class="line">    root /var/www/image;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若按照这种配置的话，则访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按顺序先找index.html 如果没有再找 index.htm</span></span><br></pre></td></tr></table></figure><h2 id="nginx-配置高可以集群"><a href="#nginx-配置高可以集群" class="headerlink" title="nginx 配置高可以集群"></a>nginx 配置高可以集群</h2><ul><li>为了 nginx 挂了,程序还能正常执行</li><li>准备<ul><li>两个配置好 nginx 的服务器</li><li>都安装 keepalived (<code>/etc/keepalived/</code>) 配置主从服务器</li><li>keepalived 配置文件可以配置虚拟 ip、检测脚本路径、检测脚本中测试是否切换</li><li>启动两个<code>nginx</code>和<code>keepalived</code><ul><li>systemctl start keepalived.service</li></ul></li><li>ifconfig 会多次虚拟 ip</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/keepalived/keepalived.conf</span></span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123; #chk_nginx自定义</span><br><span class="line">    script &quot;/etc/keepalived/nginx_check.sh&quot; ## 检测 nginx 状态的脚本路径</span><br><span class="line">    interval 2 # 检测时间间隔</span><br><span class="line">    weight -20 # 如果条件成立，权重-20</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123; # 配置虚拟ip</span><br><span class="line">    state MASTER # 备份服务器将MASTER 改为 BACKUP</span><br><span class="line">    interface eth0 # 在使用的网卡 常用ip的那个</span><br><span class="line">    virtual_router_id 51 # 主、备用服务器的这个id必须相同</span><br><span class="line">    priority 100  # 主、备用服务器的优先级，主大、备小</span><br><span class="line">    advert_int 1 # 心跳包</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">                chk_nginx ## 执行 Nginx 监控的服务</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.16  # 虚拟ip地址</span><br><span class="line">        192.168.200.17</span><br><span class="line">        192.168.200.18</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shell 检测脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">A=`ps -C nginx --no-header |wc -l`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断nginx是否挂掉，如果挂掉了，尝试重启</span></span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">    /usr/local/nginx/sbin/nginx</span><br><span class="line">    # 等待一小会再次检查nginx，如果没有启动成功，则停止keepalived，使其启动备用机</span><br><span class="line">    sleep 3</span><br><span class="line">    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then</span><br><span class="line">        killall keepalived</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../../static/img/linux-nginx8.png" alt="图8"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h3 id="内网穿透工具"><a href="#内网穿透工具" class="headerlink" title="内网穿透工具"></a>内网穿透工具</h3><h4 id="natapp"><a href="#natapp" class="headerlink" title="natapp"></a>natapp</h4><p>1、<a href="https://natapp.cn/">natapp</a> 注册账号、实名认证、创建免费隧道、得到一个 <strong>authtoken</strong></p><p>2、<a href="https://natapp.cn/#download">下载</a>、指令传到 <code>/usr/local/natapp</code></p><p>3、执行 <code>./natapp -authtoken=712a064e3b816dd9lzo</code> 得到域名</p><p>4、后台执行 <code>nohup ./natapp -authtoken=712a064e3b816dd9lzo -log=stdout &amp;</code></p><hr><p><a href="https://juejin.cn/post/6844903701459501070#heading-6">掘金</a><br><a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html">菜鸟</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2023/01/01/linux/linux-vim/"/>
      <url>/2023/01/01/linux/linux-vim/</url>
      
        <content type="html"><![CDATA[<h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`V|v`</span> 视觉选择模式</span><br><span class="line">    -   多行编辑</span><br><span class="line">        -   <span class="string">`ctrl+v`</span></span><br><span class="line">        -   <span class="string">`选择要操作行`</span>的第一格</span><br><span class="line">        -   停留在<span class="string">`最后一行`</span>，输入<span class="string">`大写I`</span> 进入<span class="string">`插入模式`</span>并更改</span><br><span class="line">        -   <span class="string">`esc`</span></span><br><span class="line">    -   <span class="string">`i`</span> （inner）字符</span><br><span class="line">        -   <span class="string">`viw`</span>:精准选择光标所在的字符</span><br><span class="line">        -   <span class="string">`vi&quot;`</span>:精准选择光标所在的双引号内的字符</span><br><span class="line">        -   拓展:<span class="string">`vi(`</span>、<span class="string">`vi[`</span>、<span class="string">`vit`</span>....:<span class="string">`t代表标题`</span></span><br><span class="line">        -   拓展:<span class="string">`di(`</span>、<span class="string">`di&quot;`</span>、<span class="string">`dit`</span>....:删除范围内的字符</span><br><span class="line">        -   <span class="string">`v&#125;`</span>:选择段落（可以与移动的符号联合起来用）</span><br><span class="line">    -   <span class="string">`a`</span> 字符</span><br><span class="line">    -   编辑模式下 <span class="title class_">Ctrl</span>+w 删除一个单词</span><br><span class="line">        与 i 一样，但是操作的对象包括符号</span><br><span class="line">    -   <span class="string">`o`</span></span><br><span class="line">    -   退出插模式 <span class="string">`esc`</span>,<span class="string">`c-c`</span>,<span class="string">`c-[`</span></span><br></pre></td></tr></table></figure><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-   右下上左 -&gt; <span class="string">`H、J、K、L`</span>(vim-adventures.<span class="property">com</span>)</span><br><span class="line">-   页尾、首行、行尾、行头 -&gt; <span class="string">`G、gg、$、^|0`</span></span><br><span class="line">-   单词跳跃、段落跳跃 -&gt; <span class="string">`w|W、&#123;&#125;`</span></span><br><span class="line">-   跳跃一点点 -&gt; <span class="string">`gj、gk `</span></span><br><span class="line">-   <span class="string">`f|F + 字母`</span> -&gt; 从光标处跳到下一个或上一个该字母的位置</span><br><span class="line">-   定位到页面上中下 -&gt; <span class="string">`zz zt zb`</span></span><br><span class="line">-   数字 + gg -&gt; 跳到数字行</span><br><span class="line">-   <span class="string">`ctrl+b|f`</span>:上下反野</span><br><span class="line">-   <span class="string">`&#123;&#125;`</span>:段落跳跃</span><br><span class="line">-   <span class="string">`w`</span>:下一个单开头</span><br><span class="line">-   <span class="string">`b`</span>:上一个单词开头</span><br><span class="line">-   <span class="string">`e`</span>:下一个单词结尾</span><br><span class="line">-   <span class="string">`ge`</span>:上一个单词词尾</span><br></pre></td></tr></table></figure><h3 id="折行"><a href="#折行" class="headerlink" title="折行"></a>折行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`zf`</span>:zb、l 等展开</span><br><span class="line">-   <span class="string">`zfip`</span>:折叠段落</span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-   搜索 / -&gt; <span class="string">`N|n`</span> 上下搜索 (<span class="string">`:set hlsearch`</span> 匹配高亮)</span><br><span class="line">-   直接搜索 -&gt; <span class="string">`*`</span> 搜索游标所在的词</span><br></pre></td></tr></table></figure><h3 id="复制、粘贴"><a href="#复制、粘贴" class="headerlink" title="复制、粘贴"></a>复制、粘贴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`y`</span></span><br><span class="line">    -   暂存器<span class="string">`&quot;[a-zA-Z0-9]`</span>随意使用</span><br><span class="line">    -   系统剪切板<span class="string">`&quot;+yy`</span>,<span class="string">`&quot;+p`</span></span><br><span class="line">    -   <span class="string">`&quot;ay`</span>: 将内容复制到暂存器 a 中</span><br><span class="line">    -   <span class="string">`&quot;ap`</span>: 粘贴暂存器 a 的内容</span><br><span class="line">    -   <span class="string">`:reg`</span>:查看暂存器内容</span><br><span class="line">    -   <span class="string">`:set clipboard=unnamed`</span>:与系统共享剪切板 plug</span><br><span class="line">    -   系统剪切板需要看vim 版本的clipboard前面是否为+</span><br><span class="line">-   <span class="string">`p`</span>:p 向后粘贴、P 向前粘贴</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`d`</span></span><br><span class="line">-   <span class="string">`c`</span>:删除并进入插入模式</span><br><span class="line">-   <span class="string">`C`</span>:删除当前位置到结尾并进入插入模式</span><br><span class="line">-   <span class="string">`x|X`</span>:直接删除游标所在字符，退格，删除光标前面的字符</span><br></pre></td></tr></table></figure><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`r`</span>:替换</span><br><span class="line">-   <span class="string">`~`</span>:大小写转换</span><br><span class="line">-   命令替换</span><br><span class="line">    -   <span class="string">`:[range]s/key/newkey/[option]`</span></span><br><span class="line">    -   <span class="string">`range`</span></span><br><span class="line"></span><br><span class="line">        -   <span class="string">`1,20`</span>:<span class="number">1</span> 到 <span class="number">20</span> 行</span><br><span class="line">        -   <span class="string">`%`</span>:全局</span><br><span class="line">        -   <span class="string">`1,.`</span>: 替换第一行到当前行</span><br><span class="line">        -   <span class="string">`.,$`</span>:替换当前行到最后一行</span><br><span class="line">        -   <span class="string">`1,$`</span>: 替换第一行到最后一行,相当于 :%s</span><br><span class="line"></span><br><span class="line">    -   <span class="string">`s`</span>:替换</span><br><span class="line">    -   <span class="string">`key`</span>:</span><br><span class="line">        -   特殊字符用\转义:将<span class="string">`&quot;123\\&quot;`</span> 替换成 <span class="string">`&#x27;123//&#x27;`</span> 的指令为<span class="string">`:s/\&quot;123\/\/\&quot;/\&#x27;123\\\\\&#x27;/g`</span></span><br><span class="line">    -   <span class="string">`newkey`</span></span><br><span class="line">    -   <span class="string">`option`</span>: -<span class="string">`g`</span>:全局 -<span class="string">`c`</span>:确认 -<span class="string">`p`</span>:结果逐行显示 -<span class="string">`/gcp`</span>:组合写法</span><br></pre></td></tr></table></figure><h3 id="撤销、反撤销"><a href="#撤销、反撤销" class="headerlink" title="撤销、反撤销"></a>撤销、反撤销</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="string">`u、ctrl+r`</span>;</span><br></pre></td></tr></table></figure><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`&gt;&gt;`</span></span><br><span class="line">-   <span class="string">`3&gt;&gt;`</span></span><br><span class="line">-   选择代码 + =号:自动缩进</span><br><span class="line">-   设置缩进长度 :set shiftwidth=n</span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-   直接打开新文件</span><br><span class="line">    -   <span class="string">`:e filepath`</span></span><br><span class="line">    -   <span class="string">`:e`</span>:刷新当前文件</span><br><span class="line">    -   <span class="string">`:tabe xxx,:e filepath`</span>:新建 tab 页再打开文件</span><br><span class="line">    -   <span class="string">`gt|gT`</span>:切换 tab 页</span><br><span class="line">    -   <span class="string">`vim -p files`</span>:通过 tab 页方式打开多个文件</span><br><span class="line">-   从外部读取内容 到文件中</span><br><span class="line">    -   <span class="string">`:read !cat file`</span></span><br><span class="line">    -   <span class="string">`:read !ascii`</span></span><br><span class="line">-   多文件操作</span><br><span class="line">    - vim <span class="string">`file file2 filee ...`</span></span><br><span class="line">    - vim $(grep xxx -rl ./)  查到多个文件直接打开</span><br><span class="line">    - <span class="string">`:ls`</span>:查看当前窗口文件列表以及<span class="string">`编号`</span></span><br><span class="line">    - <span class="string">`C+6 或 e#`</span>:回到前一个打开的文件</span><br><span class="line">    - <span class="string">`n C+6`</span>:直接切换到第<span class="string">`编号为`</span>n的文件（先按编号 再按<span class="title class_">Ctrl</span>+<span class="number">6</span> 跳转）</span><br><span class="line">    - <span class="string">`:bn`</span>:下一个文件</span><br><span class="line">    - <span class="string">`:bp`</span>:上一个文件</span><br><span class="line">    - <span class="string">`C+n`</span>:<span class="title class_">PlugInstal</span> 中可以使用</span><br></pre></td></tr></table></figure><h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-   水平垂直分屏<span class="string">`:new|vnew`</span></span><br><span class="line">    <span class="string">`ctrl+w ,w`</span>:切换窗格</span><br><span class="line">    <span class="string">`ctrl+w ,j`</span>:向下切换</span><br><span class="line">    <span class="string">`ctrl+w ,k`</span>:向上切换</span><br><span class="line">    <span class="string">`ctrl+w ,h`</span>:向左切换</span><br><span class="line">    <span class="string">`ctrl+w ,l`</span>:向右切换</span><br></pre></td></tr></table></figure><h3 id="环绕操作"><a href="#环绕操作" class="headerlink" title="环绕操作"></a>环绕操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-<span class="string">`d s &lt;existing char&gt; 删除两边的指定字符`</span> -</span><br><span class="line">  <span class="string">`c s &lt;existing char&gt; &lt;desired char&gt; 修改两边的指定字符`</span> -</span><br><span class="line">  <span class="string">`y s &lt;motion&gt; &lt;desired char&gt; 修改两边字符`</span> -</span><br><span class="line">  <span class="string">`S &lt;desired char&gt; visual modes 选中指定字符中间的内容`</span> -</span><br><span class="line">  <span class="string">`&quot;test&quot; 输入 cs&quot;&#x27;修改为 &#x27;test&#x27;`</span> -</span><br><span class="line">  <span class="string">`&quot;test&quot; 输入ds&quot; 修改为 test`</span> -</span><br><span class="line">  <span class="string">`&quot;test&quot; 输入 cs&quot;t 123&gt;修改为&lt;123&gt;test&lt;/123&gt;`</span> -</span><br><span class="line">  <span class="string">`test 输入 ysaw) 修改为 (test)`</span>;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-   重复上一次操作</span><br><span class="line">    -   小数点<span class="string">` .`</span></span><br><span class="line">-   合并行:或合并选择的行 pacman -R $(pacman -<span class="title class_">Qdtq</span>)</span><br><span class="line">    -   <span class="string">`J`</span></span><br><span class="line">-   编辑模式下 <span class="title class_">Ctrl</span>+w 删除一个单词</span><br><span class="line">-   编辑模式下 <span class="title class_">Ctrl</span>+u 删除到行头</span><br><span class="line">-   <span class="string">`:! ls xxx`</span>:暂时离开做一件事情</span><br><span class="line">-   <span class="string">`:r !ls xxx`</span>:将查到的东西粘贴到文件中</span><br><span class="line">-   <span class="string">`vimtutor zh_zw`</span>:练习</span><br><span class="line">-   <span class="string">`:h xxx`</span>:帮助</span><br></pre></td></tr></table></figure><h3 id="宏操作"><a href="#宏操作" class="headerlink" title="宏操作"></a>宏操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-   q+宏名(随便一个字母)</span><br><span class="line">-   操作完成，再按q结束宏录制</span><br><span class="line">-   @宏名使用对应指令</span><br><span class="line">-   <span class="number">9</span>@宏名，使用<span class="number">9</span>次</span><br><span class="line">-   或:指令模式下<span class="string">`:%normal! @d`</span> %每一行,normal模式下 使用宏d</span><br><span class="line">-   :<span class="string">&#x27;&lt;,&#x27;</span>&gt; normal @d :可是快,选择的行执行宏(:xxxg/^/ norm @a)</span><br><span class="line">-   :reg 寄存器中查看录制好宏</span><br><span class="line">-   .<span class="property">vimrc</span> <span class="string">`let @a=&quot;:! node %&quot;`</span> 永久保存</span><br></pre></td></tr></table></figure><h2 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h2><h3 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`w:word`</span> 单词</span><br><span class="line">-   <span class="string">`s:sentence`</span> 句子</span><br><span class="line">-   <span class="string">`p:paragraph`</span> 段落</span><br><span class="line">-   <span class="string">`t:tag`</span> 标签</span><br><span class="line">-   <span class="string">`&#x27;`</span>、<span class="string">`&quot;`</span>、<span class="string">`()`</span>、<span class="string">`&#123;&#125;`</span>、<span class="string">`[]`</span></span><br></pre></td></tr></table></figure><h3 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`y:yank`</span>:复制</span><br><span class="line">-   <span class="string">`p:paste`</span>:粘贴</span><br><span class="line">-   <span class="string">`d:delete`</span>:删除</span><br><span class="line">-   <span class="string">`c:change`</span>:修改</span><br><span class="line">-   <span class="string">`v`</span>:选择</span><br></pre></td></tr></table></figure><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`i`</span>:在什么什么之内</span><br><span class="line">-   <span class="string">`a`</span></span><br></pre></td></tr></table></figure><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-数字;</span><br></pre></td></tr></table></figure><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`vis`</span>:选择一句话</span><br><span class="line">-   <span class="string">`vi&quot;`</span>:选择单引号内</span><br><span class="line">-   <span class="string">`v3w`</span></span><br><span class="line">-   <span class="string">`d3w`</span></span><br><span class="line">-   <span class="string">`3dd`</span></span><br><span class="line">-   <span class="string">`....`</span></span><br></pre></td></tr></table></figure><h3 id="vscodevim"><a href="#vscodevim" class="headerlink" title="vscodevim"></a>vscodevim</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`gd`</span> - <span class="title class_">Go</span> to definition, 跳转到定义。</span><br><span class="line">-   <span class="string">`gb`</span> - 找出与光标下相同的下一个单词, 并添加一个光标 ，接下来就可以同时修改。</span><br><span class="line">-   <span class="string">`gh`</span> - 等同于将鼠标移至光标所在单词, 方便查看定义以及报错</span><br></pre></td></tr></table></figure><h2 id="键盘字符功能"><a href="#键盘字符功能" class="headerlink" title="键盘字符功能"></a>键盘字符功能</h2><h3 id="第二行"><a href="#第二行" class="headerlink" title="第二行"></a>第二行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`~ or 反点`</span>:<span class="string">`~`</span>大小写转换，<span class="string">`返点`</span>跳转到m设置的标注(<span class="string">&quot;`a&quot;</span>)</span><br><span class="line">-   <span class="string">`!`</span>:ex命令模式下执行外部指令<span class="string">`:!ls`</span>,或强制保存或退出<span class="string">`:wq!`</span></span><br><span class="line">    -   :! sh %   直接执行当前文件</span><br><span class="line">-   <span class="string">`@`</span>:运行宏</span><br><span class="line">-   <span class="string">`#`</span>:上一个索引(?)</span><br><span class="line">-   <span class="string">`$`</span>:行尾</span><br><span class="line">-   <span class="string">`%`</span>:括号匹配(定位到括号的另一边)</span><br><span class="line">-   <span class="string">`^`</span>:行首</span><br><span class="line">-   <span class="string">`&amp;`</span>:(?)</span><br><span class="line">-   <span class="string">`*`</span>:下一个索引(?)</span><br><span class="line">-   <span class="string">`(`</span>:句子首</span><br><span class="line">-   <span class="string">`) or 0`</span>:<span class="string">`)`</span>下一句首,<span class="string">`0`</span>行首</span><br><span class="line">-   <span class="string">`-`</span>:前一行行首</span><br><span class="line">-   <span class="string">`+ or =`</span>:<span class="string">`+`</span>后一行行首，<span class="string">`=`</span>自动格式化</span><br></pre></td></tr></table></figure><h3 id="第三行"><a href="#第三行" class="headerlink" title="第三行"></a>第三行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`Q or q`</span>:<span class="string">`Q`</span>切换ex模式，<span class="string">`q`</span>录制宏(qa)</span><br><span class="line">-   <span class="string">`W or w`</span>:都是跳转下一个单词<span class="string">`词头`</span></span><br><span class="line">-   <span class="string">`E or e`</span>:都是跳转下一个单词<span class="string">`词尾`</span></span><br><span class="line">-   <span class="string">`R or r`</span>:<span class="string">`R`</span>进入单字符修改模式(否则修改多个每次都要先按r),<span class="string">`r`</span>单字符修改</span><br><span class="line">-   <span class="string">`T or t`</span>:(?)</span><br><span class="line">-   <span class="string">`Y or y`</span>:<span class="string">`Y`</span>拷贝行，<span class="string">`y`</span>拷贝,灵活组合使用</span><br><span class="line">-   <span class="string">`U or u`</span>:<span class="string">`U`</span>撤销光标所在行内命令，<span class="string">`u`</span>撤销命令</span><br><span class="line">-   <span class="string">`I or i`</span>:<span class="string">`I`</span>进入插入模式并定位到行首,<span class="string">`i`</span>进入插入模式定位到当前字符前</span><br><span class="line">-   <span class="string">`O or o`</span>:<span class="string">`O`</span>进入插入模式并分段定位前一行,<span class="string">`o`</span>进入插入模式并分段定位下一行</span><br><span class="line">-   <span class="string">`P or p`</span>:<span class="string">`P`</span>向前粘贴，<span class="string">`p`</span>向后粘贴</span><br><span class="line">-   <span class="string">`&#123; or [`</span>:<span class="string">`&#123;`</span>段首，<span class="string">`[[`</span>文尾(gg)</span><br><span class="line">-   <span class="string">`&#123; or [`</span>:<span class="string">`&#125;`</span>段尾，<span class="string">`]]`</span>文头(G)</span><br></pre></td></tr></table></figure><h3 id="第四行"><a href="#第四行" class="headerlink" title="第四行"></a>第四行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`A or a`</span>:<span class="string">`A`</span>进入插入模式并定位到行尾,<span class="string">`i`</span>进入插入模式定位到当前字符后</span><br><span class="line">-   <span class="string">`S or s`</span>:<span class="string">`S`</span>删除行并进入插入模式，<span class="string">`s`</span>删除字符并进入插入模式</span><br><span class="line">-   <span class="string">`D or d`</span>:<span class="string">`D`</span>删除至行尾，<span class="string">`d`</span>删除功能灵活组合使用</span><br><span class="line">-   <span class="string">`F or f`</span>:<span class="string">`F`</span>单字符反向查找，<span class="string">`f`</span>单字符正向查找(f,输入要查找的字符,f/F上一个下一个)</span><br><span class="line">-   <span class="string">`G or g`</span>:G,gg,ngg，行跳转灵活组合使用</span><br><span class="line">-   <span class="string">`H or h`</span>:<span class="string">`H`</span>屏幕顶行，<span class="string">`h`</span>左箭头</span><br><span class="line">-   <span class="string">`J or j`</span>:<span class="string">`J`</span>合并两行，<span class="string">`j`</span>下箭头</span><br><span class="line">-   <span class="string">`K or k`</span>:<span class="string">`K`</span>帮助文档，<span class="string">`k`</span>上箭头</span><br><span class="line">-   <span class="string">`L or l`</span>:<span class="string">`L`</span>屏幕底行，<span class="string">`l`</span>右箭头</span><br><span class="line">-   <span class="string">`: or ;`</span>:<span class="string">`:`</span>ex模式，<span class="string">`;`</span>重复t/T/f/F</span><br><span class="line">-   <span class="string">`&quot; or &#x27;`</span>：<span class="string">`&quot;`</span>寄存器，<span class="string">`&quot;ayy`</span>设置寄存器a，作用是yy,通过<span class="string">`:reg`</span>查看， <span class="string">`&#x27;`</span>(?)</span><br><span class="line">-   <span class="string">`| or \`:`</span>|<span class="string">`行首，`</span>\<span class="string">`未用</span></span><br></pre></td></tr></table></figure><h3 id="第五行"><a href="#第五行" class="headerlink" title="第五行"></a>第五行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="string">`Z or z`</span>:<span class="string">`Z`</span>(?),<span class="string">`zz`</span>如果行数足够，能将当前干定位到屏幕中间</span><br><span class="line">-   <span class="string">`X or x`</span>:<span class="string">`X`</span>退格删除字符,<span class="string">`x`</span>删除光标所在一个字符</span><br><span class="line">-   <span class="string">`C or c`</span>:<span class="string">`C`</span>修改至行尾,<span class="string">`c`</span>修改，灵活结合使用</span><br><span class="line">-   <span class="string">`V or v`</span>:<span class="string">`V`</span>可视模式，单位行，<span class="string">`v`</span>:可视模式,单位个，灵活结合使用</span><br><span class="line">-   <span class="string">`B or b`</span>:<span class="string">`B`</span>前一个单词，首字符（空格分）,<span class="string">`b`</span>前一个单词首字符,首字符（特殊符号）</span><br><span class="line">-   <span class="string">`N or b`</span>:<span class="string">`N`</span>查找上一处，<span class="string">`n`</span>查找下一处</span><br><span class="line">-   <span class="string">`M or m`</span>:<span class="string">`M`</span>到屏幕中间行,<span class="string">`m`</span>设置标注(ma),通过返点a定位</span><br><span class="line">-   <span class="string">`&lt; or ,`</span>:<span class="string">`&lt;`</span>两下反缩进，<span class="string">`,`</span>反向t/T/f/<span class="title function_">F</span>(作为 leader键使用)</span><br><span class="line">-   <span class="string">`&gt; or .`</span>:<span class="string">`&gt;`</span>按两下缩进，<span class="string">`.`</span>重复上一次操作</span><br><span class="line">-   <span class="string">`? or /`</span>:<span class="string">`?`</span>向前搜索，<span class="string">`/`</span>向后搜索</span><br></pre></td></tr></table></figure><h2 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-保存<span class="string">`ctrl + o`</span> - 退出<span class="string">`ctrl + x`</span>;</span><br></pre></td></tr></table></figure><h3 id="换行符号"><a href="#换行符号" class="headerlink" title="换行符号"></a>换行符号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set ff=unix ，就是告诉 vi 编辑器，使用unix换行符(linux,\n)</span><br><span class="line">set ff=dos ，就是告诉 vi 编辑器，使用dos换行符(win,\n\r)</span><br><span class="line"></span><br><span class="line">win 比 linux 多了\r</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
            <tag> Linux </tag>
            
            <tag> Script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell</title>
      <link href="/2023/01/01/linux/linux-shell/"/>
      <url>/2023/01/01/linux/linux-shell/</url>
      
        <content type="html"><![CDATA[<h2 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- <span class="title function_">ls</span>(命令) -&gt; <span class="title function_">shell</span>(bash、zsh) -&gt; 内核(kemel) -&gt; 硬件</span><br><span class="line">  - <span class="string">`ls`</span>:用户使用文字或图形界面操作操作系统</span><br><span class="line">  - <span class="string">`shell`</span>:接受与来自用户的命令与内核进行沟通，是<span class="string">`用户`</span>与<span class="string">`内核沟通`</span>的接口程序</span><br><span class="line">  - <span class="string">`内核`</span>:控制硬件进行工作，进程管理储存管理等</span><br><span class="line">- shell 对本质是<span class="string">`对内核进行保护`</span>，只有<span class="string">`shell能识别`</span>的命令才能用了操控硬件</span><br><span class="line">- 脚本语言<span class="string">`不需要`</span> 编译,把命令写在文件中就是 shell 脚本了</span><br><span class="line">- <span class="string">`shell脚本`</span>是 shell 命令的<span class="string">`有序集合`</span></span><br><span class="line">- <span class="string">`系统编程`</span>:主要为了让用户更好更方便的操作硬件设备，并且对硬件也起到保护作用，我们所写的程序，本质就是对硬件进行操作，所以操作系统提供的接口本来就能对硬件进行操作的</span><br><span class="line">- <span class="string">`系统调用`</span>:</span><br><span class="line">  - 步骤: shell、library <span class="title function_">rou</span>(库函数)、<span class="title function_">applications</span>(应用层接口) -&gt; system <span class="title function_">calls</span>(系统调用，提供直接操作内核的特殊接口) -   - <span class="title function_">kernel</span>(内核) -&gt; 操作硬件设备</span><br><span class="line">- shell 优势，处理操作系统底层的业务（大量命令为他做支持，grep awk sed 等）</span><br></pre></td></tr></table></figure><h3 id="开启-shell"><a href="#开启-shell" class="headerlink" title="开启 shell"></a>开启 shell</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">- <span class="string">`#!/bin/bash`</span>   指定使用bash解释器,必须顶格,linux 默认bash</span><br><span class="line">- 指定脚本的执行方式</span><br><span class="line">  - 开头 <span class="string">`#！`</span></span><br><span class="line">  - 执行文件的时候 <span class="string">`bash install.sh`</span></span><br><span class="line">  - <span class="string">`/bin/bash`</span> 终端默认使用 bash</span><br><span class="line"></span><br><span class="line">- shell 脚本的执行</span><br><span class="line">- 调用相关环境变量文件，脚本里可以随意使用里面的数据</span><br><span class="line">  - <span class="string">`/home/xx/.bashrc (3)`</span></span><br><span class="line">  - <span class="string">`/home/xx/.bash_profile`</span></span><br><span class="line">  - <span class="string">`/etc/bashrc (4)`</span></span><br><span class="line">  - <span class="string">`/etc/profile (2)`</span></span><br><span class="line">  - <span class="string">`/etc/profile.d`</span> (优先级最高 <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">- 执行shell的方式</span><br><span class="line">  - <span class="string">`bash shellfile`</span> | <span class="string">`sh shellfile`</span> (脚本头没指定解释器)</span><br><span class="line">  - <span class="string">`path/shellfile`</span> | <span class="string">`./shellfile`</span> (没有x权限不能执行)</span><br><span class="line">  - <span class="string">`source shellfile`</span> | <span class="string">`. shellfile`</span>（读入或加载指定shell脚本，可以将脚本中的变量传到当前shell里）</span><br><span class="line"></span><br><span class="line">- 基本规范</span><br><span class="line">  - 开头添加 #!<span class="regexp">/bin/</span>bash 解释器</span><br><span class="line">  - # <span class="title class_">Date</span> 日期</span><br><span class="line">  - # <span class="title class_">Author</span> 作者</span><br><span class="line">  - # <span class="title class_">Mail</span> 联系方式</span><br><span class="line">  - # <span class="title class_">Func</span> 功能</span><br><span class="line">  - # <span class="title class_">Version</span> 版本 。。。</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尽量不要用中文</span></span><br><span class="line">    <span class="comment">// 扩展名以.sh结尾</span></span><br><span class="line">    <span class="comment">// 成对的符号先敲好，不要一个个敲</span></span><br><span class="line">    <span class="comment">// [] 两端必须有空格($[]不算)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line">echo &quot;hello word&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==================定义一个变量</span></span><br><span class="line">num=10 #等号左右不能有空格</span><br><span class="line">readonly age=20 #age不能被改变</span><br><span class="line">export name=&quot;name&quot; #name会被导出为环境变量,其他shell都能使用</span><br><span class="line">declare -i sum # sum是一个整数变量</span><br><span class="line"></span><br><span class="line">echo $num # 使用变量加$</span><br><span class="line">echo $&#123;num&#125;Addstring # 使用变量加$&#123;&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- <span class="string">&quot;&quot;</span> 弱引用 里面可以读取变量</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- ``|$() 把里面的内容当中命令执行，得到执行返回的结果</span></span><br><span class="line">oa=&quot;this is $num ，`date`,$(date)&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- <span class="string">&#x27;&#x27;</span> 强引用 把动态的操作当成字符，</span></span><br><span class="line"></span><br><span class="line">unset num #清除变量</span><br></pre></td></tr></table></figure><h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用<span class="keyword">do</span> 和 down 表示其他语言的&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">if [ 表达式 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;yes&quot;</span><br><span class="line">elif [ 表达式 ];then</span><br><span class="line">    echo &quot;noyes nono&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;no&quot;</span><br><span class="line">fi  # 结束语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if $num</span><br><span class="line">then</span><br><span class="line">    echo &quot;num is true&quot;</span><br><span class="line">elif $&#123;num1&#125;;then</span><br><span class="line">    echo &quot;num1 is true&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;no&quot;</span><br><span class="line">fi  # 结束语句</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">================== <span class="keyword">case</span></span></span><br><span class="line">read -p &quot;请输入任意字符&quot; key</span><br><span class="line">case &quot;$key&quot; in</span><br><span class="line">    [a-z]|[A-Z])</span><br><span class="line">        echo &quot;这是英文字母&quot;</span><br><span class="line">        ;;</span><br><span class="line">    [0-9])</span><br><span class="line">        echo &quot;这是一个数字&quot;</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;这是一个其他字符&quot;</span><br><span class="line">esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">================== <span class="keyword">for</span> 循环</span></span><br><span class="line">for(( i=1; i&lt;=100; i++ ))</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">================== <span class="keyword">for</span> <span class="keyword">in</span></span></span><br><span class="line">for i in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for i in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">     echo $i &amp;  #相当于多进程并发执行 ，适合耗时长，后面程序不依赖当前结果，且计算机资源足够的时候</span><br><span class="line">     # 线程是进程的一部分，shell只能多进程，多线程需要Python的高级语言</span><br><span class="line">     # 这边只适合一条语句，如果复杂可以放到函数里 funcName 12 &amp;</span><br><span class="line">done</span><br><span class="line">wait # 等待循环体全部执行完再做后面事情</span><br><span class="line">xxx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列表</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&#123;1..5&#125; 1-5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$(<span class="built_in">ls</span> /etc)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">================================= <span class="keyword">while</span></span></span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 100 ]</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">    i=$[$i + 1]</span><br><span class="line">    或 i=`expr $i+1`</span><br><span class="line">    或 i=$(( $i+1 ))</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">操作文件</span></span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">    echo &quot;$&#123;line&#125;-change&quot;</span><br><span class="line">done &lt; /etc/passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">until</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">与<span class="keyword">while</span>循环相反，测试成立才退出循环</span></span><br><span class="line">i=1</span><br><span class="line">until [ $i -le 100 ]</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">    i=$[$i + 1]</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">================================== 函数</span></span><br><span class="line">function name &#123; xxx &#125;</span><br><span class="line">name()&#123;</span><br><span class="line">   SUM=$[$1+$2]</span><br><span class="line">   return SUM</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name 1 2  # 通过位置变量接收参数</span><br><span class="line">echo &quot;$?&quot; #获取返回值方式最大255</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在shell中处理()中定义的变量，只要不做任何修饰，都能看做是全局变量</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==================总结</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定解释器的地方</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、shell文件顶端；2、bash shell.sh；3、通过路径执行脚本的终端；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、分号可以合并多行，或者一行执行多条命令</span></span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- echp $PATH</span><br><span class="line">- 存放外部命令的路径</span><br><span class="line">- 访问命令就可以省去前面的路径直接写名字</span><br><span class="line">- 一个<span class="string">`shell脚本`</span>可以看做一个命令</span><br><span class="line">- 如果没在<span class="string">`$PATH`</span>里的路径下,就需要<span class="string">`加上绝对路径`</span>或<span class="string">`相对路径执行`</span>才能执行,</span><br><span class="line">- 或直接通过<span class="string">`/etc/shells`</span>下的解释器直接执行脚本</span><br><span class="line">- <span class="string">`bash shells.sh`</span> -<span class="string">`-n`</span>:检查错误 -<span class="string">`-x`</span>:将脚本中执行的命令也打印出来</span><br></pre></td></tr></table></figure><h3 id="常用的-bash-语句"><a href="#常用的-bash-语句" class="headerlink" title="常用的 bash 语句"></a>常用的 bash 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="string">`shift`</span> 从前面删除一个位置变量</span><br><span class="line">- <span class="string">`export`</span> 定义环境变量</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">- 特殊符号</span><br><span class="line">  - <span class="string">`斜杆`</span>:<span class="string">`echo -e &quot;this \n towline&quot;`</span> 配合 -e 生效</span><br><span class="line">  - <span class="string">`(xxx)`</span>:小括号会创建一个子 shell，里面操作不会影响当前 shell</span><br><span class="line">  - <span class="string">`&#123;xxx&#125;`</span>:大括号里的操作会音响当前 shell</span><br><span class="line">- 算术运算符(<span class="string">`+、-、*、/、%、**`</span>)</span><br><span class="line">  - <span class="string">`$[$a+$b]`</span>:运算+不能直接用,<span class="string">`$[]`</span>或<span class="string">`$(())`</span>或<span class="string">`expr 1 + 2`</span>里的东西当做运算处理<span class="string">&#x27;</span></span><br><span class="line"><span class="string">- 变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - `普通变量(只能在函数或脚本中用)`</span></span><br><span class="line"><span class="string">    - num=1</span></span><br><span class="line"><span class="string">    - 命令定义成变量 xxx=`date +%F`| xxx=$(date +%F) echo $xxx</span></span><br><span class="line"><span class="string">  - `环境变量(全局变量，能在创建他们的shell和他们的子shell中用)`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 一般大写表示</span></span><br><span class="line"><span class="string">    - 常用环境变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      - `$PATH`:用户命令路径</span></span><br><span class="line"><span class="string">      - `$SHELL`:用户使用的 shell</span></span><br><span class="line"><span class="string">      - `$HISTSIZE`:history 查看历史命令，这个可以查看 history 上限</span></span><br><span class="line"><span class="string">      - `$USER`:获取当前用户的名称</span></span><br><span class="line"><span class="string">      - `$HOME`:获取当前用户加</span></span><br><span class="line"><span class="string">      - `$PWD`:获取当前用户工作目录</span></span><br><span class="line"><span class="string">      - `$UID`:获取当前用户的 ID</span></span><br><span class="line"><span class="string">      - `$LANG`:语言</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      - `$SHLVL`:bash 实例个数</span></span><br><span class="line"><span class="string">      - `$TMOUT`:多少秒没操作就自动退出</span></span><br><span class="line"><span class="string">      - `$PS1`:定义终端用户信息格式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 临时更改: PATH = xxxx</span></span><br><span class="line"><span class="string">    - 取消环境变量：unset 变量名</span></span><br><span class="line"><span class="string">    - 定义环境变量</span></span><br><span class="line"><span class="string">      - `export NAME=&quot;name&quot;`:NAM 只有当前 shell 和子 shell 生效</span></span><br><span class="line"><span class="string">      - 添加扩展 PATH:export PATH=&quot;/home/tuotu/bin:$PATH&quot;</span></span><br><span class="line"><span class="string">      - 永久设置</span></span><br><span class="line"><span class="string">        - `bashrc`：用户登录、打开 shell、开子 shell 都会执行</span></span><br><span class="line"><span class="string">          - `/etc/bashrc`</span></span><br><span class="line"><span class="string">          - `~/.bashrc`</span></span><br><span class="line"><span class="string">        - `profile`:只在用户登录时执行一次</span></span><br><span class="line"><span class="string">          - `/etc/profile`:全局</span></span><br><span class="line"><span class="string">          - `/etc/profile.d/*.sh`:优先级高，所有符合条件的文件开机都会执行一次</span></span><br><span class="line"><span class="string">          - `~/.bash_profile`:局部的</span></span><br><span class="line"><span class="string">        - `source|. filename`:都能重新加载文件</span></span><br><span class="line"><span class="string">    - `env|set|export|printenv` 查看系统所有环境变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 大概顺序 etc/profile → /etc/profile.d/\*.sh → ~/.bash_profile → ~/.bashrc → [/etc/bashrc]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - `位置变量$1-$9`:接收用户执行脚本的传参，超过 9 `$&#123;10,...&#125;`</span></span><br><span class="line"><span class="string">  - `预定于变量`</span></span><br><span class="line"><span class="string">    - `$?`:0:上一条命令执行结果为真,否则执行为假[ -z $1 ]</span></span><br><span class="line"><span class="string">      - 0 上条执行成功</span></span><br><span class="line"><span class="string">      - 2 权限拒绝</span></span><br><span class="line"><span class="string">      - 1-125 运行失败，命令错误 参数错误等</span></span><br><span class="line"><span class="string">      - 126 找到该命令，但是无法执行</span></span><br><span class="line"><span class="string">      - 127 未找到运行的命令</span></span><br><span class="line"><span class="string">    - `$#`:表示位置参数数量</span></span><br><span class="line"><span class="string">    - `$0`:当前脚本的名称</span></span><br><span class="line"><span class="string">      - dirname $0 :获取整个路径</span></span><br><span class="line"><span class="string">      - basename $0 :只获取文件名</span></span><br><span class="line"><span class="string">    - `$@`:保存除$0 外的所有参数</span></span><br><span class="line"><span class="string">      - 每个参数都是单独的(数组形式)</span></span><br><span class="line"><span class="string">    - `$*`:打印除了$0 所有具体的参数</span></span><br><span class="line"><span class="string">      - 所有参数视为一个参数</span></span><br><span class="line"><span class="string">    - `$$`:获取当前进程的进程号</span></span><br><span class="line"><span class="string">    - `$!`:上一个指令的 PID</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 条件测试与比较 `[ 条件表达式 ]` | `test -d $1`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 解释</span></span><br><span class="line"><span class="string">    - `[ 条件表达式 ]`</span></span><br><span class="line"><span class="string">    - `[[ 条件表达式 ]]`:这种支持传统的大于小于号</span></span><br><span class="line"><span class="string">    - 中括号两边必须存在空格</span></span><br><span class="line"><span class="string">  - 检测</span></span><br><span class="line"><span class="string">    - `[ -d $1 ]`:检测参数一是否为目录</span></span><br><span class="line"><span class="string">    - `[ -f $1 ]`:检测参数一是否为文件</span></span><br><span class="line"><span class="string">    - `[ -e $1 ]`:检测母乳或文件是否存在</span></span><br><span class="line"><span class="string">    - `[ -r $1 ]`:</span></span><br><span class="line"><span class="string">    - `[ -x $1 ]`:</span></span><br><span class="line"><span class="string">    - `[ -w $1 ]`:检测用户是否有写入权限</span></span><br><span class="line"><span class="string">    - `[ -s $1 ]`:检测文件是否为空</span></span><br><span class="line"><span class="string">    - 文件类型按 ll 第一位的文件类型检测</span></span><br><span class="line"><span class="string">  - 数值比较</span></span><br><span class="line"><span class="string">    - `-eq`:等于</span></span><br><span class="line"><span class="string">    - `-ne`:不等于</span></span><br><span class="line"><span class="string">    - `-gt`:大于</span></span><br><span class="line"><span class="string">    - `-lt`:小于</span></span><br><span class="line"><span class="string">    - `-le`:小于等于</span></span><br><span class="line"><span class="string">    - `-ge`:大于等于</span></span><br><span class="line"><span class="string">  - 字符串比较</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - `=`:等于</span></span><br><span class="line"><span class="string">    - `!=`:不等于</span></span><br><span class="line"><span class="string">    - `-z`:[ -z $1 ]检测字符串是否为空,如果为空，那么结果为真</span></span><br><span class="line"><span class="string">    - `-n`:[ -n $1 ]检测字符串是否不为空</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - `在进行字符串比较时，最好为字符串加上引号，并且等号两侧留有空格`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 文件比较</span></span><br><span class="line"><span class="string">    - `file1 -nt file2`:判断文件 1 修改时间是否比文件 2 新</span></span><br><span class="line"><span class="string">    - `file1 -ot file2`:判断文件 1 修改时间是否比文件 2 旧</span></span><br><span class="line"><span class="string">  - 逻辑运算</span></span><br><span class="line"><span class="string">    - `-a、-o、!`:类 1</span></span><br><span class="line"><span class="string">    - `&amp;&amp;、||`:类 2 `链接两个命令` 有断路功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 循环控制语句</span></span><br><span class="line"><span class="string">  - `break`:结束退出循环</span></span><br><span class="line"><span class="string">  - `continue`:跳出本次循，不执行 continue 本次循环内后面的代码</span></span><br><span class="line"><span class="string">- 其他</span></span><br><span class="line"><span class="string">  - `shift`:删除第一格位置参数,后面如果有全部往左移动一格</span></span><br><span class="line"><span class="string">  - `exit`:直接退出程序</span></span><br><span class="line"><span class="string">    `exit 1-255`:程序结束后返回值，通过`$?`获取，程序正常结束值为 0</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><blockquote><p>获取字符串长度 $</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
            <tag> Script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建博客</title>
      <link href="/2023/01/01/other/other-hexo/"/>
      <url>/2023/01/01/other/other-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-项目初始化"><a href="#hexo-项目初始化" class="headerlink" title="hexo 项目初始化"></a>hexo 项目初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server # 本地调试</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo init                   # 初始化一个本地文件夹为网站的根目录</span><br><span class="line">hexo new &quot;postName&quot;         # 新建文章</span><br><span class="line">hexo new page &quot;pageName&quot;    # 新建页面</span><br><span class="line">hexo generate               # 生成静态页面至public目录</span><br><span class="line">hexo server                 # 开启预览访问端口（默认端口4000，&#x27;Ctrl + C&#x27;关闭server）</span><br><span class="line">hexo deploy                 # 部署到GitHub或Gitee服务器上</span><br><span class="line">hexo clean                  # 清理缓存文件</span><br><span class="line">hexo help                   # 查看帮助</span><br><span class="line">hexo version                # 查看Hexo的版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定目录，创建abc.md</span></span><br><span class="line">hexo new &quot;文章标题&quot; page.md # 默认路径向创建文件</span><br><span class="line">hexo new &quot;文章标题&quot; --path linux/page.md</span><br><span class="line">hexo new --path linux/linux-bt.md &quot;文章标题&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新渲染</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="将项目存到-github"><a href="#将项目存到-github" class="headerlink" title="将项目存到 github"></a>将项目存到 github</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./blog</span></span><br><span class="line">git init/add ./commit -m &#x27;msg&#x27;</span><br><span class="line">git remote add origin git@github.com:liaozhonxun/lzo-hexo-blog.git</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><p>1、安装 <a href="">hexo-deployer-git</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>2、<strong>修改 _config.yml</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 &lt;username&gt;.githib.io 的项目</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 所在计算机 与 github 服务器的 ssh</span></span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>3、执行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</p><p>4、浏览 <code>&lt;GitHub 用户名&gt;.github.io</code> 检查你的网站能否运作。</p><h2 id="hexo-主题"><a href="#hexo-主题" class="headerlink" title="hexo 主题"></a>hexo 主题</h2><blockquote><p>在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题</p></blockquote><h3 id="hexo-theme-butterfly"><a href="#hexo-theme-butterfly" class="headerlink" title="hexo-theme-butterfly"></a>hexo-theme-butterfly</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save # 解决 butterfly 渲染报错问题</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root __config.yml 更改主题</span></span><br><span class="line">theme:butterfly</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新渲染</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h3 id="hexo-theme-next"><a href="#hexo-theme-next" class="headerlink" title="hexo-theme-next"></a>hexo-theme-next</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line">npm i hexo-renderer-swig -S # 解决 next 渲染报错问题</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root __config.yml 更改主题</span></span><br><span class="line">theme:next</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新渲染</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h2 id="hexo-插件"><a href="#hexo-插件" class="headerlink" title="hexo 插件"></a>hexo 插件</h2><h3 id="hexo-helper-live2d"><a href="#hexo-helper-live2d" class="headerlink" title="hexo-helper-live2d"></a>hexo-helper-live2d</h3><blockquote><p>小人动画 <a href="https://github.com/xiazeyu/live2d-widget-models">现有模型</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br><span class="line">npm install live2d-widget-model-haruto --save # 安装小人对象</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置</span></span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-haruto</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 100</span><br><span class="line">    height: 200</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure><h3 id="hexo-generator-search"><a href="#hexo-generator-search" class="headerlink" title="hexo-generator-search"></a>hexo-generator-search</h3><blockquote><p>搜索插件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装插件</span></span><br><span class="line">npm install hexo-generator-search -S</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主配置文件添加</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml                                                                                             field: all                                                                                                   content: true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主题配置文件 全改为<span class="literal">true</span></span></span><br><span class="line">local_search:</span><br></pre></td></tr></table></figure><h3 id="hexo-admin"><a href="#hexo-admin" class="headerlink" title="hexo-admin"></a>hexo-admin</h3><blockquote><p>管理系统</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> npm install --save hexo-admin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">运行，加个d</span></span><br><span class="line"> hexo s -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">访问</span></span><br><span class="line"> http://localhost:4000/admin # 访问管理系统</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">设置密码</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">打开setting，点击Setup authentification here输入用户名，密码，密钥，下面会自动生成配置文件，复制加在hexo根目录下的_config.yml中：</span></span><br><span class="line">admin:</span><br><span class="line">  username: root</span><br><span class="line">  password_hash: $2a$10$7985K2LzeFzCqACvNVHM3OOM8eg5zHyqaYmHeaqlbT6x.W0Et.zky</span><br><span class="line">  secret: fjdlksjafdjagjajfdlaj;a</span><br><span class="line">  deployCommand: ./admin_script/hexo-d.sh  # admin deploy时执行的脚本</span><br></pre></td></tr></table></figure><h3 id="hexo-blog-encrypt"><a href="#hexo-blog-encrypt" class="headerlink" title="hexo-blog-encrypt"></a>hexo-blog-encrypt</h3><blockquote><p>文章加密</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为指定tags的文章加密 Security</span></span><br><span class="line">encrypt: # hexo-blog-encrypt</span><br><span class="line">  abstract: 有东西被加密了, 请输入密码查看.</span><br><span class="line">  message: 您好, 这里需要密码.</span><br><span class="line">  tags:</span><br><span class="line">    - &#123; name: encrypt, password: 456 &#125;</span><br><span class="line">    - &#123; name: 密文, password: 123 &#125;</span><br><span class="line">  wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.</span><br><span class="line">  wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span><br></pre></td></tr></table></figure><h3 id="hexo-all-minifier"><a href="#hexo-all-minifier" class="headerlink" title="hexo-all-minifier"></a>hexo-all-minifier</h3><blockquote><p>可以压缩 HTML, CSS, JS and Image</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-all-minifier --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网站配置文件添加</span></span><br><span class="line">all_minifier: true</span><br></pre></td></tr></table></figure><h2 id="自定义-js-css"><a href="#自定义-js-css" class="headerlink" title="自定义 js css"></a>自定义 js css</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">站点配置文件，css等文件存在<span class="built_in">source</span>中</span></span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    # 自定义css</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css?1&quot;&gt;</span><br><span class="line">    # 静态文件后面加个  ?任意内容  可以在每次更新之后用户自动重新请求.</span><br><span class="line">    # 例如添加 ?1 ,在修改此文件后改成 ?2 ,用户访问你的网站时,不会使用本地的缓存,而是请求新的内容。没修改的话就不用动。</span><br><span class="line">  bottom:</span><br><span class="line">    # 自定义js</span><br><span class="line">    - &lt;script src=&quot;/js/script.js?1&quot;&gt;&lt;/script&gt;</span><br><span class="line">    # 引入多个文件就直接往下复制一行改一下文件名即可，如下：</span><br><span class="line">    - &lt;script src=&quot;/js/script1.js?1&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;script src=&quot;/js/script2.js?1&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装字体</span></span><br><span class="line">https://fontawesome.dashgame.com/</span><br><span class="line">https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css</span><br><span class="line">npm install font-awesome --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到对应图标字符就能直接用</span></span><br></pre></td></tr></table></figure><h2 id="页面状态"><a href="#页面状态" class="headerlink" title="页面状态"></a>页面状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题</span><br><span class="line">author: 作者</span><br><span class="line">date: 2023-07-22   # 创建时间</span><br><span class="line">published: false # 不发表，隐藏文章</span><br><span class="line">type: tags|categories # 标签，分类等</span><br><span class="line">hide: true # 首页隐藏文章</span><br><span class="line">top: # 需要插件置顶</span><br><span class="line">sticky: # 置顶默认</span><br><span class="line">tags: # 标签</span><br><span class="line">  - Css</span><br><span class="line">  - JavaScript</span><br><span class="line">categories:</span><br><span class="line"></span><br><span class="line">top_img:# 标签或分类 头部图片</span><br><span class="line">cover: #文章 文章图片</span><br><span class="line">copyright: fase # 文章 如果开启版权信息，文章内容是复制转别人的，这里就有false</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>hide 首页隐藏需要更改撇嘴文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首页不显示 themes/butterfly/layout/includes/mixins/post-ui.pug 添加</span></span><br><span class="line">if article.hide !== true</span><br></pre></td></tr></table></figure><p><img src="/../..%5Cstatic%5Cimg%5C2023-07-22_225703.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信开发者工具</title>
      <link href="/2020/01/01/idea/idea-wechat/"/>
      <url>/2020/01/01/idea/idea-wechat/</url>
      
        <content type="html"><![CDATA[<h3 id="与-VSCODE"><a href="#与-VSCODE" class="headerlink" title="与 VSCODE"></a>与 VSCODE</h3><p>集成 vscode,可以使用 vscode 插件</p><p>微信开发者工具插件位置：编辑 -&gt; 打开编辑器扩展目录<br>vscode 插件位置：~&#x2F;.vscode&#x2F;extensions 如 <code>C:\Users\Administrator\.vscode\extensions</code></p><h4 id="小程序-scss"><a href="#小程序-scss" class="headerlink" title="小程序 scss"></a>小程序 scss</h4><p>1、vscode 下载 easy-sass 插件，源码包复制到微信开发者工具的扩展目录下，重启微信编辑器<br>2、编辑 spook.easysass-0.0.6&#x2F;package.json<br>2-1、微信工具找到 easy-sass ，编辑扩展设置，<code>Easysass:Formats 的在 settings.json</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;easysass.formats&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">&quot;format&quot;</span>: <span class="string">&quot;expanded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;extension&quot;</span>: <span class="string">&quot;.css&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">&quot;format&quot;</span>: <span class="string">&quot;compressed&quot;</span>,</span><br><span class="line">    <span class="string">&quot;extension&quot;</span>: <span class="string">&quot;.min.css&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;easysass.formats&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">&quot;format&quot;</span>: <span class="string">&quot;expanded&quot;</span>, <span class="comment">// 修改scss文件保存，生成name.wxss 不压缩</span></span><br><span class="line">    <span class="string">&quot;extension&quot;</span>: <span class="string">&quot;.wxss&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">&quot;format&quot;</span>: <span class="string">&quot;compressed&quot;</span>,<span class="comment">// 修改scss文件保存，生成name.wxss 并压缩</span></span><br><span class="line">    <span class="string">&quot;extension&quot;</span>: <span class="string">&quot;.wxss&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3.<code>xxxx.wxss 改名 xxxx.scss</code>,修改 scss,自动生成对应的 wxss 文件</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archlinux</title>
      <link href="/2020/01/01/linux/linux-archlinux/"/>
      <url>/2020/01/01/linux/linux-archlinux/</url>
      
        <content type="html"><![CDATA[<p><a href="https://wiki.archlinux.org/">下载</a><br><a href="http://mirrors.163.com/archlinux/iso/2021.06.01/">国内镜像</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="进入配置环境"><a href="#进入配置环境" class="headerlink" title="进入配置环境"></a>进入配置环境</h3><ul><li>虚拟机安装</li><li>真假安装 win 有直接制作 U 盘启动,<ul><li>linux:<code>dd bs=4M if=xxx.iso of=/dev/dexxxx(U盘位置) status=progress(看到输出信息) &amp;&amp; sync</code></li></ul></li><li>配置好后选择 option -&gt; 高级 -&gt; 从 BIOS 转 UEFI</li></ul><h3 id="配置与测试"><a href="#配置与测试" class="headerlink" title="配置与测试"></a>配置与测试</h3><ul><li>检测是否为<code>UEFI</code>模式：<code>ls /sys/firmware/efi/efivars</code></li><li>真机如果没网通过 <code>wifi-menu</code> 链接 wifi</li><li>检测是否联网:<code>ping www.baidu.com</code></li><li>设置时钟：<code>timedatectl set-ntp true</code></li><li>设置源:<code>/etc/pacman.d/mirrorlist</code>(把国内或是块的放到前面)</li><li>查看磁盘:<code>lsblk</code></li><li>分区:<code>cfdisk</code>图形界面配置<ul><li>进入<code>gpt</code></li><li>上下贯标定位在<code>Free space</code>上,限制下面<code>new</code>按钮输入大小(10G、300M)等</li><li>新建根目录 sda1、家目录 sda2、EFI 目录 sda3(新建需选择进入 type,选择 EFI System)、生下的建 swap(type,选择 Linux swap)</li><li>设置完成进入 write - yes 回车</li><li><code>lsblk|fdisk</code>查看状态</li></ul></li><li>格式化<ul><li>格式化根目录：<code>mkfs.ext4 /dev/sda1</code></li><li>格式化家目录：<code>mkfs.ext4 /dev/sda2</code></li><li>格式化 EFI：<code>mkfs.vfat /dev/sda3</code></li><li>格式化 swap：<code>mkswap -f /dev/sda4</code><ul><li><code>swapon /dev/sda4</code></li></ul></li></ul></li><li>挂载目录<ul><li>mkdir &#x2F;mnt&#x2F;home</li><li>mkdir -p &#x2F;mnt&#x2F;boot&#x2F;EFI</li><li>挂载根目录：<code>mount /dev/sda1 /mnt</code></li><li>挂载家目录：<code>mount /dev/sda2 /mnt/home</code></li><li>挂载 EFI：<code>mount /dev/sda3 /mnt/boot</code></li></ul></li><li><h2 id="安装软件-基础软件：pacstrap-mnt-base-开发相关包：pacstrap-mnt-base-devel"><a href="#安装软件-基础软件：pacstrap-mnt-base-开发相关包：pacstrap-mnt-base-devel" class="headerlink" title="安装软件- 基础软件：pacstrap /mnt base- 开发相关包：pacstrap /mnt base-devel"></a>安装软件<br>- 基础软件：<code>pacstrap /mnt base</code><br>- 开发相关包：<code>pacstrap /mnt base-devel</code></h2><ul><li>(新)基础软件：<code>pacstrap /mnt base base-devel linux linux-firmware</code> #base-devel 在 AUR 包的安装是必须的</li><li>(新)功能性软件:<code>pacstrap /mnt dhcpcd iwd vim sudo bash-completion</code> #一个有线所需 一个无线所需 一个编辑器 一个提权工具 一个补全工具 iwd 也需要 dhcpcd</li></ul></li><li>生成 fstab：<code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code>(保存挂载)</li><li>确认是否生成:<code>cat /mnt/etc/fstab</code></li><li>将系统切换到刚刚安装的环境：<code>arch-chroot /mnt</code></li></ul><h3 id="进入系统配置"><a href="#进入系统配置" class="headerlink" title="进入系统配置"></a>进入系统配置</h3><ul><li>配置时区：<code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></li><li>设置时间:<code>hwclock --systohc</code></li><li>安装 VIM：<code>pacman -S vim</code></li><li>设置语言: <code>vim /etc/locale.gen</code> 打开<code>zh_CN.UTF8 UTF8</code>,<code>en_US.UTF-8 UTF-8</code><ul><li>查看 <code>locale-gen</code></li><li>生成 locale <code>bashlocale-gen</code>.这个好像没有用</li><li>设置到配置文件中：<code>echo &quot;LANG=&#39;zh_CN.UTF-8&#39;&quot;</code> &gt; &#x2F;etc&#x2F;locale.conf</li></ul></li><li>安装一下网络相关的包:(可省略)<ul><li><code>pacman -S iw wpa_supplicant dialog</code></li><li>测试联网：<code>ping www.baidu.com</code></li></ul></li><li>设置 root 密码<ul><li>直接<code>passwd</code></li></ul></li><li>安装微码<ul><li><code>pacman -S intel-ucode</code> #Intel</li><li><code>pacman -S amd-ucode </code> #AMD</li></ul></li><li>安装引导程序：<code>pacman -S grub efibootmgr</code><ul><li>执行 <code>grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=grub</code></li><li>(新) <code>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</code></li><li><code>vim /etc/default/grub</code> 去掉<code>GRUB_CMDLINE_LINUX_DEFAULT</code>的 quite，并且把 3 改成，后期方便排错</li><li>配置 <code>grub-mkconfig -o /boot/grub/grub.cfg</code></li><li><code>mkdir -p /boot/EFI/BOOT</code></li><li><code>mv /boot/EFI/GRUB/grubx64.efi /boot/EFI/BOOT/BOOTX64.EFI</code></li></ul></li><li>退出 exit 环境：<code>exit</code></li><li>卸载&#x2F;mnt：<code>umount -R /mnt</code></li><li>重启 reboot</li></ul><h2 id="进入系统"><a href="#进入系统" class="headerlink" title="进入系统"></a>进入系统</h2><h3 id="开启网络"><a href="#开启网络" class="headerlink" title="开启网络"></a>开启网络</h3><ul><li><code>echo &quot;interface=eth0&quot; &gt;&gt; /etc/rc.conf</code></li><li>执行:<code>dhcpcd</code></li><li><code>systemctl enable dhcpcd.servece</code> 设置开机自启</li></ul><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><ul><li><code>useradd -m -g uesrs -G wheel lzoxun</code>:指定组为了提权</li><li><code>EDITOR=vim visudo</code>:编辑 sudo 配置文件,将 wheel 的注释去掉<ul><li>%wheel ALL&#x3D;(ALL) ALL:<ul><li>1、</li><li>2、</li><li>3、这个组里的成员可以执行任意命令</li></ul></li></ul></li></ul><h3 id="安装-KDE-桌面"><a href="#安装-KDE-桌面" class="headerlink" title="安装 KDE 桌面"></a>安装 KDE 桌面</h3><ul><li><p>必要工具:<code>pacman -S plasma-meta konsole dolphin bash-completion</code></p><ul><li>桌面环境</li><li>终端</li><li>文件管理器</li><li>命令行补全工具</li></ul></li><li><p>开启 sddm（开机欢迎界面）</p><ul><li><code>systemctl enable sddm</code></li></ul></li><li><p>设置源</p><ul><li><code>vim /etc/pacman.conf</code></li><li>开启 multilib</li><li>添加<br>[archlinuxcn]<br>SigLevel &#x3D; Optional TrustAll<br>Server &#x3D; <a href="https://mirrors.ustc.edu.cn/archlinuxcn/$arch">https://mirrors.ustc.edu.cn/archlinuxcn/$arch</a></li><li><code>pacman -Syyu</code> 更新</li></ul></li><li><p>安装必要工具</p><ul><li>识别第三方 ntfs 移动盘:<code>ntfs-3g</code></li><li>开源字体<ul><li><code>pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei</code></li><li><code>sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra</code>谷歌字体</li><li><code>sudo pacman -S wqy-microhei wqy-microhei-lite wqy-zenhei wqy-bitmapfont noto-fonts-cjk</code></li></ul></li><li>浏览器<ul><li><code>firefox chromium</code></li></ul></li><li>yay(aur 用户上传的包)<ul><li><code>sudo pacman -S archlinuxcn-keyring</code></li><li>再装<code>yay</code></li></ul></li><li>kde</li></ul></li><li><p>设置中文</p><ul><li>setting -&gt; system settings -&gt; Regional settings 添加中文，拉倒最前 apply，重启</li><li>.pam_environment 添加<code>LC_ALL=zh_CN.UTF-8</code>更完全的汉化</li></ul></li><li><p>安装输入法</p><ul><li>输入法: <code>sudo pacman -S fcitx5-im</code></li><li>安装引擎: <code>sudo pacman -S fcitx5-chinese-addons</code></li><li>安装词库: <code>sudo pacman -S fcitx5-pinyin-moegirl</code>或搜狗</li><li>安装皮肤: <code>sudo pacman -S fcitx5-material-color</code></li><li>到设置语言的地方进入输入法进行添加<br>xxxx</li><li>开机启动，键盘添加拼音</li></ul></li></ul><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><ul><li>安装主题 <code>Layan</code></li><li>欢迎屏幕 <code>miku</code></li><li>任务栏插件</li><li>系统设置-显示监控-混成器 选 2.0</li><li>latte-dock</li></ul><h2 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h2><ul><li>查看版本:<code>neofetch</code></li><li>加网速:<code>proxychains-ng</code><ul><li>配置文件 <code>/etc/proxychains.conf</code></li><li>通过代理打开系统设置:<code>proxychains systemsettings5</code></li></ul></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="虚拟机全屏"><a href="#虚拟机全屏" class="headerlink" title="虚拟机全屏"></a>虚拟机全屏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo pacman -S open-vm-tools</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo pacman -S gtkmm</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo pacman -S xf86-video-vmware</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo pacman -S xf86-input-vmmouse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl <span class="built_in">enable</span> vmtoolsd</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li>命令行打开图像界面文件夹</li><li>截图软件 flameshot</li><li>wine 测试</li></ul><h2 id="新机"><a href="#新机" class="headerlink" title="新机"></a>新机</h2><h3 id="我的程序"><a href="#我的程序" class="headerlink" title="我的程序"></a>我的程序</h3><ul><li><code>yay -S konsole dolphin bash-completion</code></li><li><code>yay -S copyq chromium visual-studio-code-bin filezilla latte-dock cifs-utils netease-cloud-music flameshot</code></li><li><code>yay -S lazygit ranger tmux neofetch fzf node-fanyi conky</code></li><li>需要添加配置程序<ul><li><code>autojump</code></li><li><code>nvm</code></li></ul></li></ul><h3 id="我的-kde-快捷键"><a href="#我的-kde-快捷键" class="headerlink" title="我的 kde 快捷键"></a>我的 kde 快捷键</h3><ul><li><p>应用程序</p><ul><li><code>Meta(win建) + Shift + P</code> : copyq 剪切板保存工具</li><li><code>Meta + Shift + C</code> : vscode</li><li><code>Meta + Shift + O</code>: 文件窗口 dolphin</li><li><code>Meta + Shift + T</code>: 终端 konsole</li><li><code>Meta + Shift + F</code>: FTP filezilla</li><li><code>Meta + Shift + W</code>: 网易云</li></ul></li><li><p>系统</p><ul><li><code>Alt + F1</code>：菜单</li><li><code>Alt + F2</code>：系统设置</li><li><code>Meta + F</code> : Krunner 全局搜索</li><li><code>Meta + .</code>: Emoji 图标</li><li><code>Ctrl + Esc</code> : 系统服务</li></ul></li><li><p>其他</p><ul><li>latte Dock(Alt + 1~9)</li></ul></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-manjaro</title>
      <link href="/2020/01/01/linux/linux-manjaro/"/>
      <url>/2020/01/01/linux/linux-manjaro/</url>
      
        <content type="html"><![CDATA[<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><ul><li>输出系统基本信息:<code>sudo screenfetch</code></li><li>强制关机:<code>sudo shutdown now</code></li><li>升级系统:<code>sudo pacman -Syyu</code></li><li>显示文件系统的磁盘使用情况:<code>sudo df -h 或 sudo df -hT</code></li></ul><h3 id="快捷健"><a href="#快捷健" class="headerlink" title="快捷健"></a>快捷健</h3><ul><li><p>设置快捷（设置-键盘-应用与快捷健-添加选择程序-确定-选择键位）</p><ul><li><code>xfce4-terminal</code>：终端串口; 我的设置：<code>win+shift+T</code></li><li><code>xflock</code>：锁定; 我的设置：<code>ctrl+alt+delete</code></li></ul></li><li><p>终端</p><ul><li><code>shift+ctrl+C</code>：复制</li><li><code>shift+ctrl+P</code>：粘贴</li><li><code>shift+ctrl+E</code>：在终端中打开新终端</li><li><code>shift+ctrl+T</code>：打开标签页</li></ul></li><li><p>界面窗口</p><ul><li>系统快捷健（设置-窗口管理器-快捷健）<ul><li><code>win+D</code> ：回到桌面</li></ul></li><li>系统窗口<ul><li><code>ctrl+alt+f</code>：文件管理器</li><li><code>alt+F1</code>：系统菜单</li><li><code>alt+F2</code>：应用程序查找器</li><li><code>ctrl+alt+m</code>：任务管理器</li><li><code>xfce4-settings-manager</code>：设置</li><li><code>ctrl+esc</code>：右键菜单</li></ul></li><li><code>exo-open path</code>：<code>xfce</code>图形界面打开指定文件夹</li></ul></li></ul><h2 id="manjaro-的指令"><a href="#manjaro-的指令" class="headerlink" title="manjaro 的指令"></a>manjaro 的指令</h2><ul><li><p><code>pacman</code>:自带包管理工具</p><ul><li><p><code>-S</code>:安装</p></li><li><p><code>-Ss</code>:搜索</p></li><li><p><code>-Syy</code>:更改&#x2F;etc&#x2F;pacman.conf 添加源后 ，更新软件包数据库</p></li><li><p><code>-Syu</code>:更改系统本身</p></li><li><p><code>-Sc</code>:清除缓存</p></li><li><p><code>-Scc</code>:清除已下载的安装包</p></li><li><p><code>R</code>:删除服务,不能停顿太久</p></li><li><p><code>Rs</code>:删除服务，以及相关依赖</p></li><li><p><code>Rns</code>:删除服务，以及相关依赖,以及全局变量</p></li><li><p><code>Q</code>:查询已安装程序</p></li><li><p><code>Qe</code>:查询自己安装的程序</p></li><li><p><code>Qeq</code>:查询自己安装的程序（不显示版本号）</p></li><li><p><code>Qs key</code>:查询本地名字有 key 的程序</p></li><li><p><code>Qdt</code>:不需要的软件</p></li><li><p><code>pacman -R $(pacman -Qdtq)</code>:删除不需要的软件，最后 q 去除版本号</p></li><li><p><code>whereis name</code> 查询程序安装位置</p></li></ul></li><li><p><code>/etc/pacman.conf</code>:pacman 配置文件 添加源,</p><ul><li><code>Color</code>:设置高亮变色</li></ul></li></ul><h2 id="新机配置"><a href="#新机配置" class="headerlink" title="新机配置"></a>新机配置</h2><h3 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h3><ul><li>配置镜像源<ul><li><code>sudo pacman-mirrors -i -c China -m rank</code> :存在&#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist</li></ul></li><li>设置 archlinuxcn 源,antergos 源,arch4edu 源:<code>sudo vi /etc/pacman.conf</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br><span class="line"></span><br><span class="line">[antergos]</span><br><span class="line">SigLevel = TrustAll</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/antergos/$repo/$arch</span><br><span class="line"></span><br><span class="line">[arch4edu]</span><br><span class="line">SigLevel = TrustAll</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/arch4edu/$arch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo pacman -Sy #安装 archlinuxcn、antergos、arch4edu</span><br></pre></td></tr></table></figure><ul><li><p>更新源列表</p><ul><li>sudo pacman-mirrors -g</li></ul></li><li><p>同步并优化（类似磁盘整理，固态硬盘无需操作）</p><ul><li>sudo pacman-optimize &amp;&amp; sync</li></ul></li><li><p>升级系统</p><ul><li>sudo pacman -Syyu</li></ul></li><li><p>导入 GPG Key</p><ul><li>sudo pacman -S archlinuxcn-keyring</li><li>sudo pacman -S antergos-keyring</li></ul></li><li><p>安装 <code>ARU </code>包管理工具</p><ul><li><p><code>sudo pacman -S yay fakeroot binutils</code> yay 与需要用到的包基本工具不然最后肯会报错</p></li><li><p><code>yay --aururl &quot;https://aur.tuna.tsinghua.edu.cn&quot; --save</code> #这一句会被添加到&#x2F;.config&#x2F;yay&#x2F;config.json</p></li><li><p><code>yay -P -g</code></p></li><li><p>安装谷歌</p><ul><li><code>yay -S google-chrome</code></li></ul></li></ul></li></ul><h3 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h3><ul><li>fcitx</li><li>fcitx-configtool</li><li>fcitx-sogoupinyin</li><li>配置文件<ul><li>添加输入法配置文件 sudo vim ~&#x2F;.xprofile</li><li>export GTK_IM_MODULE&#x3D;fcitx</li><li>export QT_IM_MODULE&#x3D;fcitx</li><li>export XMODIFIERS&#x3D;”@im&#x3D;fcitx”</li></ul></li></ul><h3 id="oh-my-zsh-终端美化"><a href="#oh-my-zsh-终端美化" class="headerlink" title="oh-my-zsh 终端美化"></a>oh-my-zsh 终端美化</h3><ul><li>基本配置<ul><li>查看本地 <code>/etc/shells</code> 是否有 zsh (没有就安装)</li><li>安装 <code>ohmyzsh</code><ul><li>centos 安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://gitee.com/heyuanfly/install-oh-my-zsh/raw/master/centos-install-oh-my-zsh.sh</span><br><span class="line">chmod +x centos-install-oh-my-zsh.sh</span><br><span class="line">./centos-install-oh-my-zsh.sh</span><br></pre></td></tr></table></figure></li><li>官方源码安装<ul><li><code>wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh</code></li><li><code>sh install.sh</code> 如果.zshrc 有改动，需要先备份，可能会自动覆盖掉原有的.zshrc</li></ul></li></ul></li><li>根据提示将 .zshrc 复制到本地 ~&#x2F;.zshrc</li><li>将 shell 切换到 &#x2F;bin&#x2F;zsh <code>chsh -s /bin/zsh</code></li><li>重启</li><li>source ~&#x2F;.zshrc</li></ul></li><li>主题<ul><li>.zshrc 中 ZSH_THEME&#x3D;”主题名称”</li><li>主题都在 <code>/usr/share/oh-my-zsh/theme</code>下</li><li>推荐主题:<code>duellj</code>、<code>suvash</code>、<code>xiong-chiamiov</code>、<code>pygmalion</code>、<code>fino</code>、<code>steeef</code>、<code>ys</code>,<code>norm</code></li></ul></li><li>zsh vi 模式(使用 vim 快捷键)<ul><li>.zshrc 添加 bindkey -v</li></ul></li><li><a href="https://github.com/romkatv/powerlevel10k/blob/master/README.md#oh-my-zsh">插件扩展 powerlevel10k</a><ul><li><code> sudo git clone https://github.com/romkatv/powerlevel10k.git /usr/share/powerlevel10k</code></li><li><code>p10k configure</code>:第一次需要配置，这样重新配置</li></ul></li><li>命令行高亮<ul><li>yay -S zsh-syntax-highlighting zsh-autosuggestions 或 github 下载</li><li>如果不生效<ul><li>sudo ln -s &#x2F;usr&#x2F;share&#x2F;zsh&#x2F;plugins&#x2F;zsh-syntax-highlighting &#x2F;usr&#x2F;share&#x2F;oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;</li><li>sudo ln -s &#x2F;usr&#x2F;share&#x2F;zsh&#x2F;plugins&#x2F;zsh-autosuggestions &#x2F;usr&#x2F;share&#x2F;oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F; （zsh-autosuggestions 放入.zshrc plugins 中）</li></ul></li></ul></li></ul><h3 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h3><ul><li>源码安装程序<ul><li><code>解压包</code>、进入目录执行<code>./configure</code> 检测、<code>make&amp;&amp;make install</code></li></ul></li><li>安装 bed 程序<br>yay -S debtap sh ~&#x2F;.vim_runtime&#x2F;install_awesome_vimrc.sh#安装包<br>sudo debtap -u #升级<br>sudo debtap xxxx.deb #解压<br>#debtap -q xxx.deb #静默解压<br>sudo pacman -U x.tar.xz #安装</li></ul><h3 id="wifi-设置"><a href="#wifi-设置" class="headerlink" title="wifi 设置"></a>wifi 设置</h3><ul><li>iw dev 查看 interface 后面无线网卡名</li><li>安装 create_ap</li><li>rm -f &#x2F;tmp&#x2F;create_ap.all.lock</li><li>sudo create_ap 无线网卡名 无线网卡名 热点名 热点密码</li><li></li></ul><h3 id="与-window-共享"><a href="#与-window-共享" class="headerlink" title="与 window 共享"></a>与 window 共享</h3><ul><li>安装: <code>cifs-utils</code></li><li>共享: window 新建共享文件夹-&gt;高级共享中设置<code>共享名称</code> -&gt; 权限给予<code>读写执行</code></li><li>挂载: mount -t cifs -o username&#x3D;”Administrator”,password&#x3D;”1” &#x2F;&#x2F;192.168.12.40&#x2F;nmon &#x2F;mnt&#x2F;share<ul><li>mount -t cifs -o username&#x3D;”win 用户名”,password&#x3D;”密码” &#x2F;&#x2F;win ip&#x2F;共享名称 挂载目录</li><li>ls &#x2F;mnt&#x2F;share 查看共享文件</li></ul></li><li>自动挂载 <code>/etc/fstab</code><ul><li>&#x2F;&#x2F;192.168.12.40&#x2F;nmon &#x2F;mnt&#x2F;share cifs defaults,username&#x3D;名字,password&#x3D;你的密码</li><li>&#x2F;&#x2F;192.168.3.24&#x2F;共享文件 &#x2F;mnt&#x2F;window cifs defaults,username&#x3D;!·ujcliaozx,password&#x3D;ujcliaozx123</li></ul></li></ul><h3 id="外接设备"><a href="#外接设备" class="headerlink" title="外接设备"></a>外接设备</h3><p>接入第二块移动硬盘后，系统多出 <code>/dev/sdb</code><br>先界面双击访问多出来的硬盘后<br><code>df -h</code> 可以看到插入 usb 后自动挂载到 <code>/run/media/UserName/DiskName</code></p><p>如果要手动挂载的话 xxxx<br><code>mount -t ntfs /dev/sdb1 /mydata/data</code></p><p>wsl 挂载 ，E 替换成外接设备的盘符<br><code>sudo mount -t drvfs E: /mnt/WD-Elements</code></p><h3 id="启动项"><a href="#启动项" class="headerlink" title="启动项"></a>启动项</h3><ul><li>将 desktop 放到~&#x2F;.config&#x2F;autostart 、</li><li>开机黑色问题<ul><li><code>/etc/default/grub</code><ul><li>注释 hidden 那一行</li><li>去除下面的 quiet</li></ul></li><li><code>update-grup</code>:跟新</li></ul></li></ul><h3 id="快捷服务"><a href="#快捷服务" class="headerlink" title="快捷服务"></a>快捷服务</h3><ul><li><code>node-fanyi</code>:终端翻译</li><li><code>Typora</code>:Markdown 编辑器</li></ul><h3 id="全局菜单"><a href="#全局菜单" class="headerlink" title="全局菜单"></a>全局菜单</h3><ul><li>vala-panel-appmenu-common</li><li>vala-panel-appmenu-registrar</li><li>vala-panel-appmenu-xfce</li><li>appmenu-gtk-module(我没有装)</li><li>状态面板首选项-项目-添加全局菜单-重启</li><li>xfconf-query -c xsettings -p &#x2F;Gtk&#x2F;ShellShowsMenubar -n -t bool -s true</li><li>xfconf-query -c xsettings -p &#x2F;Gtk&#x2F;ShellShowsAppmenu -n -t bool -s true</li></ul><h3 id="Albert-搜索插件"><a href="#Albert-搜索插件" class="headerlink" title="Albert 搜索插件"></a>Albert 搜索插件</h3><ul><li>安装</li><li>勾选 Autostart on login 自动登录</li><li>第一项就是快捷键</li></ul><h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><ul><li>WhiteSur<ul><li><code>WhiteSur-Gtk-theme</code>:主题</li><li><code>WhiteSur-icon-theme</code>:图标</li><li><code>WhiteSur-cursors</code>:指针</li></ul></li><li>安装成功 “开始菜单–&gt;设置管理-&gt;外观设置” 中选择</li></ul><h3 id="screenfetch"><a href="#screenfetch" class="headerlink" title="screenfetch"></a>screenfetch</h3><ul><li>CentOS screenfetch<br>cd &#x2F;usr&#x2F;local&#x2F;src<br>git clone <a href="https://github.com/KittyKatt/screenFetch.git">https://github.com/KittyKatt/screenFetch.git</a><br>git clone <a href="https://github.com/liaozhongxun/screenFetch.git">https://github.com/liaozhongxun/screenFetch.git</a><br>cp screenFetch&#x2F;screenfetch-dev &#x2F;usr&#x2F;local&#x2F;bin&#x2F;screenfetch<br>chmod 755 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;screenfetch</li></ul><h3 id="fzf-全局搜索插件参考"><a href="#fzf-全局搜索插件参考" class="headerlink" title="fzf 全局搜索插件参考"></a>fzf 全局搜索插件<a href="https://zhuanlan.zhihu.com/p/41859976">参考</a></h3><ul><li><p>快捷键</p><ul><li><code>c+n|c+p|鼠标滚轮</code>:上下移动关闭</li></ul></li><li><p>结合 vim</p><ul><li><p><code>vim $(fzf)</code>：终端直接通过 vim 打开 fzf 搜索到的文件</p></li><li><p><code>cd $(find * -type d | fzf)</code>：进入 fzf 搜索到的文件夹</p></li><li><p><code>ranger $(find * -type d | fzf)</code>：ranger 打开 fzf 搜索到的文件夹</p></li><li><p><code>git checkout $(git branch -r | fzf)</code>:快速切换 git 分枝</p></li><li><p><code>:Files</code>:搜索文件</p><ul><li><code>c+jk</code>:上线移动</li></ul></li></ul></li><li><p>安装 fd-find<a href="https://github.com/sharkdp/fd">github</a><br>centos 需要原码安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/sharkdp/fd/releases/download/v8.4.0/fd-v8.4.0-aarch64-unknown-linux-gnu.tar.gz</span><br><span class="line">replace 下载相应版本</span><br><span class="line"></span><br><span class="line">tar -zxvf fd-v7.4.0-x86_64-unknown-linux-*.tar.gz</span><br><span class="line">cd fd-v7.4.0-x86_64-unknown-linux-*</span><br><span class="line"></span><br><span class="line">cp ./fd /usr/local/bin/</span><br><span class="line">cp ./fd.1 /usr/local/share/man/man1/</span><br><span class="line">mandb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">界面展示这些参数在 fzf --<span class="built_in">help</span> 中都有，按需配置即可 highlight 预览高亮可能需要安装</span></span><br><span class="line">export FZF_DEFAULT_OPTS=&quot;--border --preview &#x27;(highlight -O ansi &#123;&#125; || cat &#123;&#125;) 3&gt; /dev/null | head -500&#x27;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fzf查找配安装 fd-find</span></span><br><span class="line">export FZF_DEFAULT_COMMAND=&quot;fdfind --exclude=&#123;.git,.idea,.vscode,.sass-cache,node_modules,build&#125; --type f --hidden&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot; fzf#install() 确保你安装了最新的 fzf</span><br><span class="line">Plug &#x27;junegunn/fzf&#x27;, &#123; &#x27;do&#x27;: &#123; -&gt; fzf#install() &#125; &#125;</span><br><span class="line">Plug &#x27;junegunn/fzf.vim&#x27;</span><br></pre></td></tr></table></figure><p><a href="http://einverne.github.io/post/2019/08/fzf-usage.html">资料</a></p><ul><li>结合 ranger</li></ul><h3 id="tmux-终端复用"><a href="#tmux-终端复用" class="headerlink" title="tmux 终端复用"></a>tmux 终端复用</h3><p>配置文件：<code>~/.tmux.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>unbind C-b,set-option -g prefix C-c</code>:跟换激活键为 Ctrl+c</p></li><li><p>跟换分屏键</p><ul><li>bind h split-windwo -h</li><li>bind v split-windwo -v</li><li>unbind ‘“‘</li><li>unbind %</li></ul></li><li><p>会话</p><ul><li><code>tmux new -s flask</code> :新建会话</li><li><code>ctrl+b</code>:进入激活状态，习惯设置 ctrl+a<ul><li>会话快捷键<ul><li><code>d</code>:分离会话</li><li><code>s</code>:会话列表</li><li><code>$</code>:重命名会话</li></ul></li><li>窗口(新建会话进入窗口)<ul><li><code>c</code>:新建窗口</li><li><code>&amp;</code>:关闭窗口</li><li><code>l</code>:切换窗口</li><li><code>n</code>:切换下一个窗口</li><li><code>p</code>:切换上一个窗口</li><li><code>&lt;number&gt;</code>:指定编号窗口</li><li><code>w</code>:窗口菜单列表</li><li><code>,</code>:重命名窗口</li></ul></li><li>窗格|面板(分屏之后产生窗格)<ul><li><code>%</code>:水平分屏</li><li><code>&quot; 、-</code>:垂直分屏</li><li><code>x</code>:关闭窗格</li><li><code>;</code>:切换窗格</li><li><code>!</code>:拆为独立窗格,变窗口</li><li><code>z</code>:全屏显示窗格,隐藏其他</li><li><code>q</code>:窗格编号</li><li><code>o</code>:逆时针切换窗格</li><li><code>Ctrl+o</code>:把其他窗格切换到当前窗格位置</li></ul></li><li><code>:</code>:输入指令</li><li>保存<ul><li>激活状态 -&gt; d 关闭会话 -&gt; 任意终端<code>tmux attach -t 会话名称</code>启用</li><li>可以多用户共享同时操作</li></ul></li><li><code>Ctrl+d</code>:不用激活，退出并关闭</li><li>其他<ul><li><code>tmux ls</code>:查看 tmux 列表</li><li><code>tmux kill-session -t &lt;session-name&gt;</code>:彻底杀死会话</li><li><code>set -g mouse on</code>:允许鼠标操作</li><li><code>set -g mode-mouse on</code>:开启鼠标模式</li><li><code>set -g mouse-select-pane on</code>:允许鼠标选择窗格</li></ul></li></ul></li></ul></li><li><p>面板</p><ul><li>分屏之后产生窗格</li></ul></li><li><p>复制粘贴</p><ul><li><code>ctrl+b+[</code>:进入复制模式，选择内容直接复制</li><li><code>ctrl+b+]|c+s+v</code>:粘贴</li><li>ctrl+b,[ 进入复制模式，此时可以鼠标选择，松开复制，ctrl+b, ] 粘贴</li></ul></li><li><p>设置窗格大小</p><ul><li><code>ctrl+b,H J K L</code>,不能停顿太久</li></ul></li></ul><h4 id="tmux-插件管理"><a href="#tmux-插件管理" class="headerlink" title="tmux 插件管理"></a>tmux 插件管理</h4><ul><li>保存会话</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有tpm</span></span><br><span class="line">git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm</span><br><span class="line"></span><br><span class="line">set -g @plugin &#x27;tmux-plugins/tpm&#x27;</span><br><span class="line">set -g @plugin &#x27;tmux-plugins/tmux-resurrect&#x27;</span><br><span class="line">set -g @plugin &#x27;tmux-plugins/tmux-continuum&#x27;</span><br><span class="line"></span><br><span class="line">set -g @continuum-save-interval &#x27;15&#x27;</span><br><span class="line">set -g @continuum-restore &#x27;on&#x27;</span><br><span class="line">set -g @resurrect-capture-pane-contents &#x27;on&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Other config ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">run -b <span class="string">&#x27;~/.tmux/plugins/tpm/tpm&#x27;</span></span></span><br><span class="line"></span><br><span class="line">tmux source ~/.tmux.conf</span><br><span class="line"></span><br><span class="line">PREFIX + I: 安装插件</span><br><span class="line">PREFIX + CTRL s：保存会话</span><br><span class="line">PREFIX + CTRL r：加载会话</span><br></pre></td></tr></table></figure><h3 id="seahorse"><a href="#seahorse" class="headerlink" title="seahorse"></a>seahorse</h3><ul><li>在终端输入 seahorse 打开管理密钥环的软件，视图-&gt;根据密码环 在密码区会有一个“登录”为名字的密钥环，右击将其删除。<ul><li>如果无效:右键默认秘钥环，修改密码，输入旧密码，新密码留空直接继续再继续</li></ul></li></ul><h3 id="autojump-快速进入搜索到的目录"><a href="#autojump-快速进入搜索到的目录" class="headerlink" title="autojump 快速进入搜索到的目录"></a>autojump 快速进入搜索到的目录</h3><ul><li>必须<code>[[ -s /etc/profile.d/autojump.sh ]] &amp;&amp; source /etc/profile.d/autojump.sh</code>加入.bashrc 中</li><li><code>j &lt;dir-name&gt;</code>:模糊匹配，autojump 是基于数据库记录的，只有你敲击有了记录，才能正常使用</li><li><code>j --stat|grep key</code>:查看权重</li><li><code>jo &lt;dir-name&gt;</code>:在终端直接打开包含 foo 字符串<code>目录</code>的<code>文件管理器</code></li><li><code>jc &lt;dir-name&gt;</code>:进入字符串目录的<code>子目录</code></li><li><code>joc &lt;dir-name&gt;</code>:进入字符串目录的<code>子目录</code>的<code>文件管理器</code></li><li>手动安装（必须先安装好 python）<ul><li>git clone <a href="https://github.com/wting/autojump.git">https://github.com/wting/autojump.git</a></li><li>.&#x2F;install.py</li><li>按照提示 [[-s ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.zsh]] &amp;&amp; . ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.zsh</li><li>source .zshrc</li></ul></li><li>缓存数据库位置:<code>~/.local/shart/autojump/autojump.txt</code></li></ul><h3 id="lazygit"><a href="#lazygit" class="headerlink" title="lazygit"></a>lazygit</h3><p><a href="http://blog.csdn.net/cumo3681/article/details/107407815">参考</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">手动安装</span></span><br></pre></td></tr></table></figure><h4 id="面板-左右或-HL-或-tab-键切换面板"><a href="#面板-左右或-HL-或-tab-键切换面板" class="headerlink" title="面板(左右或 HL 或 tab 键切换面板)"></a>面板(左右或 HL 或 tab 键切换面板)</h4><ul><li>面板的切换:左右、HL、tab、12345 等进行面板切换</li><li>上线或 JK 切换<code>面板内的行</code></li><li>有时候同一个键在不同面板的作用是不一样的</li><li>左边面板</li><li>右边面板(预览界面)</li></ul><h4 id="面板一-Status"><a href="#面板一-Status" class="headerlink" title="面板一(Status)"></a>面板一(Status)</h4><ul><li>显示库名与分支</li></ul><h4 id="面板二-Files-文件面板"><a href="#面板二-Files-文件面板" class="headerlink" title="面板二(Files 文件面板)"></a>面板二(Files 文件面板)</h4><ul><li><code>a</code>:所以文件在赞成与取消暂存间切换</li><li><code>空格</code>：单个文件状态</li><li><code>d</code>:删除单文件更改</li><li><code>D</code>:第一项 直接清空所以更改</li><li>文件内容操作<ul><li>上下选择文件<ul><li>回车进入文件， 选择需要提交的行，<code>按空格</code>，内容就会从未暂存更改添加到 Status Changes 有赞成面板,双向的</li><li><code>e</code>:直接修改选择的文件</li></ul></li></ul></li></ul><h4 id="面板三-Local-Branschs-分支面板"><a href="#面板三-Local-Branschs-分支面板" class="headerlink" title="面板三(Local Branschs 分支面板)"></a>面板三(Local Branschs 分支面板)</h4><ul><li><code>n</code>:新建分支</li><li><code>空格</code>：选择分支</li><li><code>o</code>:打开远程项目该分支页面<ul><li>将当前选择分支，与 GitHub 远程选择的分支进行比较，</li></ul></li><li>注意事项<ul><li>切换分支前将将修改做一次 commit 提交</li><li>未追踪的文件,只要没有 commit，本地的那些更改都不会属于哪一个分支，commit 后切换分支，更改才会消失</li><li>合并分支<ul><li>切换主分支</li><li>光标定位到，更改的分支</li><li>ctrl+M ,将更改内容合并到组分支</li><li>冲突<ul><li>文件面板尝试 UU 变色文件</li><li>进入文件，选择正确的修改，空格确定</li><li>进入文件，b，两个都要保留</li></ul></li></ul></li></ul></li></ul><h4 id="面板四-Commits-提交版本管理"><a href="#面板四-Commits-提交版本管理" class="headerlink" title="面板四(Commits 提交版本管理)"></a>面板四(Commits 提交版本管理)</h4><ul><li>选择提交<ul><li><code>d</code>:删除提交</li><li><code>z + ctrl-z</code>:撤销删除，取回刚刚删除的提交</li><li><code>g</code>:选择指定 commit,按 g 重置到此次提交<ul><li><code>soft reset</code>：保留修改的文件，并重置到暂存</li><li><code>mixed reset</code>：保留修改的文件，并重置位暂存</li><li><code>soft reset</code>：直接回到指定提交，不保留文件</li></ul></li></ul></li></ul><h4 id="面板五-Status"><a href="#面板五-Status" class="headerlink" title="面板五(Status)"></a>面板五(Status)</h4><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><ul><li>普通功能<ul><li><code>x|?</code>:显示所在面板区域可以使用的功能以及快捷键</li><li><code>+</code>:面板扩展半屏</li><li><code>@</code>:显示命令日志(lazygit 操作对应的 git 指令)<ul><li>Focus command log:打开指令面板</li></ul></li><li><code>:</code>:自己输入 git 指令，或终端指令</li><li><code>[]</code>:切换面板上的标签</li></ul></li><li>提交<ul><li>文件面板: a(暂存全部) &#x3D;&gt; c(提交并输入提交备注-&gt; jcommit 面板新增提交记录) &#x3D;&gt; P(push)；p(pull)</li></ul></li><li>配置文件<ul><li><code>~/.config/lazygit/config.yml</code></li></ul></li><li>提交更新到别人的项目<ul><li>fock 项目</li><li>本地克隆，新建分支</li><li><code>[]</code>切换分支到 remote</li><li><code>n</code>添加远程连接，名称 upstream,地址:fock 前源作者的该项目地址?有点问题</li><li>更改完成提交，选择分支 o,打开 create pull request ,打开 GitHub 的 gui 界面合并</li><li>提交成功对方界面会出现<code>Compare &amp; pull request</code>的提示</li><li>base username&#x2F;barnch &lt;- 提交人的仓库&#x2F;branch3 选择好谁的哪个分支到 base 的哪个分支</li><li>填写备注信息 -&gt; 点击 Create pull request 按钮</li><li>原作者的<code>pull requests</code>标签中就多出来刚刚的提交，点进去 Converseation 点击 Merge pull request 通过请求</li><li>自己项目可以这样通过 gui 合并，但是自己的可以直接在项目中合并</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul><h3 id="终端文件管理器-ranger"><a href="#终端文件管理器-ranger" class="headerlink" title="终端文件管理器 ranger"></a>终端文件管理器 ranger</h3><p>基础操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim 快捷键 上下左右</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出：q 、<span class="built_in">shift</span>+S</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">功能：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  常用 =&gt; 复制(yy) 粘贴(pp) 覆盖(po) 剪切(<span class="built_in">dd</span>) 删除(dD) 复制路径(yp) 查看文件大小(dU)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      =&gt; 多选(v) 任务管理器(w) 显示隐藏(zh) 指定打开文件方式(r)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#排序 =&gt; 按大小(os)  按名称(on) 按修改日期(oc)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  搜索 =&gt; 符号(/)  按 n/N 查找下一个/上一个</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  书签 =&gt; 创建(m + key) 打开(`) 删除(um)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  命令 =&gt; 符号(:cmmder)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=&gt; `!`: `:shell`快捷键，更多shell命令,:shell <span class="built_in">mv</span> dir1 dir2, %s 代表选择的文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   默认目录 =&gt; 家目录(gh) 根目录(gr)</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   重命名 =&gt; 单文件 cw</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        =&gt; 批量命名 V或空格多选 &gt; :bulkrename 进入vim编辑 &gt; 修改保存退出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        =&gt; 批量操作 ctrl+v 选择行数，(<span class="built_in">shift</span>+i/a/o)进入插入模式，修改，esc</span></span><br><span class="line"><span class="meta prompt_">#</span></span><br></pre></td></tr></table></figure><ul><li><p>标签(窗口)</p><ul><li><code>gn|ctrl+n</code>:创建</li><li><code>gt|gT</code>:切换</li><li><code>gc|ctrl+w</code>:关闭 eeep</li></ul></li><li><p>配置文件夹<code>~/.config/ranger</code></p><ul><li>如果要用自己的配置文件,环境变量设置: RANGER_LOAD_DEFAULT_RC&#x3D;FALSE</li><li><code>ranger --copy-config=all</code>:生成配置文件</li><li>插件<ul><li><a href="https://github.com/ranger/ranger">GitHub</a> -&gt; wike -&gt; 右侧 plugins,安装插件</li></ul></li><li>添加方法<ul><li>wike -&gt; 右侧 Custom Commands -&gt;复制到配置文件<code>commands.py</code> -&gt; <code>rc.conf</code>添加快捷键</li></ul></li><li><code>rc.conf</code>:配置<ul><li><code>set vcs_aware true</code>:显示 git 状态符号</li><li><code>set preview_已经写死了，需images true &amp;&amp; set preview_images_method w3m</code>:用 w3m 预览图片(需要安 w3m)</li><li><code>map f console scout -ftsea%space</code>:f 搜索 X</li></ul></li></ul></li><li><p>修改默认文本编辑器</p><ul><li>echo export EDITOR&#x3D;&#x2F;usr&#x2F;bin&#x2F;vim &gt;&gt; ~&#x2F;.bashrc</li><li>echo export EDITOR&#x3D;&#x2F;usr&#x2F;bin&#x2F;vim &gt;&gt; ~&#x2F;.zshrc</li></ul></li></ul><h4 id="Root-预览异常"><a href="#Root-预览异常" class="headerlink" title="Root 预览异常"></a>Root 预览异常</h4><p>默认情况下 root 账号是不能预览的,注释 python 源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/local/lib/python3.6/site-packages/ranger/core/main.py</span></span><br><span class="line">if fm.username == &#x27;root&#x27;:</span><br><span class="line">    fm.settings.preview_files = False</span><br><span class="line">    fm.settings.use_preview_script = False</span><br><span class="line">    LOG.info(&quot;Running as root, disabling the file previews.&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ncdu"><a href="#ncdu" class="headerlink" title="ncdu"></a>ncdu</h3><blockquote><p>类似 ranger，有 du 功能</p></blockquote><h3 id="终端模拟器"><a href="#终端模拟器" class="headerlink" title="终端模拟器"></a>终端模拟器</h3><ul><li>edex-ui</li></ul><h3 id="man-汉化"><a href="#man-汉化" class="headerlink" title="man 汉化"></a>man 汉化</h3><p><a href="https://www.cnblogs.com/yanans/p/11990603.html">参考</a></p><p>1、debian</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install manpages-zh</span><br></pre></td></tr></table></figure><p>2、arch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syu</span><br><span class="line">pacman -S man-pages-zh_cn man-pages-zh_tw</span><br></pre></td></tr></table></figure><p>3、centos</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install man-pages-zh-CN</span><br></pre></td></tr></table></figure><p>4、Fedora</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnf update</span><br><span class="line">dnf install man-pages-zh-CN</span><br></pre></td></tr></table></figure><p>map 或 cmap</p><h3 id="主目录默认功能文件夹位置设置-如桌面"><a href="#主目录默认功能文件夹位置设置-如桌面" class="headerlink" title="主目录默认功能文件夹位置设置(如桌面)"></a>主目录默认功能文件夹位置设置(如桌面)</h3><p><code>vim ~/.config/user-dirs.dirs</code></p><h3 id="版本更新报错"><a href="#版本更新报错" class="headerlink" title="版本更新报错"></a>版本更新报错</h3><p>1.首先更新一下密钥，如果没有安装 archlinux-keyring,请及时安装<br>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</p><p>sudo pacman-key –refresh-keys 2.重新加载相应的签名密钥<br>sudo pacman-key –init<br>sudo pacman-key –populate<br>3。清除 pacman 的缓冲文件<br>sudo pacman -Scc 4.更新或者安装系统即可<br>sudo pacman -Syu || sudo pacman -Syudd(-dd 跳过全部检测)_</p><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><h3 id="我的服务"><a href="#我的服务" class="headerlink" title="我的服务"></a>我的服务</h3><ul><li><code>copyq</code>:剪切板管理工具<a href="https://zhuanlan.zhihu.com/p/356994435">参考</a></li><li><code>lrzsz</code>:虚拟机文件上传下载</li><li><code>ydcv-rs|node-fanyi</code>:终端直接翻译程序</li><li><code>vsftpd</code>:作用:使远程通过 ftp 上传下载 web 服务</li><li><code>bat</code>:美化 cat 的文本内容</li><li><code>at</code>:计划任务</li><li><code>dstat</code>:强大的检测工具</li><li><code>nmon</code>:系统资源监控</li><li><code>xdroid</code>:linux 使用安卓软件</li><li><code>keepassXC</code>:密码管理器</li><li><code>flowblade</code>:视频剪辑软件</li><li><code>variety</code>:壁纸</li><li><code>flareget</code>:下载器</li><li><code>baobab</code>:磁盘使用情况图形化分析</li><li><code>netease-cloud-music</code>:网易云</li><li><code>notepad++</code>:编辑轻量脚本代码</li><li><code>dia</code>:linux 流程图软件</li><li><code>ncdu</code>:统计指定文件下文件大小，通过数的方式</li><li><code>ack</code>:类似 grep 查找文件内容的功能</li><li><code>tldr cmd</code>:指令帮助简化文档，并添加场景用法举例,与<strong>kmdr</strong>功能类似</li><li><code>colorls|exa</code>:ls 指令加强版(gem install colorls),colors 通过 ruby 安装</li><li><code>caniuse-cmd</code>:检查浏览器兼容性(npm 安装)</li><li><code>thefuck</code>:操作错误时，执行该命令，会告诉你为什么错<ul><li>sudo pip3 install thefuck python 安装</li></ul></li><li><code>multitail|lnav|tial -f|cat...</code>:日志</li><li><code>jq</code>:linux 终端查看，格式化 json <code>echo &#39;&#123; &quot;no&quot;: &quot;bueno&quot; &#125;&#39; | jq &quot;.&quot;</code></li><li><code>mycli</code>:终端 mysql 工具</li><li><code>httpie</code>:终端数据请求获取 <code>http -v github.com</code></li><li><code>fpp(PathPicker)</code>:终端多文件操作，f|A,选择，回车默认编辑器打开,c 指令操作已选择</li><li><code>rich</code>:<code>pip3</code>安装，针对 py 的颜色输出美化</li><li><code>xargs</code>:管道前面标准输出，有些命令不能直接把输出当做自己的输入，可以用 xargs</li><li><code>bat</code>:<code>cat</code>加强班，高亮代码</li><li><code>ripgrep</code>:可 rg 指令代替 grep，速度快</li><li><code>cmus</code>:终端音乐播放</li><li><code>tmate</code>:将终端共享给别人</li><li><code>howdio</code></li><li><code>ag(the_silver_searcher)</code>:搜索工具</li><li><code>nvm</code></li><li><code>ascii</code>:ascii 表</li><li><code>curl cht.sh</code>:疑问查询 (curl cht.sh&#x2F;js&#x2F;class 指令&#x2F;语言命名空间&#x2F;功能)</li><li><code>curl &quot;wttr.in/福州?lang=zh&quot;</code>:天气预报</li><li><code>aria2</code>:下载工具</li><li><code>FreeFileSync</code>: <a href="https://freefilesync.com/">数据备份软件</a></li><li><code>nmon</code>:监控当前系统性能</li><li>plank || latte-dock</li><li>实时资源监控插件 conky</li></ul><h3 id="网上存储"><a href="#网上存储" class="headerlink" title="网上存储"></a>网上存储</h3><ul><li><p>yay -S vlc #视频播放器</p></li><li><p>yay -S mpv #视频播放器</p></li><li><p>yay -S gimp #图像编辑器</p></li><li><p>yay -S redshift #红移</p></li><li><p>yay -S haroopad #markdown 编辑器</p></li><li><p>yay -S Typora #markdown 编辑器</p></li><li><p>yay -S freeMind #思维图</p></li><li><p>yay -S pspp #spss</p></li><li><p>yay -S uget #下载工具</p></li><li><p>yay -S qbittorrent #BT 下载</p></li><li><p>yay -S zotero #文献管理软件</p></li><li><p>yay -S filezilla #FTP 工具</p></li><li><p>yay -S filelight #磁盘使用空间</p></li><li><p>yay -S hardinfo Extraterm#硬件检测工具</p></li><li><p>yay -S acroread #pdf 阅读</p></li><li><p>yay -S pdfsam #pdf 编辑</p></li><li><p>yay -S masterpdfeditor #pdf 阅读编辑</p></li><li><p>yay -s deepin-wine</p></li><li><p>yay -S deepin-wine-tim #TIM</p></li><li><p>yay -S deepin-screenshot #截屏软件</p></li><li><p>sl</p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 服务 2</title>
      <link href="/2020/01/01/linux/linux-servers-yule/"/>
      <url>/2020/01/01/linux/linux-servers-yule/</url>
      
        <content type="html"><![CDATA[<h3 id="music-dl"><a href="#music-dl" class="headerlink" title="music-dl"></a>music-dl</h3><ul><li>音乐下载工具<a href="https://github.com/0xHJK/music-dl">github</a></li><li>下载 pip,使用 pip3 下载安装</li><li>使用<ul><li><code>music-dl -k &quot;xxx&quot;</code>:通过关键字搜索</li><li><code>-s, --source TEXT</code>:指定平台 source: qq netease kugou baidu</li><li><code>-o, --outdir TEXT</code>:指定下载位置(默认单曲位置)</li><li><code>--lyrics</code>:同时下载歌词</li><li><code>--cover</code>:同时下载封面</li></ul></li></ul><h3 id="视频-youtube、哔哩哔哩视频下载"><a href="#视频-youtube、哔哩哔哩视频下载" class="headerlink" title="视频 youtube、哔哩哔哩视频下载"></a>视频 youtube、哔哩哔哩视频下载</h3><p>youtube-dl</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install youtube-dl</span><br></pre></td></tr></table></figure><p>you-get<br> <a href="https://github.com/soimort/you-get">github</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pip install you-get</span><br><span class="line"></span><br><span class="line"><span class="comment"># cmd</span></span><br><span class="line">you-get url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析url信息,选择下载方式</span></span><br><span class="line">you-get -i url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路径-o设置路径 -O设置保存名字</span></span><br><span class="line">you-get -o 路径 -O 名字 url</span><br></pre></td></tr></table></figure><h3 id="CMUS"><a href="#CMUS" class="headerlink" title="CMUS"></a>CMUS</h3><blockquote><p>终端音乐播放</p></blockquote><ul><li><code>cmus</code>:进入播放界面<ul><li><code>:add dir</code>:打开音乐文件夹</li><li><code>:clear</code>:清除记录</li><li><code>J、k、空格、回车、tab</code>:基本移动</li><li><code>c</code>:播放&#x2F;暂停</li><li><code>v</code>:停止</li><li><code>s|f|r</code>:随机播放、顺序、循环</li><li><code>z|b</code>:上下一首</li><li><code>x</code>:重新播放</li><li><code>-/=</code>:音量-&#x2F;+</li><li><code>e</code>:添加到播放列队</li><li><code>shift+d</code>:从列表删除</li><li><code>h|l</code>:快进退</li><li><code>1、2、3、4、5、6、7</code><ul><li><code>1.Library view</code>：默认播放列表</li><li><code>2.Sorted library view</code>:所有歌曲列表</li><li><code>3.Playlist view</code>:类似歌单</li><li><code>4.Play Queue</code>：播放列队</li><li>7：帮助</li></ul></li></ul></li><li>配置<ul><li>rm ~&#x2F;.config&#x2F;cmus&#x2F;cache:清除缓存</li><li><code>歌词插件</code>：直接运行 cmus-lyric</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 服务 1</title>
      <link href="/2020/01/01/linux/linux-servers/"/>
      <url>/2020/01/01/linux/linux-servers/</url>
      
        <content type="html"><![CDATA[<h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><blockquote><p>文件传输协议，搭建好之后可以通过客户端上传现在服务器的文件</p></blockquote><p>FTP 协议，直接以明文传输，安全不太好</p><h4 id="终端-ftp"><a href="#终端-ftp" class="headerlink" title="终端 ftp"></a>终端 ftp</h4><p>window 自带</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登入</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ftp</span></span><br><span class="line"><span class="meta prompt_">ftp&gt; </span><span class="language-bash">open ip</span></span><br><span class="line">回车 依次输入用户名密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">help</span> 查看支持的命令列表</span></span><br><span class="line"><span class="meta prompt_">ftp&gt; </span><span class="language-bash"><span class="built_in">help</span>     ?</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">LITERAL PASV 切换被动模式</span></span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><hr><h4 id="服务端-vsftpd-搭建-ftp-环境"><a href="#服务端-vsftpd-搭建-ftp-环境" class="headerlink" title="服务端 vsftpd 搭建 ftp 环境"></a>服务端 vsftpd 搭建 ftp 环境</h4><blockquote><p>vsftpd 基于 FTP 协议，解决了 ftp 一些传输安全问题</p></blockquote><ol><li><p>关闭防火墙 关闭 selinux</p><ol><li>vim &#x2F;etc&#x2F;selinux&#x2F;config ；SELINUX&#x3D;enforcing -&gt; SELINUX&#x3D;disabled</li><li>终端 setenforce 1||0 临时开启关闭, 0 管理好像有问题</li></ol></li><li><p>VSFTP 链接类型</p><ol><li>控制链接 （持续连接）-&gt; TCP21 -&gt; 用户收发 FTP 命令</li><li>数据链接 （按需链接）-&gt; TCP20 -&gt; 用于上传下载数据</li></ol></li><li><p>主动模式（Prot）：客户端生成随机端口给服务器</p><ol><li>服务端打开好 21 端口，让客户端随时来连</li><li>如果登录成功，客户端会生成一个随机端口，Prot 模式主动将这端口给服务器，用于接收服务器通过<code>20端口</code>发出的数据</li></ol></li><li><p>被动模式（Pasv）：服务端主动生成数据交互端口给客户端</p><ol><li>服务端打开好 21 端口，让客户端随时来连</li><li>如果登录成功，客户端向服务端<strong>发送 PASV 指令</strong>，服务器开发随机端口(需要指定范围)，并把端口告诉客户端<ol><li>随机端口 与 主动模式的 20 端口地位是一样的，（注意防火墙开发端口）</li></ol></li><li>客户端生成临时端口，与服务器随机端口来与 服务器传输数据</li><li>云服务器上你可以连接到服务器上某个端口，但是服务器连接不到你（云服务器最好用被动模式）</li></ol></li><li><p>数据传输模式</p><ol><li><strong>Binary 模式：</strong>不对数据进行处理，适用于<code>可执行文件</code>、<code>压缩文件</code>，<code>图片</code>等</li><li><strong>ASCII：</strong>进行文本传输时，自动适应模板操作系统的结束符，回车符等</li><li>切换方式 ftp 命令提示符输入 ascii 或 bin 转换</li></ol></li><li><h2 id="安装-安装-vsftpd-systemctl-enable-vsftpd-开机自启服务-systemctl-start-vsftpd-启动服务-netstat-antp-查看-21-端口是否开启"><a href="#安装-安装-vsftpd-systemctl-enable-vsftpd-开机自启服务-systemctl-start-vsftpd-启动服务-netstat-antp-查看-21-端口是否开启" class="headerlink" title="安装- 安装 vsftpd- systemctl enable vsftpd 开机自启服务- systemctl start vsftpd 启动服务- netstat -antp 查看 21 端口是否开启"></a>安装<br>- 安装 <code>vsftpd</code><br>- <code>systemctl enable vsftpd</code> 开机自启服务<br>- <code>systemctl start vsftpd</code> 启动服务<br>- <code>netstat -antp</code> 查看 21 端口是否开启</h2></li><li><p>登录颜色方式</p><ol><li><p>匿名账户登录</p><ol><li><p>名称 <code>ftp</code> 或 <code>anonymous</code></p></li><li><p>无密码，直接回车</p></li><li><p>默认目录：<code>/var/ftp</code></p></li><li><p>默认权限： 可下载不可上传 ( 上传权限由两部分组成 )</p><ol><li><p>主配置文件部分 <code>anon_upload_enable=YES</code></p></li><li><p>文件系统部分</p><ol><li><p><code>/var/ftp</code> 除了所有者之外，组 和 其他人是否有写入权限，一般添加子目录 <code>chmod 添加权限 777</code></p></li><li><p>本地用户，一般把他的跟文件夹所有者，变成他</p></li></ol></li><li><p>不用创建大量用户，但是所有人都能用，都设置完在重启</p></li></ol></li><li><p>相关配置一般 <code>anon</code> 开头</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名用户 常用配置 /etc/vsftpd.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">账户:anonymous或ftp 密码随意</span></span><br><span class="line">anonymous_enable=YES #是否允许匿名访问</span><br><span class="line">anon_root=/usr/local/ftpdir #配置匿名用户根目录(如果无法直接设置777，许在ftpdir创建777权限文件夹，供匿名用户使用)</span><br><span class="line">anon_umask=022 #匿名用户上传的文件，其他人能否操作这些文件，的权限掩码</span><br><span class="line">anon_upload_enable=YES #是否允许匿名用户上传写入</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root 目录下创建 .message 文件</span></span><br><span class="line">dirmessage_enable=YES # 登录就会显示 .message 的内容</span><br><span class="line"></span><br><span class="line">no_anon_password=YES #匿名用户不用密码登录</span><br><span class="line">ftp_username=ftpuser #匿名登录后的使用者</span><br><span class="line">anon_world_readable_only=YES　　　　　 　# 开启匿名用户下载权限</span><br></pre></td></tr></table></figure></li><li><p>本地用户登录</p><ol><li>账号密码 : <code>本地账户的用户名与密码</code></li><li>工作目录：登录用户家目录 <code>drwx------</code></li><li>创建访问，不用登录系统的用户(本地 linux 用户)<ol><li><code>useradd -s /sbin/ nologin zhangsan</code></li></ol></li><li>相关配置一般<code>local</code>开头，所有用户 local 配置的是一样的</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地用户 /etc/vsftpd.conf</span></span><br><span class="line">local_enable=YES #是否允许本地用户`如root`登录</span><br><span class="line">local_root=/home/ftpuser #设置本地用户登录后默认路径，否则默认在自己的家目录</span><br><span class="line">local_umask=022 #设置本地用户上传文件的权限</span><br><span class="line"></span><br><span class="line">listen=YES</span><br><span class="line">listen_ipv6=YES # 注释掉</span><br><span class="line">local_max_rate=0 # 限制最大传输速率</span><br><span class="line">write_enable=YES #是否允许写入，否则不能上传文件</span><br><span class="line">ftpd_banner=Welcome to blah FTP service. # ftp链接成功提示</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件 chroot_list</span></span><br><span class="line">chroot_local_user=YES # 本地用户不能切换到上级</span><br><span class="line">chroot_list_enable=YES #是否启用限制用户名单</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list # 如果开启就要指定路径，里面的用户不限制去上级</span><br><span class="line">allow_writeable_chroot=YES #如果文件不能上传 550 Permis....，可以加上这儿</span><br><span class="line">allow_writeable_chroot=YES &amp; setenforce 0 # 这个设为yes 并且 关闭eslinux，才能正常使用 chroot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件 user_list</span></span><br><span class="line">userlist_enable=YES &amp; userlist_deny=YES # 禁止/etc/vsftpd/user_list 文件中的用户登录</span><br><span class="line">userlist_enable=YES &amp; userlist_deny=NO # 允许 /etc/vsftpd/user_list 文件中的用户登录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件 ftpusers 权限高，里面所有用户都不允许登录，root默认在里面（（manjaro 没有））</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">被动模式</span></span><br><span class="line">pasv_enable=YES # 启用被动模式，默认YES</span><br><span class="line">pasv_min_prot=40000</span><br><span class="line">pasv_max_prot=50000  # 指定被动模式端口范围</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主动模式</span></span><br><span class="line">prot_enable=YES|NO # 是否取消主动模式 默认YES</span><br></pre></td></tr></table></figure><ol start="5"><li>新建一个用户</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置一个用户</span></span><br><span class="line">useradd -s /sbin/nologin ftpuser</span><br><span class="line">passwd ftpuser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">权限目录 默认 家目录</span></span><br><span class="line">mkdir /var/ftp/ftpupload</span><br><span class="line">chown -R ftpuser:ftpuser /var/ftp/ftpupload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份配置文件</span></span><br><span class="line">cp /etc/vsftpd.conf /etc/vsftpd.conf.back</span><br><span class="line"></span><br><span class="line">pasv_address=114.115.121.129</span><br><span class="line">pasv_enable=YES</span><br><span class="line">pasv_min_port=30000</span><br><span class="line">pasv_max_port=50000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机安全组配置30000-50000 和 21 端口的几率</span></span><br><span class="line"></span><br><span class="line">![华为主机配置](https://support.huaweicloud.com/bestpractice-ecs/zh-cn_topic_0115828034.html)</span><br></pre></td></tr></table></figure></li><li><p>虚拟用户登录</p><ol><li>创建虚拟用户代替本地用户</li><li>使用<code>本地用户</code>作为<code>虚拟用户</code>的<code>映射用户</code>，为虚拟用户提供<code>工作目录</code>和<code>权限控制</code></li><li>能够设置严格权限，为每个虚拟用户生成单独配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、/etc/vsftpd/ 建立FTP的虚拟用户数据库文件 vsftpd.user 随意</span></span><br><span class="line">user1</span><br><span class="line">pwd1</span><br><span class="line">user2</span><br><span class="line">pwd2     # 奇数行账号，偶数行密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加密生成数据库文件</span></span><br><span class="line">db_load -T -t hash -f vsftpd.user vsftpd.db</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 vsftpd.db 文件权限 保证安全</span></span><br><span class="line">chmod 600 vsftpd.db</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建虚拟映射用户 virturl，并指定用户家目录</span></span><br><span class="line">useradd -d /var/ftproot -s /sbin/nologin virturl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/var/ftproot 添加其他人权限</span></span><br><span class="line">chmod o+r /var/ftproot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立支持虚拟用户的PAM任务文件 /etc/pam.d/vsftpd ，添加虚拟用户支持</span></span><br><span class="line">cp -a /etc/pam.d/vsftpd /etc/pam.d/vsftpd.pam</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 .pam （清空原来内容，添加下面两行）</span></span><br><span class="line">auth       required    pam_userdb.so db=/etc/vsftpd/vsftpd</span><br><span class="line">account    required    pam_userdb.so db=/etc/vsftpd/vsftpd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vsftpd.conf 文件添加支持</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改</span></span><br><span class="line">pam_service_name=vsftpd.pam</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加</span></span><br><span class="line">guest_enable=YES # 开启虚拟用户</span><br><span class="line">guest_username=virturl # 指定虚拟用户的映射用户</span><br><span class="line">user_config_dir=/etc/vsftpd/dir # 虚拟用户的配置目录，需要创建 /etc/vsftpd/dir</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭匿名用户的一些配置,除非都要用的，否则私有的要提到 <span class="built_in">dir</span> 下 单独配置</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/vsftpd/dir/user1</span></span><br><span class="line">anon_upload_enable=YES # 允许 user1 上传文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/vsftpd/dir/user2</span></span><br><span class="line">anon_mkdir_write_enable=YES # 允许创建目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/vsftpd/dir/user3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chown</span> virturl:virturl /var/ftpuser1/  改变所有者与所属组</span></span><br><span class="line">write_enable=YES # 写权限，vsftpd.conf 有的这边就不要设置了</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES # 删除/重命名的权限</span><br><span class="line">anon_world_readable_only=YES # 文件的其他人必须有读的权限才允许下载</span><br><span class="line">local_root=/var/ftpuser1  # 指定自己独有的家目录，不是 anon 就是 local开头</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>配置文件中不能出现多余空格</strong></p></li></ol></li></ol><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>域名 指向一个 IP</p><p>DNS 就是域名和 IP 互相解析的一个服务</p><h4 id="域名的组成和分类"><a href="#域名的组成和分类" class="headerlink" title="域名的组成和分类"></a>域名的组成和分类</h4><blockquote><p>常见完整格式 <code>www.atguigu.com.</code></p></blockquote><ol><li><code>.</code>：跟域，可以省略不写 ，所有 <code>com</code> <code>cn</code>等 顶级域，都是建立在跟域上的<ol><li>全球共 13 台根域名服务器。名字分别为“A”至“M”，10 台在美国，另外各有一台设置于英国、瑞典和日本。<ol><li>分为 1 台主根，12 台辅根，辅根数据也必须从主根同步</li></ol></li><li>所有根服务器均由美国政府授权的互联网域名与号码分配机构 ICANN 统一管理</li><li>国内设置<code>镜像根域.</code>使国内用户进行域名解析时效率更快，不要每次都跑国外去<ol><li><code>镜像根</code>的数据只能来源于根域服务器，从根域服务器同步，不能其他方式更新</li></ol></li></ol></li><li><code>com</code>：顶级域， ICANN 组织指定和管理<ol><li>国家地区域名：<strong>cn 中国</strong>、<strong>hk 香港</strong>、<strong>sg 新加坡</strong> 等</li><li>通用顶级域名：<strong>com ( 商业机构 )<strong>、</strong>org ( 非盈利组织 )<strong>、</strong>edu ( 教育机构 )</strong> 等</li><li>新通用顶级域名：red top</li></ol></li><li><code>atguigu</code>：二级域（ 注册与 )，个人或组织申请注册</li><li><code>www</code>：三级域 （ 子域 ），服务器网站代表</li><li><code>其他</code>：</li><li><code>s1.www.xxxx.xx</code> s1 代码某台主机</li><li><code>com.cn</code> 属于二级域名，是 cn 顶级域的子域</li></ol><h4 id="DNS-域名解析过程"><a href="#DNS-域名解析过程" class="headerlink" title="DNS 域名解析过程"></a>DNS 域名解析过程</h4><ol><li>客户端访问 <code>www.atguigu.com</code><ol><li>浏览器自动补齐<code>:80</code></li></ol></li><li>客户端首先查询自己的 hosts 文件，查看该文件内是否有 <code>www.atguigu.com</code> 的记录<ol><li>有 直接返回 IP 地址给浏览器</li></ol></li><li>客户端继续在本机内查询 DNS 的解析缓存<ol><li>有 直接返回给浏览器</li></ol></li><li>客户端查看网卡上设置的 DNS 服务器地址，访问 DNS 服务器，查询结果，<ol><li>若解析库有解析记录，返回给客户浏览器</li></ol></li><li>客户机设置的 DNS 服务器，解析库找不到，去该服务器缓存查找<ol><li>有 直接返回</li></ol></li><li>DNS 服务器 向根域发起<code>迭代查询</code><ol><li>DNS 找到根域， 拿到<code>com</code> 顶级域 的 IP 地址 ( 根域保存所有顶级域的 IP 地址 )</li><li>DNS 根据 <code>com</code>顶级域的 IP 找到顶级域，获取二级域<code>atguigu</code>的 ip 地址 ( 顶级域储存所有二级域的 IP 地址 )</li><li>DNS 根据 <code>atguigu</code>二级域的地址找到二级域，获取 三级域<code>www</code>的 IP，这个就是我们需要的 IP 地址</li></ol></li><li>拿到真正的 IP 地址后，<strong>返回给客户端</strong>，并把这次这个新记录<strong>保存</strong>到自己 DNS 解析库和缓存中，下次就不要再<code>迭代查询</code>了</li></ol><p><img src="/../../static/img/2022-09-26_013055.jpg" alt="解析"></p><h4 id="分布式-DNS-服务器"><a href="#分布式-DNS-服务器" class="headerlink" title="分布式 DNS 服务器"></a>分布式 DNS 服务器</h4><blockquote><p>同一个任务，由不同步骤共同完成的过程就叫分布式</p></blockquote><ul><li><p><code>根域</code>只管<code>顶级域</code>的 IP 地址</p></li><li><p><code>顶级域</code>只管<code>自己二级域</code>的 IP 地址</p></li><li><p><code>二级域</code>只管<code>自己的三级域</code>的 IP 地址</p></li><li><p>DNS 只负责找 IP（自己储存库没有，就去外面找）</p></li><li><p>DNS 服务器是不能个人进行部署的，需要向权威机构申请注册</p></li></ul><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><blockquote><p>数据量太大，需要多台 DNS 共同处理，就出现了<strong>负载均衡</strong>，客户机直接访问<strong>负载均衡服务器</strong>，负载均衡服务器再将用户的请求<strong>分发</strong>到适合的 DNS 服务器上</p></blockquote><p>负载均衡将用户的请求分配到多个功能相同的服务器</p><h4 id="DNS-软件信息"><a href="#DNS-软件信息" class="headerlink" title="DNS 软件信息"></a>DNS 软件信息</h4><p>软件名称 <code>bind</code> ，服务名称 <code>named</code> ，软件端口 <code>UDP 53</code> 和 <code>TCP 53</code></p><p>配置文件 <code>/etc/named.conf</code></p><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><ul><li>安装 <code>nmap-ncat</code>或<code>nmap-netcat</code></li></ul><h3 id="openssh-远程连接工具"><a href="#openssh-远程连接工具" class="headerlink" title="openssh(远程连接工具)"></a>openssh(远程连接工具)</h3><blockquote><p>使其他设备可以通过 <code>xshell，mobaxterm 等工具远程连接</code></p></blockquote><ul><li><p>安装 openssh</p></li><li><p><code>system status ssh</code>:查看是否开启</p></li><li><p><code>lsof -i:22</code>:检测是否可以使用,默认 22 端口</p></li><li><p>mobaxterm 链接 图形界面</p><ul><li>首先目标 linux 系统需要支持<code>X11-forwarding</code></li><li>arch 系列<ul><li>yay -S xorg-xauth</li><li>touch ~&#x2F;.Xauthority &amp;&amp; chmod 600 ~&#x2F;.Xauthority</li><li>sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config 将 AddressFamily any 改为 AddressFamily inet</li><li>sudo systemctl reload sshd.service &amp;&amp; sudo systemctl restart sshd.service</li></ul></li></ul></li></ul><h3 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h3><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><ul><li>通过上下左右控制，不能 HJKL</li><li><code>F2</code>:显示界面设置，<code>空格</code>切换显示模式，<code>Available meters</code>回车，添加指定属性,delete 删除</li><li><code>F3</code>:搜索</li><li><code>F4</code>:过滤(隐藏不匹配的进程)</li><li><code>F5</code>:进程树</li></ul><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><blockquote><p>容器镜像服务，Docker 理解成一个专门分装应用程序与执行环境的轻型虚拟机,作用镜像制作</p></blockquote><p><a href="https://hub.docker.com/">镜像官网</a><br><a href="https://quay.io/">其他镜像</a></p><ul><li>yay 安装 ，通过 systemctl 开启服务</li><li>权限:</li><li>创建 docker 组，将相关用户归属组添加 docker</li><li>sudo gpasswd -a username docker</li><li>刷新:newgrp docker</li><li>id username 查看是否添加成功</li><li>镜像</li><li>阿里云 -&gt; 控制台 -&gt; 产品与服务 -&gt; 搜索容器镜像服务-&gt; 加速配置</li><li>将他的配置 json 内容复制到&#x2F;etc&#x2F;docker&#x2F;daemon.json 中</li><li>常用命令</li><li><code>docker info</code>:查看 docker 基础信息</li><li><code>docker search xxx</code>:查找镜像</li><li><code>docker pull xxxname</code>:下载镜像</li><li><code>docker images</code>:查看下载镜像的信息</li><li><code>docker rmi IMAGE_ID|Tag</code>通过 id 或 tag 删除</li><li><code>docker save -o centos.tar centos:7</code>:保存将名称:centos,tag：7 的镜像输出中 centos.tar 文件中</li></ul><h4 id="常用基础环境服务"><a href="#常用基础环境服务" class="headerlink" title="常用基础环境服务"></a>常用基础环境服务</h4><ul><li><code>httpd</code>:Apache</li><li><code>busybox</code>：轻量嵌入式系统</li><li><code>centos</code>:系统镜像</li></ul><h4 id="lazydocker"><a href="#lazydocker" class="headerlink" title="lazydocker"></a>lazydocker</h4><blockquote><p>docker gui 管理插件</p></blockquote><h3 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h3><blockquote><p>是一款 linux 系统应用微软文件资料的工具<br>微软指定了<code>SMB协议</code>，用于<code>局域网</code>文件共享，</p></blockquote><p>特点：<br>1、linux 与 Windows 之间进行文件和打印机共享<br>2、适用于 linux 与 linux，和 linux 与 window<br>3、NFS 个适合 linux 与 linux 的文件共享，所有 samba 一般用在 linux 与 window 使用</p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum 安装配置文件一般在 /etc 下</span></span><br><span class="line">yum install samba -y</span><br><span class="line">cd /etc/samba</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">global 全局配置</span></span><br><span class="line">[global]</span><br><span class="line">    # 定义一个工作组</span><br><span class="line">workgroup = SAMBA</span><br><span class="line">    # 安全验证方式 user代表账号密码</span><br><span class="line">security = user</span><br><span class="line"></span><br><span class="line">passdb backend = tdbsam</span><br><span class="line"></span><br><span class="line">printing = cups</span><br><span class="line">printcap name = cups</span><br><span class="line">load printers = yes</span><br><span class="line">cups options = raw</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面的都是独立局部配置，如:home下面的配置，只对homes文件夹生效</span></span><br><span class="line">[homes]</span><br><span class="line">comment = Home Directories</span><br><span class="line">valid users = %S, %D%w%S</span><br><span class="line">browseable = No</span><br><span class="line">read only = No</span><br><span class="line">inherit acls = Yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例<br>1、建立共享文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[testshare]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">描述</span></span><br><span class="line">comment = All Printers</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">共享路径</span></span><br><span class="line">path = /var/tmp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否公开</span></span><br><span class="line">    public = no</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否可以写入</span></span><br><span class="line">    writable = yes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否允许匿名用户登录</span></span><br><span class="line">    guest ok = yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、使用 pdbedit 创建 samba 服务专用的密码信息<br>3、使用 pdbedit 管理 samba 用户,这个用户必须是 linux 用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建用户</span></span><br><span class="line">pdbedit -a -u user-name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、重启 smb 服务，并检查 samba 端口(445)是否存活<br>5、检测防火墙<br>iptables -L</p><p>6、使用客户端链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">window</span></span><br><span class="line">运行输入</span><br><span class="line">//sam服务器地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">macos</span></span><br><span class="line">smb://sma服务器地址</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><blockquote><p>稳定的网络文件共享系统，与云服务器的共享<br>软件共享存储，大公司有可能需要购买硬件设备分担压力,成本高<br>统一存储网站静态数据<br><img src="/../../static/img/NFS1.png" alt="NFS"></p></blockquote><blockquote><p>NFS 和 RPC<br>1、NFS 通过 port 传输数据，端口是随机的,主动再 RPC 进行注册（重启 NFS，查看端口是否变化）<br>2、所以需要通过<code>RPC</code>服务进行端口注册，实现告知用户 NFS 端口是什么<br>3、所以 RPC(远程过程调用)，NFS 两个服务一起启动<br>4、过程：NFS（客户端）发送请求(端口 111)到 RPC，从而得到一个端口，再拿端口去访问远程 NFS 服务端</p></blockquote><blockquote><p>环境搭建<br>1、安装 rpcbind<br>2、安装 nfs-utils</p></blockquote><blockquote><p>环境配置<br>1、NFS 是 c&#x2F;s 模式，client,server 准备台机器<br>2、NFSServer 创建共享文件夹，并给与权限<br>3、修改 NFSServer 配置文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/exports</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件规则</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NFS服务端共享目录 NFS客户端地址(参数...) NFS客户端地址2(参数...)</span></span><br><span class="line">/root/nfsshare *(ro)  #所有人可读</span><br><span class="line">/root/nfsshare 主机名(rw) 主机名2(rw)  允许这两个主机可读写</span><br><span class="line">/root/nfsshare IP(insecure,rw,root_squash) 允许这个IP可读写</span><br><span class="line">/root/nfsshare 192.168.178.0/24(rw) 允许整个178网段访问（24 子网掩码24位，255.255.255.0）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">权限参数</span></span><br><span class="line">insecure 允许客户端从大于1024的端口发请求(参数1必须加)</span><br><span class="line">ro  只读</span><br><span class="line">rw  读写</span><br><span class="line">root_squash 如果客户端以root访问服务端nfs时，会把该用户映射位匿名用户，UID GID会变成nfsnobody的信息</span><br><span class="line">no_root_squash 和上面相反不安全</span><br><span class="line">all_squash 无论是root还是非root，全部匿名，很安全</span><br><span class="line">sync 数据同步写入到磁盘和内存，保证数据安全，但效率低</span><br><span class="line">async 数据线写入到内存，再持久化到磁盘效率高</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、启动 NFS 服务的文件共享目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NFS基于RPC111端口，保证RPC以及启动,111 端口启动</span></span><br><span class="line">systemctl start rpcbind</span><br><span class="line">netstat -tunlp|grep 111</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写好NFS配置文件与挂载目录</span></span><br><span class="line">chmod -Rf 777 path  强制递归给与权限</span><br><span class="line">chown -r nfsnobody:nfsnobody path</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动NFS</span></span><br><span class="line">systemctl start nfs-server.service （centos8专的版本）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测本地共享情况</span></span><br><span class="line">showmount -e 127.0.0.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测共享参数</span></span><br><span class="line">/var/lib/nfs/etab</span><br></pre></td></tr></table></figure><p>5、本地挂载测试<br>mount -t nfs 114.115.212.xxx:&#x2F;root&#x2F;nfsshare &#x2F;mnt<br>umount &#x2F;mnt 取消挂载</p><p>6、客户端挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保安装了nfs-utils和rpcbind</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启rpcbind</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测服务端共享是否可用，如果通了就能进行挂载操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">云服务器安全组需要开发111端口</span></span><br><span class="line">showmount -e 服务端IP</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mount -t -nfs xxxxx</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="postfix-dovecot-收发邮件"><a href="#postfix-dovecot-收发邮件" class="headerlink" title="postfix + dovecot 收发邮件"></a>postfix + dovecot 收发邮件</h3><p>每个企业的邮箱都有 客户端 和</p><h3 id="VNC-远程-linux-图形界面"><a href="#VNC-远程-linux-图形界面" class="headerlink" title="VNC 远程 linux 图形界面"></a>VNC 远程 linux 图形界面</h3><p>服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yum install tigervnc-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置分辨率</span></span><br><span class="line">vncserver -geometry 1920x1080</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">vncserver</span><br><span class="line">    输入至少六位密码</span><br><span class="line">    验证前面数的密码</span><br><span class="line">    第三个选n</span><br><span class="line">    等待服务开启....</span><br><span class="line"></span><br><span class="line">vncserver -list  查看端口与进程, 完成后去客户端</span><br><span class="line"></span><br><span class="line">防火墙开放这个端口或关闭防火墙</span><br></pre></td></tr></table></figure><p>进入官网下载客户端 下载<code>vnc viewer</code>桌面程序<br><a href="https://downloads.realvnc.com/download/file/viewer.files/VNC-Viewer-6.22.515-Windows-64bit.exe">https://downloads.realvnc.com/download/file/viewer.files/VNC-Viewer-6.22.515-Windows-64bit.exe</a></p><p>新建链接<br>输入 ip 与端口<br>名称随意 root</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p><code>FreeFileSync</code>: <a href="https://freefilesync.com/">数据备份软件</a></p><ol><li><p>手动备份</p><ul><li>选择连个文件夹，比较可以看到差异文件，选择同步方式进行同步</li><li>设置一次后，可以保存为批处理作业，变成开启执行，后手动点击直接同步</li></ul></li><li><p>监视备份 <code>RealTimeSync</code></p><ul><li>可以添加很多个监视文件夹，设置空闲事件，每隔这么多秒，就去查看监视的文件夹是否有变化</li><li>如果有变化就会执行下面命令行(命令可以把 前面的批处理作业拖进来)</li></ul></li><li><p>通过 window 的任务计划程序定时执行<code>批处理作业</code>，linux 可以用 cron</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vimrc</title>
      <link href="/2020/01/01/linux/linux-vimrc/"/>
      <url>/2020/01/01/linux/linux-vimrc/</url>
      
        <content type="html"><![CDATA[<h2 id="配置文件-and-插件管理"><a href="#配置文件-and-插件管理" class="headerlink" title="配置文件 and 插件管理"></a>配置文件 and 插件管理</h2><h3 id="第三方配置"><a href="#第三方配置" class="headerlink" title="第三方配置"></a>第三方配置</h3><h2 id="vimplus"><a href="#vimplus" class="headerlink" title="vimplus"></a>vimplus</h2><h3 id="安-装"><a href="#安-装" class="headerlink" title="安 装"></a>安 装</h3><ul><li>插件管理器<code>vimplus</code><ul><li><code>~/.vimrc为vimplus</code>的默认配置，一般不做修改</li><li><code>~/.vimrc.custom.plugins</code>为用户自定义插件列表，用户增加、卸载插件请修改该文件</li><li><code>~/.vimrc.custom.config</code>为用户自定义配置文件，一般性配置请放入该文件，可覆盖~&#x2F;.vimrc 里的配置</li></ul></li><li>插件存放在 <code>~/.vim/plugged</code>下</li><li>新插件可以直接复制进去或 vim 中执行<code>:PlugInstall</code>进行安装</li><li><a href="https://github.com/chxuan/vimplus">github</a></li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="scrooloose-nerdtree"><a href="#scrooloose-nerdtree" class="headerlink" title="scrooloose&#x2F;nerdtree"></a>scrooloose&#x2F;nerdtree</h4><blockquote><p>当于常用的 IDE 中的工程栏可以帮助我们管理和管理切换文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Plug &#x27;scrooloose/nerdtree&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">,+n 打开</span></span><br><span class="line">&quot;:NERDTreeToggle&lt;cr&gt;   &quot;打开或关闭nerdtree，可自定义映射热键</span><br><span class="line">autocmd vimenter * NERDTree     &quot;默认为打开nerdtree</span><br><span class="line">let NERDTreeShowLineNumbers=1                   &quot;显示行号</span><br><span class="line">let NERDTreeShowHidden=1                        &quot;宽度为1</span><br><span class="line">let NERDTreeIgnore=[&#x27;\.pyc&#x27;,&#x27;\~$&#x27;,&#x27;\.swp&#x27;]      &quot;忽略以下文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件操作</span></span><br><span class="line">m</span><br><span class="line">    d:删除</span><br><span class="line">    a:添加文件/文件夹（加斜杠）</span><br><span class="line">    m:移动或改名</span><br><span class="line">    o:打开gui</span><br><span class="line">C:设置当前目录为项目根目录</span><br><span class="line">//常用操作</span><br><span class="line">h j k l移动光标定位</span><br><span class="line">ctrl+w+w 光标在左右窗口切换</span><br><span class="line">ctrl+w+r 切换当前窗口左右布局</span><br><span class="line">ctrl+p 模糊搜索文件</span><br><span class="line"></span><br><span class="line">gT 切换到前一个tab</span><br><span class="line">g t 切换到后一个tab</span><br><span class="line">u 打开上层目录</span><br><span class="line">o|O打开关闭文件或者目录，如果是文件的话，光标出现在打开的文件中</span><br><span class="line">x 合拢当前结点的父目录</span><br><span class="line">I:显示/隐藏,隐藏文件文件</span><br><span class="line">i和s将光标指向文件以水平分割或纵向分割窗口打开</span><br></pre></td></tr></table></figure><h4 id="vim-airline-状态栏"><a href="#vim-airline-状态栏" class="headerlink" title="vim-airline(状态栏)"></a>vim-airline(状态栏)</h4><h4 id="auto-pairs-“成对符号自动匹配输入”"><a href="#auto-pairs-“成对符号自动匹配输入”" class="headerlink" title="auto-pairs(“成对符号自动匹配输入”)"></a>auto-pairs(“成对符号自动匹配输入”)</h4><h4 id="vimplus-startify-启动界面美化"><a href="#vimplus-startify-启动界面美化" class="headerlink" title="vimplus-startify(启动界面美化)"></a>vimplus-startify(启动界面美化)</h4><h3 id="我的插件【https-vim-hizdm-cn-language-coc-vetur-html】"><a href="#我的插件【https-vim-hizdm-cn-language-coc-vetur-html】" class="headerlink" title="我的插件【https://vim.hizdm.cn/language/coc-vetur.html】"></a>我的插件【<a href="https://vim.hizdm.cn/language/coc-vetur.html%E3%80%91">https://vim.hizdm.cn/language/coc-vetur.html】</a></h3><ul><li><p><a href="https://github.com/mattn/emmet-vim">emmet-vim</a></p><ul><li><code>ctrl-y 加 ,</code>:生成规则标签，相当于 tab</li><li><code>ctrl-y 加 d</code>:插入模式下，选中整个标签</li><li><code>ctrl-y 加 /</code>:插入模式下，注释整个标签</li><li><code>ctrl-y 加 k</code>:插入模式下，删除整个标签</li></ul></li><li><p>格式化</p><ul><li><p>通用格式化</p><ul><li>vim-autoformat <a href="https://www.cnblogs.com/liuzhaoting/articles/13794745.html">参考</a></li></ul></li><li><p>vue 相关</p><ul><li><a href="https://blog.csdn.net/weixin_34342578/article/details/89567263">参考</a></li></ul></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 语法高亮：posva/vim-vue</span><br><span class="line">2. 语法检查：vim-syntastic/syntastic  + eslint-plugin-vue</span><br><span class="line">3. 代码格式化：MaraniMatias/vue-formatter</span><br><span class="line"></span><br><span class="line">npm install -g prettier -&gt; https://zhuanlan.zhihu.com/p/34428176</span><br><span class="line">npm install -g vue-formatter</span><br></pre></td></tr></table></figure><h3 id="快捷键-默认"><a href="#快捷键-默认" class="headerlink" title="快捷键(默认)"></a>快捷键(默认)</h3><p><a href="https://github.com/chxuan/vimplus">参考</a></p><table><thead><tr><th align="center">快捷键</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">,</td><td align="center">leader key</td></tr><tr><td align="center">leader + n</td><td align="center">菜单,资源管理器</td></tr><tr><td align="center">leader + f</td><td align="center">查找目录下文件</td></tr><tr><td align="center">leader + F</td><td align="center">查找当前目录下文件</td></tr><tr><td align="center">leader + g</td><td align="center">显示 git 提交记录</td></tr><tr><td align="center">leader + G</td><td align="center">显示当前文件提交记录</td></tr><tr><td align="center">F9&#x2F;F10</td><td align="center">上下切换主题</td></tr><tr><td align="center">leader + G</td><td align="center">显示当前文件提交记录</td></tr><tr><td align="center">f+a</td><td align="center">查找字母 a,继续 f，下一个</td></tr><tr><td align="center">gcc&#x2F;gc&#x2F;gcap</td><td align="center">注释一行代码&#x2F;注释选中所在行的代码&#x2F;段落</td></tr><tr><td align="center">leader + e</td><td align="center">打开 .vimrc</td></tr><tr><td align="center">leader + vc</td><td align="center">.vimrc.custom.config</td></tr><tr><td align="center">leader + vp</td><td align="center">.vimrc.custom.plugins</td></tr><tr><td align="center">leader + s</td><td align="center">重新加载 .vimrc</td></tr><tr><td align="center">leader + leader + i</td><td align="center">安装插件</td></tr><tr><td align="center">leader + leader + u</td><td align="center">更新插件</td></tr><tr><td align="center">leader + leader + c</td><td align="center">删除插件</td></tr><tr><td align="center">leader + F</td><td align="center">全局搜索目录或文件下的单词</td></tr></tbody></table><h3 id="异常-i"><a href="#异常-i" class="headerlink" title="异常 i"></a>异常 i</h3><ul><li><code>The ycmd server SHUT DOWN (restart with &#39;:YcmRestartServer&#39;). YCM core library not detected; you need to compile YCM before using it. Follow the instructions in the documentation.</code><ul><li>解决: 进入<code>.vim</code>插件下找到<code>YcmRestartServer</code>插件,执行里面的<code>install.py</code></li></ul></li></ul><h2 id="vim-配置文件"><a href="#vim-配置文件" class="headerlink" title="vim 配置文件"></a>vim 配置文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nu <span class="string">&quot;行号</span></span><br><span class="line"><span class="string">set clipboard=unnamed &quot;</span>vim与外界相互复制,vim --version | grep clipboard 查看是否支持，不支持可以安装gvim</span><br><span class="line"><span class="built_in">set</span> hlsearch <span class="string">&quot;搜索匹配的高亮</span></span><br><span class="line"><span class="string">set cursorline &quot;</span>行下划线</span><br><span class="line"><span class="built_in">set</span> noswapfile <span class="string">&quot;意外关闭不需要wap文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set softtabstop=4 &quot;</span>tab的步长</span><br><span class="line"><span class="built_in">set</span> shiftwidth=<span class="number">4</span> <span class="string">&quot;&gt;&gt;&lt;&lt;缩进的步长</span></span><br><span class="line"><span class="string">set expandtab &quot;</span>设置可把tab转成空格 :retab 可以直接重置</span><br><span class="line"><span class="built_in">set</span> showtabline=<span class="number">1</span> <span class="string">&quot;tabe的标签页 0:不会出现页签、1:大于1页出现、2:只有1页也出现</span></span><br><span class="line"><span class="string">set splitbelow &quot;</span>new分屏时，新页面在下</span><br><span class="line"><span class="built_in">set</span> splitright <span class="string">&quot;vnew分屏时，新页面在右</span></span><br><span class="line"><span class="string">set ignorecase &quot;</span>搜索无视大小写</span><br><span class="line"><span class="built_in">set</span> incsearch <span class="string">&quot;搜索时匹配到的直接高亮,不要的回车</span></span><br><span class="line"><span class="string">set ruler &quot;</span>行列位置标注</span><br><span class="line"><span class="built_in">set</span> warp <span class="string">&quot;可折行</span></span><br><span class="line"><span class="string">set showcmd &quot;</span>查看按键</span><br><span class="line"><span class="built_in">set</span> showmode <span class="string">&quot;状态栏查看模式</span></span><br><span class="line"><span class="string">set scrolloff=3 &quot;</span>距离上下多少开始滚动</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">list</span> <span class="string">&quot;显示一下隐藏符号</span></span><br><span class="line"><span class="string">autocmd 一个事件 *文件 :set xxx &quot;</span>符合某个条件做什么事情</span><br><span class="line"><span class="string">&quot;:set all 查看所以可以用的设定</span></span><br><span class="line"><span class="string">set autoread vim内文件内容变化自动更新</span></span><br><span class="line"><span class="string">set autowriteall 切换文件自动保存</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> color</span><br><span class="line">syntax on <span class="string">&quot;开启语法高亮</span></span><br><span class="line"><span class="string">&quot;</span>colorscheme default</span><br><span class="line">colorscheme darkxxxx <span class="string">&quot;指定主题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> filetype 读取文件类型，o新增行时自动缩进</span><br><span class="line">filetype on</span><br><span class="line">filetype indent on</span><br><span class="line">filetype plugin on</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;:h key-notation  查看自定义键位表示方法</span></span><br><span class="line"><span class="string">&quot;</span>:<span class="built_in">map</span>  查看<span class="built_in">map</span>的相关定义</span><br><span class="line"><span class="string">&quot; map|unmap  一般模式、选择模式键位设置</span></span><br><span class="line"><span class="string">&quot;</span> nmap|nunmap 一般模式</span><br><span class="line"><span class="string">&quot; vmap|vunmap 选择模式</span></span><br><span class="line"><span class="string">&quot;</span> imap|iunmap 插入模式</span><br><span class="line">nmap &lt;C-v&gt; p <span class="string">&quot;一般模式下 ctrl+v 的功能设置成粘贴</span></span><br><span class="line"><span class="string">nmap &lt;Tab&gt; &gt;&gt; &quot;</span>一般模式下 Tab 的功能设置成缩进</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; noremap 与 map作用类似但是避免死循环问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> <span class="keyword">try</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">  error</span><br><span class="line">catch</span><br><span class="line">  xxx</span><br><span class="line">endtry</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 引入外部文件</span></span><br><span class="line"><span class="string">source  $HOME/xxxx.vim &quot;</span>将配置模块话到一个个vim文件中</span><br></pre></td></tr></table></figure><h3 id="diff-对比差异"><a href="#diff-对比差异" class="headerlink" title="diff 对比差异"></a>diff 对比差异</h3><blockquote><p>将代码复制到.vimrc 或相关配置文件中<br><strong>保存前</strong> <code>:DiffSaved</code> 查看差异，<code>:q</code> 退出，<code>:diffoff</code> 退出差异视图</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function! s:DiffWithSaved()</span><br><span class="line">    let filetype=&amp;ft</span><br><span class="line">    diffthis</span><br><span class="line">    vnew | r # | normal! 1Gdd</span><br><span class="line">    diffthis</span><br><span class="line">    exe &quot;setlocal bt=nofile bh=wipe nobl noswf ro ft=&quot; . filetype</span><br><span class="line">endfunction</span><br><span class="line">com! DiffSaved call s:DiffWithSaved()</span><br></pre></td></tr></table></figure><h3 id="vscodevim"><a href="#vscodevim" class="headerlink" title="vscodevim"></a>vscodevim</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    //设置 leader键</span><br><span class="line">    &quot;vim.leader&quot;: &quot;,&quot;,</span><br><span class="line">    //取消vim插件某些功能使用vscode自带功能</span><br><span class="line">    &quot;vim.handleKeys&quot;: &#123;</span><br><span class="line">        &quot;&lt;C-a&gt;&quot;: false,</span><br><span class="line">        &quot;&lt;C-f&gt;&quot;: false,</span><br><span class="line">        &quot;&lt;C-n&gt;&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    //普通模式下非递归键位绑定，在原生vim中是noremap</span><br><span class="line">    &quot;vim.normalModeKeyBindingsNonRecursive&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;:[&quot;&lt;Enter&gt;&quot;],</span><br><span class="line">            &quot;after&quot;:[&quot;o&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;: [&quot;&lt;Leader&gt;&quot;, &quot;t&quot;, &quot;t&quot;],</span><br><span class="line">            &quot;commands&quot;: [&quot;:tabnew&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;:[&quot;&lt;Tab&gt;&quot;],</span><br><span class="line">            &quot;after&quot;:[&quot;&lt;Shift&gt;&quot;,&quot;&gt;&quot;,&quot;&gt;&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;:[&quot;&lt;S-Tab&gt;&quot;],</span><br><span class="line">            &quot;after&quot;:[&quot;&lt;Shift&gt;&quot;,&quot;&lt;&quot;,&quot;&lt;&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    //命令行模式非递归键位绑定，在原生vim中等同于norecmap</span><br><span class="line">    &quot;vim.commandLineModeKeyBindingsNonRecursive&quot;: [</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    //指的是插入模式下键位绑定，在原生vim里面指的是imap</span><br><span class="line">    &quot;vim.insertModeKeyBindings&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;:[&quot;&lt;C-h&gt;&quot;],</span><br><span class="line">            &quot;after&quot;:[&quot;&lt;Left&gt;&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;:[&quot;&lt;C-l&gt;&quot;],</span><br><span class="line">            &quot;after&quot;:[&quot;&lt;Right&gt;&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;:[&quot;&lt;C-j&gt;&quot;],</span><br><span class="line">            &quot;after&quot;:[&quot;&lt;Down&gt;&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;:[&quot;&lt;C-k&gt;&quot;],</span><br><span class="line">            &quot;after&quot;:[&quot;&lt;Up&gt;&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;:[&quot;j&quot;,&quot;j&quot;],</span><br><span class="line">            &quot;after&quot;:[&quot;&lt;Esc&gt;&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;before&quot;:[&quot;&lt;S-j&gt;&quot;],</span><br><span class="line">            &quot;after&quot;:[&quot;&lt;BS&gt;&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    &quot;vim.commandLineModeKeyBindings&quot;: [</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
            <tag> Script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vimscript</title>
      <link href="/2020/01/01/linux/linux-vimscript/"/>
      <url>/2020/01/01/linux/linux-vimscript/</url>
      
        <content type="html"><![CDATA[<p><a href="https://static.kancloud.cn/kancloud/learn-vimscript-the-hard-way/49333">学习文档</a></p><h3 id="配置概念"><a href="#配置概念" class="headerlink" title="配置概念"></a>配置概念</h3><hr><p>选项(set)</p><p>映射</p><blockquote><p>当我按下这个键时，我需要你放弃默认操作，按我的想法做<br>映射可以是同一个按键在不同模式下拥有不同的功能</p></blockquote><p>特殊键<br>空格 <space> 、Ctrl <c-key> 、Alt <a-key>、Shift <s-key>、 <ESC> 、回车 <cr></p><hr><ul><li>map (map &#x3D;&gt; normal、visual、insert)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用自定义按键代替默认功能键</span></span><br><span class="line">map &lt;new-key&gt; &lt;old-key&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用横杆代替x功能，按 - 就会删除一个字符</span></span><br><span class="line">map - x</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">特殊按键映射</span></span><br><span class="line">map &lt;space&gt; viw</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消映射</span></span><br><span class="line">numap -</span><br></pre></td></tr></table></figure><ul><li>nmap、vmap、imap</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nmap (normal 模式下生效)</span><br><span class="line">vmap (visual 模式下生效)</span><br><span class="line">imap (insert 模式下生效)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但是执行会出现递归映射</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">映射<span class="built_in">dd</span>时，他的结果也存在<span class="built_in">dd</span>，但执行到后面<span class="built_in">dd</span>后，又开执行O了</span></span><br><span class="line"></span><br><span class="line">:nmap dd O&lt;esc&gt;jddk</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>用 (n|v|i)noremap 代替 (n|v|i)map</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当你按下\时，Vim忽略了x的映射，仅按照x的默认操作执行。即删除当前光标下的字符 而不是删除整行。</span></span><br><span class="line">:nmap x dd</span><br><span class="line">:nnoremap \ x</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Operator-Pending-映射"><a href="#Operator-Pending-映射" class="headerlink" title="Operator-Pending 映射"></a>Operator-Pending 映射</h3><blockquote><p>Operator（操作）就是一个命令，你可以在这个命令的后面输入一个 Movement（移动）命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Operator 映射</span></span><br><span class="line">onoremap ih :&lt;c-u&gt;execute &quot;normal! ?^==\\+$\r:nohlsearch\rkvg_&quot;&lt;cr&gt;</span><br><span class="line">1              2     3     3-1  3-2           3-3</span><br><span class="line"></span><br><span class="line">1、映射ih</span><br><span class="line">2、&lt;c-u&gt; 你只需要相信我这个东西可以让这个映射在任何情况下都能正常工作</span><br><span class="line">3、:execute 命令后面会跟着一个Vim脚本字符，然后把这个字符串当作一个命令执行(用它是因为他可以处理特殊字符)</span><br><span class="line">3-1、normal 模式执行后面符号，就跟平常敲那些字符一样</span><br><span class="line">3-3、通过\r 分割，先向前查找==开头的行，:nohlsearch 清除查找高亮向上，kvg_ 向上k 选择v 到最后一个非空字符（g_）</span><br><span class="line"></span><br><span class="line">cih 就会删除选择的这些</span><br></pre></td></tr></table></figure><ul><li>Operator<ul><li>d</li><li>c</li><li>y</li><li>v</li></ul></li><li>Movement 映射<ul><li>iw、i(、i”、 操作 单词内、所在括号内、所在引号内</li><li><code>t&lt;chart&gt; 操作到指定字符</code></li><li><code>&lt;number&gt;w</code></li></ul></li><li>文本对象<ul><li>w 单词</li><li>s 句子</li><li>p 段落</li><li>双边符号 {}””…..</li></ul></li></ul><h3 id="前缀-Leader"><a href="#前缀-Leader" class="headerlink" title="前缀 Leader"></a>前缀 Leader</h3><blockquote><p>让你映射的键不会覆盖掉原因的功能</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样normal模式下<span class="built_in">dd</span>删除一行的功能就没有了</span></span><br><span class="line">nnoremap dd x</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改进,定一个自己顺手的前缀，<span class="string">&quot;,dd&quot;</span>实现x的功能，系统的<span class="built_in">dd</span>功能不变</span></span><br><span class="line">let mapleader=&#x27;,&#x27;</span><br><span class="line">nnoremap &lt;leader&gt;dd x</span><br></pre></td></tr></table></figure><h4 id="Local-Leader"><a href="#Local-Leader" class="headerlink" title="Local Leader"></a>Local Leader</h4><blockquote><p>为特定类型文件创建前缀</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:let maplocalleader = &quot;任意前缀&quot;</span><br></pre></td></tr></table></figure><h3 id="abbreviations"><a href="#abbreviations" class="headerlink" title="abbreviations"></a>abbreviations</h3><p>插入模式的 (iabbrev 替换或缩写)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置好后，插入模式下按出a + 空格 ，直接将 a 替换成后面的一串</span></span><br><span class="line">iabbrev a 很长的一串字符</span><br><span class="line">iabbrev c const</span><br></pre></td></tr></table></figure><h3 id="自动命令"><a href="#自动命令" class="headerlink" title="自动命令"></a>自动命令</h3><ul><li>autocmd 指令</li><li>事件<ul><li>BufNewFile 事件</li><li>BufWritePre 保存任何字符到文件时触发</li><li>BufRead 读取文件时触发</li></ul></li><li>用于事件过滤的“模式（pattern）”</li><li>要执行的命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">:autocmd BufNewFile *.txt :write</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在指定类型文件在保存和读取是执行格式化操作utocmd BufWritePre,BufRead *.html :normal gg=G3</span></span><br><span class="line">:autocmd BufWritePre,BufRead *.html :normal gg=G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给指定文件添加指定属性</span></span><br><span class="line">autocmd BufNewFile,BufRead *.html setlocal nowrap</span><br><span class="line">autocmd BufNewFile,BufRead *.html set nonumber</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自动命令组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vimrc 中确保每次清除原有的</span></span><br><span class="line">augroup filetype_html</span><br><span class="line">    autocmd!</span><br><span class="line">    autocmd BufWritePre,BufRead *.html :normal gg=G</span><br><span class="line">augroup END</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><hr><p>注释：<code>&quot;</code> 引号 ()</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">普通变量定义</span></span><br><span class="line">let num = 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选项作为变量使用</span></span><br><span class="line">set textwidth = 80</span><br><span class="line">echo &amp;textwidth &amp;表示引用的是一个选项</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过变量设置选项</span></span><br><span class="line">let &amp;textwidth = 80</span><br><span class="line">可以将 textwidth 值设置位80，let 优点是可以得到运算的结果</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过变量设置寄存器</span></span><br><span class="line">let @a = &quot;hello!&quot;</span><br><span class="line">echo @a 输出定义的寄存器值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">:<span class="keyword">if</span> <span class="string">&quot;foo&quot;</span> == <span class="string">&quot;FOO&quot;</span>  <span class="comment"># ==?  不区分大小写    ==# 强制区分大小写</span></span></span><br><span class="line">:    echom &quot;if&quot;</span><br><span class="line">:elseif &quot;nope!&quot;</span><br><span class="line">:    echom &quot;elseif&quot;</span><br><span class="line">:else</span><br><span class="line">:    echom &quot;finally!&quot;</span><br><span class="line">:endif</span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ul><li><code>:echo $MYVIMRC</code> :任意系统找到 vim 配置文件的位置与名称</li><li><code>:inoremap &lt;esc&gt; &lt;nop&gt;</code>:强行取消 esc 默认功能</li><li><code>Ctrl+s</code>无法输入后 <code>Ctrl+q</code> 解决</li></ul><h3 id="要加到配置中的"><a href="#要加到配置中的" class="headerlink" title="要加到配置中的"></a>要加到配置中的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按 ctrl+d 让编辑器到normal模式下按两个d的,在回到insert模式</span></span><br><span class="line">inoremap &lt;c-d&gt; &lt;esc&gt;ddi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入模式单词转大写</span></span><br><span class="line">inoremap &lt;c-u&gt; &lt;esc&gt;viwUei</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/刷新我的vimrc</span></span><br><span class="line">nnoremap &lt;leader&gt;ev :vsplit $MYVIMRC&lt;cr&gt;</span><br><span class="line">nnoremap &lt;leader&gt;sv :source $MYVIMRC&lt;cr&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给所在单词添加双引号,并定位到单词最后面</span></span><br><span class="line">nnoremap &lt;leader&gt;&quot; viw&lt;esc&gt;a&quot;&lt;esc&gt;hbi&quot;&lt;esc&gt;lel</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2020/01/01/other/other-algorithm/"/>
      <url>/2020/01/01/other/other-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="数据结构是什么"><a href="#数据结构是什么" class="headerlink" title="数据结构是什么"></a>数据结构是什么</h3><ul><li>数据结构是<code>数据对象</code>,以及存在于<code>该对象的实例</code>和<code>组成实例的数据元素</code>之间的各种联系</li><li>数据结构是计算机中<code>储存</code>、<code>组织数据</code>的方式，抽象数据类型的物理实现，好的数据结构的实现离不开算法</li><li>是一种<code>组织数据</code>的方式<br><img src="/../../static/img/algorithm-1.png" alt="案例"></li></ul><h3 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h3><ul><li><p>本意就是解决某个问题的<code>办法</code>、<code>步骤</code>、<code>逻辑</code>,以更<code>高效、简洁</code>的方式的到结果</p><ul><li>算法好，结构好，则处理数据更加高效简洁</li><li>只有一个好，另外一个不会，次之</li><li>不好的算法，处理不好的数据，。。。</li></ul></li><li><p>数据结构的<code>实现</code>离不开<code>算法</code></p></li><li><p>比如通过<code>A33这个“算法“</code>，找到<code>图书馆这个&quot;结构&quot;</code>的 A 书架第二排第三本书</p></li><li><p>算法 -&gt; 处理事情的方法，数据结构 -&gt; 处理事情的目标对象</p></li><li><p>如:往数组(数据结构)前面插入数据，用什么方法(算法)效率高呢</p></li><li><p>有无算法，就像大灾难时有没有人组织的差别，有无数据结构，就像大灾难时人们听不听安排，与到安全的的的路线多不多的差别</p></li></ul><h3 id="数据结构和算法的重要性"><a href="#数据结构和算法的重要性" class="headerlink" title="数据结构和算法的重要性"></a>数据结构和算法的重要性</h3><h2 id="生活中的算法"><a href="#生活中的算法" class="headerlink" title="生活中的算法"></a>生活中的算法</h2><p>二分查找法：排查 js 错误可用到</p><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><blockquote><p>由 n 个数据节点组成的有序序列</p></blockquote><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>数组是一种<code>线性结构</code>，并且能在<code>任意位置</code>插入和删除数据<ul><li>有时候为了实现某种功能，必须对<code>任意位置</code>添加<code>限制</code></li><li>不足:删除或插入，特么是从前面，消耗性能，因为前面删除和插入时，后面的所有元素需要依次移动</li><li>好处:可以通过下标直接获取，修改元素，前面插入虽耗性能，但也很方便</li></ul></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li><code>受限</code>的<code>线性结构</code><ul><li>只有一个口<code>栈顶</code>，<code>进栈</code>、<code>入栈</code>、<code>压栈</code>(其实是同一个东西)只能从栈顶进入</li><li><code>出栈</code>、<code>退栈</code>也就是删除元素,也必须从<code>栈顶</code>出去</li><li>因为只有一个口，所以元素只能<code>后进先出</code>(LIFO)</li></ul></li><li>栈结构案例:<ul><li>函数调用栈<ul><li>如 A 调用 B、B 调用 C</li><li>那么<code>执行函数A时</code>，会被&#96;最先压到栈低，A 没执行完就不会弹出(结束)</li><li>当 A 调用 B 时，B 入栈，B 调用 C 时，C 入栈</li><li>此时 C 时最后入栈的，但只有 A 结束弹出 B 才可以弹出，最后才是 A</li><li>所以<code>递归</code>，不断将<code>自己入栈</code>,如果没有结束条件所说的<code>栈溢出</code>就是这个原理</li></ul></li><li>练习:通过 Stack 分支十转二进制的方法</li></ul></li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li><p><code>受限</code>的<code>线性结构</code></p><ul><li><code>先进先出</code></li></ul></li><li><p><code>普通队列</code></p><ul><li>插入一个元素，数据从后面添加，并且前面都处理完才会轮到新元素</li></ul></li><li><p><code>优先级队列</code></p><ul><li>插入一个元素时可以和其他元素<code>优先级进行比较</code>, 比较完之后得出元素再队列中的<code>正确位置</code></li><li>每个元素不再只是一个数据，而是<code>包含优先级属性</code>，添加时根据优先级决定位置</li></ul></li><li><p>练习:击鼓传花案例</p></li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ul><li>链表和<code>数组</code>一样,可以<code>用来储存一系列元素</code>,但是链表与数组实现机制是不一样的</li><li>单向链表对比数组(列表)<ul><li>数组优缺点<ul><li>优点<ul><li>通过下标<code>修改</code>和<code>获取</code>元素性能较高</li></ul></li><li>缺点<ul><li>创建需要申请<code>一系列内存空间</code>,并且<code>大多数语言</code>大小是<code>固定</code>的,不够用时需要<code>扩容</code>(申请大的再把内容复制去)</li><li>数组从<code>开头</code>或<code>中间</code>插入删除元素成本高，需要打了元素位移</li><li>js 封装的数组底层也有这些缺点</li></ul></li></ul></li><li>链表优缺点<ul><li>优点<ul><li>作用与数组类似，但是链表不必<code>是连续的内存空间</code>，可以充分利用内存，实现动态管理</li><li>创建是不必<code>确定大小</code>,并且大小可以<code>无限延伸</code>下去</li><li>每个元素节点由<code>储存元素本身的数据</code>和<code>指向下一个元素的引用</code>组成</li><li><code>插入</code>和<code>删除</code>元素时,<code>时间复杂度</code>底，可达到 O(1)，相对性能较高</li></ul></li><li>缺点<ul><li><code>修改</code>和<code>获取</code>元素必须从头开始<br><img src="/../../static/img/other-algorithm-1.png" alt="单向链表"></li></ul></li></ul></li></ul></li><li>单向链表与双向链表<ul><li>单向链表<ul><li>从头遍历到结尾或者从结尾遍历到头</li><li>只能通过 next 指向下一个节点</li><li>单向链表的缺点<ul><li>很难回到上一个节点</li></ul></li></ul></li><li>双向链表<ul><li>双向链表结构<ul><li>每个节点包含 <code>数据、next、prev指针</code> 三个部分</li><li><code>head</code>指向第一个节点，还有<code>tail</code>指向最后一个节点</li><li><code>第一个</code>节点的<code>prev</code>是<code>null</code>,<code>最后一个</code>节点的<code>next</code>是<code>null</code><br><img src="/../../static/img/other-algorithm-2.png" alt="双向链表"><br><img src="/../../static/img/other-algorithm-3.png" alt="双向链表"></li></ul></li><li>从头遍历到结尾或者从结尾遍历到头</li><li>每一个节点都要向前链接的引用，与向后链接的引用</li><li>双向链表的缺点<ul><li>插入或删除节点是需要处理四个引用，而不是两个</li><li>占用空间较大</li></ul></li></ul></li></ul></li></ul><h2 id="集合结构"><a href="#集合结构" class="headerlink" title="集合结构"></a>集合结构</h2><blockquote><p><code>Es</code>6 的 <code>Set</code>结构</p></blockquote><p>它类似于<strong>数组</strong>，但里面的成员是<strong>无序的</strong>，<strong>唯一的，不重复的</strong>，数学的集合有些差异，数学上可以重复</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h3 id="哈希表理论"><a href="#哈希表理论" class="headerlink" title="哈希表理论"></a>哈希表理论</h3><h3 id="自定义哈希表"><a href="#自定义哈希表" class="headerlink" title="自定义哈希表"></a>自定义哈希表</h3><h2 id="树结构"><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h2><h3 id="树的相关概念"><a href="#树的相关概念" class="headerlink" title="树的相关概念"></a>树的相关概念</h3><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><h3 id="二叉搜索树-1"><a href="#二叉搜索树-1" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h3><h2 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h2><h3 id="图相关概念"><a href="#图相关概念" class="headerlink" title="图相关概念"></a>图相关概念</h3><h3 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h3><h3 id="自定义图"><a href="#自定义图" class="headerlink" title="自定义图"></a>自定义图</h3><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><h2 id="排序-算法"><a href="#排序-算法" class="headerlink" title="排序&amp;算法"></a>排序&amp;算法</h2><h3 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h3><h3 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h3>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 扩展 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>charles 手机调试</title>
      <link href="/2020/01/01/other/other-charles/"/>
      <url>/2020/01/01/other/other-charles/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.charlesproxy.com/">charles 抓包</a><br>[破解码生成]<a href="https://www.zzzmode.com/mytools/charles/">https://www.zzzmode.com/mytools/charles/</a>)<br><a href="https://zhuanlan.zhihu.com/p/351377492">知乎</a></p><p>连接手机调试<br>window 打开 Charles<br>PC 端安装证书<br>Help-&gt;SSL Proxying -&gt;install Charles Root Certificate<br>选择 将证书放入下列储存 -&gt; 浏览 -&gt; 受信任的证书颁发机构 -&gt; 确定 完成<br>找到上方菜单栏 Proxy ，Window Proxy 勾起</p><p>获取手机代理信息<br>Help-&gt;SSL Proxying -&gt;install Charles Root Certificate on a Mobile…..<br>弹窗，得到 ip 和端口，这个 IP 可能没用，要换成自己电脑的 IP<br>手机 手动代理设置好完成后 PC Charles 会出现弹窗，选择 ALLOW</p><p>手机按照证书<br>选择 ALLOW 后手机进入浏览器(尽量不用自带的) 按照第一个弹窗提示 输入 chls.pro&#x2F;ssl</p><pre><code>搜索 加密与凭据 或 证书 ，找到下载的证书文件安装</code></pre><p>乱码 问题<br>Proxy -&gt; SSL Proxying settings -&gt; add<br> 添加一条 host _ prot _ 的记录</p><pre><code>导致 页面中websock无法连接要去 Proxy -&gt; proxies 勾选sockit 在到旁边 Windows 勾选Use SOCKIT proxy</code></pre><p>手机 https unkonwn<br>Android7 以上的系统无法对第三方 https 的 App 进行抓包了，因为 7.0 以上版本设置了安全策略，不再信任用户自己添加的认证证书，也就无法完美的进行抓包。</p><p>安卓 7.0 以上处理证书问题<br>window <a href="http://slproweb.com/products/Win32OpenSSL.html">http://slproweb.com/products/Win32OpenSSL.html</a> 下载 openssl , 安卓 设置环境变量，重新打开 cmd<br>charles 的 Help -&gt; SSL Proxying -&gt; Save Charles Root … 导出证书(一定要 xxx&#x2F;xxx.pem, 带上名字和单位)<br><code>openssl x509 -subject_hash_old -in xxx.pem</code> 生成的数据上面有个 8 位 hash 值，将 xxx.pem 重命名位 8 位 hash.0</p><p>电脑安装 adb<br><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">https://dl.google.com/android/repository/platform-tools-latest-windows.zip</a><br>解压 配置环境变量</p><pre><code>手机连接USBadb device 测试adb remount 测试adb -d 表示当前唯一连接USB的设备adb push xxxxx/8位hash.0 /system/etc/security/cacertsadb shell 可以进入shell模式</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>重发</code>和<code>定时重发</code><br>定位到某个接口右键 <code>Repeat</code> 和 <code>Repeat Advanced</code><br>重复次数<br>并发数<br>间隔时间</p><p>重写请求 <code>Rewrite</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题积累</title>
      <link href="/2020/01/01/other/other-issues/"/>
      <url>/2020/01/01/other/other-issues/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-v-if"><a href="#vue-v-if" class="headerlink" title="vue v-if"></a>vue v-if</h3><p>v-if element 控件 如果切换的内容相似错乱问题<br>el-form ref&#x3D;”childform” key&#x3D;”xx”</p><h3 id="常见的兼容性问题"><a href="#常见的兼容性问题" class="headerlink" title="常见的兼容性问题"></a>常见的兼容性问题</h3><h3 id="项目的难点"><a href="#项目的难点" class="headerlink" title="项目的难点"></a>项目的难点</h3><pre><code>- web调用摄像头，web播放rtsp视频流问题</code></pre><h3 id="终端图标字体无法显示问题"><a href="#终端图标字体无法显示问题" class="headerlink" title="终端图标字体无法显示问题"></a>终端图标字体无法显示问题</h3><ul><li><a href="https://www.nerdfonts.com/">方案 1</a><ul><li><a href="https://www.nerdfonts.com/font-downloads">下载</a></li><li>下载喜欢的字体然后右键选择<code>为所有用户安装</code>后更改 PowerShell 窗口的字体即可</li></ul></li></ul><h3 id="js-浮点数计算偏差问题"><a href="#js-浮点数计算偏差问题" class="headerlink" title="js 浮点数计算偏差问题"></a>js 浮点数计算偏差问题</h3><blockquote><p>两位小数: 同时乘以 100 变成整数,结果再根据运算符相对的减少倍数<br>四位小数: 同时乘以 10000 变成整数……</p></blockquote><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><blockquote><p>指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性(如 ts，scss)</p></blockquote><h3 id="github-io-无法访问的问题"><a href="#github-io-无法访问的问题" class="headerlink" title="github.io 无法访问的问题"></a>github.io 无法访问的问题</h3><ul><li>修改 dns 为 114.114.114.114</li><li>dns 污染问题<ul><li><a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a></li><li>搜索<a href="https://github.com/">https://github.com</a> 拿到最新 github IP 地址</li><li>搜索<a href="https://codeload.github.com/">https://codeload.github.com</a></li><li>搜索<a href="https://assets-cdn.github.com/">https://assets-cdn.github.com</a></li><li>搜索<a href="https://global.ssl.fastly.net/">https://global.ssl.fastly.net</a></li></ul></li></ul><h3 id="将网页创建桌面快捷方式"><a href="#将网页创建桌面快捷方式" class="headerlink" title="将网页创建桌面快捷方式"></a>将网页创建桌面快捷方式</h3><blockquote><p>chrome:&#x2F;&#x2F;apps&#x2F; -&gt; 拖动收藏的网址到页面中 -&gt; 图标上右键创建快捷方式</p></blockquote><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><blockquote><p>json 是一种格式<br>json 字符串：json 格式的字符串<br>json 对象：json 格式的对象(键值对必须是双引号)</p></blockquote><h3 id="移动端-click-延迟处理"><a href="#移动端-click-延迟处理" class="headerlink" title="移动端 click 延迟处理"></a>移动端 click 延迟处理</h3><blockquote><p>移动端 200-300ms 延迟可以使用 <code>fastclick</code>插件或将 click 事件替换<code>tab事件</code>来解决<br> tap 事件不是原生的，zepto、微信小程序等都有封装</p></blockquote><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><ul><li>js 便利对象无法保证顺序<blockquote><p>这是因为在遍历对象时，key 为整数类型或者可以转换为整数类型的字符串（例如：“0”）时，会将这些 key 从小到大优先进行遍历，然后其它的 key 会按照创建的实际顺序进行遍历。<br>json 数据是无序的,数组是有序的<br>将已有 json 通过<code>new Map(Object.entries(json))</code>转 Map,或通过<code>Object.keys(json)</code>获取 key，顺序都是打乱的</p></blockquote></li><li>排序问题与 es 版本有关，老版本好像没有这样的问题<ul><li><a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-262/">ECMA-262（ECMAScript）</a>,第三版,for-in 语句的属性遍历的顺序是由对象定义时属性的书写顺序决定的。</li><li>ECMA-262（ECMAScript）第五版,对 for-in 语句的遍历机制又做了调整，属性遍历的顺序是没有被规定的。</li></ul></li></ul><h3 id="STAR-法则"><a href="#STAR-法则" class="headerlink" title="STAR 法则"></a>STAR 法则</h3><ul><li>S: situation(项目背景)</li><li>T: task(任务目标)</li><li>A: action(采取的行动)</li><li>R: result(产生的结果)</li></ul><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><blockquote><p>当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在 robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p></blockquote><h3 id="vue-快捷到了代码段"><a href="#vue-快捷到了代码段" class="headerlink" title="vue 快捷到了代码段"></a>vue 快捷到了代码段</h3><blockquote><p>vscode -&gt; 首选项 -&gt; 用户片段 -&gt; 搜索 vue</p></blockquote><p>设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;temp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;div class=&#x27;warp&#x27;&gt;&lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;import * as API from &#x27;@/api&#x27;;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;export default &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;data()&#123;return &#123;&#125;&#125;,create()&#123;&#125;,methods:&#123;getData() &#123;let that = this;API.AxiosPOST(&#x27;&#x27;, &#123;&#125;).then((res) =&gt; &#123;&#125;);&#125;,&#125;,mounted()&#123;this.getData()&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;style lang=&#x27;scss&#x27; scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>新文件中直接输入 demo,回车</p><h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><ul><li>在不使用 class 的情况下，管理里面的状态数据，并且把里面逻辑思维的东西抽取出来，封装在一个可复用的功能函数中</li><li>类似 vue2.x 中的 mixin 混入(有时很多个组件都有相同的方法或 created(){}做相同事情时，定义一个 mixin，后期合并到需要的组件中中)</li></ul><h3 id="无法安装-node-sass"><a href="#无法安装-node-sass" class="headerlink" title="无法安装 node-sass"></a>无法安装 node-sass</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node-sass 升级到最新版</span><br></pre></td></tr></table></figure><h3 id="vmin-和-vm"><a href="#vmin-和-vm" class="headerlink" title="vmin 和 vm"></a>vmin 和 vm</h3><blockquote><p>把相对于 viewport 的宽度或高度中较小的那个分 100 份</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">font-size: 12px;/*IE6-8*/</span><br><span class="line">font-size: 5vm;/*IE9*/</span><br><span class="line">font-size: 5vmin;/*其他浏览器*/</span><br></pre></td></tr></table></figure><h3 id="为什么不建议在-mutation-和-reducers-中异步操作"><a href="#为什么不建议在-mutation-和-reducers-中异步操作" class="headerlink" title="为什么不建议在 mutation 和 reducers 中异步操作"></a>为什么不建议在 mutation 和 reducers 中异步操作</h3><p>因为异步操作是成功还是失败不可预测，什么时候进行异步操作也不可预测；当异步操作成功或失败时，如果不 commit(mutation) 或者 dispatch(action)，Vuex 和 Redux 就不能捕获到异步的结果从而进行相应的操作,数据无法正确追踪。并且 reducer 是纯函数，异步操作，产生副作用，就不是纯函数了</p><h3 id="安全对象，安全数组"><a href="#安全对象，安全数组" class="headerlink" title="安全对象，安全数组"></a>安全对象，安全数组</h3><blockquote><p>确保使用的东西是一个对象，数组，使用他们的方法时不会报错</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">safeArray</span> = (<span class="params">array</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(array) ? array : [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先要去判断 当前对象是否为有效对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isVaildObject</span> = (<span class="params">obj</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> &amp;&amp; !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这里直接用上面的函数 如果有效就返回本身，无效就返回空对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">safeObject</span> = (<span class="params">obj</span>) =&gt; (<span class="title function_">isVaildObject</span>(obj) ? obj : &#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="谷歌控制台"><a href="#谷歌控制台" class="headerlink" title="谷歌控制台"></a>谷歌控制台</h3><ul><li>重复发送 &#x3D;&gt; 点击已有接口,右键 <code>replay XHR</code></li><li>定位变量，右键复制，或右键添加为全局变量，后面可以在控制台直接使用</li><li><code>$_</code>:控制台上一次输出结果,通过 $_对上一次输出结果进行操作</li><li><code>$0</code>:快速选择并操作元素<ul><li>点击左上角箭头，选择一个元素，进入控制台输入<code>$0</code>,$0 就是目标元素，控制台对元素随意操作</li></ul></li><li>通过方法选择元素、<ul><li>$(“h1”)、$$(“h1”) 所有 h1</li></ul></li><li>Alt+点击节点 &#x3D;&gt; 展开所以子节的</li><li>谷歌工具 控制台( Ctrl+Shift+P )<ul><li>screen 截屏</li></ul></li></ul><h3 id="未完成计划"><a href="#未完成计划" class="headerlink" title="未完成计划"></a>未完成计划</h3><ul><li><p>大屏项目 mockjs</p></li><li><p>web 加密、安全、摄像头视频流</p></li><li><p><a href="http://www.cssmoban.com/cssthemes/6197.shtml">http://www.cssmoban.com/cssthemes/6197.shtml</a></p></li><li><p><a href="https://sc.chinaz.com/tag_moban/CSS3.html">https://sc.chinaz.com/tag_moban/CSS3.html</a></p></li><li><p>SuperScrollorama</p></li><li><p>使用低版本浏览器通过 vlc 插件播放</p><ul><li><a href="http://www.360doc.com/content/17/1103/19/43486_700641264.shtml">http://www.360doc.com/content/17/1103/19/43486_700641264.shtml</a></li><li><a href="https://wiki.videolan.org/Documentation:WebPlugin/">https://wiki.videolan.org/Documentation:WebPlugin/</a></li><li>chrome:&#x2F;&#x2F;flags&#x2F;#enable-npap</li><li>chrome:&#x2F;&#x2F;plugins 开启 vlc</li></ul></li><li><p>服务端(ffmpeg)将 rtsp 流转 rtmp 或 emu8 等格式，web 可以播放</p></li><li><p>样式通过 @import “”转移到 App.vue 中</p></li></ul><p>yunbanf:liaozxliao12345<br>内网 f:内网 f:SFTP - Root 账号 , path:home&#x2F;www<br>yunbaniot:liaozxliao123@<br>215:liaozx<br>sv: lzx&#x2F;lzx_12345</p><p>local:liaozx&#x2F;liaozx12345</p><p>阿里云：223.5.5.5</p><p>DNSPod Public DNS：119.29.29.29</p><p>Google Public DNS：8.8.8.8&#x2F;8.8.4.4</p><p>百度:180.76.76.76</p><p><a href="mailto:&#108;&#122;&#111;&#120;&#x75;&#110;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#108;&#122;&#111;&#120;&#x75;&#110;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a> &#x2F; ablzxyu23zs350001689</p><p>huaweibyun 114.115.212.xxx l…16.</p><p>Navicat mongo : lzoxun -&gt; 4233 -&gt; lzx123456.XUN &#x3D;&gt; mongoroot123456</p><p>ruanfan z lzoxun m lzx123xxx....@</p><p>hwymysql rootlzx123xxx,user-1lzx123xxx</p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Issues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用第三方包</title>
      <link href="/2020/01/01/other/other-my-use-packs/"/>
      <url>/2020/01/01/other/other-my-use-packs/</url>
      
        <content type="html"><![CDATA[<h3 id="web-前端"><a href="#web-前端" class="headerlink" title="web 前端"></a>web 前端</h3><ul><li><a href="https://github.com/wagerfield/parallax">视差效果动画插件</a></li></ul><h4 id="UI-框架"><a href="#UI-框架" class="headerlink" title="UI 框架"></a>UI 框架</h4><ul><li>element-ui&#x2F;element-plus 饿了么团队</li><li>iview</li><li>mint-ui</li><li>vant-ui</li><li>AntDesign&#x2F;AntDesign Mobile &#x3D;&gt; 蚂蚁金服 React UI 组件库 &#x3D;&gt; 没有 Vue 版本，社区搞一个 AntDesignVue</li></ul><h4 id="图表插件"><a href="#图表插件" class="headerlink" title="图表插件"></a>图表插件</h4><ul><li>echats</li><li>amcharts</li></ul><h4 id="时间插件"><a href="#时间插件" class="headerlink" title="时间插件"></a>时间插件</h4><ul><li>day</li><li>monent</li></ul><h4 id="动画库"><a href="#动画库" class="headerlink" title="动画库"></a>动画库</h4><ul><li>Animate.css</li><li>Anime.js</li><li>Hover.css</li><li>wow.js</li><li>scrollReveal.js</li><li>Magic.css</li><li>waves</li><li>Velocity.js</li></ul><h4 id="NPM-项目插件"><a href="#NPM-项目插件" class="headerlink" title="NPM 项目插件"></a>NPM 项目插件</h4><ul><li><a href="https://github.com/svrxjs/svrx/blob/master/README.zh-CN.md">@svrx&#x2F;cli (puer 升级)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他问题</title>
      <link href="/2020/01/01/other/other-other-issues/"/>
      <url>/2020/01/01/other/other-other-issues/</url>
      
        <content type="html"><![CDATA[<h4 id="度"><a href="#度" class="headerlink" title="度"></a>度</h4><blockquote><p>千瓦时就是平时所说的“度”，是电功的单位，符号：<strong>kW·h</strong>，计算公式为功率乘以时间。假设一台耗电设备的<strong>功率为 1000 瓦</strong>，即其<strong>一小时</strong>的耗电量为<strong>1 千瓦</strong>时，也就是一小时<strong>1 度电</strong>。</p></blockquote><h4 id="桑基图"><a href="#桑基图" class="headerlink" title="桑基图"></a>桑基图</h4><ul><li><strong>桑基图能做到在展示资金流动的同时，遵守数据的“能量守恒定理”。</strong></li><li>桑基图在描述一组数据到另一组数据的流向的同时，还能展示到底“流”了多少。在数据流动的可视化过程中，桑基图紧紧遵循能量守恒，<strong>数据从开始到结束，总量都保持不变。</strong></li></ul><h4 id="H5-页面"><a href="#H5-页面" class="headerlink" title="H5 页面"></a>H5 页面</h4><blockquote><p><code>H5</code>页面 或 <code>H5端</code> 并不是指<code>html5</code>，<code>H5</code>只是<strong>产品端</strong>的一种概念，一般只要从<strong>手机浏览器</strong>打开的网站，就被<strong>产品</strong>称为<strong>H5 页面</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postmain</title>
      <link href="/2020/01/01/other/other-postmain/"/>
      <url>/2020/01/01/other/other-postmain/</url>
      
        <content type="html"><![CDATA[<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>1、new -&gt; cellection -&gt; 起一个集合名称<br>2、更多的 Add Folder(区分模块，比如用户请求接口)<br>3、模块中再更多 Add Request 添加用户接口请求</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>1、new -&gt; Environment -&gt; 起一个名字<br>2、添加环境变量<br><img src="/../../static/img/2022-10-25_102353.jpg" alt="postman环境变量"><br>3、使用环境变量，接口请求上面可以选择环境，就可以直接通过 <code>&#123;&#123;baseUrl&#125;&#125;/users</code> 这样掉接口了</p><h3 id="Pre-request-Script"><a href="#Pre-request-Script" class="headerlink" title="Pre-request Script"></a>Pre-request Script</h3><blockquote><p>调用接口前可以先做一些事情，比如通过 js 生成动态参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取时间戳</span></span><br><span class="line"><span class="keyword">var</span> timestamp = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将时间戳保存到全局变量中</span></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;timestamp&quot;</span>, timestamp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取全局变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pm.<span class="property">globals</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CTRL + ALT + C 控制台，查看具体调用的接口地址，与这边操作的输出</span></span><br></pre></td></tr></table></figure><h3 id="Tests-Tab"><a href="#Tests-Tab" class="headerlink" title="Tests Tab"></a>Tests Tab</h3><blockquote><p>接口调用完成可以做一些事情</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用登录接口后，直接把token写入全局变量，再把其他接口token，使用全局变量&#123;&#123;token&#125;&#125;代替</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>, data.<span class="property">token</span>);</span><br></pre></td></tr></table></figure><h3 id="全局添加"><a href="#全局添加" class="headerlink" title="全局添加"></a>全局添加</h3><p>定位到结合添加，那么集合里所有接口都可以用</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>postman 控制台: <code>CTRL + ALT + C</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Script </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插件</title>
      <link href="/2020/01/01/other/other-plugin/"/>
      <url>/2020/01/01/other/other-plugin/</url>
      
        <content type="html"><![CDATA[<h2 id="npm-插件"><a href="#npm-插件" class="headerlink" title="npm 插件"></a>npm 插件</h2><h3 id="puer"><a href="#puer" class="headerlink" title="puer"></a>puer</h3><blockquote><p>轻松开起本地服务器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install puer -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接使用</span></span><br><span class="line">puer --port xxxx</span><br></pre></td></tr></table></figure><h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><blockquote><p>node 服务器改动时自动重启服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemon -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接使用</span></span><br><span class="line">nodemon server.js</span><br></pre></td></tr></table></figure><h3 id="apidoc"><a href="#apidoc" class="headerlink" title="apidoc"></a>apidoc</h3><blockquote><p>根据指定注释格式生成 api 文档</p></blockquote><p><a href="https://apidocjs.com/#install">官网</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">npm install apidoc -g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释格式</span></span><br><span class="line">/**</span><br><span class="line"> * @api &#123;get&#125; /user/:id Request User information</span><br><span class="line"> * @apiName GetUser</span><br><span class="line"> * @apiGroup User</span><br><span class="line"> *</span><br><span class="line"> * @apiParam &#123;Number&#125; id Users unique ID.</span><br><span class="line"> *</span><br><span class="line"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span><br><span class="line"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span><br><span class="line"> */</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接使用 -i(生成文档的文件夹) -o(输出文件夹)</span></span><br><span class="line">apidoc -i myapp/ -o apidoc/ -t mytemplate/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根目录下 apidoc.json 全局配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//apidoc.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apiDoc basic example&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Custom apiDoc browser title&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/v1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h3><blockquote><p>第三方插件下载工具,也是一个包管理器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install bower -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接使用</span></span><br><span class="line">bower install xxxx</span><br></pre></td></tr></table></figure><h3 id="json-server-生成-REST-API"><a href="#json-server-生成-REST-API" class="headerlink" title="json-server 生成 REST API"></a>json-server 生成 REST API</h3><blockquote><p>快速生成模拟可访问<strong>REST</strong> API 接口,post 请求时配置文件自动添加请求数据记录,并且每个接口都能使用 GET、POST、PUT(更新)、DELETE(删除)请求</p></blockquote><p>REST API</p><ul><li>同一个请求路径可以进行多个操作</li><li>请求方式可以可以用到 GET、PPST、PUT、DELETE</li><li>浏览器的运行动作 post、get、put、delete 与 CRUD 统一<ul><li>新增 (create，使用 POST )</li><li>读取 (read，使用 GET )</li><li>更新 (update，使用 PUT )</li><li>删除 (destroy，使用 DELETE)</li></ul></li></ul><p>非 REST API</p><ul><li>请求方式与 CRUD 无关</li><li>一个路径只对应一个操作</li><li>一般只用 GET&#x2F;POST</li></ul><p><a href="https://github.com/typicode/json-server#getting-started">github 地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根目录创建 db.json 配置接口数据</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;posts&quot;: [</span><br><span class="line">    &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;comments&quot;: [</span><br><span class="line">    &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成接口并监听</span></span><br><span class="line">json-server --watch db.json</span><br></pre></td></tr></table></figure><h3 id="vuex-persistedstate"><a href="#vuex-persistedstate" class="headerlink" title="vuex-persistedstate"></a>vuex-persistedstate</h3><blockquote><p>vuex 持久化，<code>nuxt</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import createPersistedState from &quot;vuex-persistedstate&quot;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">    plugins: [createPersistedState()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vconsole"><a href="#vconsole" class="headerlink" title="vconsole"></a>vconsole</h3><blockquote><p><a href="https://www.npmjs.com/package/vconsole">移动端的控制台</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install vconsole -D</span><br><span class="line"></span><br><span class="line">import vConsole from &#x27;vconsole&#x27;</span><br><span class="line">Vue.prototype.$vConsole = new vConsole();</span><br></pre></td></tr></table></figure><h3 id="spy-debugger-移动真机调试"><a href="#spy-debugger-移动真机调试" class="headerlink" title="spy-debugger 移动真机调试"></a>spy-debugger 移动真机调试</h3><p>已经废弃</p><p>1、安装<a href="https://github.com/wuchangming/spy-debugger">github 入口</a></p><p>集成 weinre</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install spy-<span class="keyword">debugger</span> -g</span><br></pre></td></tr></table></figure><p>2、命令行输入 spy-debugger<br>3、手机与电脑连接同一个局域网，根据提示 找到手机的 WiFi 长按 -&gt; 修改网络 -&gt; 显示高级 -&gt; 代理 -&gt;手动<br>4、对应主机名与端口 保存<br>5、在生成的网址中调试手机访问的页面</p><h3 id="weiner"><a href="#weiner" class="headerlink" title="weiner"></a>weiner</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install weinre -g</span><br><span class="line"></span><br><span class="line">启动 weinre --httpPort <span class="number">8082</span> --boundHost <span class="number">192.168</span><span class="number">.4</span><span class="number">.123</span></span><br><span class="line"></span><br><span class="line">浏览器打开 <span class="attr">http</span>:<span class="comment">//192.168.4.123:8082</span></span><br><span class="line"></span><br><span class="line">要调试的页面添加 &lt;script src=<span class="string">&quot;http://192.168.4.123:8082/target/target-script-min.js#anonymous&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>其他工具 vConsole、Charles</p><h3 id="内网穿透-端口映射工具"><a href="#内网穿透-端口映射工具" class="headerlink" title="内网穿透 端口映射工具"></a>内网穿透 端口映射工具</h3><blockquote><p>内网穿透,反向代理 大概意思是将您的本地主机公开到外网，公共端点和本地运行的 Web 服务器之间建立一个安全的通道，便于测试和共享</p></blockquote><p><a href="https://www.npmjs.com/package/localtunnel">localtunnel</a></p><h4 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g localtunnel</span><br><span class="line">lt --port &lt;要映射的端口&gt;</span><br><span class="line">lt --subdomain &lt;个性前缀&gt; --port &lt;要映射的端口&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前缀不能太简单,出现tunnel server offline: Request failed with status code 403, retry 1s</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地开启服务 localhost:&lt;被映射的端口&gt;,访问生成的地址就能访问这个本地服务了</span></span><br></pre></td></tr></table></figure><h4 id="其他类似工具推荐"><a href="#其他类似工具推荐" class="headerlink" title="其他类似工具推荐"></a>其他类似工具推荐</h4><p>花生壳、PubYun、NoIP、DynDNS、Ngrok、Tunnel、pagekite 等</p><h3 id="乱七八糟小插件"><a href="#乱七八糟小插件" class="headerlink" title="乱七八糟小插件"></a>乱七八糟小插件</h3><ul><li><a href="https://www.npmjs.com/package/nprogress">nprogress</a> 路由跳转上方出现进度条</li><li><a href="https://www.npmjs.com/package/fastclick">fastclick</a> 解决移动端 click 300ms 延迟问题</li></ul><hr><h2 id="web-常用插件"><a href="#web-常用插件" class="headerlink" title="web 常用插件"></a>web 常用插件</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li><a href="https://www.cnblogs.com/cjrfan/p/9154539.html">日期时间(Day.js)</a></li></ul><h2 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h2><h3 id="fullpage-js"><a href="#fullpage-js" class="headerlink" title="fullpage.js"></a>fullpage.js</h3><blockquote><p>基于 jQuery 的全屏特效插件 <a href="http://fullpage.81hu.com/">fullpage 官网</a> <a href="https://www.bilibili.com/video/BV1Ks411V7Kg?p=49">bilibili 视频</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">bower install fullpage.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、引入jQuery、fullpage.css、fullpage.js</span></span><br><span class="line"><span class="comment">// 2、指定全屏结构标签</span></span><br><span class="line">&lt;div id=<span class="string">&quot;fullpage&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>Some section<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>Some section<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>Some section<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>Some section<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、js操作配置</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&#x27;#fullpage&#x27;</span>).<span class="title function_">fullpage</span>(&#123;</span><br><span class="line">       <span class="comment">//xxxx</span></span><br><span class="line">       <span class="comment">//在当前屏幕离开之前执行下面方法</span></span><br><span class="line">       <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">index,nextIndex,dir</span>)&#123;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            当前屏索引、下一屏幕索引、方向</span></span><br><span class="line"><span class="comment">            滚动全屏动画效果方案:</span></span><br><span class="line"><span class="comment">                给所有屏幕的动画元素加上自定义属性(mat)储存动画class</span></span><br><span class="line"><span class="comment">                触发改方法的时候去掉当前屏动画</span></span><br><span class="line"><span class="comment">                给nextIndex中有动画的添加动画</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="comment">//清除动画</span></span><br><span class="line">          $(<span class="string">&#x27;[mat]&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">ind,ele</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> mat = $(element).<span class="title function_">attr</span>(<span class="string">&#x27;mat&#x27;</span>);</span><br><span class="line">              $(element).<span class="title function_">removeClass</span>(mat)</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="comment">//下屏添加动画,找到下一屏,找到屏中拥有amt属性的元素,遍历添加类</span></span><br><span class="line">          $(<span class="string">&#x27;#fullpage .section&#x27;</span>).<span class="title function_">eq</span>(nextIndex - <span class="number">1</span>).<span class="title function_">find</span>(<span class="string">&#x27;[amt]&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">addi,addele</span>)&#123;</span><br><span class="line">              $(addele).<span class="title function_">addClass</span>($(addele).<span class="title function_">attr</span>(<span class="string">&#x27;amt&#x27;</span>))</span><br><span class="line">          &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>业务系统</title>
      <link href="/2020/01/01/other/other-systemtype/"/>
      <url>/2020/01/01/other/other-systemtype/</url>
      
        <content type="html"><![CDATA[<h3 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h3><blockquote><p>将基础设施提供给用户</p></blockquote><blockquote><p>基础服务设施：如网络、存储、云服务，服务商提供服务器，用户可以购买远程使用</p><p>自己购买服务器放在公司的角落，就不是 IaaS 了</p></blockquote><h3 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h3><blockquote><p>把一套工具或框架的接口提供给开发者</p></blockquote><blockquote><p>面向软件开发的服务，视频播放、刷脸、指纹识别、开发中用到的第三方服务、开发工具</p><p>用户不需要自己开发</p></blockquote><h3 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h3><blockquote><p>把软件当做服务提供给客户</p></blockquote><blockquote><p>用户不用再购买软件,而改用向提供商租用基于 Web 的软件,来管理企业经营活动,且无需对软件进行维护</p><p>钉钉、企业微信</p></blockquote><h3 id="BtoC、BtoB"><a href="#BtoC、BtoB" class="headerlink" title="BtoC、BtoB"></a>BtoC、BtoB</h3><blockquote><p>toB &#x3D;&gt; BtoB (商家对商家) 是面向企业的模式</p><p>toC &#x3D;&gt; BtoC (商家对个人) 是面向个人的服务，更注重用户体验</p></blockquote><p>IOT 物联网系统</p><p>ERP 系统（企业资源计划的简称）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN</title>
      <link href="/2020/01/01/other/other-svn/"/>
      <url>/2020/01/01/other/other-svn/</url>
      
        <content type="html"><![CDATA[<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><ul><li>码云(gitee)创建私有仓库</li><li>进入管理-启用 svn 服务，就能通过 svn 方式管理仓库</li><li>下载<ul><li>进入 <a href="https://subversion.apache.org/roadmap.html#release-planning">Apache 官网</a> -&gt; Subversion -&gt; 找到 Binary Packages 下载可以的包 -&gt; VisualSVN -&gt; 下载安装 tools</li><li>搭建服务器的话还要下载 <code>Visual SVN Server</code></li><li><a href="https://tortoisesvn.net/sasl_howto.html">https://tortoisesvn.net/sasl_howto.html</a></li></ul></li><li>层级<ul><li>客户层<ul><li>通过命令行操作</li><li>通过工具操作</li></ul></li><li>服务层<ul><li>通过<code>(DAV)http://</code>方式访问远程仓库<ul><li>需要永远<code>Apache</code>服务器</li></ul></li><li>通过<code>(SVN)svn://</code>方式访问远程仓库</li><li>通过<code>(Local)file://</code>方式访问仓库(搭建 SVN 仓库本机，不需要网络)</li></ul></li><li>仓库层</li></ul></li></ul><h3 id="SVN-命令行"><a href="#SVN-命令行" class="headerlink" title="SVN 命令行"></a>SVN 命令行</h3><ul><li><p>管理员命令</p><ul><li><p>svnadmin –help</p></li><li><p>svnadmin –help 命令</p></li><li><p>仓库</p><ul><li><p>顶级仓库 (顶级仓库下管理着很多根仓库)</p><ul><li>一个文件夹,创建根仓库时，根仓库路径中上一层必须存在，这个就是顶层参考</li></ul></li><li><p>根仓库</p><ul><li><p><code>svnadmin create path</code> :创建版本根仓库</p><ul><li><p><code>conf</code>: 根仓库配置文件夹</p><ul><li><p><code>authz</code>:权限文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[groups]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义leaders、members两个组</span></span><br><span class="line">leaders = user1,user2</span><br><span class="line">members = user3,user4,user5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过组设置权限，组中成员都有这个权限</span></span><br><span class="line">[/thank/sms2] # 对于sms2目录</span><br><span class="line">@leaders = rw</span><br><span class="line">@members = r</span><br><span class="line">* =</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不使用组</span></span><br><span class="line">[/] # 对于根仓库（realm指定的）（rw,r, ）只有这三种值</span><br><span class="line">用户1 = rw # 用户1拥有读写权限</span><br><span class="line">用户2 = r  # 用户2只有读权限</span><br><span class="line">* = #其他用户每一任何权限</span><br><span class="line"></span><br><span class="line">[/thank/sms] #对于指定目录</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这边权限优先级高于svnserve.conf设置的</span></span><br></pre></td></tr></table></figure></li><li><p><code>passwd</code> 是帐号密码文件</p><ul><li>用户 1 &#x3D; 密码 1</li><li>用户 2 &#x3D; 密码 2</li></ul></li><li><p><code>svnserve.conf</code> 是 SVN 服务配置文件</p><ul><li>打开下面的 5 个注释</li><li>anon-access &#x3D; read #匿名用户可读(write 读写权限)</li><li>auth-access &#x3D; write #授权用户可读写</li><li>password-db &#x3D; passwd #使用哪个文件作为账号文件</li><li>authz-db &#x3D; authz #使用哪个文件作为权限文件</li><li>realm &#x3D; &#x2F;home&#x2F;svn # 认证空间名，版本库所在目录</li></ul></li></ul></li><li><p><code>db</code>:存放具体版本数据内容(不是源码)</p></li></ul></li></ul></li></ul></li></ul></li><li><p>服务端命令</p><ul><li>svnserve</li><li>svnserve -d：开启 svn 服务，开放顶层仓库，运行客户端访问</li><li>svnserve -d –listen-port&#x3D;8888(默认 3690)<ul><li>通过<code>svn://localhost:3690/path/顶层仓库/跟仓库</code>访问</li></ul></li><li>svnserve -d –listen-port&#x3D;8888 -r &#x2F;home&#x2F;lzoxun&#x2F;svnrepository ：指定顶层仓库<ul><li>通过<code>svn://localhost:3690/跟仓库</code>访问</li></ul></li></ul></li><li><p>客户端命令</p><ul><li><p>命令指令直接管理（有些指令不支持）</p><ul><li><p>检出：<code>svn checkout(co) svn://gitee.com/lzo-gitee/lzo-svnmsg 指定co到的路径</code></p></li><li><p>提交</p><ul><li><p>状态：<code>svn status(st)</code></p><ul><li><p>状态值</p><ul><li>A - svn add filename</li><li>M - 内容修改过的文件</li><li>L - 锁定的文件(svn cleanup 处理)</li><li>K - 加锁的文件</li><li>? - 未跟踪</li></ul></li><li><p><code>svn add filename</code>:将文件或目录交给 svn 进行管理。每个文件只能 add 一次</p></li><li><p><code>svn status -v path</code>:并查看子文件状态</p></li></ul></li><li><p>提交：<code>svn commit(ci) -m &#39;LogMessage&#39; 提交的文件</code> (提交所以 add 和已修改的文件)</p><ul><li>提交文件服务仓库无法直接看到的</li></ul></li></ul></li><li><p>更新</p><ul><li><code>svn update(up)</code> ：如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。</li><li><code>svn update -r 200 test.php</code>： 将版本库中的文件 test.php 还原到版本 200</li></ul></li><li><p>比较</p><ul><li><code>svn diff(di) path</code>：将修改的文件与基础版本比较</li><li><code>svn diff -r m:n path</code>：对版本 m 和版本 n 比较差异</li></ul></li><li><p>删除</p><ul><li><code>svn delete path</code><ul><li><code>svn commit -m &#39;delfilepath&#39; path</code></li><li>svn (del, remove, rm)</li></ul></li></ul></li><li><p>查看</p><ul><li>查看日志:<code>svn log path</code></li><li>文件信息:<code>svn file path</code></li></ul></li><li><p>合并</p><ul><li><code>svn merge -r m:n path</code>:合并 m 版本与 n 版本</li></ul></li><li><p>锁</p><ul><li>作用避免冲突<ul><li>将文件加锁，拥有锁的用户可以修改，不拥有锁的用户对于该文件是只读的，当修改完，将锁释放，其他用户才能修改，这样就不会产生冲突了(匿名用户无法获取锁，有锁的文件图标变灰色)</li></ul></li><li>加锁:<code>svn lock -m &quot;LockMessage&quot; PATH</code></li><li>解锁:<code>svn unlock PATH</code></li></ul></li><li><p>问题</p><ul><li><code>svn: Cannot negotiate authentication mechanism</code>（无法协商认证机制）。<ul><li>svn 服务器开启了 sasl 加密，本地的 Xcode 和命令行中的 svn 不支持 sasl 加密导致无法协商认证机制问题</li><li>升级:高版本自带 sasl</li></ul></li></ul></li><li><p>不常用指令</p><ul><li><code>svn list(ls)</code>:查看文件列表</li><li><code>svn mkdir Path</code>:直接创建纳入版本库(Add 状态)的文件夹<ul><li><code>svn mkdir Url -m &#39;msg&#39;</code>:直接 commit 到远程(中间目录必须存在,<code>result error</code>)</li></ul></li><li><code>svn cleanup</code>:清除预留日志<ul><li>svn 操作文件之前默认将数据备份到日志文件中，操作结束自动删除，操作过程被打断，就会遗留</li><li>它搜索你的工作副本并执行所有遗留的日志，在这过程中删除锁。如果 Subversion 曾告诉你你的工作副本的一部分被“锁定”了，那么你应该执行这个命令。另外， svn status 会在锁定的项前显示 L。</li></ul></li><li><code>import</code>：<ul><li>将本地文件导入到源码库中，通常用于第一次上传让服务器生成代码项目，以后还需要上传则是 commit</li><li><code>svn import /e/lzo-project/git-test svn://gitee.com/lzo-gitee/lzo-svnmsg/testdir -m &#39;msg&#39;</code></li></ul></li><li><code>svn revert</code>:撤销本地修改<ul><li><code>svn revert fileName</code>:撤销单个文件</li><li><code>svn revert ./*</code>:撤销当前文件夹下所有修改</li><li><code>svn revert -R ./*</code>:递归撤销当前文件夹下所有修改</li></ul></li></ul></li><li><p>log module</p></li><li><p>tag module</p></li><li><p>分支 module</p></li></ul></li></ul></li></ul><h3 id="TortoiseSVN"><a href="#TortoiseSVN" class="headerlink" title="TortoiseSVN"></a>TortoiseSVN</h3><ul><li>安装<ul><li>TortoiseSVN（前面下载 svn 的地方，VisualSVN 同级）</li><li>Language packs 语言包</li></ul></li><li>win 下载安装 TortoiseSVN（Subversion ）<ul><li>检出:复制仓库地址，右键检出(checkout)，输入 gitee 的账号密码</li></ul></li><li>操作<ul><li>window del 删除可以用 ctrl+z 撤销，有件通过 svn 的 delete 就需要 svn 的 revert 撤销</li><li>回滚<ul><li>右键 svn 功能列表 <code>Update to revision...</code></li><li>客户方你日通回滚到指定版本，再次提交就是接下去的，回滚的版本不会消失</li></ul></li><li>冲突<ul><li>当一个文件在多个客户端同时修改，第一个客户端进行提交，没有问题，能成功提交到服务端,第二个用户在进行修改提交，就会产生冲突，</li><li>具体类型<ul><li>异行修改<ul><li>两个用户修改文件内容不是同一行，svn 可以进行简单的合并，双方修改都起作用</li><li>第二个用户提交的时候，当前版本比服务器的低(第一个人修改提交版本加一)，会提示先更新，然后在提交，可以直接提交成功</li></ul></li><li>同行修改<ul><li>两个用户修改文件内容是同一行</li><li>需要人工进行冲突内容的选择,由人工完成取舍</li><li>第二位修改用户提交的时候得到提示需要先更新，这时候会出现好的个文件，和带感叹号标识的冲突文件<ul><li>三个文件代表：自己修改的，修改之前版本和前一个人提交之后的版本(我修改之前版本的下一版本)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1111111111</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine</span><br><span class="line">我修改的内容</span><br><span class="line">||||||| .r7</span><br><span class="line">我修改之前,的内容</span><br><span class="line">=======</span><br><span class="line">第一人修改的内容</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt; .r8</span></span><br><span class="line">1111111111</span><br></pre></td></tr></table></figure></li></ul></li><li>人工删除不需要的，在删除多余的文件，提交解决冲突</li><li>冲突感叹号文件右键 Edit conflict 使用 svn 提供的窗口合并<ul><li>黄色代表冲突的行</li><li>红色代表冲突的内容</li><li>一个窗格是第一个人提交的内容及版本，一个窗口是自己的修改</li><li>在？？？？的窗格中选择行，右键选择用谁的</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="对比-git"><a href="#对比-git" class="headerlink" title="对比 git"></a>对比 git</h3><ul><li>集中式</li><li>修改不需要 add,新文件才要 add<ul><li>git 修改也要 add 或者 commit -am</li></ul></li><li>commit 后不需要 push，直接提交到远程</li></ul><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;svn.path&quot;: &quot;C:\\Program Files\\TortoiseSVN\\bin\\TortoiseSVN.exe&quot;,</span><br><span class="line">&quot;TortoiseSVN.tortoiseSVNProcExePath&quot;: &quot;C:\\Program Files\\TortoiseSVN\\bin\\TortoiseProc.exe&quot;,</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><a href="https://gitee.com/help/articles/4131#article-header0">资料</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vimium</title>
      <link href="/2020/01/01/other/other-vimium/"/>
      <url>/2020/01/01/other/other-vimium/</url>
      
        <content type="html"><![CDATA[<h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><ul><li><code>j/k/h/l</code>:下&#x2F;上&#x2F;左&#x2F;右</li><li><code>u/d -&gt; shift+空格/空格</code>:上下翻页</li><li><code>gg/G</code></li><li><code>ma</code>:创建 a make</li><li><code>~a</code>:跳转到 a make</li></ul><h4 id="窗口-标签页-操作"><a href="#窗口-标签页-操作" class="headerlink" title="窗口(标签页)操作"></a>窗口(标签页)操作</h4><ul><li><code>t/T</code>:新建窗口与浏览器存在的窗口列表</li><li><code>J/K/^</code>:左&#x2F;右窗口&#x2F;两窗口相互切换</li><li><code>H/L</code>:后退&#x2F;前进</li><li><code>x/X</code>:关闭&#x2F;从新打开窗口</li><li><code>&lt;&lt;/&gt;&gt;</code>:标签页面向左&#x2F;向右移动</li><li><code>yt</code>:复制当前窗口</li><li><code>W</code>:标签页提取单独窗口</li></ul><h4 id="内容操作"><a href="#内容操作" class="headerlink" title="内容操作"></a>内容操作</h4><ul><li><code>f/F</code>:当前窗口跳转，新窗口跳转</li><li><code>gi/2gi</code>:取得 input 焦点与第二个 input 焦点</li><li><code>gu</code>:首页</li><li><code>ge</code>:修改网址</li><li><code>yy</code>:复制当前页面地址</li><li><code>gs</code>:查看源码</li></ul><h4 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h4><ul><li><code>o/O</code>:当前&#x2F;新窗口 - 打开指定历史记录或书签</li><li><code>b/B</code>:当前&#x2F;新窗口 - 打开指定书签</li><li><code>p/P</code>:当前&#x2F;新窗口 - 打开 yy 复制的网址</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><code>r</code>:刷新</li><li><code>tab</code>:从地址栏回到页面</li><li><code>alt+f</code>:打开多个链接</li><li><code>alt+p</code>:固定标签页</li><li><code>i</code>:插入模式(屏蔽 vimium 快捷键)</li><li><code>v</code>:选择模式，w,e,b 等选择字符</li><li><code>ctrl+h/ctrl+j/ctrl+shift+o</code>:历史，下载，书签</li></ul><h4 id="Google-浏览快捷键"><a href="#Google-浏览快捷键" class="headerlink" title="Google 浏览快捷键"></a>Google 浏览快捷键</h4><p>标签页与窗口</p><ul><li><code>Ctrl + 1-8/9</code>：跳转指定标签页面&#x2F;9 最后一个标签页</li><li><code>Alt + HOME</code>：当前页面打开主页</li><li><code>Ctrl + w/f4</code>：关闭当前标签页</li><li><code>Ctrl + Shift + w</code>：关闭浏览器以及所有标签页</li><li><code>Ctrl + Shift +n</code>：隐身模式下打开新窗口</li></ul><p>快捷功能</p><ul><li><code>Ctrl + Shift + b</code>：显示隐藏书签栏</li><li><code>Ctrl + Shift + o</code>：打开书签管理器</li><li><code>Ctrl + h</code>：打开历史记录</li><li><code>Ctrl + j</code>：打开下载页</li><li><code>Shift + ESC</code>：打开谷歌任务管理器</li><li><code>Ctrl + Shift + j 或 F12</code>：开发者工具</li><li><code>Ctrl + Shift + del</code>：清除缓存</li><li><code>Ctrl + Shift + m</code>：登录用户面板</li><li>&#96;&#96;：</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2020/01/01/other/othier-docker/"/>
      <url>/2020/01/01/other/othier-docker/</url>
      
        <content type="html"><![CDATA[<p><img src="/../..%5Cstatic%5Cimg%5Cdockerall.png"></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p>解决问题:<br>部署环境麻烦，相同环境更麻烦<br>项目与环境一同打包（镜像），发布到<code>docker仓库</code> &#x3D;&gt; 用户(运维)下载直接运行</p></li><li><p>隔离思想<br>Docker 核心思想 打包装箱 每个箱子相互隔离互不影响</p></li><li><p>基本信息<br>基于 go 开发的<br>容器技术、虚拟化技术(系统最核心的环境 + mysql + 需要的技术 2 + 需要的技术 n ..) 打包成镜像 ，多个再相同系统运行<br><code>直接运行在宿主机上，容器没有自己内核，也没有不必要的软件</code><br><code>每个容器相互隔离，有自己的文件系统，互不影响</code><br><code>内核级别的虚拟化</code><br>虚拟机 &#x3D;&gt; 虚拟机资源占用、冗余步骤多、启动速度慢、很多东西都不是程序环境所需要的<br><code>运行一个完整的系统，在系统上安装和运行软件</code><br><code>如果需要连个容器，就需要安装连个centos这样的系统</code><br><code>安全性强</code><br>基本组成架构</p></li><li><p>DevOpts(开发、运维)<br>打包镜像，发布运维，一键运行，运行环境高度一致</p></li><li><p>名词<br>镜像(image):<br>类似模板，可以通过这个模板创建容器服务<br>容器(container)<br>利用容器运行一个或一组应用,通过镜像创建<br>可以启动停止删除等基本命令<br>仓库(repository)<br>远程存放镜像的地方</p></li></ul><p><a href="https://hub.docker.com/">仓库地址</a><br><a href="https://www.docker.com/">官网</a><br><a href="https://docs.docker.com/">文档</a><br><a href="https://docs.docker.com/reference/">指令文档</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>…<br>…<br>…<br><code>/var/lib/docker</code>:工作目录</p><p>安装成功后<br><code>systemctl start docker.service</code> 启动服务<br><code>docker run hello-world</code> 测试是否可以用</p><ul><li>docker 的工作原理<ul><li>docker 是一个 Client-Server 结构系统，Docker 守护进程运行在服务器主机子上，通过 Socket 从客户端访问<ul><li>守护进程包含所有容器，相当于小的 Linux 系统，里面的端口与外界不冲突</li></ul></li><li>Docker 服务器 执行 客户端发送的指令</li></ul></li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>帮助: <code>docker --help</code><br>判断是否安装成功: <code>docker version</code>、<code>docker info</code><br>启动程序: <code>docker run &lt;镜像名称&gt;</code></p><ul><li>镜像命令<ul><li><code>docker images</code>：查看本地镜像<ul><li><code>-aq</code>:查出所有镜像 id</li></ul></li><li><code>docker search &lt;image name&gt;</code>：搜索镜像<ul><li><code>--filter=STARS=3000</code> :只搜索 stars 大于 3000 的镜像</li></ul></li><li><code>docker pull &lt;image name&gt;</code>:下载镜像<ul><li><code>docker pull &lt;image name&gt;:tag</code> 指定版本</li></ul></li><li><code>docker rmi -f &lt;image id|name&gt;</code>:删除镜像<ul><li><code>docker rmi -f $(docker images -aq)</code>:批量删除</li></ul></li></ul></li></ul><blockquote><p>下载测试镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><ul><li><p>容器命令</p><!-- -   `docker linux大多数命令 容器id`:实现容器内部相应linux功能    --><ul><li><p><code>docker run [参数] centos</code>:新建容器并启动</p><ul><li><code>--name Name</code>:容器名称</li><li><code>-d</code>:后台运行<ul><li><code>后台运行必须有一个前台在使用的应用，否则启动后会自动停止</code></li></ul></li><li><code>-it centos /bin/bash</code>: 进入容器 交互运行,里面是单独的 centos 系统<ul><li><code>exit</code>：停止并推出</li><li><code>Ctrl + p + q</code>:不停止推出</li><li><code>docker exec -it &lt;id|name&gt; /bin/bash</code> 进入当前正在运行的容器,并开启新终端，可以操作</li><li><code>docker attach &lt;id|name&gt;</code> 进入当前正在运行的容器，正则运行的终端</li><li>&#96;&#96;:重新进入停止的容器</li></ul></li><li><code>--rm</code>:用完就删除</li><li><code>-小p IP:8080:8080</code>:指定容器端口，可以多个<ul><li>IP:主机端口:容器端口</li></ul></li><li><code>-大P</code>:随机容器端口<!-- -   `docker update --restart=always <容器 id>` :更新参数 --></li></ul></li><li><p><code>docker ps</code>:查看运行中的容器</p><ul><li><code>-a</code>:历史运行的容器</li><li><code>-n=1</code>:只看一个</li><li><code>-q</code>:只显示编号</li></ul></li><li><p><code>docker rm &lt;容器 id&gt;</code>:删除容器</p><ul><li><code>docker rm $(docker ps -aq)</code>:删除所有</li><li><code>docker rm -a -q|xargs docker rm</code>:通过 Linux 的 xargs 批量删除</li><li><code>-f</code>：强制删除运行的容器</li></ul></li><li><p><code>docker start|stop|restart|kill &lt;容器 id&gt;</code>:启动停止容器</p></li><li><p><code>docker pause|unpause &lt;容器id&gt;</code>:暂停容器</p></li><li><p><code>docker logs &lt;容器 id&gt;</code>:查看日志</p><ul><li><code>-f -t --tail number</code></li></ul></li><li><p><code>docker inspect &lt;容器 id&gt;</code>:查看容器信息 重要</p></li><li><p><code>docker top &lt;容器 id&gt;</code>:查看进程信息</p></li><li><p><code>docker stats</code>:查看资源占用</p></li><li><p><code>docker cp &lt;容器 id&gt;:/容器内路径 外部路径</code>:docker 文件拷贝</p></li><li><p><code>docker history &lt;容器 id&gt;</code>：查看容器的构建过程</p></li><li><p>docker save&#x2F;load&#x2F;import 保存镜像压缩包,加载镜像压缩包</p></li></ul></li><li><p>docker run 做了什么</p><ul><li>在本机寻找镜像，如果有运行镜像</li><li>否则去远程仓库找，如果找到下载镜像到本地，在运行</li><li>否则返回找不到</li></ul></li></ul><h3 id="基本案例"><a href="#基本案例" class="headerlink" title="基本案例"></a>基本案例</h3><ul><li>安装 nginx</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker pull nginx // 下载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker run -d --name=nginx1 -p 3344:80 nginx // 开启  容器内nginx启动80端口，暴露出来映射到外部主机的3344</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl localhost:3344  // 测试</span></span><br></pre></td></tr></table></figure><ul><li>安装 mysql</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">共享配置文件 数据文件 配置账号密码</span></span><br><span class="line">docker run -d -p 3306:3306 -v /tmp/mysql/conf:/etc/mysql/conf.d -v /tmp/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql --name some-mysql mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> --</span></span><br><span class="line">直接关闭问题</span><br><span class="line">http://t.zoukankan.com/whereGo-p-12599723.html</span><br><span class="line"></span><br><span class="line">docker run -it -m 300M --memory-reservation 200M -p 3310:3306 -v /tmp/mysql/conf:/etc/mysql/conf.d -v /tmp/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql --name some-mysql mysql /bin/bash</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>安装 tomcat(默认暴露端口 8080)</li><li>es+kibana</li></ul><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><blockquote><p>镜像是一种轻量可执行的独立软件包，用来打包软件运行环境，和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括<code>代码</code>、<code>库</code>、<code>运行时</code>、<code>环境变量</code>，<code>配置文件</code>等</p></blockquote><h4 id="镜像加载原理"><a href="#镜像加载原理" class="headerlink" title="镜像加载原理"></a>镜像加载原理</h4><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p>系统主要包含 bootfs(公用，不包含镜像中)、rootfs（Linux 的&#x2F;dev,&#x2F;proc 等文件目录）和独立的应用配置</p><p>是一种分层，轻量级高性能的文件系统(系统存在某个镜像，当拉去的二个镜像时，第一层如果与已有镜像相同，就不需要下载，直接拉取第二层);<br>下载过的不会再下载，拉取时版本号后面提示<code>Already exists</code></p><p>Docker 镜像都是只读的（镜像层），容器启动时，一个新的写入(用户操作 如:run)会被加载到镜像的顶部(自己的一层容器层)</p><blockquote><p>commit 镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker commit 提交容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker commit -m=<span class="string">&quot;描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器<span class="built_in">id</span> 目标镜像名:[TAG]</span></span><br><span class="line"></span><br><span class="line">下载官方tomcat</span><br><span class="line">run -it 进入容器修改内容</span><br><span class="line">正在运行的容器层有一个新的ID、</span><br><span class="line">通过这个id commit 做成镜像`存在本地`，(保存容器状态,相当于虚拟机快照)</span><br><span class="line">发布</span><br><span class="line"></span><br><span class="line">提交的时候上层的id都有存在信息中,pull的时候会先下载</span><br></pre></td></tr></table></figure><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote><p>每次修改容器内配置需要进入很麻烦，我们可以在容器外不提供一个映射路径，达到容器外修改配置文件，容器内自动修改的技术<br>数据不能存在容器里面，<code>容器数据卷</code>可以 类似将容器内的目录挂在到主机上(但是它时同步过来的) 做到容器内外数据共享，容器间也可以</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>方式一: 通过命令挂载 -v （volume）</p></blockquote><p>安全模块 selinux 把权限禁掉了，无法使用-v 命令进行挂载<br>有时-v 容器无法启动 <code>chcon -Rt svirt_sandbox_file_t /dir/x/x</code> 开放权限 重新 run<br>-R 递归处理所有的文件及子目录<br>-t 设置指定类型的目标安全环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line">docker inspect &lt;容器 id&gt;  =&gt; Mounts 查看是否挂载成功</span><br></pre></td></tr></table></figure><h4 id="具名挂载与匿名挂载"><a href="#具名挂载与匿名挂载" class="headerlink" title="具名挂载与匿名挂载"></a>具名挂载与匿名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-v juname:/inner/dir  具名挂载</span><br><span class="line">-v /inner/der:rw    匿名挂载  rw可读可写</span><br><span class="line">-v /out/dir:/inner/dir:ro  指定路径挂载，到指定路径 ro只读</span><br></pre></td></tr></table></figure><p><code>docker volume ls</code>:查看卷名,匿名的就是自动生成的数据<br><code>docker volume inspect juname</code>：查看详细位置，相关信息等</p><p>多个 mysql 或多个容器间数据共享</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里使用到了下面的 dockerfile的挂载 直接 -v也一样</span></span><br><span class="line">dockre run -it --name parent lzoxun/镜像名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dockre run -it --name child1 --volumes-from parent</span></span><br><span class="line">dockre run -it --name child3 --volumes-from parent 镜像2 /bin/bash  #child3 通过是镜像2的容器，并继承镜像1的卷</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">父子容器挂载目录下的文件相互共享，parent就是数据卷容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有用到的容器都停止，数据才会没？？？？？</span></span><br></pre></td></tr></table></figure><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>DockerFile 是用构建 docker 镜像的文件，是一个命令脚本，通过这个脚本生成镜像,<br>步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建dockerfile文件，文件名自定义</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件中的内容 格式: 大写指令 参数</span></span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;,&quot;/xx/xx/volume03&quot;]  #不用-v, volume01这连个是镜像内的目录，在生成镜像时直接挂载的数据卷目录</span><br><span class="line"></span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volume01 数据卷目录外部一定有一个同步的目录</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一步一步构建镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行</span></span><br><span class="line">docker build -f /xx/xxx/dockerfile-name -t lzoxun/镜像名称:[tag?] .</span><br><span class="line">dockre run -it lzoxun/镜像名称 /bin/bash</span><br><span class="line">docker push # 发布镜像 dockerhub 阿里云等</span><br></pre></td></tr></table></figure><h4 id="DockerFIle-构建流程"><a href="#DockerFIle-构建流程" class="headerlink" title="DockerFIle 构建流程"></a>DockerFIle 构建流程</h4><p>基础：</p><ul><li>每个关键字(指令)都必须时大写字母</li><li>执行从上到下顺序执行</li><li># 表示注释</li><li>每一个指令都会创建一个镜像层提交</li></ul><blockquote><p>dockerfile 是面向开发的，后期发布项目做镜像都要编写 dockerfile 文件。</p></blockquote><p>步骤<br>DockerFile：构建文件，定义了一切步骤<br>DockerImages：镜像时通过 DockerFile 生成的，最终发布和运行的产品(正常使用冲这里开始 pull)<br>Docker 容器：镜像运行起来提供服务</p><blockquote><p>DockerFile 指令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM        # 基础镜像，从这里开始构建</span><br><span class="line">MAINTAINER  # 指定维护者信息 姓名+邮箱</span><br><span class="line">RUN         # 构建镜像时需要运行的命令</span><br><span class="line">ADD # 添加镜像</span><br><span class="line">WORKDIR# 镜像工作目录，进入生成的容器时默认所在目录</span><br><span class="line">VOLUME# 挂载目录</span><br><span class="line">EXPOSE# 暴露端口配置 外面的-p</span><br><span class="line">CMD# 指定容器启动的时候运行的命令，只有追后也给生效</span><br><span class="line">ENTRYPOINT# 指定容器启动的时候运行的命令，可以追加命令</span><br><span class="line">ONBUILD# 但构建一个被基础的 DockerFile 就会运行 onbuild 的指令</span><br><span class="line">COPY# 类似 ADD 将文件拷贝到镜像中</span><br><span class="line">ENV # 构建的时候设置环境变量</span><br></pre></td></tr></table></figure><blockquote><p>实战测试</p></blockquote><p><img src="/../../static/img/dockerfileflow.png" alt="基本流程"></p><blockquote><p>tomcat 镜像案例</p></blockquote><p>1.Dockerfile</p><p><img src="/../..%5Cstatic%5Cimg%5Cdockerfile-tomcat.png"></p><p>2.构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t imagesname . # 使用官方的Dockerfile标准文件名不需要 -f</span><br></pre></td></tr></table></figure><p>3.启动(run)</p><p>4.发布</p><blockquote><p>发布到 dockerhub</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker login -u lzoxun -p xxxxxx</span><br><span class="line">docker login -u lzoxun # 控制台输入密码</span><br><span class="line">docker tag 镜像 镜像:1.0 # 加tag</span><br><span class="line">docker push 镜像名:[tag] # 构造镜像的dockerfile的用户名需要与 dockerhub的用户相同</span><br></pre></td></tr></table></figure><blockquote><p>发布到阿里云</p></blockquote><p>1.登录阿里云,找到镜像服务</p><p>2.创建命名空间</p><p>3.创建仓库,进入有推送步骤</p><h3 id="Docker-网络原理"><a href="#Docker-网络原理" class="headerlink" title="Docker 网络原理"></a>Docker 网络原理</h3><h3 id="IDEA-真和-Docker"><a href="#IDEA-真和-Docker" class="headerlink" title="IDEA 真和 Docker"></a>IDEA 真和 Docker</h3><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><h3 id="docker-Swarm"><a href="#docker-Swarm" class="headerlink" title="docker Swarm"></a>docker Swarm</h3><h3 id="CI-CD-jenkins"><a href="#CI-CD-jenkins" class="headerlink" title="CI\CD jenkins"></a>CI\CD jenkins</h3><h3 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h3><p>portainer</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动成功后 ip:8088 浏览器打开界面</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择本地直接连接</span></span><br></pre></td></tr></table></figure><blockquote><p>lazydocker</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾屋大屏项目</title>
      <link href="/2020/01/01/project/xuepindata-v/"/>
      <url>/2020/01/01/project/xuepindata-v/</url>
      
        <content type="html"><![CDATA[<h3 id="项目背景-S"><a href="#项目背景-S" class="headerlink" title="项目背景(S)"></a>项目背景(S)</h3><ul><li>公司关系帮忙获取的大屏项目</li></ul><h3 id="任务目标-T"><a href="#任务目标-T" class="headerlink" title="任务目标(T)"></a>任务目标(T)</h3><ul><li>rem 适配项目页面</li><li>完成 UI 提供 PSD 页面布局，已经通过代理调用接口获取动态数据</li></ul><h3 id="采取的行动-A"><a href="#采取的行动-A" class="headerlink" title="采取的行动(A)"></a>采取的行动(A)</h3><ul><li>通过 vue-cli3 创建 vue2 项目</li><li>通过 <code>postcss-px2rem px2rem-loader</code> 是 echarts 与 elementUi 等第三方插件适配 rem</li></ul><h3 id="产生的结果-R"><a href="#产生的结果-R" class="headerlink" title="产生的结果(R)"></a>产生的结果(R)</h3><ul><li>顺利完成任务，正常交接</li></ul><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ul><li><p>第三方插件在 rem 环境的适配方案</p></li><li><p>elementUi 皮肤修改</p><ul><li><code>npm i element-theme -g</code></li><li><code>npm i element-theme-chalk -D</code></li><li><code>et -i</code>:生成 element-variables.scss 文件，修改配色</li><li><code>et</code>重新编译,生成 theme 文件夹，醒目引入 theme&#x2F;index.css</li></ul></li><li><p><a href="https://gitee.com/lzo-gitee/xuepindata-v">项目地址</a></p></li><li><p><a href="http://rs_screen.snowpa.cn/">部署地址</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典</title>
      <link href="/2020/01/01/tmp/Untitled/"/>
      <url>/2020/01/01/tmp/Untitled/</url>
      
        <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_CIVIL_AFFAIRS_BUY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;民政购买服务对象&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_FILED_NON_SERVICE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;已建档非服务对象&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_ELDERLY_CADRES_BUY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;老干局购买服务对象&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_PLATFORM_MEMBERS&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;平台会员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_INTENDED_MEMBERS&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;意向会员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_ELDERLY_FAMILY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;适老化家庭&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_DISABLED_PERSONS_BUY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;残联购买服务对象&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_SOCIAL_WORKER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;社工服务对象&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_VISIT_CARE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;探访关爱对象&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ARCHIVES_OTHER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;其他&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;callStatus&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CALL_NO_ANSWER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;未接通&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;通话状态&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;callStatus&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CALL_CONNECTED&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;已接通&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;通话状态&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;callToType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CALL_TO_SELF&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;本人&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;被拨打对象类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;callToType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CALL_TO_SPOUSE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配偶&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;被拨打对象类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;callToType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CALL_TO_CHILDREN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子女&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;被拨打对象类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;careType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CARE_COMPLETE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;完全自理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;自理能力&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;careType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CARE_SEMI&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;半自理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;自理能力&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;careType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CARE_UNABLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不能自理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;自理能力&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diseaseType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DISEASE_HYPERTENSION&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;高血压&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;疾病情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diseaseType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DISEASE_HYPERLIPIDEMIA&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;高血脂&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;疾病情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diseaseType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DISEASE_CORONARY_HEART&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;冠心病&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;疾病情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diseaseType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DISEASE_DIABETES&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;糖尿病&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;疾病情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diseaseType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DISEASE_MENTAL_ILLNESS&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;精神疾病&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;疾病情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diseaseType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DISEASE_SEVERE_POSTOPERATIVE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;重症术后&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;疾病情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diseaseType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DISEASE_OTHER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;其他&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;疾病情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;educationType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EDUCATION_PRIMARY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小学&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文化程度&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;educationType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EDUCATION_MIDDLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;初中&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文化程度&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;educationType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EDUCATION_HIGH&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;高中/技校/中专&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文化程度&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;educationType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EDUCATION_UNDERGRADUATE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;本科及以上&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文化程度&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;educationType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EDUCATION_ILLITERACY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文盲&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文化程度&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;educationType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EDUCATION_UNKNOW&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不详&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文化程度&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;educationType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EDUCATION_OTHER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;其他&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文化程度&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;educationType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EDUCATION_COLLEGE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;专科&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文化程度&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;facilityType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NURSING_CENTER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;区域性养老中心&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务设施类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;facilityType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NURSING_FACILITY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;养老机构&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务设施类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;facilityType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GERACOMIUM&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;敬老院&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务设施类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;facilityType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HAPPINESS_HOME&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;农村幸福院&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务设施类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;facilityType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SERVICE_CENTER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;养老服务站&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务设施类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;genderType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GENDER_FEMALE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;性别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;genderType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GENDER_MALE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;性别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;incomeType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INCOME_PENSION&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;退休金/养老金&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;经济来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;incomeType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INCOME_CHILD_ALLOWANCE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子女补贴&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;经济来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;incomeType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INCOME_FRIEND_SUPPORT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;亲友资助&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;经济来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;incomeType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INCOME_SUBSISTENCE_ALLOWANCE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;政府低保&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;经济来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;incomeType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INCOME_PLANNING_SUBSIDIES&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计生补贴&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;经济来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;incomeType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INCOME_OTHER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;其他&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;经济来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;levelType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LEVEL_ONE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一级类别&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;类别等级&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;levelType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LEVEL_TWO&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二级类别&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;类别等级&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;liveType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LIVE_WITH_CHILDREN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;与子女生活&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;居住情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;liveType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LIVE_ALONE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;独自生活&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;居住情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;liveType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LIVE_WITH_SPOUSE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;与配偶生活&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;居住情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;liveType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LIVE_WITH_OTHER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;与他人生活&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;居住情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;operateStatus&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OPERATE_ING&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;运营中&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;运营状态&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;operateStatus&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OPERATE_STOP&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;停止运营&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;运营状态&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;orderType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ORDER_SERVICE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;实体服务&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工单类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;orderType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ORDER_VISIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;探访关爱&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工单类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;revisitStatus&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RESULT_UNFINISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;未完成&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;回访结果&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;revisitStatus&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RESULT_FINISHED&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;已完成&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;回访结果&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;satisfactionType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SATISFACTION_VERY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;非常满意&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;满意度类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;satisfactionType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SATISFACTION_SATISFIED&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;满意&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;满意度类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;satisfactionType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SATISFACTION_GENERAL&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一般&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;满意度类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;satisfactionType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SATISFACTION_DISSATISFIED&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不满意&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;满意度类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceItemType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HELP_URGENT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;助急&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务项目类别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceItemType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HELP_WALKER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;助行&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务项目类别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceItemType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HELP_MEAL&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;助餐&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务项目类别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceItemType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HELP_CLEAN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;助洁&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务项目类别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceItemType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HELP_MEDICAL&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;助医&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务项目类别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceItemType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HELP_VISITS&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;巡访关爱&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务项目类别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceItemType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HELP_HEALTH&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;健康辅助&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务项目类别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceItemType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HELP_SICKBED&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;家床服务&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务项目类别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceItemType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HELP_OTHER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;其他&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务项目类别&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sourceType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SOURCE_CIVIL_AFFAIRS&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;民政&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sourceType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SOURCE_DISABLED_PERSONS&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;残联&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sourceType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SOURCE_COLLECTION&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上门采集&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sourceType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SOURCE_ELDERLY_CADRES&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;老干局&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sourceType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SOURCE_FAMILY_LANNING&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计生协会&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案来源&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;statusType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;STATUS_DEATH&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;已故&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人员状态&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;statusType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;STATUS_NORMAL&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;正常&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人员状态&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;statusType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;STATUS_OUT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;迁出&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人员状态&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;trafficType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TYPES_REGULAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;定期关怀&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;话务类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;trafficType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TYPES_BIRTHDAY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生日关怀&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;话务类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;trafficType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TYPES_SERVICE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务回访&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;话务类型&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;verifyType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VERIFY_YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;已核实&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;核实情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;verifyType&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VERIFY_NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;未核实&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;核实情况&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workStatus&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WORK_ING&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;在职&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;在职状态&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workStatus&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WORK_DEPART&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;离职&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;在职状态&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SUCCESS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 垃圾桶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>菜单</title>
      <link href="/2020/01/01/tmp/%E8%8F%9C%E5%8D%95/"/>
      <url>/2020/01/01/tmp/%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;运营管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;运营管理目录&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务平台管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/platformManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;platformManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;platformManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务平台管理菜单&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务商管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/providerManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;providerManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;providerManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务商管理菜单&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务人员管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/waiterManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;waiterManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;waiterManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务人员管理菜单&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;监管部门管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/regulatorManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;regulatorManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;regulatorManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;监管部门管理菜单&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;23&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/accountManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/accountManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/accountManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号管理&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/archivesManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案管理&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大屏管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bigscreenManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bigscreenManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bigscreenManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大屏管理&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/projectManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projectManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projectManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目管理&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目添加&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/platformFrom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/views/projectManage/projectAdd.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projectManage/add&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目添加&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;13&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目修改&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/projectEdit&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/views/projectManage/projectEdit.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projectManage/update&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目修改&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;14&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目配置&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/serverSetFrom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/projectManage/serverSetFrom.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projectManage/set&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目配置&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务数据目录&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电话关怀&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/serviceCare&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceManage/care/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceManage/care/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;21&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;实体服务&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/serviceServ&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceManage/services/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceManage/services/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;探访关爱&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/serviceVisits&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceManage/visits/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceManage/visits/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;23&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统管理目录&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;角色管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;23&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/roleManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/roleManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/roleManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;25&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;23&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/menuManage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/menuManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/menuManage/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;26&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案管理添加&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesManage/add&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;27&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案管理导入&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesManage/import&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;28&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案管理编辑&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesManage/update&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;29&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案管理导出&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archivesManage/export&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;30&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务平台新增(录入)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;platformManage/add&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务平台编辑&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;platformManage/update&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;32&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务平台删除&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;platformManage/delete&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;33&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务平台密钥&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;platformManage/key&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;34&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务商管理导出&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;providerManage/export&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;35&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务商管理导入&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;providerManage/export&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务人员管理导入&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;waiterManage/import&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;37&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务人员管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;waiterManage/export&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;38&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大屏管理新增&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bigscreenManage/add&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;39&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大屏管理编辑&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bigscreenManage/update&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;40&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电话关怀导出&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceManage/care/export&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;41&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;实体服务导出&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;21&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceManage/services/export&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;42&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;探访关爱导出&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceManage/visits/export&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;43&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号管理新增&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/accountManage/add&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;44&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号管理编辑&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/accountManage/update&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;45&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号管理删除&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/accountManage/delete&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;46&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号管理密码重置&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/accountManage/repwd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;47&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;角色管理新增&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/roleManage/add&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;48&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;角色管理编辑&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/roleManage/update&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;49&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;角色管理删除&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/roleManage/delete&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;50&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;角色管理权限设置&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/roleManage/setperms&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单管理新增&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;25&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/menuManage/add&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;52&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单管理编辑&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;25&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/menuManage/update&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;53&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单管理删除&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;25&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/menuManage/delete&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SUCCESS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 垃圾桶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sass</title>
      <link href="/2020/01/01/server/Ruby/ruby-sass/"/>
      <url>/2020/01/01/server/Ruby/ruby-sass/</url>
      
        <content type="html"><![CDATA[<h3 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装sass</span></span><br><span class="line">gem install sass</span><br><span class="line">gem install compass</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">sass -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新sass</span></span><br><span class="line">gem update sass</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看sass帮助</span></span><br><span class="line">sass -h</span><br></pre></td></tr></table></figure><ul><li>命令行编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单文件转换命令</span></span><br><span class="line">sass input.scss output.css</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单文件监听命令</span></span><br><span class="line">sass --watch input.scss:output.css</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：</span></span><br><span class="line">sass --watch app/sass:public/stylesheets</span><br></pre></td></tr></table></figure><ul><li>指定编译格式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译格式</span></span><br><span class="line">sass --watch input.scss:output.css --style compact</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译添加调试map</span></span><br><span class="line">sass --watch input.scss:output.css --sourcemap</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择编译格式并添加调试map</span></span><br><span class="line">sass --watch input.scss:output.css --style expanded --sourcemap</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启debug信息</span></span><br><span class="line">sass --watch input.scss:output.css --debug-info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Style </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window</title>
      <link href="/2020/01/01/window/win-main/"/>
      <url>/2020/01/01/window/win-main/</url>
      
        <content type="html"><![CDATA[<h2 id="快捷功能"><a href="#快捷功能" class="headerlink" title="快捷功能"></a>快捷功能</h2><ul><li>截图 ：<code>win + shift + s</code> 或 PrtSc</li><li>查看电脑配置 ：运行 <code>dxdiag</code></li></ul><h3 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h3><ul><li>查找谁占用了文件<ul><li>资源监视器 -&gt; 打开关联的句柄(下拉按钮) -&gt; 输入框中输入文件名回车 -&gt; 查到的记录右键结束</li></ul></li><li><h2 id="设置开机自启-SVN（需要在有管理员权限的命令行执行）-sc-create-SVNServer-binPath-D-xxxx-svnserve-exe-service-r-D-xxx-顶层仓库-start-auto-depend-Tcpip-SVNServer：服务名称-–service-：window-模式-start：auto-自动-net-start-SVNServer-手动启动-net-stop-SVNServer-手动停止-sc-delete-SVNServer-停止后删除服务-成功案例：sc-create-MySVNServer2-binpath-C-Program-Files-TortoiseSVN-bin-svnserve-exe-service-r-E-lzo-project-svn-root-depend-Tcpip-start-auto"><a href="#设置开机自启-SVN（需要在有管理员权限的命令行执行）-sc-create-SVNServer-binPath-D-xxxx-svnserve-exe-service-r-D-xxx-顶层仓库-start-auto-depend-Tcpip-SVNServer：服务名称-–service-：window-模式-start：auto-自动-net-start-SVNServer-手动启动-net-stop-SVNServer-手动停止-sc-delete-SVNServer-停止后删除服务-成功案例：sc-create-MySVNServer2-binpath-C-Program-Files-TortoiseSVN-bin-svnserve-exe-service-r-E-lzo-project-svn-root-depend-Tcpip-start-auto" class="headerlink" title="设置开机自启 SVN（需要在有管理员权限的命令行执行）- sc create SVNServer binPath= &quot;D:/xxxx/svnserve.exe --service -r D:/xxx/顶层仓库&quot; start= auto depend= Tcpip  - SVNServer：服务名称  - –service ：window 模式  - start：auto 自动- net start SVNServer:手动启动- net stop SVNServer:手动停止- sc delete SVNServer:停止后删除服务- 成功案例：sc create MySVNServer2 binpath= &quot;\&quot;C:\Program Files\TortoiseSVN\bin\svnserve.exe\&quot; --service -r E:/lzo-project/svn-root&quot; depend= Tcpip start= auto"></a>设置开机自启 SVN（需要在有管理员权限的命令行执行）<br>- <code>sc create SVNServer binPath= &quot;D:/xxxx/svnserve.exe --service -r D:/xxx/顶层仓库&quot; start= auto depend= Tcpip</code><br>  - SVNServer：服务名称<br>  - –service ：window 模式<br>  - start：auto 自动<br>- <code>net start SVNServer</code>:手动启动<br>- <code>net stop SVNServer</code>:手动停止<br>- <code>sc delete SVNServer</code>:停止后删除服务<br>- 成功案例：<code>sc create MySVNServer2 binpath= &quot;\&quot;C:\Program Files\TortoiseSVN\bin\svnserve.exe\&quot; --service -r E:/lzo-project/svn-root&quot; depend= Tcpip start= auto</code></h2></li></ul><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><h3 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h3><ul><li><p>win10 微软的终端包管理工具</p><ul><li>Winget 目前使用 Manifest 来管理和安装软件（可以理解为：软件源），通过读取对应的 Manifest 清单来寻找软件</li><li><a href="https://github.com/microsoft/winget-cli/releases">winget</a>:直接双击安装(Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle)</li><li>微软商店:搜索<code>应用安装程序</code><ul><li><code>winget</code>:查看帮助<ul><li>search 查找并显示程序包的基本信息<ul><li><code>模糊查找</code>出需要安装的<code>包名</code></li><li><code>winget search</code>:查看所有可安装的包</li></ul></li><li>install 安装给定的程序包</li><li>show 显示包的相关信息</li><li>source 管理程序包的来源</li><li>list 显示已安装的程序包</li><li>upgrade 升级给定的程序包<ul><li><code>winget upgrade --all</code>:升级所有软件包</li></ul></li><li>uninstall 卸载给定的程序包</li><li>hash 哈希安装程序的帮助程序</li><li>validate 验证清单文件</li><li>settings 打开设置</li><li>features 显示实验性功能的状态</li><li>export 导出已安装程序包的列表</li><li>import 安装文件中的所有程序包</li></ul></li><li><code>wingetcreate</code>:将软件包提交到社区仓库，可以同感 winget 安装</li></ul></li><li><code>scoop</code> 或者 <code>chocolately</code>:不是官方出的但是更加成熟<!-- -   PowerShell 使用 scoop-   `199.232.4.133 raw.githubusercontent.com`:配置 hosts-   `iex (new-object net.webclient).downloadstring('https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1')`:官网安装-   `scoop uninstall scoop`:卸载 scoop 以及安装的所有软件 --></li></ul></li><li><p>Scoop <a href="https://scoop.sh/">官网</a> <a href="https://typoraio.cn/#">中文网</a></p></li></ul><p>G - 要求：<code>Win7+ / PowerShell5+</code>,管理员身份运行 PowerShell - $PSVersionTable.PSVersion | git-host - 参数列表</p><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1</span></span><br><span class="line">Set-ExecutionPolicy RemoteSigned -scope CurrentUser</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2 设置默认安装路径</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">env</span>:SCOOP=<span class="string">&#x27;D:\Scoop&#x27;</span></span></span><br><span class="line">[Environment]::SetEnvironmentVariable(&#x27;SCOOP&#x27;, $env:SCOOP, &#x27;User&#x27;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3</span></span><br><span class="line">iwr -useb get.scoop.sh | iex</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">未能创建 SSL/TLS 安全通道解决方案</span></span><br><span class="line">[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接关闭发送错误</span></span><br><span class="line">iex (new-object net.webclient).downloadstring(&quot;https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行scoop 不报错安装完成</span></span><br><span class="line">&quot;</span><br><span class="line">alias    别名管理别名</span><br><span class="line">bucket    仓库管理</span><br><span class="line">cache    缓存显示或清除下载缓存</span><br><span class="line">checkup    检查潜在问题</span><br><span class="line">cleanup    通过删除旧版本清理应用程序</span><br><span class="line">config    配置获取或设置配置值</span><br><span class="line">create    创建自定义应用程序清单</span><br><span class="line">depends    应用程序的依赖项列表</span><br><span class="line">export    导出（可导入）已安装应用程序的列表</span><br><span class="line">help    帮助显示命令的帮助</span><br><span class="line">hold    按住应用程序以禁用更新</span><br><span class="line">home    主页打开应用程序主页</span><br><span class="line">info    信息显示有关应用程序的信息</span><br><span class="line">install    安装应用程序</span><br><span class="line">list    列出已安装的应用程序</span><br><span class="line">prefix    prefix返回指定应用程序的路径</span><br><span class="line">reset    重置应用程序以解决冲突</span><br><span class="line">search    搜索可用的应用程序</span><br><span class="line">status    状态显示状态并检查新的应用程序版本</span><br><span class="line">unhold    取消挂起取消挂起应用程序以启用更新</span><br><span class="line">uninstall    卸载应用程序</span><br><span class="line">update    更新应用程序，或独家报道自己</span><br><span class="line">virustotal    virustotal在virustotal.com上查找应用程序的哈希</span><br><span class="line">which    定位一个填充程序/可执行程序（类似于Linux上的“which”）</span><br><span class="line">&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 aria2 进行多线程下载提高速度</span></span><br><span class="line">scoop install aria2</span><br><span class="line">scoop config aria2-enabled false #关闭</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装一下必要包</span></span><br><span class="line">scoop install 7zip innounp dark</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出软件列表拥有备份与换机</span></span><br><span class="line">scoop export &gt; scoop.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加其他 bucket 软件库 `scoop bucket add [软件源名字] [源地址]`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 bucket 官方提供软件库列表（可添加）</span></span><br><span class="line">scoop bucket known</span><br><span class="line"></span><br><span class="line">extras # 诸多有用的软件都在里面</span><br><span class="line">main # 默认的大仓库</span><br><span class="line">nerd-fonts # 编程字体一览无遗</span><br><span class="line">nonportable # 收录神奇的UWP应用</span><br><span class="line">versions # 收录软件包的历史版本</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加/删除软件库</span></span><br><span class="line">scoop bucket add extras</span><br><span class="line">scoop bucket add java</span><br><span class="line">scoop bucket rm java</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">社区提供</span></span><br><span class="line">scoop bucket add echo https://github.com/echoiron/echo-scoop</span><br><span class="line">scoop bucket add dorado https://github.com/chawyehsu/dorado</span><br><span class="line">scoop bucket add dodorz https://github.com/dodorz/scoop</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">合并仓库</span></span><br><span class="line">https://github.com/kkzzhizhou/scoop-apps</span><br><span class="line">scoop bucket add apps https://gitee.com/kkzzhizhou/scoop-apps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 软件名+Scoop 也许可以找到该软件被什么软件库收录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用软件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  quicklook:选择文件空格快速于然</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  snipaste :截图工具</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  motrix: 类似迅雷的开源轻量下载工具</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更换 Scoop 下载源</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[参考](https://gitee.com/squallliu/scoop<span class="comment">#install-scoop-to-a-custom-directory-by-changing-scoop)</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[参考](https://gitee.com/squallliu/scoop)</span></span><br><span class="line">scoop config SCOOP_REPO https://gitee.com/squallliu/scoop</span><br><span class="line">scoop update</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><ul><li>powerShell 美化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装posh-git和oh-my-posh</span></span><br><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载</span></span><br><span class="line">Uninstall-Module posh-git</span><br><span class="line">Uninstall-Module oh-my-posh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测并初始化 Profile 文件</span></span><br><span class="line">if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开配置文件</span></span><br><span class="line">notepad $PROFILE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置配置信息</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-PoshPrompt Paradox #主 题</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可选主题</span></span><br><span class="line">Paradox、robbyrussell、Agnoster、Avit、Fish、Darkblood、Honukai +、PowerLine、Sorin +、tehrob 等</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">字体无法显示(https://www.nerdfonts.com/font-downloads)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载喜欢的Nerd字体 如：DroidSansMono Nerd Font ，然后右键选择`为所有用户安装`后更改PowerShell窗口的字体即可</span></span><br><span class="line"></span><br><span class="line">linux其他终端 `DroidSansMono Nerd Font Blod`效果步长</span><br><span class="line">···</span><br><span class="line">-   win 命令终端 windows PowerShell</span><br><span class="line">    -   微软商店下载`windows Terminal`</span><br><span class="line">    -   [官方文档](https://github.com/microsoft/terminal)</span><br><span class="line">    -   `$PSVersionTable`:PowerShell 终端下查看版本</span><br><span class="line">    -   windows PowerShell 的配置</span><br><span class="line">        -   `code $Profile`:打开配置文件</span><br><span class="line">    -   `windows Terminal`配置文件</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">&#123;</span><br><span class="line">    &quot;$schema&quot;: &quot;https://aka.ms/terminal-profiles-schema&quot;,</span><br><span class="line">    &quot;actions&quot;:</span><br><span class="line">    [</span><br><span class="line">      xxxx</span><br><span class="line">    ],</span><br><span class="line">    &quot;copyFormatting&quot;: &quot;none&quot;,</span><br><span class="line">    &quot;copyOnSelect&quot;: false,</span><br><span class="line">    &quot;defaultProfile&quot;: &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;, //默认打开的终端，通过guid</span><br><span class="line">    &quot;profiles&quot;:</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;defaults&quot;: &#123;</span><br><span class="line">            &quot;colorScheme&quot;:&quot;Campbell&quot;,//默认配送方案</span><br><span class="line">            &quot;useAcrylic&quot;:true,//材质</span><br><span class="line">            &quot;startingDirectory&quot;: &quot;D:/&quot;,//设置默认打开路径</span><br><span class="line">            &quot;acrylicOpacity&quot;:0.75//透明度</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;list&quot;: //新增tab页面可以选择很多方案Ubuntu、git、cmd等等，也可以配置自己个性化指令记录</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;colorScheme&quot;: &quot;Campbell&quot;,</span><br><span class="line">                &quot;commandline&quot;: &quot;powershell.exe&quot;,</span><br><span class="line">                &quot;guid&quot;: &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;,</span><br><span class="line">                &quot;hidden&quot;: false,</span><br><span class="line">                &quot;name&quot;: &quot;Windows PowerShell&quot;</span><br><span class="line">                //&quot;backgroundImage&quot;:&quot;xxx&quot; //powershell终端的背景图片</span><br><span class="line">                //&quot;backgroundImageOpacity&quot;:0.1 //powershell终端的背景图片透明度</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;commandline&quot;: &quot;D:\\install\\Git\\bin\\bash.exe&quot;, //指令,可以是程序，也能是一些本地可以运行的指令,终端指令必须找到对于的bash程序</span><br><span class="line">                &quot;icon&quot;: &quot;D:\\install\\Git\\mingw64\\share\\git\\git-for-windows.ico&quot;,//图标</span><br><span class="line">                &quot;name&quot;: &quot;Git&quot;, //名称</span><br><span class="line">                &quot;hidden&quot;:false,&quot;是否隐藏&quot;</span><br><span class="line">                &quot;colorScheme&quot;:&quot;xxx&quot;,&quot;设置单独的配色方案优先级高,&quot;</span><br><span class="line">                &quot;guid&quot;:&quot;&#123;cd411374-e41f-49dd-8ace-4f2b42b6cffa&#125;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;commandline&quot;:&quot;D:\\install\\cmder\\vendor\\git-for-windows\\bin\\bash.exe&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;schemes&quot;:</span><br><span class="line">    [</span><br><span class="line">        &#123; //每一个配色方案 外观通过name选择这里的</span><br><span class="line">            &quot;background&quot;: &quot;#2D323B&quot;,</span><br><span class="line">            &quot;black&quot;: &quot;#0C0C0C&quot;,</span><br><span class="line">            &quot;blue&quot;: &quot;#0037DA&quot;,</span><br><span class="line">            &quot;brightBlack&quot;: &quot;#767676&quot;,</span><br><span class="line">            &quot;brightBlue&quot;: &quot;#3B78FF&quot;,</span><br><span class="line">            &quot;brightCyan&quot;: &quot;#61D6D6&quot;,</span><br><span class="line">            &quot;brightGreen&quot;: &quot;#16C60C&quot;,</span><br><span class="line">            &quot;brightPurple&quot;: &quot;#B4009E&quot;,</span><br><span class="line">            &quot;brightRed&quot;: &quot;#E74856&quot;,</span><br><span class="line">            &quot;brightWhite&quot;: &quot;#F2F2F2&quot;,</span><br><span class="line">            &quot;brightYellow&quot;: &quot;#F9F1A5&quot;,</span><br><span class="line">            &quot;cursorColor&quot;: &quot;#FFFFFF&quot;,</span><br><span class="line">            &quot;cyan&quot;: &quot;#3A96DD&quot;,</span><br><span class="line">            &quot;foreground&quot;: &quot;#CCCCCC&quot;,</span><br><span class="line">            &quot;green&quot;: &quot;#13A10E&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;Campbell&quot;,</span><br><span class="line">            &quot;purple&quot;: &quot;#881798&quot;,</span><br><span class="line">            &quot;red&quot;: &quot;#C50F1F&quot;,</span><br><span class="line">            &quot;selectionBackground&quot;: &quot;#616161&quot;,</span><br><span class="line">            &quot;white&quot;: &quot;#CCCCCC&quot;,</span><br><span class="line">            &quot;yellow&quot;: &quot;#C19C00&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    &quot;theme&quot;: &quot;dark&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><ul><li>微软商店 安装 TranslucentTB</li><li>BitDock</li><li>MyDock</li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li><code>Alt + Shift + G</code>:谷歌</li><li><code>Alt + Shift + U</code>:uTools</li><li><code>Alt + Shift + V</code>:虚拟机</li></ul><h2 id="window-cmd"><a href="#window-cmd" class="headerlink" title="window cmd"></a>window cmd</h2><h3 id="win-命令"><a href="#win-命令" class="headerlink" title="win 命令"></a>win 命令</h3><ul><li><p><a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/windows-commands">官网</a></p></li><li><p>内置命令</p><ul><li><p>基本使用</p><ul><li><code>cd</code></li><li><code>D:</code>:进入 D 盘</li><li><code>dir</code>:目录列表<ul><li><code>/a</code>:所有文件</li><li><code>/ad</code>:查看所有文件夹，d 为属性之一</li></ul></li><li><code>mkdir .\a\b\c\d</code></li><li><code>rmdir a</code>:删除目录(rm 同样有效)<ul><li><code>/s</code>:删除非空录入树</li><li><code>/q</code>:不要提示</li></ul></li><li><code>ren oldname newname</code>:重命名(rename 同样有效)</li><li><code>copy fromName toName</code>:复制</li><li><code>move fromName toName</code>:<code>剪切</code>或<code>重命名</code>目录或文件</li><li><code>del path1 path2</code>:删除</li><li><code>attrib</code>:查看文件属性（R(只读)、A(普通文件)、S(系统文件，默认不显示)、H(隐藏文件)、。。。）<ul><li><code>attrib +h +s * /s /d</code>:隐藏当前文件夹下所有文件（命令可以看到）<ul><li>attrib +h +s .&#x2F;video &#x2F;s &#x2F;d</li><li>attrib +h -s .&#x2F;video &#x2F;s &#x2F;d</li></ul></li><li><code>attrib +h * /s /d</code>:相当于系统的隐藏文件，可以同感查看隐藏文件显示出来</li></ul></li><li><code>findstr</code>:类似 grep</li><li><code>echo xxx&gt;filename</code>:创建文件</li></ul></li><li><p><code>cls</code>:清屏，c+l 只是把所以内容滚动到最上面</p></li><li><p><code>mstsc</code>:远程链接</p></li><li><p><code>compmgmt</code>:计算机管理 GUI</p></li><li><p><code>firewall.cpl</code>:打开防火墙</p></li><li><p><code>lusrmgr.msc</code>:打开用户与组</p></li><li><p><code>dcomcnfg|services.msc</code>:系统服务</p></li><li><p><code>devmgmt.msc</code>:设备管理器</p></li><li><p><code>gpedit.msc</code>:本地策略组编辑</p></li><li><p><code>dxdiag</code>:查看系统信息</p></li><li><p><code>diskmgmt.msc</code>:磁盘管理</p></li><li><p><code>taskmgr</code>:任务管理器</p></li><li><p><code>notepad</code>: 打开记事本</p></li><li><p><code>calc</code>:计算器</p></li><li><p><code>winver</code>:win 版本</p></li><li><p><code>systeminfo</code>:查看系统信息</p></li><li><p><code>tasklist</code>:查看正在运行的程序</p></li><li><p><code>driverquery</code>:查看已安装的驱动程序<br><a href="https://www.cnblogs.com/hbbpb/archive/2007/09/06/883876.html">xxx</a></p></li><li><p>常用 cmd 终端指令</p><ul><li><code>指令 /?</code>:查看帮助</li><li><code>指令 /help</code>:查看详细帮助</li><li><code>color /? </code>:列出可以设置的颜色<ul><li><code>color 0a</code>:设置颜色</li></ul></li><li><code>title &#39;xx&#39;</code>:设置标题</li><li><code>date</code>:修改日期<ul><li><code>date /T</code>:查看日期</li></ul></li><li><code>time</code>:修改时间<ul><li><code>time /T</code>:查看时间</li></ul></li><li><code>start</code>:启动一个单独窗口或运行指定程序</li><li><code>tasklist</code>:查看当前计算机或远程正在运行的列表<ul><li>远程 <code>tasklist /S 远程IP /U 用户名 /P 密码</code></li><li><code>/FI &quot;PID EQ 12345&quot;</code>:筛选 PID 为 12345 的进程</li></ul></li><li><code>taskkill</code>:结束进程<ul><li><code>/PID 进程pid</code></li><li><code>/IM 进程名称</code>:<code>/FI</code> 筛选时可以用通配符*<ul><li><code>/T</code>:同时杀死紫荆城</li></ul></li><li><code>/F</code>:强制关闭</li></ul></li><li><code>tree</code>:树形查看文件<ul><li><code>/F</code>:可查看文件</li></ul></li><li><code>shoutdown</code>:关机相关<ul><li><code>/i</code>:图形设置，必须第一个</li><li><code>/s</code>:<code>关闭</code>计算机<ul><li><code>/sg</code>:开机自动登录关闭时的账户</li></ul></li><li><code>/r</code>:<code>重启</code></li><li><code>/h</code>:<code>休眠</code></li><li><code>/t xxx</code>:设置几秒后关闭</li><li><code>/a</code>:<code>终止</code>关闭</li><li><code>/f</code>:<code>强制</code>关闭</li><li><code>/m \\computer</code>:连接远程</li></ul></li><li>计划任务<ul><li><code>at</code>:at 22:00(时间) &#x2F;every:xxx 指令</li><li><code>schtasks</code>:<a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/schtasks-create">待研究</a></li></ul></li><li>环境变量<ul><li><code>set</code>:查看系统的环境变量列表</li><li><code>echo %变量%</code>:查看指定变量</li><li><code>set COUNT=COUNTVALUE</code>:设置环境变量</li><li><code>set COUNT=</code>:删除环境变量</li></ul></li><li>用户与组<code>lusrmgr.msc 打开GUI</code>(终端以管理员身份打开)<ul><li>用户<ul><li><code>net user</code>:查看用户列表</li><li><code>net user lzoxun</code>:查看用户详细信息</li><li><code>net user &lt;user-name&gt; /delete</code>:删除用户</li><li><code>net user &lt;user-name&gt; &lt;user-pwd&gt; /add</code>:添加用户</li><li><code>net user &lt;user-name&gt; /active:no</code>:禁用用户，yes 取消禁用</li></ul></li><li>组<ul><li><code>net localgroup</code>:查看组列表</li><li><code>net localgroup &lt;group-name&gt;</code>:查看组信息以及成员</li><li><code>net localgroup &lt;group-name&gt; &lt;user-name&gt; /add</code>:向组中添加用户</li><li><code>net localgroup &lt;group-name&gt; &lt;user-name&gt; /delete</code>:用户删除这个本地组</li></ul></li><li>其他 net<ul><li><code>net start SVNServer</code>:手动启动</li><li><code>net stop SVNServer</code>:手动停止</li></ul></li></ul></li><li>网络<ul><li><code>ping ip</code>:查看是否连通（win ping 4 次会自动结束）<ul><li><code>ping 127.0.0.1</code>:查看本地网卡是否正常</li></ul></li><li><code>telnet</code>: 需要开启</li><li><code>ipconfig</code>:ip<ul><li><code>ipconfig /release</code>:释放 IP</li><li><code>ipconfig /renew</code>:重新获取 IP</li><li><code>ipconfig /flushdns</code>:刷新 DNS(也许可以解决一些网络故障)</li></ul></li><li><code>tracert ip或域名</code>:路由检测，探测本地主机与远程 ip 设备到底经过多少网络设备（IP 地址）才能进行正常的连接<ul><li>测试局域网内基本一跳,百度十几跳</li></ul></li><li><code>arp</code>:显示与修改 IP 到物理地址转换表</li><li><code>netstat</code><ul><li><code>-a</code>:显示所有链接以及监听端口</li><li><code>-n</code>:数字 IP 形式人性化显示</li><li><code>-o</code>:显示进程 ID</li><li>属性<ul><li>状态<ul><li>LISTENING:处于监听状态(等待连接)</li><li>ESTABLISHED:建立连接成功</li><li>TIME_WAIT：超时没有连接成功</li></ul></li></ul></li><li>运用<ul><li>已知端口被占用，<code>netstat</code>通过端口找到对于<code>PID</code></li><li>通过<code>tasklist |findstr PID</code>:找到进程名</li><li><code>taskkill</code> 通过名称杀死进程，单个进程的话跳过上一部直接通过 PID 杀死进程</li></ul></li></ul></li><li><code>netsh</code>:网络配置<ul><li><code>netsh dump &gt; d:/共享文件/lenovo-netshbak.txt</code>:备份网络配置</li><li><code>netsh</code>:进入交互环境<ul><li><code>int ip</code>:进入 ipv4</li><li><code>dump</code>:查看 ipv4 所有信息</li><li><code>set address name=&quot;WIFI&quot; source=static addr=192.168.xxx.xxx mask=255,255,255,0</code><ul><li>图形界面网络适配器 WIFI 的的 IP 地址和子网掩码就不是自动获得的了,而是上面变成设置了的</li></ul></li><li><code>set address name=&quot;WIFI&quot; source=dscp</code><ul><li>自动获取 IP 正常</li></ul></li></ul></li><li>处理网络故障方案<br><code>netsh winsock reset</code>:winsock 协议配置有问题会导致网络故障，通过充值该目录来恢复网络<br><code>netsh int ip reset c:\resetlog.txt</code>:重置 TCP&#x2F;IP，恢复到安装系统是的状态</li><li>netsh 设置防火墙入站规则(<code>firewall.cpl 打开GUI</code>)<ul><li><code>netsh firewall</code>:简单模式设置（已弃用）<ul><li><code>netsh firewall set portopening TCP 33333 ENABLE</code></li><li><code>netsh firewall delete portopening TCP 33333</code></li></ul></li><li><code>netsh advfirewall</code>:高级模式设置<ul><li><code>netsh advfirewall firewall add rule name=wallname dir=in action=allow protocol=TCP localport=33333</code>:防火墙添加入站规则（dir&#x3D;out 出站）</li><li><code>netsh advfirewall firewall delete rule name=wallname protocol=TCP localport=33333</code>:防火墙删除入站规则</li></ul></li></ul></li><li>操作防火墙<ul><li><code>netsh advfirewall show allprofile state</code>:查看防火墙状态</li><li><code>netsh advfirewall set allprofiles state off</code>:关闭所有防火墙</li><li><code>netsh advfirewall set allprofiles state on</code>:启用所有防火墙</li></ul></li><li><code>netsh wlan</code>获取已连接过的 WiFi 密码<ul><li><code>netsh wlan show profiles</code>:获取链接过的 WiFi</li><li><code>netsh wlan show profile name=&quot;manja&quot; key=clear&quot;</code>:获取链接过的 WiFi</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>外部扩展命令</p><ul><li>自己安装程序配置 node、npm</li></ul></li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>命令行共享<ul><li><code>net share</code>:查看本地共享的文件夹(与计算机管理-共享下的列表一样)</li><li><code>net share 共享名 /delete</code>:删除共享</li><li><code>net share myshare=d:\testdir</code>:创建共享</li><li><code>&gt;net view \\192.168.192.1</code>:查看创建的共享</li></ul></li><li><h2 id="无法找搜索到别人共享的处理方法-1、双方控制面板-网络和-Internet-网络和共享中心-高级共享设置-打开公共文件共享-2、关闭对方防火墙-或将对方防火墙网路发现的公用私用打钩允许-3、关闭对方控制面板-程序-程序和功能-启用关闭-widows-功能-勾掉-SMB-1-0-CFLS-文件共享支持"><a href="#无法找搜索到别人共享的处理方法-1、双方控制面板-网络和-Internet-网络和共享中心-高级共享设置-打开公共文件共享-2、关闭对方防火墙-或将对方防火墙网路发现的公用私用打钩允许-3、关闭对方控制面板-程序-程序和功能-启用关闭-widows-功能-勾掉-SMB-1-0-CFLS-文件共享支持" class="headerlink" title="无法找搜索到别人共享的处理方法- 1、双方控制面板\网络和 Internet\网络和共享中心\高级共享设置 打开公共文件共享- 2、关闭对方防火墙(或将对方防火墙网路发现的公用私用打钩允许)- 3、关闭对方控制面板\程序\程序和功能-&gt;启用关闭 widows 功能 勾掉 SMB 1.0/CFLS 文件共享支持"></a>无法找搜索到别人共享的处理方法<br>- 1、双方控制面板\网络和 Internet\网络和共享中心\高级共享设置 打开公共文件共享<br>- 2、关闭对方防火墙(或将对方防火墙网路发现的公用私用打钩允许)<br>- 3、关闭对方控制面板\程序\程序和功能-&gt;启用关闭 widows 功能 勾掉 <code>SMB 1.0/CFLS 文件共享支持</code></h2></li></ul><h3 id="回收站"><a href="#回收站" class="headerlink" title="回收站"></a>回收站</h3><p>终端打开：explorer.exe ::{645FF040-5081-101B-9F08-00AA002F954E}<br>位置:&#x2F;mnt&#x2F;c&#x2F;$Recycle.Bin</p><h3 id="bat-批处理"><a href="#bat-批处理" class="headerlink" title="bat 批处理"></a>bat 批处理</h3><ul><li><p>格式: <code>@echo off</code>开头 xxx 代码 <code>pause</code>结束的 <code>bat</code>程序</p></li><li><p>算术运算符</p><ul><li><code>set /a num = 3-1</code>:set 指令 &#x2F;a 代表进行算数运算<ul><li><code>echo %num%</code>:输出变量，变量需要百分号分格</li></ul></li></ul></li><li><p>语句</p><ul><li><code>echo</code> :输出</li></ul></li><li><p>bat</p></li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;<span class="number">1</span>.bat</span><br><span class="line"><span class="keyword">call</span> <span class="number">2</span>.bat &quot;调用其他文件</span><br></pre></td></tr></table></figure><h2 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h2><ul><li><code>powercfg -h off</code>:管理员关闭休眠文件(自动删除 C 盘下的很大 hiberfil.sys )</li><li><code>http://veger.ys168.com/ 下载 SpaceSniffer汉化版.zip</code>:查看资源占用大小，或从系统-储存里面查看</li><li><code>%Temp%</code>:删除里面的文件</li><li><code>C:盘 右键清理磁盘</code>:选择要删除的</li></ul><h3 id="PowerShell-常用命令"><a href="#PowerShell-常用命令" class="headerlink" title="PowerShell 常用命令"></a>PowerShell 常用命令</h3><ul><li><code>Get-Command -Name vim</code>:查看程序所在路径<br>&#x2F;&#x2F;192.168.3.24&#x2F;共享文件 &#x2F;mnt&#x2F;window cifs defaults,username&#x3D;liaozx,password&#x3D;liaozx123</li></ul><h3 id="window-快捷键"><a href="#window-快捷键" class="headerlink" title="window 快捷键"></a>window 快捷键</h3><h4 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h4><ul><li><code>win</code>：显示隐藏菜单</li><li><code>win + T</code>：循环浏览任务栏的程序</li><li><code>win + R</code>：运行<ul><li><code>control</code>：控制面板</li><li><code>appwiz.cpl</code>：卸载程序</li><li><code>dir path</code>：打开相应文件夹</li></ul></li><li><code>win + D</code>：显示桌面</li><li><code>win + E</code>：打开资源管理器</li><li><code>win + L</code>：锁定计算机</li><li><code>win + M</code>：最小化所有被打开的窗口</li><li><code>win + I</code>：设置</li><li><code>win + Tab</code>：虚拟桌面</li><li><code>win + ↑↓ ← →</code>:打开程序窗口排版<ul><li><code>上中下</code>：最大化&#x2F;默认状态&#x2F;最小化隐藏</li><li><code>左中有</code>：左半屏&#x2F;默认状态&#x2F;右半屏</li></ul></li><li><code>win + G</code>：屏幕录制</li><li><code>win + Alt + PrintScreen</code>：屏幕截图</li><li><code>win + Home</code>：清除窗口，保留当前</li><li><code>win + ctrl + D</code>：新建桌面(win + tab 切换)</li><li><code>win + x</code>：系统功能菜单<ul><li><code>win + x uu</code>：快速关机</li></ul></li><li><code>win + v</code>：系统剪切板</li></ul><h4 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h4><ul><li><code>Ctrl + ESC</code>：win 菜单</li><li><code>Ctrl + Shift + ESC</code>：打开任务管理器</li><li><code>Ctrl + (Shift)? + Tab</code>：切换浏览器 tab</li></ul><h4 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h4><ul><li><code>Alt + F4</code>：关闭当前应用程序<ul><li>桌面使用可以关机</li></ul></li><li><code>Alt + Tab</code>：切换打开的应用程序</li><li><code>Alt + Enter/双击</code>：查看文件属性</li><li><code>Alt + 左/右</code>：文件管理器左右移动</li><li><code>Alt + Ctrl + Delete</code>：打开任务管理器</li></ul><h4 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h4><ul><li><code>Shift + F10</code>：右键菜单</li><li><code>Shift + delete</code>：永久删除文件</li><li><code>win + A</code>：操作中下(消息通知、wifi、网络等)</li><li><code>win + B</code>：任务栏右边工具(输入法网络。。。)</li><li><code>win + P</code>：投影仪输出设备</li><li><code>win + U</code>：辅助工具管理器</li><li><code>win + Q</code>：小娜语音</li></ul><h3 id="win-常用软件"><a href="#win-常用软件" class="headerlink" title="win 常用软件"></a>win 常用软件</h3><ul><li><a href="https://potplayer.daum.net/">potplayer 视频播放器</a></li><li>chrome</li><li>vscode</li><li>xmind</li><li>typora</li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Window </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ruby工具</title>
      <link href="/2020/01/01/server/Ruby/ruby-setting/"/>
      <url>/2020/01/01/server/Ruby/ruby-setting/</url>
      
        <content type="html"><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul><li><a href="https://rubyinstaller.org/downloads/">官网</a> 或 scoop 直接安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ruby自带一个叫做RubyGems的系统，用来安装基于Ruby的软件</span></span><br><span class="line">gem update --system # 该命令请翻墙一下</span><br><span class="line">gem -v # 查看版本</span><br></pre></td></tr></table></figure><ul><li>更新源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除替换原gem源</span></span><br><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印是否替换成功</span></span><br><span class="line">gem sources -l</span><br><span class="line">https://gems.ruby-china.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保只有 gems.ruby-china.com</span></span><br></pre></td></tr></table></figure><ul><li>配置文件 <code>~/.gemrc</code></li></ul><h3 id="基于-Ruby-的服务"><a href="#基于-Ruby-的服务" class="headerlink" title="基于 Ruby 的服务"></a>基于 Ruby 的服务</h3><ul><li>Sass</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言</title>
      <link href="/2020/01/01/server/go/go-bash/"/>
      <url>/2020/01/01/server/go/go-bash/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/huangeh/p/14331987.html">环境配置</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.18.6.linux-amd64.tar.gz</span><br><span class="line">tar -C /usr/local -zxvf  go1.18.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">go 工作空间必须包含这三个子目录</span></span><br><span class="line">mkdir -p /usr/local/gocode/&#123;src,bin,pkg&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/profile</span></span><br><span class="line">export GO111MODULE=on</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/usr/local/gocode</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br><span class="line">或</span><br><span class="line">export GOROOT=/usr/local/go           #Golang源代码目录，安装目录</span><br><span class="line">export GOPATH=/usr/local/gocode        #Golang项目代码目录（工作空间）</span><br><span class="line">export PATH=$GOROOT/bin:$PATH    #Linux环境变量</span><br><span class="line">export PATH=$GOPATH/bin:$PATH    #Linux环境变量</span><br><span class="line">export GOBIN=$GOPATH/bin        #go install后生成的可执行命令存放路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">source</span> /etc/profile 就安装好了</span></span><br></pre></td></tr></table></figure><h4 id="查看安装专题"><a href="#查看安装专题" class="headerlink" title="查看安装专题"></a>查看安装专题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看go环境变量路径</span></span><br><span class="line">which go</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看go语言环境信息</span></span><br><span class="line">go env</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看go版本，查看是否安装成功</span></span><br><span class="line">go version</span><br></pre></td></tr></table></figure><h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><blockquote><p>go get github.com&#x2F;integrii&#x2F;flaggy</p></blockquote><blockquote><p>golang.org 访问艰难</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口文档</title>
      <link href="/2020/01/01/server/node/node-apidoc/"/>
      <url>/2020/01/01/server/node/node-apidoc/</url>
      
        <content type="html"><![CDATA[<p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install apidoc -g</span><br></pre></td></tr></table></figure><p>根目录配置文件 <code>apidoc.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apiDoc basic example&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Custom apiDoc browser title&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/v1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>项目标记</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@api</span> &#123;<span class="type">GET</span>&#125; logistics/policys 请求 + 接口地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span> 标签是必填的，只有使用 <span class="doctag">@api</span> 标签的注释块才会被解析生成文档内容</span></span><br><span class="line"><span class="comment"> *     格式  <span class="doctag">@api</span> &#123;<span class="type">method</span>&#125; path [title]    选填</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiDescription</span> 对 API 接口进行描述</span></span><br><span class="line"><span class="comment"> *     格式  <span class="doctag">@apiDescription</span> <span class="variable">text</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiGroup</span> 表示分组名称，它会被解析成一级导航栏菜单。</span></span><br><span class="line"><span class="comment"> *     格式 <span class="doctag">@apiGroup</span> <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiName</span> 表示接口名称</span></span><br><span class="line"><span class="comment"> *     格式 <span class="doctag">@apiName</span> <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiVersion</span> 表示接口的版本，和 <span class="doctag">@apiName</span> 一起使用。</span></span><br><span class="line"><span class="comment"> *     格式 <span class="doctag">@apiVersion</span> <span class="variable">version</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiParam</span> 定义 API 接口需要的请求参数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiPermission</span> 定义 API 接口需要的权限点。</span></span><br><span class="line"><span class="comment"> *     格式 <span class="doctag">@apiPermission</span> <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>库</title>
      <link href="/2020/01/01/server/node/node-library/"/>
      <url>/2020/01/01/server/node/node-library/</url>
      
        <content type="html"><![CDATA[<p>Express.js、Koa、NestJS(基于 Express)、Nuxt.js(Vue)</p><ul><li><p>Excel 表格处理 : <a href="https://sheetjs.com/">sheetjs</a></p></li><li><p>日期时间处理 :<a href="https://date-fns.org/">date-fns</a></p></li><li><p>聊天通讯：<a href="https://socket.io/">socket</a></p></li><li><p>PDF：<a href="https://pdfkit.org/">Node PDF 生成库</a></p></li><li><p>CRON 定时：<a href="https://www.npmjs.com/package/cron">node-cron</a></p></li><li><p>mongodb 工具：<a href="http://www.mongoosejs.net/">mongose</a></p></li><li><p>邮件发送：<a href="https://nodemailer.com/about/">nodemailer</a></p></li><li><p>接口文檔：<a href="https://www.npmjs.com/package/apidoc">apidoc</a></p></li></ul><table><thead><tr><th>包名</th><th align="left">作用</th><th>相似</th></tr></thead><tbody><tr><td>pm2</td><td align="left">node 进程管理工具</td><td></td></tr></tbody></table><table><thead><tr><th>koa 工具包</th><th align="left">作用</th><th>相似</th></tr></thead><tbody><tr><td>koa</td><td align="left">node koa 框架</td><td></td></tr><tr><td>koa-compress</td><td align="left">压缩响应数据</td><td></td></tr><tr><td>koa-logger</td><td align="left">输出服务日志</td><td><a href="https://www.npmjs.com/package/log4js">log4</a></td></tr><tr><td>koa-error</td><td align="left">处理响应错误</td><td></td></tr></tbody></table><h3 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h3><p>pm2 启动的 node 进程关闭了会自动重启<br>全局安装 pm2 <code>npm install pm2 -g</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">=================使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动某一个node程序</span></span><br><span class="line">pm2 start xxx.js --name=自定义名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动ssr项目，npm run start 成功后 ，再执行，也可以直接执行</span></span><br><span class="line">pm2 --name=nuxtName start npm -- run start</span><br><span class="line"></span><br><span class="line">pm2 list   # 查看进程列表</span><br><span class="line">pm2 logs   # 查看日志</span><br><span class="line">pm2 monit  # 监控进程</span><br><span class="line">pm2 show app_name|app_id # 查看进程详细</span><br><span class="line">pm2 stop app_name|app_id|all # 停止进程</span><br><span class="line">pm2 delete app_name|app_id|all # 删除进程</span><br><span class="line">pm2 restart/reload app_name|app_id|all # 重启进程</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动多个程序</span></span><br><span class="line">touch appxx.json</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入</span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;app&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;api&quot;,</span><br><span class="line">            &quot;script&quot;:&quot;server/index.js&quot;, # 找到程序路径</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;node-n&quot;,</span><br><span class="line">            &quot;script&quot;:&quot;client/index.js&quot;, # 找到其他node程序路径</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pm2 start appxx.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">=============================设置开机自启</span></span><br><span class="line">pm2 startup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存为开机自启</span></span><br><span class="line">pm2 save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除pm2 save的操作</span></span><br><span class="line">pm2 unstartup systemd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当 node.js 版本更新时，请一定要卸载并新建 自启动脚本</span></span><br><span class="line">pm2 unstartup</span><br><span class="line">pm2 startup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复上一次保存的自启动列表</span></span><br><span class="line">pm2 resurrect</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台运行pm2,启动4个app.js 实现负载均衡</span></span><br><span class="line">pm2 start app.js -i 4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看端口</span></span><br><span class="line">netstat -lntp</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题</title>
      <link href="/2020/01/01/server/node/server-issues/"/>
      <url>/2020/01/01/server/node/server-issues/</url>
      
        <content type="html"><![CDATA[<h3 id="短信服务"><a href="#短信服务" class="headerlink" title="短信服务"></a>短信服务</h3><ul><li>验证码发送功能需要腾讯云，阿里云等平台提供</li><li>去他们官网找云通信模块，里面用短信、语音、邮件等通信服务</li><li><a href="https://github.com/qcloudsms/qcloudsms_js">腾讯云 node sdk 包与接入方式</a></li><li>对接数据<ul><li>需要去申请短信那里，创建应用找到应用 ID （AppId）</li><li>进入应用找到（AppKey）</li><li>选择模板 ID(给与短信不同提示，发送不同内容)</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">QcloudSms</span> = <span class="built_in">require</span>(<span class="string">&quot;qcloudsms_js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 短信应用SDK AppID</span></span><br><span class="line"><span class="keyword">var</span> appid = <span class="number">1400009099</span>; <span class="comment">// SDK AppID是1400开头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短信应用SDK AppKey</span></span><br><span class="line"><span class="keyword">var</span> appkey = <span class="string">&quot;9ff91d87c2cd7cd0ea762f141975d1df37481d48700d70ac37470aefc60f9bad&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要发送短信的手机号码</span></span><br><span class="line"><span class="keyword">var</span> phoneNumbers = [<span class="string">&quot;21212313123&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;12345678903&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 短信模板ID，需要在短信应用中申请</span></span><br><span class="line"><span class="keyword">var</span> templateId = <span class="number">7839</span>; <span class="comment">// <span class="doctag">NOTE:</span> 这里的模板ID`7839`只是一个示例，真实的模板ID需要在短信控制台中申请</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 签名</span></span><br><span class="line"><span class="keyword">var</span> smsSign = <span class="string">&quot;腾讯云&quot;</span>; <span class="comment">// <span class="doctag">NOTE:</span> 这里的签名只是示例，请使用真实的已申请的签名, 签名参数使用的是`签名内容`，而不是`签名ID`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化QcloudSms</span></span><br><span class="line"><span class="keyword">var</span> qcloudsms = <span class="title class_">QcloudSms</span>(appid, appkey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求回调处理, 这里只是演示，用户需要自定义相应处理回调</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">err, cres, resData</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err: &quot;</span>, err);</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;发送失败&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;request data: &quot;</span>, cres.<span class="property">req</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;response data: &quot;</span>, resData);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">viscode</span>: cres.<span class="property">req</span>.<span class="property">body</span>.<span class="property">params</span>[<span class="number">0</span>], <span class="comment">// 找到验证码所在位置，前端拿到，用户登录时与这个加密对比</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定发送方式(群发或单发)</span></span><br><span class="line"><span class="keyword">var</span> ssender = qcloudsms.<span class="title class_">SmsSingleSender</span>();</span><br><span class="line"><span class="keyword">var</span> params = [<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">8999</span>) + <span class="number">1000</span>];</span><br><span class="line">ssender.<span class="title function_">sendWithParam</span>(</span><br><span class="line">  <span class="number">86</span>,</span><br><span class="line">  phoneNumbers[<span class="number">0</span>],</span><br><span class="line">  templateId,</span><br><span class="line">  params,</span><br><span class="line">  smsSign,</span><br><span class="line">  <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;&quot;</span>,</span><br><span class="line">  callback</span><br><span class="line">); <span class="comment">// 签名参数不能为空串</span></span><br></pre></td></tr></table></figure><h4 id="node-适用-es-语法"><a href="#node-适用-es-语法" class="headerlink" title="node 适用 es 语法"></a>node 适用 es 语法</h4><p>改后缀名为 .mjs 或 package.json 的 “type”: “module”</p><h4 id="node-版本太高"><a href="#node-版本太高" class="headerlink" title="node 版本太高"></a>node 版本太高</h4><blockquote><p>cli 报错 <code>Error: error:0308010C:digital envelope routines::unsupported</code> 一般 locl 中 @achrinza&#x2F;node-ipc 导致</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 set NODE_OPTIONS=--openssl-legacy-provider</span></span><br><span class="line"> <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言基础</title>
      <link href="/2020/01/01/server/C/C-base/"/>
      <url>/2020/01/01/server/C/C-base/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>语言过程<ul><li>二进制语言 0101-&gt;汇编语言(助记符)-&gt; B 语言 -&gt; C 语言 -&gt; C++…高级语言</li></ul></li><li>c 语言发展中个开发厂商的 C 语言产生差异，美国国家标准局定制标准语法<code>ANSIC</code><ul><li>11 年国际标准组织<code>ISO</code>和国际电工委员会<code>IEC</code>发布最新标准<code>C11</code></li><li>主要编译器<code>GCC</code>、<code>MSVC</code>、Clang、WIN-TC、SUBLIME、Turbo C 等</li></ul></li><li>C 语言优点<ul><li>基础性语言</li><li>语法简洁紧凑方便灵活</li><li>运算符数据结构丰富</li><li>结构化，模块化编程</li><li>移植性好，执行效率高</li><li>允许直接操作硬件</li></ul></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><ul><li>注意<ul><li>头文件正确包含的重要性</li><li>以函数为单位进行编程</li><li>程序包括<code>声明部分</code>+<code>实现部分</code></li><li>main return 的值是给它父进程看的($?状态码)</li><li>多用空格与换行</li><li>注释 &#x2F;星星&#x2F;<ul><li>#if 0 换行 xxx 换行 xx #endif</li></ul></li></ul></li><li>算法:解决问题的方法(流程图,NS 图，有限状态机 FSM 等显示出来)</li><li>程序：用某种语言实现算法</li><li>进程:</li><li>防止写越界、防止内存泄露、谁打开谁关闭、谁申请谁释放</li></ul><h3 id="数据类型、运算符、表达式"><a href="#数据类型、运算符、表达式" class="headerlink" title="数据类型、运算符、表达式"></a>数据类型、运算符、表达式</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li><p>类型转换</p><ul><li>a (int)b;</li></ul></li><li><p>数据类型</p><ul><li><p>基本数据类型</p><ul><li><p>数值类型</p><ul><li><p>整型</p><ul><li>短整型<code>short</code></li><li>整型<code>int</code></li><li>长整型<code>long</code></li><li>三种还区分有符号(默认)和无符号，同样占 32 位的有符号整型，最高位代表 0 正 1 负<ul><li>范围不同，表示的大小是一样的，-128 和+127 间个数 等于 0 到 255 的个数</li></ul></li></ul></li><li><p>浮点型</p><ul><li>单精度<code>flat</code></li><li>双精度<code>double</code></li><li>科学技术法:3e-23 ，3 乘以 10 的负 23 次方</li></ul></li></ul></li><li><p>字符类型<code>char</code></p></li><li><p>布尔<code>bool</code>（需要引入头文件 stdbool.h）</p></li></ul></li><li><p>构造类型</p><ul><li>数组</li><li>结构体</li><li>公用体</li><li>枚举类型</li></ul></li><li><p>指针类型</p></li><li><p>空类型<code>void</code></p></li></ul></li><li><p>重点</p><ul><li><p>所占字节</p><ul><li>数据类型所占字节随着机器的不同而不同。</li></ul></li><li><p>储存区别</p></li><li><p>不同数据类型的转化</p><ul><li>显式(手动，强制类型转化)</li><li>隐式</li></ul></li><li><p>特殊性</p><ul><li><p>bool 需要引入头文件</p></li><li><p>float 类型的比较，不能和一个确切的值相比,是一个大概范围的表示，</p></li><li><p>chat 类型是否有符号，不确定</p></li><li><p>不同形式的 0 值<code>0 &#39;0&#39; &quot;0&quot; &#39;\0&#39;</code></p></li><li><p>数据类型与后续代码的输入输出相匹配</p></li><li><p>字符转义字符</p><ul><li>‘\567’ :斜杠后三位当做八进制来看</li><li>‘\x9f’ :\x 开头当做十六进制看</li></ul></li></ul></li></ul></li></ul><h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><ul><li><p>变量(值随时变化的量)</p><ul><li><p>格式:[存储类型] 数据类型 标识符 &#x3D; 值;</p><ul><li><p>标识符：数字字母下划线组成的序列，数字不能开头</p></li><li><p>数据类型:基础+构造+…所有数据类型</p></li><li><p>值:类型与值匹配</p></li><li><p>储存类型</p><ul><li><p>auto:默认(储存栈中)</p><ul><li>空间自动分配，自动释放，自动回收，不需要我们操作空间</li></ul></li><li><p>static:静态类型</p><ul><li>没有赋值一定会自动初始化为 0 或 null</li><li>变量的值有继承性质,如：函数中的 static 变量，函数调用多次，这个变量是共用的,只分配一块空间</li><li>修饰全局变量后，不会音响到其他文件中同名的全局变量</li><li>修饰函数后,该函数不能在其他.c 文件中使用</li></ul></li><li><p>register:寄存器类型(建议编译器将变量存储位置在寄存器上)</p><ul><li>寄存器存在 CPU 中，将变量直接声明在 CPU 中速度快，但资源少</li><li>是否能成功由 gcc 判断，条件如下<ul><li>只能是局部变量</li><li>大小限制，32 位的环境下只能，寄存变量只能是&lt;&#x3D;32 位的</li><li>寄存器中没有地址，寄存器类型变量无法打印或查看地址</li></ul></li></ul></li><li><p>extern:说明型</p><ul><li>不是定义变量，不能更改被说明的变量和类型</li><li>extern int i;在该文件中是使用到的 i 不是自动定义的，去用其他文件定义的</li></ul></li></ul></li></ul></li><li><p>声明周期</p></li><li><p>作用范围</p><ul><li>全局和局部<ul><li>内部作用域优先级大于外面作用域</li></ul></li><li>全局变量<ul><li>作用范围:从定义开始到程序执行结束</li></ul></li><li>局部变量<ul><li>作用范围:从定义开始到当前大括号块结束</li><li>函数中的变量</li><li>修饰符不同代表的局部变量用法也不一样</li></ul></li></ul></li></ul></li><li><p>常量(程序执行过程中值不会发生变化的量)</p><ul><li>整型常量 1，33，44</li><li>实型常量 2.33,4.555</li><li>字符常量 由单引号引起来的单个字符或转义字符’a’,’\t’</li><li>字符串常量 由双引号引起的一个过多个字符序列</li><li>标识常量 #define PI 3.14(#define 宏名 宏体);编写使用宏名，预处理后<code>完全替换</code>宏体,不校验<ul><li>带参数：#define MAX(a,b) a&gt;b?a:b</li><li>带参数：#define MAX(a++,b++) a&gt;b?a:b;替换后:a++&gt;b++?a++:b++</li><li>处理问题：#define MAX(a++,b++) ({int A&#x3D;a,B&#x3D;b; A&gt;B?A:B;});替换后:a++&gt;b++?a++:b++</li><li>宏的运行:在程序预处理接口执行，不占用运行时间，占用编译时间，一改全改</li><li>对比函数:作用类似，安全性低，效率更高（对比宏，函数接收到变量直接进行运算）</li></ul></li></ul></li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li><p>运算符</p><ul><li>算术运算符(+, -, *, &#x2F;, %, ++, –)<ul><li><code>+|-</code> 单目的画是正负</li><li><code>%</code>:取余两边必须是整数</li><li><code>/</code>:被除数(分母或右边的)不能是 0</li><li>自增自减:元算法在前，先进行计算再取变量使用，否则先用，之后再计算</li></ul></li><li>关系运算符(&lt; &lt;&#x3D; &#x3D;&#x3D; &gt;&#x3D; &gt; !&#x3D;)</li><li>逻辑运算符(! &amp;&amp; ||)<ul><li>短路特性:&amp;&amp; 左边为假，不会走右边表达式; || 左边为真，不会走右边表达式</li></ul></li><li>位运算符(&lt;&lt; &gt;&gt; ~ | ^ &amp;)<ul><li>&lt;&lt; 左移(相当于乘 2)<ul><li>二进制向左移动一位，右边补上一个 0</li><li>B1100 -&gt; B0001 1000</li></ul></li><li>&gt;&gt; 右移(相当于除 2)<ul><li>二进制向右移动一位，右边去掉一个 0</li><li>B1100 -&gt; B0110</li></ul></li><li>~ 取反<ul><li>不考虑符号位，二进制 1 变 0，0 变 1</li><li>B1100 -&gt; B0011</li></ul></li><li>| 按位或<ul><li>两个二进制操作数，同位置一边为 1 就为 1，两边为 0 才为 0</li><li>B1100 | B1010 &#x3D;&gt; B1110</li></ul></li><li>&amp; 安位与<ul><li>两个二进制操作数, 同位置一边为 0 就为 0，两边为 1 才为 1</li><li>B1100 | B1010 &#x3D;&gt; B1000</li></ul></li><li>^ 按为异或<ul><li>连个二进制操作数，相同为 0，不同为 1</li><li>B1100 ^ B1010 &#x3D;&gt; B0110</li></ul></li><li>理解</li></ul></li><li>赋值运算符（&#x3D;）<ul><li>+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;</li></ul></li><li>条件运算符(三目运算 ？：)</li><li>逗号运算符（都会 主要运用连续定义变量）</li><li>指针运算符(星号 A,获取地址 &amp;B, int 星 A &#x3D; &amp;B)<br><code>int *p = &amp;j</code></li><li>求字节数(sizeof(int),sizeof(xxx))</li><li>强制转换类型 a &#x3D; (int)b<ul><li>转换只是一个过程，并不会改变 b 的值</li></ul></li><li>分量运算符</li><li>下标运算符</li><li>其他</li></ul></li><li><p>结合性</p></li><li><p>优先级</p></li><li><p>运算符的特殊用法</p></li><li><p>为运算的重要意义</p></li></ul><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><h3 id="输入输出专题"><a href="#输入输出专题" class="headerlink" title="输入输出专题"></a>输入输出专题</h3><ul><li><p>格式化输入输出函数 scanf、printf</p><ul><li>printf<ul><li>int printf(const char *format,…)<ul><li>format:”%[可选修饰符]格式字符，替换逗号后面的变量”<ul><li>变量什么类型，建议用响应的格式字符输出，需要匹配</li><li>格式字符<ul><li>d,i:十进制整型数</li><li>x,o:将值通过十六，八进制无符号整数输出</li><li>u:无符号十进制整型</li><li>c:单一字符</li><li>s:字符串</li><li>f:浮点小数</li><li>e:将输出的值通过指数形式科学计数法输出</li></ul></li><li>修饰符<ul><li>m|.n<ul><li>整数 j:设置输出宽带，比实际小忽略，否则前面补空格，printf(“i &#x3D; %4d”,i)</li><li>浮点数:%8,1f,指定输出需要 8 位，小数点保留一位四舍五入</li><li>字符串:%.5s，只输出 5 个字符</li></ul></li><li>%-10d 补空格后左对齐</li><li>%010d 补 0 后左对齐,%后面跟 0</li><li>%#x:十六进制和八进制输出添加 0x 或 0 等前缀</li><li>%lxxx:d o x u 格式字符，指定输出精度为 long，e f g 输出精度指定为 double</li></ul></li></ul></li></ul></li></ul></li><li>scanf 接收用户输入<ul><li>int scanf(const char *format,&amp;变量地址)<ul><li>修饰符与 printf 类似，不能有提示信息，并且后面的是变量地址</li><li>scanf(“%d,%f”,&amp;i,&amp;f) :动态输入</li><li>scanf %s 不建议使用，不能缺点储存空间大小</li><li>scanf 放在循环结构中要注意能否接收到有效值</li><li>输入是出现分割符号,后面的都无法输出了 W</li></ul></li></ul></li></ul></li><li><p>字符输入输出函数 getchar、putchar</p><ul><li>getchar 接收用户输入</li><li>putchar 显示打印出字符</li></ul></li><li><p>字符串输入输出函数 gets(!) 、puts</p><ul><li>gets 接收用户输入字符串，不建议用，可以用 fgets 代替<ul><li>gets 储存数据内存空间有指定的固定大小的，但是用户输入无限制，空间越界用户</li></ul></li><li>puts 输出</li></ul></li></ul><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><ul><li>十转二<ul><li>除二(16,除 8)取余数，倒数</li></ul></li><li>Bxx、0xxx、0xFFF,B O Ox 前缀分别代表二进制八进制和十六进制</li><li>整型数据已补码相似储存<ul><li>正数补码就是他二进制本身</li><li>负数补码是它绝对值的二进制– 取反 – +1</li></ul></li><li><a href="https://blog.csdn.net/MISSXIAOJJ/article/details/107425401">源码反码</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">23</span><br><span class="line">十进制转二进制</span><br><span class="line">不断除以2，从下往上取余</span><br><span class="line"></span><br><span class="line">二进制</span><br><span class="line">0001 0111  (有八位)</span><br><span class="line"></span><br><span class="line">一个二进制为一位(Byte)</span><br><span class="line">八位 为 一个字节(b)</span><br><span class="line">1KB = 1024个字节(b)</span><br><span class="line">1MB = 1024KB</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二转八进制</span><br><span class="line">三个二进制表示一个八进制</span><br><span class="line">010 111</span><br><span class="line">2     7</span><br><span class="line">对应   4 2 1 等于7</span><br><span class="line">4 2 1 通过2的次方得到的</span><br><span class="line"></span><br><span class="line">二转十六进制</span><br><span class="line">四个二进制表示7一个十六进制</span><br><span class="line">0001 0111</span><br><span class="line">1       7</span><br><span class="line"></span><br><span class="line">二进制转十进制</span><br><span class="line">0b10111</span><br><span class="line">32 16 8 4 2 1</span><br><span class="line">1*1 + 1*2 +1*4 + 0*8 + 1*16  = 23</span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h4><ul><li>语句逐行执行</li></ul><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><ul><li>if-else</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a = <span class="number">1</span>)&#123;</span><br><span class="line">    cmd1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cmd2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">else</span> 与最近的<span class="keyword">if</span>匹配，嵌套的<span class="keyword">if</span>-<span class="keyword">else</span>中也一样，所以多行的话尽量写上大括号，除非只有一行</span></span><br></pre></td></tr></table></figure><ul><li>switch-case</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="built_in">exp</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量或常量表达式: <span class="built_in">printf</span>(<span class="string">&#x27;语句主体&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">printf</span>(<span class="string">&#x27;a=1&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">printf</span>(<span class="string">&#x27;a=2&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">&#x27;a=3或a=4&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&#x27;其他我预料不到的情况&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ul><li>while</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="type">bool</span>)&#123;</span><br><span class="line">    loop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 条件成立 则 执行循环体，否则跳出不执行</span><br><span class="line"># 最少执行次数为<span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>do-while</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    loop</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">exp</span>)</span><br><span class="line"></span><br><span class="line"># 执行循环体 再判断条件，成立继续循环体，否则跳出不执行</span><br><span class="line"># 最少执行次数为<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>for</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(exp1,exp2,exp3)&#123;</span><br><span class="line">    loop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 执行表达式<span class="number">1</span>，判断表达式<span class="number">2</span>是否成立，如果不成立直接退出，成立执行loop，再走表达式<span class="number">3</span>，继续验证表达式<span class="number">2</span>，成立走loop,否则退出循环</span><br><span class="line"># 最少执行次数为<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(,exp2,)&#123;</span><br><span class="line">    loop；</span><br><span class="line">    i++...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># for 只是把for之前的初始化 和for之后的条件判断、循环体、变化语句，结构化了,结构在，就可以正常运行</span></span><br><span class="line"># 是可以的，只是exp1,<span class="number">3</span>什么都没做</span><br><span class="line"># 将自增操作放到循环体中，自增完，执行表达式<span class="number">3</span>,空不报错，会继续验证表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><p>if-goto</p><blockquote><p>无条件跳转，且不能跨函数，破坏程序结构，不建议使用</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xxxxx</span><br><span class="line">tag:</span><br><span class="line">xxxxx</span><br><span class="line">xxxxx</span><br><span class="line">xxxxx</span><br><span class="line"><span class="keyword">goto</span> tag:</span><br><span class="line">xxxxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="辅助控制关键字"><a href="#辅助控制关键字" class="headerlink" title="辅助控制关键字"></a>辅助控制关键字</h4><ul><li>break:跳出所在整个循环(for,while…),一层</li><li>continue:跳出本次循环，不执行 continue 后面的内容,进入自增后的下次循环</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><blockquote><p>数组:可以产生一个<code>相同类型</code>并且<code>连续</code>的内存空间地址</p></blockquote><ul><li>定义[可省略的存储类型] 数据类型 标识符[长度]<ul><li>int arr[3] &#x3D; {1,2,3}</li></ul></li><li>初始化<ul><li>不初始化:int arr[3];</li><li>半初始化:int arr[3] &#x3D; {1}</li><li>全初始化:int arr[3] &#x3D; {1,2,3}</li></ul></li><li>元素引用<ul><li>标识符[下标]</li><li>下标:0 - (len - 1)</li></ul></li><li>数组名[表示地址的一个常量]<code>本身就是一个地址 scanf等需要地址符号的地方不需要&amp;</code><ul><li>数组名：起始位置，声明后不能直接被赋值</li><li>起始位置就是第一个元素的位置</li></ul></li><li>数组越界<ul><li>一个三元素整型数组，假设当前环境，一个整型占四个自己，那么数组占用 1-12 的空间地址，如果再操作 arr[3] 第四个元素，使用 13-16 所在空间，这就产生数组越界</li><li>数组越界程序无法判断为语法错误，需要自己注意</li></ul></li></ul><h4 id="二维数组-1"><a href="#二维数组-1" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-   定义,初始化[可省略储存类型] 数据类型 标识符[行下标][列下标]</span><br><span class="line">    -   arr[M][n] ，M 行，N 列，下标位置 arr[<span class="number">0</span>][<span class="number">0</span>] 到 arr[M-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line">    -   初始化：arr[M][n] = &#123;&#123;<span class="number">00</span>,<span class="number">01</span>,<span class="number">02</span>&#125;,&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;</span><br><span class="line">    -   初始化：arr[M][n] = &#123;&#123;<span class="number">00</span>&#125;,&#123;<span class="number">10</span>,<span class="number">11</span>&#125;&#125; ;未初始化默认为 <span class="number">0</span></span><br><span class="line">    -   初始化：arr[M][n] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; ;按内存顺序复制，不能跳过</span><br><span class="line">    -   M 行号可以省略，根据列和值的个数自动计算行号</span><br><span class="line">    -   地址与一维数组一样</span><br><span class="line">-   元素引用</span><br><span class="line">    -   arr[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">-   储存形式</span><br><span class="line">    -   顺序储存，按行储存</span><br><span class="line">-   深入理解二维数组</span><br><span class="line">    -   arr[<span class="number">2</span>][<span class="number">3</span>] ==&gt; 看成:[[<span class="number">00</span>,<span class="number">01</span>,<span class="number">02</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line">    -   多维数组以此类推:arr[<span class="number">2</span>][<span class="number">3</span>][<span class="number">4</span>] arr[<span class="number">00</span>],是一个四元素数组</span><br><span class="line">    -   arr+<span class="number">1</span>,不是跳转一个元素自己大小，而是一行元素字节大小</span><br><span class="line">-   练习题</span><br><span class="line">    -   行列互换</span><br><span class="line">    -   求二维数组的最大值，以及所在位置</span><br><span class="line">    -   求各行与各列的和</span><br></pre></td></tr></table></figure><h4 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h4><ul><li>定义，初始化<ul><li>[可省略的存储类型] 数据类型 标识符[长度]</li><li>单字符初始化:char arr[3] &#x3D; {‘a’,’b,’c’}</li><li>字符串常量初始化:</li></ul></li><li>存储特点<ul><li>主要与普通数组差别最后会有一个尾 0<code>\0</code>作为结束标记</li></ul></li></ul><h4 id="字符串常用函数"><a href="#字符串常用函数" class="headerlink" title="字符串常用函数"></a>字符串常用函数</h4><blockquote><p>引入头文件 string.h</p></blockquote><p>char str[32] &#x3D; ‘hello’<br>char str2[32] &#x3D; ‘hello\0word’</p><ul><li>puts(arr):输出</li><li><code>strlen</code> 与 <code>sizeof</code><ul><li><code>strlen</code>：计算以<code>\0</code>结束的字符串长度(不包括尾 0)<ul><li>strlen(str):结果为 5</li><li>strlen(str2):结果为 5 ,以尾 0 作为结束标识符</li></ul></li><li><code>sizeof</code>:查看 str 占用的内存大小<ul><li>sizeof(str):结果为 6 ，去了六个字节</li><li>sizeof(str2):结果为 11</li></ul></li></ul></li><li>字符串数组重新赋值<ul><li>str &#x3D; ‘abcde’; 是错误的</li><li>strcopy(str,’abcde’)；需要保证 copy 的串不能超过 str 定义的字节大小,否则<code>产生越界</code></li><li>strncopy(str,’abcde’,32[size,防止越界])；无论 copy 的串多大，我只要参数三的大小</li></ul></li><li>连接<ul><li>strcat(str,” “):str 后连接上一个空格，覆盖 str 的尾 0，并添加一个新的尾 0，<code>注意大小，防止越界</code></li><li>strncat(str,” “,SIZE):从参数二取最大 SIZE 个字节，追加到参数一的后面，没有 SIZE 个字节就取到尾 0 为止</li></ul></li><li>比较<ul><li>strcmp(str,str2)<ul><li>通过 ASCII 比较，逐个字符比较<ul><li>相同:0</li><li>参数一大:正值</li><li>参数一小:负值</li></ul></li></ul></li><li>strncmp(str,str2,5):只比较前五个</li></ul></li><li>练习<ul><li>计算一个串中单词个数</li></ul></li></ul><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><blockquote><p>指针就是具有指向作用的地址，单独空间 A 地址不能认为是指针，而是要空间 B 储存的空间 A 地址才叫指针，这个 B 中储存的地址可以让 B 通过它获取另外一个地方的值</p></blockquote><h4 id="变量与地址"><a href="#变量与地址" class="headerlink" title="变量与地址"></a>变量与地址</h4><ul><li>变量<ul><li>对内存一块一块空间抽象命名(给我们看的,称呼，别名)</li></ul></li><li>地址<ul><li>地址是内存中一块空间的编号,地址等价于指针，指向一块空间</li><li>如:林锦天城.10 号是永辉超市<ul><li>xxx.10 号就是地址</li><li>永辉超市这个名称就是变量</li><li>倒闭了我接手,改名永辉大超市后，变量名发生了改变，但是地址是不变的</li></ul></li></ul></li><li>表达式的*：取值的作用</li></ul><p>指针案例 1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>; <span class="comment">// 给值为1的一个内存空间命名为i(生成地址 0x1000)</span></span><br><span class="line"><span class="type">int</span> *p; <span class="comment">// 通过`int *`，定义一个命名为p准备作为的`一级指针变量`的空间(0x1001)</span></span><br><span class="line">        <span class="comment">// p是第一个保存`0x1000`这个地址的变量，也可以叫一级指针变量，`0x1000`这个具有指向作用的地址就是指针</span></span><br><span class="line">        <span class="comment">// 把指针指向a,a = &amp;i，把指针指向p，就是p=&amp;i;(如果有定义 int *a 的话)</span></span><br><span class="line">p = &amp;i; <span class="comment">// 将i表示的那个空间地址`0x1000`赋值给p，也就是让p指向i，0x1001存着0x1000地址号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">&amp;i = <span class="number">0x1000</span></span><br><span class="line">p = <span class="number">0x1000</span>  <span class="comment">//</span></span><br><span class="line">&amp;p = <span class="number">0x1001</span> <span class="comment">//p这块储存0x1000</span></span><br><span class="line">*p = <span class="number">1</span> <span class="comment">//*p -&gt;*(0x1000) :去p指向的地址0x1000中取值(不是p自己的地址)</span></span><br></pre></td></tr></table></figure><p>指针案例 2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>; <span class="comment">// 给值为1的一个内存空间命名为i(生成地址 0x1000)</span></span><br><span class="line"><span class="type">int</span> *p; <span class="comment">// 通过`int *`，定义一个命名为p准备作为的`一级指针变量`的空间(0x1001)</span></span><br><span class="line">        <span class="comment">// p是第一个保存`0x1000`这个地址的变量，也可以叫一级指针变量，`0x1000`这个具有指向作用的地址就是指针</span></span><br><span class="line">        <span class="comment">// 把指针指向a,a = &amp;i，把指针指向p，就是p=&amp;i;(如果有定义 int *a 的话)</span></span><br><span class="line">p = &amp;i; <span class="comment">// 将i表示的那个空间地址`0x1000`赋值给p，也就是让p指向i，0x1001存着0x1000地址号</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> **q; <span class="comment">//通过`int **` 定义一个命名为q，准备作为`二级指针变量`的空间(0x1002)</span></span><br><span class="line">q = &amp;p; <span class="comment">//将P的地址`0x1001`赋值给了q</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">&amp;i = <span class="number">0x1000</span></span><br><span class="line">p = <span class="number">0x1000</span>  <span class="comment">//</span></span><br><span class="line">&amp;p = <span class="number">0x1001</span> <span class="comment">//p这块储存0x1000</span></span><br><span class="line">*p = <span class="number">1</span> <span class="comment">//*p -&gt;*(0x1000) :去p指向的地址0x1000中取值(不是p自己的地址)</span></span><br><span class="line"></span><br><span class="line">q = <span class="number">0x1001</span></span><br><span class="line">&amp;q = <span class="number">0x1002</span></span><br><span class="line">*q = *(<span class="number">0x1001</span>) = <span class="number">0x1000</span> <span class="comment">//获取0x1001的值 也就是 0x1000</span></span><br><span class="line">**q = *(*(<span class="number">0x1001</span>)) = *(<span class="number">0x1000</span>) = <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="指针与指针变量"><a href="#指针与指针变量" class="headerlink" title="指针与指针变量"></a>指针与指针变量</h4><ul><li>指针具有指向作用的地址(或被指针变量储存起来，能通过它获取相应值的地址)</li><li>指针变量:储存指针地址的变量</li></ul><h4 id="直接访问与间接访问"><a href="#直接访问与间接访问" class="headerlink" title="直接访问与间接访问"></a>直接访问与间接访问</h4><ul><li>直接范围<ul><li>上例通过&amp;i 访问</li></ul></li><li>间接访问<ul><li>p | *q</li></ul></li></ul><h4 id="空指针与野指针"><a href="#空指针与野指针" class="headerlink" title="空指针与野指针"></a>空指针与野指针</h4><ul><li>空指针<ul><li>定义好，暂不知道什么使用用的情况</li><li>int *p&#x3D;NULL; NULL 宏一般值为 0<ul><li>系统上 0 号空间不分配给任何进程</li><li>操作*p 就是乱操作 0 号空间，系统会报错</li></ul></li></ul></li><li>野指针<ul><li>某个指向不确定的指针，定义好没有指向空间，也没指向 NULL 的情况产生</li><li>int *p; 直接使用*p, auto 的 int *会产生一个随机值,直接将这个随机值当做地址使用，的情况之一</li><li>空指针是为了防止野指针的产生</li></ul></li></ul><h4 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h4><ul><li>void int *p;可以与其他类型指针数据交换赋值<ul><li>不确定指令类型的时候使用</li><li>百搭的指针类型</li></ul></li></ul><h4 id="定义与初始化的书写规则"><a href="#定义与初始化的书写规则" class="headerlink" title="定义与初始化的书写规则"></a>定义与初始化的书写规则</h4><ul><li>int *p; int* p;都行</li></ul><h4 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h4><ul><li>&amp;：取地址</li><li>*：取指向目标的值</li><li>关系运算:</li><li>++&#x2F;–</li></ul><h4 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h4><ul><li>指针与一维数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">// arr 等同于arr+0 的地址 也等同于 arr[0] 的地址</span></span><br><span class="line"><span class="comment">// arr+1 的地址等同于 arr[1]，加不是移动一个字节。而是移动数组类型元素所在字节的个数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr[i] == *(arr+i)[因为arr是地址，偏移i的地址] == *(p+i)[p指针变量，储存着指针地址] == p[i] == 1,2,3</span></span><br><span class="line"><span class="comment">// &amp;arr[i] == arr+i == p+i == p[i] == 0xxxx</span></span><br><span class="line"><span class="comment">// arr 与 p 的区别:arr是数组名，一个表示地址的常量；p是一个变量，存放地址的变量</span></span><br><span class="line"><span class="comment">// 在p没有++/--偏移的使用 p和arr是一样的</span></span><br><span class="line"><span class="comment">// 搞清除p+1与p++的差别，前者p并没有变，只是去取下一个元素的值了，p++,是使p不指向arr，而是指向arr[1]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>指针与二维数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二维数组arr[2][3],认为是两行三类，一维数组+1移动一个数组元素，行指针，二维数组arr+1，直接从arr[0][0],跳到arr[1][0],称为列指针</span></span><br><span class="line"><span class="comment">// arr[i][j]的值是，arr先移动i行，取值，在移动j列，取值: *(*(arr+i)+j)，地址相当于 *(arr+i)+j</span></span><br><span class="line"><span class="comment">// 如果直接int *p = arr;警告,p+i移动i个元素，arr+i是移动i行</span></span><br></pre></td></tr></table></figure><ul><li>指针与字符数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;string&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p = str+<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(str)</span><br><span class="line"><span class="built_in">puts</span>(p) <span class="comment">//ing ，把p指向的地址开始依次输出到尾0结束</span></span><br></pre></td></tr></table></figure><h4 id="const-与指针"><a href="#const-与指针" class="headerlink" title="const 与指针"></a>const 与指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * const int a //变量a常量化，在后面值不能更改，对比宏可以检测语法</span></span><br><span class="line"><span class="comment"> * int const a</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * const int *p //常量指针，和下面int提前的没差别，如果普通指针指向const变量是会被修改的，所以需要用常量指针</span></span><br><span class="line"><span class="comment"> * int const *p //常量指针，指针指向的目标变量值不能改变，指向可以改变</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * int *const p //指针常量，指针指向的目标变量值可以能变，指向不能改变，只能指向最开始指向的变量</span></span><br><span class="line"><span class="comment"> * const int *const p //指针常量又是常量指针,指针指向的目标变量值不能改变，指向也不能改变</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="指针数组与数组指针"><a href="#指针数组与数组指针" class="headerlink" title="指针数组与数组指针"></a>指针数组与数组指针</h4><ul><li>指针数组<ul><li>定义: [存储类型] 数据类型 * 数组名[长度]<ul><li>int _ arr[2] &#x2F;&#x2F;每个 arr[i]都是一个指针，int * &#x3D; 1，</li><li>char _argv[]：argv 是一个数组，数组中有若干个元素，每个元素都是 char _,值就是外部传参内容</li></ul></li></ul></li><li>数组指针<ul><li>定义：[存储类型] 数据类型 (*指针名)[下标]&#x3D;值<ul><li>int (*p)[3] -&gt; int[3] *p</li><li>正常情况下 int 的 p+1 需要移动 int 所占用的字节数</li><li>int[3] 就是移动三个 int 所占用的字节大小。如果二维数组 arr[2][3]的 arr+1 就可以等于 p+1，其他概念个一维数组差不多了</li><li>数组指针可以理解为，定义一个指针，这个指针是在某种大小的数组间移动，或设置指针移动做小单位是多少</li></ul></li></ul></li></ul><h4 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h4><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><ul><li><p>数据类型 函数名(数据类型 形参名,数据类型 形参名 2){}</p><ul><li>返回值<ul><li>数据类型一般为函数 return xx，或 exit(xx)的类型</li><li><code>retrun</code>:结束当前函数，main 中结束就是程序结束</li><li>main 函数的 return 的值可以在命令中 <code>echo $?</code> 查看，如果没有返回值，就返回里面最后一个函数的返回值</li><li>一个进程的返回值是给它父进程看的，main 的父进程就是执行程序的 shell</li></ul></li></ul></li><li><p>函数名和数组名一样，可以代表函数地址</p></li></ul><h4 id="函数的传参"><a href="#函数的传参" class="headerlink" title="函数的传参"></a>函数的传参</h4><ul><li>值传递</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">print_value</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>,a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">3</span>,j = <span class="number">5</span>;</span><br><span class="line">    print_value(i,j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>地址传递</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">print_value</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 定义一个指针变量a，和指针变量b，分别存放&amp;i和&amp;j这两个具有指向作用的地址(指针)</span></span><br><span class="line"><span class="comment">     * *a:获取a指针变量储存指针指向的值</span></span><br><span class="line"><span class="comment">     * *a = *b:指针变量b存储指针指向的值，赋值给a储存指针指向的空间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">int</span> tmp;</span><br><span class="line">    tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * argc：计数器，统计从终端传过来多少个参数</span></span><br><span class="line"><span class="comment">     * argv：是一个列表，保存命令中传递过来的参数，以字符指针数组形式储存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 查看</span></span><br><span class="line"><span class="comment">     * printf(&quot;argc=%d\n&quot;,argc);</span></span><br><span class="line"><span class="comment">     * for(int ar=0;ar&lt;argc;ar++)</span></span><br><span class="line"><span class="comment">     *      puts(argv[ar]);</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">3</span>,j = <span class="number">5</span>;</span><br><span class="line">    print_value(&amp;i,&amp;j);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i=%d,b=%d\n&quot;</span>,i,j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过全局变量传参</li></ul><h4 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h4><ul><li><p>嵌套调用</p></li><li><p>递归调用</p><ul><li>嵌套调用的特例</li><li>一个函数直接或间接调用自身</li></ul></li><li><p>注意事项</p><ul><li>被调用函数需要写在当前函数(主调函数)的上方，或者在上方声明，才能正常调用<ul><li>函数申明:void 函数名(void);</li></ul></li></ul></li></ul><h4 id="函数与数组"><a href="#函数与数组" class="headerlink" title="函数与数组"></a>函数与数组</h4><ul><li>函数与一维数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">print_arr</span><span class="params">(<span class="type">int</span> *p,<span class="type">int</span> n)</span>&#123; <span class="comment">//int *p 可以写成 int p[],在形参中[]相当于*，与定义一个数组是含义是不一样的</span></span><br><span class="line">    <span class="comment">// sizeof(p) 指针变量p储存的是数组a的起始位置地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(p+i))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&#x27;%s:%d\n&#x27;</span>,__FUNCTION__,<span class="keyword">sizeof</span>(a)); <span class="comment">//main:20</span></span><br><span class="line"></span><br><span class="line">    print_arr(a,<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(*a)) <span class="comment">//需要传入数组长度，应为函数内部接收到的a只是数组起始地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数与二维数组</li><li>函数与字符数组</li></ul><h4 id="函数与指针"><a href="#函数与指针" class="headerlink" title="函数与指针"></a>函数与指针</h4><ul><li>指针函数<ul><li>返回值为为地址，用指针接收的函数,<strong>与整型函数，空函数</strong>意思一样</li><li>定义:<ul><li>返回值类型 * 函数名(形参)</li><li>int * fun(int a){ return 0xXXXXX }</li></ul></li></ul></li><li>函数指针<ul><li>指针指向的是函数，<strong>整型指针，指针指向整型数，数组指针，指针指向一个数组</strong>意思一样</li><li>定义<ul><li><code>类型 (*指针名) (形参)</code></li><li><code>int (*p)(int,int);</code> p &#x3D; add 指向相同类型的函数；add 是 int add(int a,int b){}</li></ul></li></ul></li><li>函数指针数组<ul><li>数组里存放的不是整型 int，而是函数指针</li><li>定义<ul><li>类型 (*数组名[下标])(形参)</li><li>int (*arr[N])(int); 数组有 N 个元素，每个元素都是指向函数的指针</li></ul></li></ul></li><li>指向指针函数的函数指针数组<ul><li>函数指针数组的每个函数都是返回一个地址，都要通过指针来接收返回值</li></ul></li></ul><h3 id="构造类型"><a href="#构造类型" class="headerlink" title="构造类型"></a>构造类型</h3><ul><li><p>结构体</p><ul><li><p>结构体的产生以及意义</p><ul><li>为一系列不数据类型，提供连续内存空间类型</li><li>结构体是一个类似 int 的东西，不占用空间，不能拿来赋值给谁，只是描述指定结构体可以是怎样的数据</li></ul></li><li><p>类型描述</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名&#123;</span></span><br><span class="line">    数据类型<span class="number">1</span> 成员<span class="number">1</span>；</span><br><span class="line">    数据类型<span class="number">2</span> 成员<span class="number">2</span>；</span><br><span class="line">    数据类型<span class="number">3</span> 成员<span class="number">3</span>；</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> 已存在的机构体名 对应变量;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span>&#125; 对应变量;直接嵌套结构体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无名结构图，直接定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> age,</span><br><span class="line">    <span class="type">char</span> name</span><br><span class="line">&#125;a,b=&#123;<span class="number">20</span>,liao&#125;,*p,...</span><br></pre></td></tr></table></figure><ul><li>建议定义在 main 函数外</li></ul></li><li><p>嵌套定义</p></li><li><p>定义变量，初始化以及成员引用</p><ul><li>结构体定义变量</li><li>struct 结构体名 变量 &#x3D; {1，2，3}</li><li>变量.age&#x3D;10;</li><li>成员引用<ul><li>变量.age</li><li>指针-&gt;成员名</li></ul></li></ul></li><li><p>占用内存空间大小</p><ul><li><p>默认，地址对齐情况</p><ul><li><p>某一个数据类型在该结构体字节位置%该数据类型所占的字节数 &#x3D;&#x3D; 0；不整除就向下移动，移动的字节空间，无法再使用</p></li><li><p>比如求结构体 struct case {int a;char b;float c;char d} 所占字节数</p><ul><li><p>结束分配 addr 第 0、1、2、3、4、5、6、7、8、9、10、11、12、13 个字节位置,加上该环境 int 是四个字节</p></li><li><p>0%sizeof(int) &#x3D;&#x3D; 0,int a 占用 0、1、2、3;下一个从 4 开始</p></li><li><p>4%sizeof(char) &#x3D;&#x3D; 0,char b 占用 4；</p></li><li><p>5%sizeof(float) !&#x3D; 0,下移</p></li><li><p>6%sizeof(float) !&#x3D; 0,下移</p></li><li><p>7%sizeof(float) !&#x3D; 0,下移;空闲 3 个，字节地址对齐</p></li><li><p>8%sizeof(float) &#x3D;&#x3D; 0,float c 占用 8、9、10、11</p></li><li><p>12%sizeof(char) &#x3D;&#x3D; 0,char d 占用 12，由于字节对齐，此处也会计算成 4 个字节 ，所以该结构体占用 0-15 共 16 个字节</p></li><li><p>公式:addr%类型所占字节数，整除则存放，否则向下偏移</p></li><li><p>如果 int 8 个字节，那么</p><ul><li>该结构体第一步就是 0%8，最终结果会是 32 个字节</li></ul></li></ul></li></ul></li><li><p>结构体禁用地址对齐</p><ul><li>struct case {xxxxx}<strong>attribute</strong>((packed))</li></ul></li></ul></li></ul></li><li><p>小案例</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#default NAMESIZE 32</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student_st</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[NAMESIZE]; <span class="comment">//name字符数组，变量.name直接是地址</span></span><br><span class="line">    <span class="type">int</span> math;</span><br><span class="line">    <span class="type">int</span> chinese;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">stu_set</span><span class="params">(<span class="keyword">struct</span> student_st *p)</span>&#123;</span><br><span class="line">    p-&gt;id = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">strncpy</span>(p-&gt;name,<span class="string">&quot;liao&quot;</span>,NAMESIZE);</span><br><span class="line">    p-&gt;math = <span class="number">90</span>;</span><br><span class="line">    p-&gt;chinese = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stu_show</span><span class="params">(<span class="keyword">struct</span> student_st *p)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%s,%d,%d\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;math,p-&gt;chinese);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stu_changename</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> main &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student_st</span> <span class="title">stu</span>;</span></span><br><span class="line">    stu_set(&amp;stu);</span><br><span class="line">    stu_show(&amp;stu);</span><br><span class="line">    stu_changename(&amp;stu);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>共用体</p><ul><li><p>产生以及意义</p><ul><li>多个成员,只能一个成员生效,相当于多个选项，但只能选择一个</li><li>所占内存大小为最大的成员字节大小</li></ul></li><li><p>类型描述</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> 共用体名&#123;</span></span><br><span class="line">    数据类型 成员<span class="number">1</span>；</span><br><span class="line">    数据类型 成员<span class="number">2</span>；</span><br><span class="line">    数据类型 成员n；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> 共用体名 变量;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> 共用体名 指针;</span></span><br><span class="line">    变量.成员<span class="number">1</span> = xxxx;</span><br><span class="line">    指针名-&gt;成员<span class="number">1</span> = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套定义使用</p></li><li><p>定义不同类型变量，初始化以及引用</p><ul><li>变量.成员</li><li>指针-&gt;成员</li></ul></li><li><p>内存占用空间大小</p></li><li><p>函数传参的问题(值，地址)</p></li><li><p>位域</p><ul><li>需再学一遍</li></ul></li></ul></li><li><p>枚举</p><ul><li>定义<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> 枚举名称&#123;</span></span><br><span class="line">    成员<span class="number">1</span>,</span><br><span class="line">    成员<span class="number">2</span>,</span><br><span class="line">    成员<span class="number">3</span>,</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> main&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> 枚举名称 变量 =</span> 成员<span class="number">1</span>；</span><br><span class="line">    直接 成员<span class="number">1</span> 当做全局变量使用</span><br><span class="line">    <span class="comment">// enum 成员为未赋值默认从0开始，变量最终为0；</span></span><br><span class="line">    <span class="comment">// 如果定义时成员1 = 10；后面的依次增加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h3><blockquote><p>手动管理内存空间<br>相关函数 malloc、ralloc、realloc、free (释放)<br>一般程序运行结束会自动释放,但是类似 linux 服务器一般不关机的，会不断需要内存，某些条件下必须手动控制<br>原则:谁申请谁释放</p></blockquote><h4 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h4><blockquote><p>传入一个需要的内存大小，返回指定字节大小连续的内存起始地址 void *</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)) <span class="comment">//需要int大小的字节数</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123; <span class="comment">//如果malloc失败</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一些列操作</span></span><br><span class="line">    *p =<span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p) <span class="comment">//释放</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h4><blockquote><p>参数 1 指定几个成员，参数 2 每个成员需要的大小<br>申请 n 个成员指定大小的，连续内存空间返回 void *</p></blockquote><h4 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h4><blockquote><p>重新分配一个动态内存空间<br>参数 1 为 malloc 或 calloc 返回的指针，参数 2 重新分配的大小，在原来基础上将大小扩展到重新分配的大小</p></blockquote><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><blockquote><p>释放之前调用 calloc、malloc 或 realloc 所分配的内存空间。<br>指针 free 后，最好将它赋为 NULL<br>free 后原来指向的地址还存在，对那块空间没有了引用的权限，若需要使用该指针可以给它重新分配内存<br>free 释放的是指针指向的内存,指针是一个变量，只有程序结束时才被销毁,释放了内存空间后，原来指向这块空间的指针还存在，只不过现在指针指向的内容是无用的,未定义的<br>(重新学习 P63 与 free 后一半)</p></blockquote><h3 id="调试工具和调试技巧-gdb、make"><a href="#调试工具和调试技巧-gdb、make" class="headerlink" title="调试工具和调试技巧(gdb、make)"></a>调试工具和调试技巧(gdb、make)</h3><h3 id="常用内置方法"><a href="#常用内置方法" class="headerlink" title="常用内置方法"></a>常用内置方法</h3><ul><li><code>typeof(x)</code>:获取 x 的类型</li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><code>typedef</code>:为已有的数据类型改名<ul><li>typedef 已有数据类型 新类型名;(必须分号)</li><li>typedef int INT;</li><li>typedef int ARR[6] —&gt; ARR array —&gt; int array[6]</li><li>typedef int FUNC(int) —&gt; 给 int(int)int 类型 int 参数的函数改名 FUNC —&gt; FUNC f 相当于 int f(int)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">&#125;NODE,*NODET;</span><br><span class="line"><span class="comment">//定义一个 结构体 别名叫 NODE,定义一个 结构体* 叫 NODET</span></span><br></pre></td></tr></table></figure></li><li>如果不同环境需要将 int 改成 long，那么用 typedef long INT；</li></ul></li></ul><h3 id="常用库函数"><a href="#常用库函数" class="headerlink" title="常用库函数"></a>常用库函数</h3><ul><li>man 函数名：就可以指定调用这个函数需要引入什么头文件</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>连个函数名相同，参数不想听的函数，如何判断是用重载实现还是变参实现?<ul><li>调用是多传参数，编译报语法错误，那就是重载定参的</li><li>如果编译不报错，使用才报错说明是变参实现的，函数本身都不知道需要多少参数</li></ul></li></ul><h3 id="系统宏"><a href="#系统宏" class="headerlink" title="系统宏"></a>系统宏</h3><ul><li><strong>FUNCTION</strong>:函数名</li><li><strong>LINE</strong>:当前行号</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs基础</title>
      <link href="/2020/01/01/server/node/server-nodejs/"/>
      <url>/2020/01/01/server/node/server-nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>终端直接输入 node 进入可以运行 node 代码的换叫 REPL 环境</p></blockquote><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><ul><li>javascript 运行时</li><li>不是语言、不是框架、是一个平台、一个基于 v8 引擎的 js 运行环境(宿主环境)<ul><li>哪里安装 nodejs，JavaScript 代码就能在哪里运行,nodejs 之前一般是在浏览器中运行的</li><li>所以 NodeJs 跨平台</li><li>使 js 可以做很多浏览器网站之外的事情</li><li>如:<code>Node的Electron开发的VsCode</code> 、<code>gulp</code>、<code>webpack</code></li></ul></li><li>除了 nodejs 外 js 其他宿主环境:浏览器</li><li>nodejs 通过<code>V8 js引擎</code>，node API 将任务放到 libuv 中(事件循环、文件系统、网络 IO、线程池等)</li><li>nodejs 架构<ul><li>js 操作与 Node 提供的 API(js 编写)</li><li>解析 js 的 V8（大部分 C++）</li><li>libuv(C 语言编写)</li></ul></li><li>应用场景<ul><li>electron 桌面程序开发</li><li>前端开发库（npm、yarn…）</li><li>使用 nodejs 作为 web 开发服务器</li><li>通过 nodejs 完成前后的渲染同构<ul><li>在后端执行 js 代码，渲染出最终的 html 代码，让浏览器直接解析，优化项目</li></ul></li><li>通过 node 编写自动化脚本</li></ul></li><li>终端输入 node 回车，进入 nodejs 的 REPL(交互式测试编程环境)</li></ul><h3 id="JS-引擎"><a href="#JS-引擎" class="headerlink" title="JS 引擎"></a>JS 引擎</h3><blockquote><p>作用:将 js 转汇编转二进制最终变为 cpu 可以认识的数据<br>JS 的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等</p></blockquote><ul><li>常见的 JS 引擎<ul><li><code>SpiderMonkey</code>:第一款，也是作者<code>Brendan Eich</code>开发的</li><li><code>Chakra</code>:微软开发主要<code>IE</code>浏览器</li><li><code>JavaScriptCore</code>:浏览器引擎(WebKit)中的内置 JS 引擎，Apply 公司开发(小程序的 JsCore)<ul><li>WebKit &#x3D; 渲染工作的(WebCore) 与 JS 引擎(JavaScriptCore) 组成</li></ul></li><li><code>V8</code>:Google 开发<ul><li><code>在Chrome中，只有Html的渲染采用了WebKit的WebCore代码，而在JavaScript上，重新搭建了一个NB哄哄的V8引</code></li><li><code>谷歌浏览器体验好的原因之一</code>6</li></ul></li></ul></li></ul><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="主要组成部分"><a href="#主要组成部分" class="headerlink" title="主要组成部分"></a>主要组成部分</h3><p><img src="/../../../static/img/nodejs-model.png" alt="&quot;node模型&quot;"></p><p>Node.js 被分为了四层，分别是 <code>应用层</code>、<code>V8引擎层</code>、<code>Node API</code>层 和 <code>LIBUV层</code>。</p><ul><li><p>应用层：即 JavaScript 交互层，常见的就是 Node.js 的模块，比如 http，fs</p></li><li><p>V8 引擎层： 即利用 V8 引擎来解析 JavaScript 语法，进而和下层 API 交互，(c++)</p></li><li><p>NodeAPI 层： 为上层模块提供系统调用，一般是由 C 语言来实现，和操作系统进行交互 。</p></li><li><p>LIBUV 层： 是跨平台的底层封装，实现了 事件循环、文件操作等，是 Node.js 实现异步的核心</p></li><li><p>Node.js 内部都是通过 线程池 来完成异步 I&#x2F;O 操作</p><ul><li>Node.js 的单线程仅仅是指 JavaScript 运行在单线程中，而并非 Node.js 是单线程。</li></ul></li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>执行步骤:<ol><li>用户编写<code>编写fs.readFile()</code></li><li>V8 拿到用户代码进行翻译，解析 -&gt; 完成之后就可以执行</li><li>执行时经过<code>NODE.js BINDINGS</code>到<code>libuv</code>与操作系统沟通,读取文件内容</li><li>BINDINGS 作用是使 v8 翻译处理的代码能与 libuv（独立的库）的代码进行沟通</li></ol></li><li>操作文件细节<ol><li>js 不能直接对一个文件进行操作</li><li>任何程序的文件操作都时需要<code>系统调用</code>(操作系统的文件系统)</li><li>Node 通过 libuv 库来操作文件进行系统调用</li></ol></li><li>操作系统提供两种调用方式<code>阻塞调用</code>和<code>非阻塞调用</code><ol><li>阻塞和非阻塞是针对系统调用，是系统(被调用方)提供给外界用户的调用方式</li><li>同步和异步是针对用户端来说的 (如同步执行代码会被阻塞,系统不会分配新线程来处理它) ，</li><li>客户端完全可以主线程通过异步陆续执行，当某个地方执行到阻塞调用时，新开一个进程让他等，主线程继续执行</li><li><code>阻塞</code></li><li><code>非阻塞</code><ol><li>后续代码得不到结果，需要不断<code>轮训操作</code>，或类似方式处理</li><li><code>轮训操作</code>libuv 的线程池(Thread Pool) 进行处理</li><li>当得到结果时就可以将对应的回调放到事件循环(某一个队中)</li></ol></li></ol></li><li>node 的事件循环<ul><li>比浏览器多:文件 IO 操作、数据库、子进程、网络 IO、定时器、完成对应操作都回家返回结果和回调放到任务队列中<ul><li>事件循环会不断的从任务队列取出对应的事件（回调函数）来执行</li><li>事件循环具体来说，是主线程过了一遍，异步操作添加到自己的队列位置后，开始执行各个队列的过程</li></ul></li><li>node 每一次事件循环(Tick)都有很多阶段<ul><li>定时器（timers）</li><li>待定回调(Pending Callback)</li><li>idle,prepare:仅系统内部使用</li><li>轮询(Poll):检索新的 I&#x2F;O 事件，执行 I&#x2F;O 事件的回调<ul><li>每次 Tick 中这个阶段世间会比较长，系统希望 io 回调尽可能早相应，用户尽早拿到数据来用</li><li>甚至会阻塞</li></ul></li><li>检测：setImmediate()回调在这里执行<ul><li>立即执行，是说不会保存到其他地方，直接放到 check queue 中</li></ul></li><li>关闭的回调函数：如 socket.on(“close”,()&#x3D;&gt;{})</li><li>node 事件循环的队列<ul><li>微任务队列<ul><li><strong>next tick queue ：</strong>process.nextTick</li><li><strong>other queue ：</strong>Promise.then 回调、queueMicrotask</li></ul></li><li>宏任务队列<ul><li><strong>timer queue ：</strong>setTimeout、setInterval<ul><li>如果时间不是 0，只会被系统保存，不会直接放到队列中，要等时间到了，才会加入队列，等待下一次循环才开始执行</li><li>如果时间是 0，正常情况会在本次循环宏任务最先执行，有时特殊情况不会<ul><li>出现这种情况的原因主要和 setTimeout 的实现代码有关，当我们不传时间参数或者设置为 0 的时候，nodejs 会取值为 1，即 1ms（在浏览器端可能取值会更大一下，不同浏览器也各不相同），所以在电脑 cpu 性能够强，能够在 1ms 内执行到 timers phase 的情况下，由于时间延迟不满足回调不会被执行，于是只能等到第二轮再执行，这样 setInterval 就会先执行。</li></ul></li></ul></li><li><strong>poll quere ：</strong>IO 事件</li><li><strong>check quere ：</strong>setImmediate<ul><li>setImmediate 只有 IE10+和 Node 上兼容比较好</li></ul></li><li><strong>close queue ：</strong>close 事件</li></ul></li></ul></li></ul></li></ul></li></ol><h3 id="特性能"><a href="#特性能" class="headerlink" title="特性能"></a>特性能</h3><blockquote><p>Nodejs 可以解析 js 代码，没有浏览器安全级别限制（安全沙箱、同源策略），并提供了很多系统级别 API</p></blockquote><ul><li>文件读写（File System）</li><li>进程管理（Process）</li><li>网路通讯等</li></ul><h3 id="三大特点"><a href="#三大特点" class="headerlink" title="三大特点:"></a>三大特点:</h3><ul><li>事件驱动</li><li>非阻塞 I(input)&#x2F;O(output) 输入输出流</li><li>基于 chrome V8 runtime 轻量高效</li></ul><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><ul><li>浏览器<ul><li>基本语法</li><li>DOM</li><li>BOM</li><li>Ajax</li><li>系统文件数据库(处于安全性考虑 不能实现)</li></ul></li><li>服务器<ul><li>基本语法</li><li>操作数据库</li><li>操作本地文件</li><li>进程管理</li><li>网络通讯</li></ul></li></ul><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul><li>核心模块(node 软件提供的)</li><li>第三方模块(用 npm 安装)<ul><li>nodemailer</li></ul></li><li>自定义模块(一个 js 文件就是一个模块)</li></ul><h4 id="模块操作"><a href="#模块操作" class="headerlink" title="模块操作"></a>模块操作</h4><blockquote><p>node 使用 CommonJS 规范，浏览器是不支持的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于模块作用域,导入后模块间不会互相污染,必须通过导出才可以在外部调用</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>); <span class="comment">//导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(os.<span class="title function_">freemem</span>());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>(<span class="string">&quot;./node&quot;</span>);</span><br><span class="line"><span class="title function_">req</span>();</span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="comment">// 多个导出1</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">export1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;export1&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">export2</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;export2&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//多个导出2</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    export1,</span><br><span class="line">    export2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">const</span> &#123; export1, export2 &#125; = <span class="built_in">require</span>(<span class="string">&quot;./node&quot;</span>);</span><br><span class="line"><span class="title function_">export1</span>();</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="comment">//exports 是 module.exports 的引用</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">export1</span> = export1</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">export2</span> = export2</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> = &#123;xxx,xxx&#125; <span class="comment">//错误引用改变了</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><ol><li>获取目标网站 (http.get)</li><li>分析网站内容 (cheerio 通过 jq 选择器获取想要的内容 或直接用正则匹配)</li><li>获取有效信息 下载或其他操作</li></ol><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><p><a href="https://www.expressjs.com.cn/">官网</a></p><h4 id="api"><a href="#api" class="headerlink" title="api"></a>api</h4><ul><li>ip</li><li>端口号</li><li>pathname</li><li>method</li><li>接收用户的参数</li></ul><h4 id="template-V-层"><a href="#template-V-层" class="headerlink" title="template(V 层)"></a>template(V 层)</h4><ul><li>ejs</li><li>pug</li><li>jade</li><li><a href="http://www.sunxiaoning.com/language/474.html">art-template</a></li><li>将 vue 当做模板放到后端执行就是 vue SSR</li></ul><p>前后端分离:管理代码方便<br>服务端直接渲染返页面:速度效率快，不方便管理</p><h4 id="页面渲染-render"><a href="#页面渲染-render" class="headerlink" title="页面渲染 render"></a>页面渲染 render</h4><ul><li>SSR (Server Side render 服务端渲染,返回整个页面)</li><li>CSR (Client Side render 客户端渲染,返回数据如 JSON)</li></ul><h3 id="什么是服务器"><a href="#什么是服务器" class="headerlink" title="什么是服务器"></a>什么是服务器</h3><ul><li>服务器<ul><li>服务器的本质就是一台电脑</li><li>服务器软件(如:PHP 的 apach、Java 的 tomcat、微软的 iis、ngnix、node 等)</li><li>得到服务器 IP 和端口号</li></ul></li><li>局域网：服务器通过网线或无线相连接,每个电脑都会有一个 IP</li><li>外网</li><li>IP:找到服务器主机的位置</li><li>端口号:找到主机中某个程序的位置(0-65535)<ul><li>0-1023： BSD 保留端口，也叫系统端口(0 不使用)</li><li>1024-5000： BSD 临时端口,留给应用程序使用</li><li>5001-65535：BSD 服务器(非特权)端口，用来给用户自定义端</li><li>http 服务 80,用户访问就不要输入端口号了</li></ul></li></ul><h3 id="中间件-middlewear"><a href="#中间件-middlewear" class="headerlink" title="中间件 middlewear"></a>中间件 middlewear</h3><ul><li>内置中间件(静态资源目录 static)</li><li>自定义中间件(全局 局部)</li><li>第三方中间件 (如 body-parser)</li></ul><p>注意 next()</p><h3 id="静态资源目录-static"><a href="#静态资源目录-static" class="headerlink" title="静态资源目录 static"></a>静态资源目录 static</h3><blockquote><p>指定一个目录,目录可以被访问 类似 Apache 的 www</p></blockquote><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><blockquote><p>原理:将图片、音乐等要上传的东西转换文数据流,通过 ajax 或 form 表单传到服务器，服务器接收这些数据后再写入文件系统之中</p></blockquote><ol><li>安装 multer 模块</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install multer</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>设置路径与文件名</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="api-接口"><a href="#api-接口" class="headerlink" title="api 接口"></a>api 接口</h3><ul><li>url</li><li>方法</li><li>参数</li><li>结果</li></ul><h3 id="node-跨域-cors-中间件处理"><a href="#node-跨域-cors-中间件处理" class="headerlink" title="node 跨域 cors 中间件处理"></a>node 跨域 cors 中间件处理</h3><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p>http 请求 无状态 服务器、客户端相互不认识</p><ul><li>无状态，http 的每次请求对服务器来说都是单独的请求，和之前请求没有任何关系</li></ul><p>基本思路:</p><ol><li>某个用户登录成功后,将用户相关信息加密,生成一个字符串给前端（通过 cookie 自动传）</li><li>这个用户调用其他接口时，将加密字符串（登录凭证）传给服务器，后端通过这些字符判断用户的身份（通过 cookie 自动传）</li><li>再根据这个用户的权限进行验证，是否可以操作</li></ol><h4 id="方案一、session-cookie"><a href="#方案一、session-cookie" class="headerlink" title="方案一、session + cookie"></a>方案一、session + cookie</h4><p>相关插件:</p><ul><li>cookie-parser 解析 cookie</li><li>express-session<br>或</li><li>cookie-session</li></ul><p>使用步骤:</p><ol><li>用户输入用户名、密码进行登录</li><li>成功后，后端会存一个 session，保存用户信息</li><li>session 值当做 cookie 内容被种到客户端</li><li>cookie 会在请求下一个资源时携带（默认域名为作用域，子域名不会携带）</li><li>后端将 cookie 内容与 session 值进行对比，相等通过，不相等不通过</li><li>缺点:服务器需要存每个用户的 session</li><li>cookie 不设置过期时间(内存 cookie，会话 cookie)，浏览器关闭自动删除，设置过期时间（硬盘 cookie）浏览器关闭依然存在，过期了才会删除</li><li>当访问接口时，发现浏览器 cookie 存储有，与该接口同域名的 cookie，就会自动携带到请求头中</li></ol><p>缺点<br>每个 http 都会携带<br>大小 4kb 限制<br>其他客户端(IOS 安卓) 必须手动设置，与浏览器自动不一致<br>分布式系统和服务器集群要保证服务器 1 中的 session，要在服务器 2、3 中正确解析<br>设置 cookie</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端设置</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;name=lzoxun;max-age=5;&quot;</span>; <span class="comment">// 5s过期时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// koa 后端设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sessin 基于 cookie，只能服务端设置</span></span><br><span class="line"><span class="comment">// npm install koa-session</span></span><br><span class="line"><span class="comment">// 设置 session 到时候 ctx 就会有session这个属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Session</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="title class_">Session</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;sessionid&quot;</span>,</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">5</span> * <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">signed</span>: <span class="literal">true</span>, <span class="comment">//签名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  app</span><br><span class="line">);</span><br><span class="line">app.<span class="property">keys</span> = [<span class="string">&quot;fdsafafsa&quot;</span>]; <span class="comment">// 签名就要有这个，用户不知道这个就不能正确加解密，session别修改，这边也不会获取</span></span><br><span class="line">app.<span class="title function_">use</span>(session);</span><br></pre></td></tr></table></figure><h4 id="方案二、jwt-（json-web-token）"><a href="#方案二、jwt-（json-web-token）" class="headerlink" title="方案二、jwt （json web token）"></a>方案二、<a href="http://jwt.io/">jwt</a> （json web token）</h4><p>使用步骤:</p><ul><li>用户登录 服务器产生一个 token(加密字符串)发送给前端</li><li>前端将 token 进行保存</li><li>前端发起数据请求通过 headers 携带 token</li><li>服务器验证 token 是否合法,如果合法继续操作否则终止操作</li><li>token 应用场景:无状态请求、保存用户登录状态、第三方登录…</li></ul><p>jwt 生成 token 的组成部分<br>header<br>alg : 默认 { algorithm: “HS256”} 对称加密<br>typ : 固定值<br>payload<br>用户信息<br>signature<br>设置 secreKey</p><p>生成 header.payload.siggnature 加密后的字符串</p><h4 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h4><p>两种加密方式:<br>非对称加密（又叫公钥加密）:RS256、RSA 算法 …<br>通过私钥产生 token、通过公钥解密 token<br>指加密和解密使用不同密钥的加密算法,也称为公私钥加密。<br>加密过程: 原文 + 公钥 &#x3D; 密文 （项目中好像遇到原文+私钥&#x3D;密文？？）<br>解密过程: 密文 + 私钥 &#x3D; 原文</p><pre><code>相对安全复杂</code></pre><p>对称加密: AES<br>加密解密预定一个密钥，加密和解密使用相同同密钥的加密算法<br>加密过程: 原文 + 密钥 &#x3D; 密文<br>解密过程: 密文 - 密钥 &#x3D; 原文</p><pre><code>相对简单快速</code></pre><p>客户端加密的意义<br>1、如果被抓包，抓走的是明文还是密文，对方都可以拿来登陆，仅有的作用是，如果密码够复杂，对方无法解密，对面就不知道你的真时密码，就不肯拿真实密码去其他平台尝试登陆你的账户</p><pre><code>2、类似(姓名、银行卡号、家庭住址。。。) 这种也可以客户端3、如果可以做到到直接抓包无法登陆,或者不容易登陆 呢</code></pre><p>​</p><p>安全登陆姿势<br>1、将 密码+时间戳 加密后传输，服务端解密，并按照时间戳 3s 有效的方式允许登陆.这样也能加强安全性</p><p>客户端加服务器解密<br>客户端通过 <code>crypto-js</code> 将字符串通过指定方式加密，服务器拿到加密串后，可以以同样方式解密，或再次加密。。。</p><p>[官网](<a href="https://www.openssl.org/source/"> https://www.openssl.org/source/</a>) <a href="http://slproweb.com/products/Win32OpenSSL.html">下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl方式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成私钥</span></span><br><span class="line">openssl 回车</span><br><span class="line"><span class="meta prompt_">OpenSSL&gt; </span><span class="language-bash">genrsa -out rsa_private_key.pem 2048  <span class="comment">#(-out 文件名 字符数)</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据私钥生成公钥</span></span><br><span class="line"><span class="meta prompt_">OpenSSL&gt; </span><span class="language-bash">rsa -<span class="keyword">in</span> rsa_private_key.pem -pubout -out rsa_public_key.pem <span class="comment">#(-in 私钥名 -pubout -out 公钥名)</span></span></span><br></pre></td></tr></table></figure><p>对称加密：指加密和解密使用<code>相同密钥</code>的加密算法。对称加密算法用来对敏感数据等信息进行加密,常用的算法包括 DES、3DES、AES、DESX、Blowfish、RC4、…</p><p>插件</p><ul><li><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> scrict = <span class="string">&quot;jfjdsajfdsajfdsa&quot;</span>; <span class="comment">//私钥 （对称加密解密都是它）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> playload = &#123;</span><br><span class="line">  <span class="comment">//传递的数据</span></span><br><span class="line">  <span class="attr">us</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">ps</span>: <span class="number">456</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">creatToken</span>(<span class="params">playload</span>) &#123;</span><br><span class="line">  <span class="comment">//产生token</span></span><br><span class="line">  playload.<span class="property">ctime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  playload.<span class="property">exp</span> = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">30</span>; <span class="comment">//30分钟过期</span></span><br><span class="line">  <span class="comment">// 签名 默认HS256加密方式</span></span><br><span class="line">  <span class="keyword">return</span> jwt.<span class="title function_">sign</span>(playload, scrict);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkToken</span>(<span class="params">token</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resovle, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//验证</span></span><br><span class="line">    jwt.<span class="title function_">verify</span>(token, scrict, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;token 验证失败&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//ctime + exp &lt; Data().now 说明超时了</span></span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  creatToken,</span><br><span class="line">  checkToken,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// token 解码</span></span><br><span class="line"><span class="keyword">var</span> decoded = jwt.<span class="title function_">decode</span>(token, &#123; <span class="attr">complete</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="密码加密-bcrypt"><a href="#密码加密-bcrypt" class="headerlink" title="密码加密 bcrypt"></a>密码加密 bcrypt</h4><blockquote><p>每次加密得到的 hash 字符串是不一样的,验证时可以通过输入的密码与 hash 进行匹配</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bcrypt -S</span><br></pre></td></tr></table></figure><h3 id="Express-RMVP-模式"><a href="#Express-RMVP-模式" class="headerlink" title="Express RMVP 模式"></a>Express RMVP 模式</h3><blockquote><p>MVC -&gt; MVP|RMVP -&gt; MVVM ,Web 设计模式</p></blockquote><p><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html">参考</a></p><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><ul><li>M:Model,模型层，数据相关的操作</li><li>V:View,视图层，用户界面渲染逻辑(html、css…)</li><li>C:控制器，js</li><li>MVC 之间三方都能相互通讯</li><li>View 层是界面，Controller 层是业务逻辑，Model 层是数据库访问(WEB 接口调用)</li></ul><h4 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h4><ul><li>M:Model,模型层，数据相关的操作</li><li>V:View,视图层，用户界面渲染逻辑(html、css…)</li><li>P:Presenter,响应视图指令，同时进行相关业务处理，必要时候获调用 Model 获取底层数据，返回指令结果到视图，驱动视图渲染</li><li>MVP 中 M 和 V 无法通讯<ul><li>Model 不再负责业务逻辑和视图变化，只负责底层数据处理</li><li>View 层只负责发起指令和根据数据渲染 UI，不再有主动监听数据变化等行为，所以也被称之为被动视图</li></ul></li><li>R:请求,RMVP 是通过请求与控制器通讯(如 app.use(“&#x2F;R”,xxx))</li></ul><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><ul><li>M:Model,模型层，数据相关的操作</li><li>V:View,视图层，用户界面渲染逻辑(html、css…)</li><li>VM:ViewModel,</li><li>与 MVP 唯一的区别是，它采用双向绑定(data-binding),P 虽然能与 V 相互通信,但是 VM 与 V 一端变化另一端直接变化</li></ul><h3 id="node-服务调用谷歌控制台"><a href="#node-服务调用谷歌控制台" class="headerlink" title="node 服务调用谷歌控制台"></a>node 服务调用谷歌控制台</h3><p>node-dev 功能与 nodemon 类似</p><ul><li>通过 nodemon –inspect –inspect-brk? server.js 开启服务</li><li>配合 debugger 使用</li><li>谷歌打开地址: chrome:&#x2F;&#x2F;inspect&#x2F;#devices</li><li>点击 Open dedicated DevTools for Node -&gt; Connection 添加域名端口号</li><li>就能在 Open dedicated DevTools for Node -&gt; console 中天使 node 项目了</li></ul><h3 id="开发中常用插件"><a href="#开发中常用插件" class="headerlink" title="开发中常用插件"></a>开发中常用插件</h3><ul><li>log4js &#x2F;&#x2F;日志操作</li><li>pm2 &#x2F;&#x2F; 自动化部署 node 项目</li></ul><p><a href="https://www.bilibili.com/video/BV1Ci4y1L7gk?p=7">参考资料</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">去年工作总结与2021年工作计划</span><br><span class="line">    在去年一年时间里,逐渐完善了iot管理系统云版本，内网版，三套监控大屏系统，内网版的3D设备系统。移动端微信公众号也逐渐成熟，辉和、通佰、和猎狐三套样式都在维护，企业微信也有一套系统可以查看信息，也能方便维护人员在外面能做一些少量的管理，同时在休息时间学习了uni-app，nodejs，TypeScript，微信小程序以及云开发等新技术</span><br><span class="line">    如果有时间并且公司需要的话在2021年的计划中可以通过uni-app技术为公司开发移动端app、微信小程序、百度小程序、支付宝小程序等各个平台系统，可以通过云服务配合nodejs开发一些简单的服务器功能,不需要额外购买分配服务器，此外新的一年里如果时间计划的话，还会将现有系统进行适当优化，有适合的ui的话也可以计划将界面进行改版</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>http-server</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb</title>
      <link href="/2020/01/01/server/node/server-mongodb/"/>
      <url>/2020/01/01/server/node/server-mongodb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>非关系型数据库-基于分布式文件存储的 NoSQL</p></blockquote><h2 id="下载安装-M-层"><a href="#下载安装-M-层" class="headerlink" title="下载安装(M 层)"></a>下载安装(M 层)</h2><p><a href="https://www.mongodb.com/try/download">官网下载</a></p><ul><li>MongoDB Community Server 社区版</li><li>MongoDB Enterprise Server 企业版</li></ul><p><a href="https://www.mongodb.com/try/download/database-tools">MongoDb Tools</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>安装</p><ul><li>选择 complete 完全安装非自定义,不要勾选 Install MongoDB Compass</li><li>安装完成之后可能要配置环境变量</li></ul></li><li><p>开启数据库</p><ul><li>终端输入 mongod 执行(一般会提示缺少 C:&#x2F;data&#x2F;db 手动新建目录就行了)</li><li>或 mongod –dbpath d:&#x2F;data&#x2F;db 指定数据库路径<ul><li>可设置配置文件 <code>mongod.conf</code></li><li>通过 mongod -f mongod.conf</li></ul></li><li>执行成功后后面有一闪一闪的光标,数据库开启成功(窗口不用关闭)</li></ul></li><li><p>连接数据库</p><ul><li>开启新终端 输入 mongo</li><li>输入 show dbs 出现数据库说明连接成功了</li></ul></li><li><p>linux arch 系列</p><ul><li>安装 aur:mongodb、 mongodb-tools</li><li>创建并添加权限:chmod 777 &#x2F;data&#x2F;db</li></ul></li><li><p>centos 安装</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置源 vim /etc/yum.repos.d/mongodb-org-5.0.repo</span></span><br><span class="line">[mongodb-org-5.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> yum install -y mongodb-org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> systemctl start mongod</span></span><br><span class="line"></span><br><span class="line">mongodb 数据默认存储目录为 /var/lib/mongo ,可以通过 cat /etc/mongodb.conf 查看或设置</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启或关闭可能造成，数据损坏，导致启动错误, 可以查看 /tmp/mongodb-27017.sock  ,有就删除</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或 <span class="built_in">rm</span> -f //xxx//x/data/db/*.lock  ,修复  mongod --repair --dbpath=//xx/x/x/data/db</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>源码安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">下载 解压</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建存储数据和日志的目录</span></span><br><span class="line">mkdir -p /mongod/data /mongod/log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入mongodb加油目录 启动服务</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--fork 后台启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--auth 开启认证模式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--logappend 追加方式记录日志</span></span><br><span class="line">mongod --port=27017 --dbpath=/mongod/data --logpath=/mongod/log/mongodb.log --bind_ip=0.0.0.0 --fork</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongo控制台外关闭</span></span><br><span class="line">mongod --port=27017 --dbpath=/mongod/data --shutdown</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制台中关闭</span></span><br><span class="line">use admin</span><br><span class="line">db.shutdownServer()</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定配置文件/xx/xx/xx/mongod.conf</span></span><br><span class="line">mongod -f /xx/xx/xx/mongod.conf 启动</span><br></pre></td></tr></table></figure><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><h4 id="图形工具连接"><a href="#图形工具连接" class="headerlink" title="图形工具连接"></a>图形工具连接</h4><p><a href="https://www.mongodb.com/try/download/compass">官方工具 compass</a><br><a href="http://www.navicat.com.cn/what-is-navicat-for-mongodb">navicat</a><br><a href="https://robomongo.org/">robo 3t</a><br><a href="https://nosqlbooster.com/downloads">nosqlbooster</a></p><h4 id="工具连接远程"><a href="#工具连接远程" class="headerlink" title="工具连接远程"></a>工具连接远程</h4><blockquote><p>不连接远程 ssh 默认本地连接</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../../static/img/mongodToolSSH.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;ssh&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../../static/img/2022-09-04_231517.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>默认无密码登陆，如果设置了 –auth 就要选择密码连接</p><h4 id="命令行连接"><a href="#命令行连接" class="headerlink" title="命令行连接"></a>命令行连接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo mongodb://mongoroot:mongopwd@114.115.xxx.xxx</span><br></pre></td></tr></table></figure><h4 id="mongoose-连接"><a href="#mongoose-连接" class="headerlink" title="mongoose 连接"></a>mongoose 连接</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost/pro-node-lagou&quot;</span>, &#123;&#125;);</span><br><span class="line"><span class="comment">// 远程连接服务端，ip 设置0.0.0.0</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(</span><br><span class="line">  <span class="string">&quot;mongodb://mongoroot:xxxxxx@xxx.xxx.xxx.xxx:27017/pro-node-lagou?authSource=admin&quot;</span>,</span><br><span class="line">  &#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="用户管理权限"><a href="#用户管理权限" class="headerlink" title="用户管理权限"></a>用户管理权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">mongo 的权限认证与登录，默认是不需要的，通过 --auth 开启的mongo服务，才需要</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看角色列表</span></span><br><span class="line">show roles</span><br><span class="line">root  # 超级账号，超级权限，只在admin库中可用</span><br><span class="line">dbOwner # 允许用户在指定数据库中执行任意操作</span><br><span class="line">read  #允许用户读取指定数据库</span><br><span class="line">readWrite # 允许用户读写指定数据库</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建管理员账户，哪个创建的用户，默认归属那个数据库，只能操作那个数据库</span></span><br><span class="line">1、进入 use admin 管理员库设置管理员账号(默认没密码的)</span><br><span class="line">2、db.createUser(&#123;user:&quot;mongoroot&quot;,pwd:&quot;123456&quot;,roles:[&quot;root&quot;]&#125;)</span><br><span class="line">3、db.createUser(&#123;user:&quot;u1&quot;,pwd:&quot;123456&quot;,roles:[&#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125;]&#125;) # 给u1指定库</span><br><span class="line">4、db.auth(&#x27;mongoroot&#x27;,&#x27;123456&#x27;) # 验证账号是否可用，1 成功</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看用户信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;db&quot;</span> : <span class="string">&quot;testuser&quot;</span> 表示用户只能操作 testuser 数据库</span></span><br><span class="line">show users</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">普通数据库下创建用户，u2只能操作这一个数据库</span></span><br><span class="line">db.createUser(&#123;user:&quot;u2&quot;,pwd:&quot;123456&quot;,roles:[&quot;dbOwner&quot;]&#125;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户</span></span><br><span class="line">db.dropUser(&quot;u2&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">普通方式启动还是不需要账号密码就能登录，要以授权方式启动 --auth</span></span><br><span class="line">mongod --port=27017 --dbpath=/mongod/data --logpath=/mongod/log/mongodb.log --bind_ip=0.0.0.0 --fork --auth</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件添加 auth</span></span><br><span class="line">security:                                                                                                   authorization: enabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以账号登录,</span></span><br><span class="line">mongo -umongoroot -p123456 --authenticationDatabase=admin</span><br><span class="line">mongo -uu2 -p123456 --authenticationDatabase=testuser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">普通连接，授权放方式登录</span></span><br><span class="line">mongo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use 到某个数据库<span class="built_in">test</span></span></span><br><span class="line">db.auth(&#x27;testRoleRser&#x27;,&#x27;123456&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="副本集-replication-复制"><a href="#副本集-replication-复制" class="headerlink" title="副本集(replication) 复制"></a>副本集(replication) 复制</h3><ol><li>一个活跃节点( <strong>Primary</strong> ) + N 个备份节点( <strong>Secondary</strong> )<ol><li>数据同步备份<ol><li>备份节点<code>定期，轮询</code>获取<code>主节点</code>的<code>数据库操作</code>，自己数据库副本<code>执行这些操作</code>，来<code>实现数据同步</code></li></ol></li><li>若活跃接点奔溃，数据库会将其中一个北方接点审计为活跃接点</li><li>备份节点不能主动去操作，想看的话先执行<code>rs.slaveOk()</code></li></ol></li><li>实现故障转移，主从复制<ol><li>解决问题 数据冗余备份，架构高可用</li><li>无法解决单节点压力问题( 硬件限制，并发访问压力)</li></ol></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动三个服务器，并设置所属的副本集 为 rs0</span></span><br><span class="line">mongod --port 27017 --dbpath &quot;D:/mongod/data1&quot; --replSet rs0</span><br><span class="line">mongod --port 27018 --dbpath &quot;D:/mongod/data2&quot; --replSet rs0</span><br><span class="line">mongod --port 27019 --dbpath &quot;D:/mongod/data3&quot; --replSet rs0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录任意一个端口的 mongo，设置，初始化副本集</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置配置对象</span></span><br><span class="line">replSet_config = &#123;</span><br><span class="line">_id:&quot;rs0&quot;,</span><br><span class="line">members:[</span><br><span class="line">&#123;</span><br><span class="line">_id:0,</span><br><span class="line">host:&quot;127.0.0.1:27017&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">_id:1,</span><br><span class="line">host:&quot;127.0.0.1:27018&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">_id:2,</span><br><span class="line">host:&quot;127.0.0.1:27019&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">replSet_config = &#123;</span><br><span class="line">_id:&quot;rs1&quot;,</span><br><span class="line">members:[</span><br><span class="line">&#123;</span><br><span class="line">_id:1,</span><br><span class="line">host:&quot;114.115.212.129:27018&quot;,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化</span></span><br><span class="line">rs.initiate(replSet_config)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看副本集状态</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">health:1 健康的， stateStr:<span class="string">&quot;PRIMARY&quot;</span> 主节点</span></span><br><span class="line">rs.status()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证数据同步备份</span></span><br><span class="line">rs.slaveOk() # 备份节点中执行后才能正常访问</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录指定端口</span></span><br><span class="line">mongo 127.0.0.1:27019</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="多服务器副本集"><a href="#多服务器副本集" class="headerlink" title="多服务器副本集"></a>多服务器副本集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务器1</span></span><br><span class="line">mkdir -p ./mongodb/repl/rs_1/log</span><br><span class="line">mkdir -p ./mongodb/repl/rs_1/data/db</span><br><span class="line"></span><br><span class="line">vim ./mongodb/repl/rs_1/mongod.conf # 填写 /etc/mongod.conf 内容 更改数据和日志地址 放开 replSetName: 副本集名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务器2</span></span><br><span class="line">。。。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入希望作为获得节点的服务器 mongo localhost:27018 启动数据库</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">mongod -f /root/mongodb/repl/rs_1/mongod.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化 (可以直接传入配置)</span></span><br><span class="line">rs.initiate()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看状态，rs.conf() 本质是 <span class="built_in">local</span> 库下 db.system.replset.find()</span></span><br><span class="line">config = rs.conf()</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">host不是ip需要修改</span></span><br><span class="line">config.members[0].host = &quot;192.168.16.134:27018&quot;</span><br><span class="line">rs.reconfig(config) # 重载配置</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加副本节点</span></span><br><span class="line">rs.add(&quot;114.115.212.129:27018&quot;) # 云端端安全组开放端口，本地主要防火墙开放端口 ,  问题可能没关闭selinux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://ke.qq.com/course/2930572/9864689478317964<span class="comment">#term_id=103043162 add无法添加 卡住</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">程序连接方式 mongodb://username:password@192.168.56.101:27017,192.168.56.102:27017,192.168.56.103:27017/db_name?replicaSet=rschunqiu</span></span><br><span class="line"></span><br><span class="line">var config=&#123;_id:&quot;rs1&quot;,members:[&#123;_id:1,host:&quot;114.115.212.129:27018&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure><h2 id="MongoDB-使用"><a href="#MongoDB-使用" class="headerlink" title="MongoDB 使用"></a>MongoDB 使用</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>NoSQL <strong>( Not Only SQL )</strong> 非关系型数据库，是 不<code>同于传统关系型数据库</code> 的统称</p><ul><li>关系，表和表之间通过<strong>主键</strong>和<strong>外键</strong>是有联系的</li><li>一个主表，相关的东西，因为<strong>类型属性不同</strong>，需要存储到<strong>其他表</strong>中，用的时候，通过<strong>主外键取来</strong>使用</li><li>非关系型就不需要，相关的东西直接存放到文档，子属性中就行，<code>容易设计,且速度快</code></li></ul></li><li><p>对比关系数据库</p><ul><li>数据库(database) -&gt; 集合(collectiion) -&gt; 文档(document) -&gt; 字段(field) -&gt; 索引(index) -&gt; _id -&gt; 视图(view) -&gt; 聚合操作</li><li>数据库(databsse) -&gt; 表(table) -&gt; 行(row) -&gt; 列(column) -&gt; 索引(index) -&gt; 主键 -&gt; 视图(view) -&gt; 表链接</li></ul></li><li><p>适用场景</p><ul><li>基于灵活的 json 文档模型，适合业务变化快，敏捷的快速开发</li><li>读写速度快，更适合处理大 数据</li></ul></li><li><p>NoSQL 的优点&#x2F;缺点</p><ul><li>分布式计算 : 当数据多了，快存不下了 ，添加扩展一个节点就可以继续存放了</li><li>…</li></ul></li><li><p>默认数据库</p><ul><li><strong>admin</strong> : 管理员权限数据库</li><li><strong>local</strong> ：这个数据库永远不会被复制，可以用来储存本地服务器的任意集合</li><li><strong>config</strong>：保存分片相关信息</li></ul></li><li></li></ul><h3 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongodb  #数据库名</span><br><span class="line">mongod  #启动数据库</span><br><span class="line">mongo  #连接数据库</span><br><span class="line">mongoose #node操作数据库的指令</span><br></pre></td></tr></table></figure><h3 id="数据库增删改查"><a href="#数据库增删改查" class="headerlink" title="数据库增删改查"></a>数据库增删改查</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库操作  ( DDL-database )</span></span><br><span class="line">show dbs; | show databases                 #查看全部不为空的数据库</span><br><span class="line">db.getMongo()                              #查看db链接机器地址</span><br><span class="line">db.dropDatabase()                          #删除数据库</span><br><span class="line">use &lt;db name&gt;;             #切换数据库(或创建数据库)</span><br><span class="line">db;或者db.getName();        #查看当前所在数据库</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到数据库后，当前数据库集合操作 ( DDL-table )</span></span><br><span class="line">db.createCollection(&quot;testuser&quot;) # 创建集合，新集合没数据可能不会显示（灵活 不用知道字段以及类型）</span><br><span class="line">show collections | show tables;          #显示当前数据库中的集合（类似关系数据库中的表）</span><br><span class="line">db.testuser.drop()       #删除名为testuser的集合</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文档操作 ( DML-table )</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接使用js语句操作</span></span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;db.testusers.insert(&#123;name:`Name$&#123;i&#125;`,age:10+i&#125;)&#125;</span><br><span class="line"></span><br><span class="line">db.testuser.insert|save([&#123;a:1,b:2&#125;])       # 插入多个文档，不写中开括号就插入单个，save(废弃)</span><br><span class="line">-直接往不存在的集合插入文档，默认会自动创建这个集合</span><br><span class="line">db.testuser.insertMany([&#123;a:1,b:2&#125;])        # 也是批量插入</span><br><span class="line">db.testuser.remove(&#123;&#125;)                     # 删除所有</span><br><span class="line">db.testuser.remove(&#123;a:1&#125;)                  # 删除 a=1的文档</span><br><span class="line"></span><br><span class="line">db.testuser.update(&#123;a:1&#125;,&#123;b:5&#125;)            # 替换原有文档成 &#123;b:5&#125; 只有_id 会保留</span><br><span class="line">    db.testuser.update(&#123;a:1&#125;,&#123;$set:&#123;b:5&#125;&#125;)     # 原有文档的基础上，修改或增加属性 (匹配到的1条)</span><br><span class="line">    db.testuser.update(&#123;a:1&#125;,&#123;$set:&#123;b:5&#125;&#125;,&#123;multi:true&#125;)     # 原有文档的基础上，修改或增加属性 (所有匹配到的)</span><br><span class="line">        -参数 query,更新对象，不存在记录是否插入0|1，是否更新所有匹配（0|1 简写）</span><br><span class="line">    db.testuser.update(&#123;a:0&#125;,&#123;$inc:&#123;b:NumberInt(1)&#125;&#125;) # 找到a=1的文档，让它的b属性自增1</span><br><span class="line">    db.testuser.update(&#123;a:0&#125;,&#123;$unset:&#123;age:1&#125;&#125;) # 删除指定的 key,值随意</span><br><span class="line">    db.testuser.update(&#123;a:0&#125;,&#123;$push:&#123;list:&quot;ele&quot;&#125;&#125;) # 所有匹配记录，list (必须不存在的或是数组类型)字段push一个元素</span><br><span class="line">    db.testuser.updateMany(&#123;name:&quot;Name9&quot;&#125;,&#123;$push:&#123;&quot;list&quot;:&#123;$each:[&quot;up3&quot;,&quot;up4&quot;]&#125;&#125;&#125;) # 添加多个 $pushAll 不能用</span><br><span class="line">    db.testuser.update(&#123;a:0&#125;,&#123;$addToSet:&#123;list:&quot;no repeat ele&quot;&#125;) # 如果值存在，不添加，不存在才添加</span><br><span class="line">    db.testuser.update(&#123;a:0&#125;,&#123;$pop:&#123;list:1&#125;&#125;,0,1) #1 从后面删除，-1 从前面删除</span><br><span class="line">    db.testuser.update(&#123;a:0&#125;,&#123;$pull:&#123;list:&quot;ele&quot;&#125;&#125;,0,1) # 通过值删除</span><br><span class="line">    db.testuser.update(&#123;a:0&#125;,&#123;$pullAll:&#123;list:[&quot;ele1&quot;,&quot;ele2&quot;]&#125;&#125;,0,1) # 删除多个</span><br><span class="line">    # $pop 删除</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 ( DQL-table )</span></span><br><span class="line">db.testuser.find()       # 查询当前所在数据库，testuser 集合里面的列表文档内容</span><br><span class="line">db.testuser.find(&#123;age:20&#125;) # 查询年龄为20的文档</span><br><span class="line">db.testuser.find(&#123;age:20,name:1&#125;) # 查询年龄为20,并且name为1的文档</span><br><span class="line">db.testuser.find(&#123;age:&#123;$ne:20&#125;&#125;) # 查询年龄不为20的文档</span><br><span class="line">db.testuser.find(&#123;age:&#123;$gt:20&#125;&#125;) #查找age大于2的：$gte 大于等于、 $lt 小于 、$lte 小于等于</span><br><span class="line">    db.testuser.find(&#123;age:&#123;$gt:20,$lt:30&#125;&#125;) #20到30之间</span><br><span class="line">    db.testuser.find(&#123;$or:[&#123;age:1&#125;,&#123;name:2&#125;]&#125;) #或查询</span><br><span class="line">    db.testuser.find(&#123;age:20,&#123;$or:[&#123;sex:1&#125;,&#123;name:2&#125;]&#125;&#125;) # 查找年龄20并且sex为1，或 年龄20并且name为2的文档</span><br><span class="line">    db.testuser.find(&#123;age:&#123;$type:&quot;string&quot;&#125;&#125;) # 查询age类型为字符串的文档</span><br><span class="line">    db.testuser.find(&#123;name:&#123;$all:[&quot;Name0&quot;]&#125;&#125;) # 找出全部 name 为 Name0 的文档</span><br><span class="line">    db.testuser.find(&#123;list:&#123;$all:[&quot;test1&quot;,&quot;test2&quot;]&#125;&#125;) # 找出 list 中同时存在 test1 和 test2 的所有文档</span><br><span class="line">    db.testuser.find(&#123;list:&#123;$in:[&quot;test1&quot;,&quot;test2&quot;]&#125;&#125;) # 找出 list 中存在 test1 或 test2 的所有文档</span><br><span class="line">    db.testuser.find(&#123;list:&#123;$nin:[&quot;test1&quot;,&quot;test2&quot;]&#125;&#125;) # 找出 list 中不存在 test1 和 test2 的所有文档</span><br><span class="line">    db.testuser.find(&#123;name:/^1/&#125;) #正则查询</span><br><span class="line">     # 其他查询关键词 $lte 小于等于，$gte 大于等于</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 对找到的内容进行二次操作</span><br><span class="line">    db.testuser.find(&#123;条件&#125;,&#123;name:0,age:0&#125;) #0表示不要，1表示要，只能全部0（选择排除哪些字段）或全部1（选择哪些 ）</span><br><span class="line"></span><br><span class="line">    db.testuser.find(xxx).sort(&#123;age:1&#125;) #1升序、-1降序</span><br><span class="line">    db.testuser.find(xxx).limit(3) #取指定数目</span><br><span class="line">    db.testuser.find(xxx).skep(n).limit(3) #跳过n条再取指定数目 sort&gt;skep&gt;limit与书写顺序无关</span><br><span class="line">    db.testuser.find(xxx).count() #统计数目</span><br><span class="line"></span><br><span class="line">    db.testuser.findOne(xxx) #只取一条</span><br><span class="line">    db.testuser.distinct(&quot;name&quot;)       #查询名称不重复的记录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">方法</span></span><br><span class="line"> .find().pretty()  # 容易阅读的格式返回</span><br><span class="line"> .find().explain() # 查询分析</span><br><span class="line"></span><br><span class="line"> var sfind = db.testusers.find();</span><br><span class="line"> sfind.next() # 查找下一个文档 .hasNext() 查看是否存在下一个文档</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">索引操作 提高查询效率</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建</span></span><br><span class="line">db.testuser.createIndex(&#123;key:1&#125;) # 单字段创建，key 创建索引的字段，1 按升序建，-1 按降序建</span><br><span class="line">db.testuser.createIndex(&#123;key:1,name:1&#125;) # 创建复合索引（索引一般给查询语句关联的字段建立）</span><br><span class="line">db.testuser.createIndex(&#123;age:1,xxx:xxxx&#125;,&#123;</span><br><span class="line">background:true, # 是否后台创建</span><br><span class="line">unique:true, # 是否设置唯一索引，索引字段不可重复，有重复值的字段也不能是唯一索引</span><br><span class="line">name:&#x27;xx&#x27; # 所有名称</span><br><span class="line">&#125;) # 创建索引 ,多个就是复核索引</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询</span></span><br><span class="line">db.testuser.getIndexes() # 获取查看索引 _id 是默认的</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除</span></span><br><span class="line">db.testuser.dropIndex(&#123;age:1&#125;) # 删除_id之外的索引</span><br><span class="line">db.testuser.dropIndexes() # 删除_id之外的所有索引</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用</span></span><br><span class="line">db.xxx.find(xx).explain()</span><br><span class="line"></span><br><span class="line">&quot;inputStage&quot; : &#123;</span><br><span class="line">    &quot;stage&quot; : &quot;IXSCAN&quot;, # 值为 IXSCAN 表示基于索引扫描，如果 COLLSCAN 全局扫描</span><br><span class="line">    &quot;keyPattern&quot; : &#123; # 使用了这些索引</span><br><span class="line">        &quot;age&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;indexName&quot; : &quot;age_1&quot;, # 索引名称</span><br><span class="line">    &quot;isUnique&quot; : true, # 是否是唯一索引</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组-group"><a href="#分组-group" class="headerlink" title="分组(group)"></a>分组(group)</h3><blockquote><p>只能对本地单台机器数据处理</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分组统计</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计各组身高不高于170的人数</span></span><br><span class="line">db.testuser.group(&#123;</span><br><span class="line">key:&#123;sex:1&#125;,  # 分组字段，指定根据什么来分组 -- 如果通过性别 可分为两组</span><br><span class="line">cond:&#123;height:&#123;$lt:170&#125;,# 查询条件  --   通过条件筛选，只对符合条件的进行操作</span><br><span class="line">initial:&#123;counter=0&#125;,# 初始化 -- 这边这样每组调用 reduce前 都会把counter从0开始</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">聚合函数， 每组都会调用 reduce,参数一 是该组的每一个文档 ，result 全局属性</span></span><br><span class="line">reduce:function(item,result)&#123;result.counter +=1 &#125;,</span><br><span class="line">finalize:function(result)&#123;&#125; # 每统计一组后的回调函数，比如平均值就需要 reduce 相加完，来这里操作</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过分支最终的到的结果中留下 [&#123;sex:m, counter:10&#125;,&#123;sex:g, counter:20&#125;]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">group 不支持分布式运算</span></span><br></pre></td></tr></table></figure><h3 id="聚合-aggragate"><a href="#聚合-aggragate" class="headerlink" title="聚合(aggragate)"></a>聚合(aggragate)</h3><blockquote><p>主要对集合中的数据进行各种统计，并返回统计后的数据结果</p></blockquote><ol><li>常用管道操作<ol><li>$group : 将集合的统计结果进行分组</li><li>$match : 用于过滤数据，找出符合条件的文档 ( 类似 where 子句)</li><li>$project : 修改输入文档的结构，增加删除字段等</li><li>$limit : 限制管道返回的文档数量</li><li>$skip : 跳过指定属性的文档</li><li>$sort : 将文档排序后输出</li><li>$unwind : 将文档中某一个数组字段，拆分成多条，每条包含数组的一个值</li></ol></li><li>常用管道表达式<ol><li>平均数($avg)</li><li>求和($sum)</li><li>第一个($first)</li><li>最后一个($last)</li><li>最大&#x2F;小($max&#x2F;$min)</li><li>得到的数据放到数组中($push)</li></ol></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据通过多个管道进行处理</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">db.testuser.aggragate([&#123;操作1&#125;,&#123;操作2:&#123;xxx&#125;&#125;])</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 sex 字段分组，得到每组的平均 height，保存到 avgerxxx 中</span></span><br><span class="line">db.testuser.aggragate([&#123;$group:&#123;_id:&quot;$sex&quot;,avgerxxx:&#123;$avg:&quot;$height&quot;&#125;&#125;&#125;])</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 sex 字段分组，得到每组的最矮的人的高</span></span><br><span class="line">db.testuser.aggragate([&#123;$group:&#123;_id:&quot;$sex&quot;,minval:&#123;$min:&quot;$height&quot;&#125;&#125;&#125;])</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把各组没人身高放到储存起来</span></span><br><span class="line">db.study.aggregate([&#123;$group:&#123;_id:&quot;$sex&quot;,heiarr:&#123;$push:&quot;$height&quot;&#125;&#125;&#125;])</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多管道</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">身高大于180，男女生的数量</span></span><br><span class="line">db.study.aggregate([</span><br><span class="line">&#123;$match:&#123;height:&#123;$gt:180&#125;&#125;&#125;,</span><br><span class="line">&#123;$group:&#123;_id:&quot;$sex&quot;,sums:&#123;$sum:1&#125;&#125;&#125;</span><br><span class="line">])</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">身高大于180，男女生的数量，只输出属性</span></span><br><span class="line"> db.study.aggregate([</span><br><span class="line"> &#123;$match:&#123;height:&#123;$gt:170&#125;&#125;&#125;,</span><br><span class="line"> &#123;$group:&#123;_id:&quot;$sex&quot;,sums:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line"> &#123;$project:&#123;_id:0,sums:1&#125;&#125;</span><br><span class="line"> ])</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">身高大于180，男女生的数量,排序输出 -1 降序</span></span><br><span class="line">  db.study.aggregate([</span><br><span class="line"> &#123;$match:&#123;height:&#123;$gt:170&#125;&#125;&#125;,</span><br><span class="line"> &#123;$group:&#123;_id:&quot;$sex&quot;,sums:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line"> &#123;$sort:&#123;sums:-1&#125;&#125;</span><br><span class="line"> ])</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">找出女生，降序后，第2-3个，的名字与高度</span></span><br><span class="line"> db.study.aggregate([</span><br><span class="line"> &#123;$match:&#123;sex:&quot;g&quot;&#125;&#125;,</span><br><span class="line"> &#123;$sort:&#123;height:-1&#125;&#125;,</span><br><span class="line"> &#123;$skip:1&#125;,</span><br><span class="line"> &#123;$limit:2&#125;,</span><br><span class="line"> &#123;$project:&#123;_id:0,name:1,height:1&#125;&#125;</span><br><span class="line"> ])</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">将文档数组类型字段 list，将文档拆分多个文档，每个文档的list 是原来 list数组的一个值</span></span><br><span class="line"> db.study.aggregate([&#123;$unwind:&quot;$list&quot;&#125;])</span><br></pre></td></tr></table></figure><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><blockquote><p>大数据计算模型，支持分布式，支持大量服务器同时工作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 map (第一个函数)，处理每一个文档，map函数中最后通过调用 emit(key,value) 返回键值对</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统会将emit的数据整理成 &lt;k1,[v1,v2,v5]&gt;  &lt;k2,[v3,v4]&gt; 这样的格式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 reduce (第二个函数)，&lt;k1,[v1,v2,v5]&gt; 对每一个相同键进行处理  =&gt; 参数1 = k1,参数2 = [v1,v2,v5]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数三，一个对象，把reduce输出的值进行各种处理</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计 study 集合中，相同年龄的有谁，输出到当前数据库的 res 集合中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">res集合中 _id 就是 age的值，value就是age值，对应的学生名字</span></span><br><span class="line">var map = function()&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先把文档数据经过各种处理</span></span><br><span class="line">emit(this.age,this.name); # 可以调用多次</span><br><span class="line">&#125;</span><br><span class="line">var reduce = function(age,values)&#123; # k1,[v1,v2,v5]</span><br><span class="line"> return values</span><br><span class="line">&#125;</span><br><span class="line">db.study.mapReduce(map,reduce,&#123;out:&quot;res&quot;&#125;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">optin</span></span><br><span class="line">out 输出的集合名称</span><br><span class="line">query 塞选完再执行map</span><br><span class="line">sort 排序完再执行map</span><br><span class="line">limit 限制个数执行map</span><br><span class="line"></span><br><span class="line">db.study.mapReduce(map,reduce,&#123;</span><br><span class="line">out:&quot;res&quot;,</span><br><span class="line">sort:&#123;age:-1&#125;,</span><br><span class="line">query:&#123;age:20&#125;,</span><br><span class="line">limit:2</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分片，分布式集群"><a href="#分片，分布式集群" class="headerlink" title="分片，分布式集群"></a>分片，分布式集群</h3><p><img src="D:\MyData\projects\lzo-docs-blog-2\static\img\2022-09-12_094526.jpg" alt="集群规划"></p><ol><li><p><strong>对比副本集：</strong>副本集类似备份，每个备份节点内容是一样的，不担心某个数据库挂了</p></li><li><p><strong>分布式集群：</strong>每个服务器只存能存下数据的一部分，满了，在开一个服务器，继续储存</p></li><li><p><strong>主要部分：</strong></p><ol><li><code>分片节点</code> - 普通 mongod 进程，也可以是副本集，保存分片后的集合数据块</li><li><code>mongos路由节点</code> - 起到一个前端路由功能，供客户端进行接入，启动时从<code>配置节点</code>加载信息，当客户端连接到服务器时，会询问配置服务器，要到那个分片服务器上操作数据</li><li><code>配置节点</code> - 记录了<code>每个分片服务器</code>包含了<code>哪些数据</code>的信息，保存的只是数据的<code>分布表</code></li></ol></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、启动三个分片节点</span></span><br><span class="line">mongod --shardsvr --dbpath &quot;/root/mongos/data1/data/&quot; --port 1111</span><br><span class="line">mongod --shardsvr --dbpath &quot;/root/mongos/data2/data/&quot; --port 2222</span><br><span class="line">mongod --shardsvr --dbpath &quot;/root/mongos/data3/data/&quot; --port 3333</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件 有一个</span></span><br><span class="line">sharding:</span><br><span class="line">clusterRile:shardsvr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、启动配置节点副本集</span></span><br><span class="line">mongod --configsvr --replSet rs_cfg --dbpath &quot;/root/mongos/config_data7/data/&quot; --port 7777</span><br><span class="line">mongod --configsvr --replSet rs_cfg --dbpath &quot;/root/mongos/config_data78data/&quot; --port 8888</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">副本集哪有的配置信息初始化</span></span><br><span class="line">mongo --port 7777 # 登录 7777 端口服务</span><br><span class="line">cfg = &#123;</span><br><span class="line">_id:&quot;rs_cfg&quot;,</span><br><span class="line">configsvr:true,</span><br><span class="line">members:[</span><br><span class="line">&#123;_id:0,host:&quot;127.0.0.1:7777&quot;&#125;,</span><br><span class="line">&#123;_id:1,host:&quot;127.0.0.1:8888&quot;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">rs.initiate(cfg)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、启动 mongos 路由节点 (前面的都是mongod服务) 都在mongos操作所有数据，不需要去哪些分片节点了</span></span><br><span class="line">mongos --configdb 副本集名/配置节点地址 --port 端口</span><br><span class="line">mongos --configdb rs_cfg/localhost:7777,localhost:8888 --port 9999</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、将分片节点信息添加到路由服务器中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongo 5.x新版 sh. 肯都有改db.runCommand()</span></span><br><span class="line">mongo --port 9999 # 进入mongos 服务</span><br><span class="line">sh.addShard(&quot;localhost:1111&quot;) # sh 表示分布式集群</span><br><span class="line">sh.addShard(&quot;localhost:2222&quot;)</span><br><span class="line">sh.addShard(&quot;localhost:3333&quot;)</span><br><span class="line">sh.status() # 查看集群状态</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、启动分片，</span></span><br><span class="line">sh.enableSharding(&quot;test&quot;) # 将test作为分片数据库</span><br><span class="line">db.runCommand(&#123;enableSharding:&quot;test&quot;&#125;)</span><br><span class="line">sh.shardCollection(&quot;test.persons&quot;,&#123;name:1&#125;) # 对test persons集合提供分片支持，片键name,1 代表启用name为片键</span><br><span class="line">db.runCommand(&#123;shardCollection:&quot;test.persons&quot;,key:&#123;name:1&#125;&#125;)</span><br><span class="line">db.runCommand(&#123;shardCollection:&quot;test.persons&quot;,key:&#123;_id:&quot;hashed&quot;&#125;&#125;) # hash 散列平均分片到所有分片</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">片键(shard key)，通过片键决定数据存到哪个节点分片，片键必须是集合文档中存在的，片键太有规律肯能所有的会被分片到同一个分片</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongos 不允许插入没有片键的文档</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置分片时在集合中选一个键，该键的值作为财富数据的依据</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、使用 进入mongos --port 9999 服务，操作与以前单个服务一致</span></span><br><span class="line"> for(var i=0;i&lt;1000000;i++)&#123;db.persons.insert(&#123;name:&quot;name&quot;+i,age:i&#125;)&#125; # 测试数据储存位置</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h3><p><a href="http://www.mongoosejs.net/docs/index.html">官网</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure><p>基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="comment">//链接数据库</span></span><br><span class="line"><span class="comment">//地址:mongodb://主机/数据库名</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost/test1&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库链接对象</span></span><br><span class="line"><span class="keyword">var</span> db = mongoose.<span class="property">connection</span>;</span><br><span class="line">db.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="variable language_">console</span>.<span class="property">error</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>, <span class="string">&quot;connection error:&quot;</span>));</span><br><span class="line">db.<span class="title function_">once</span>(<span class="string">&quot;open&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;链接成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mongoose 里，一切都始于Schema。</span></span><br><span class="line"><span class="comment">//创建一个和集合相关的schema对象(类似表头)</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">us</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;, <span class="comment">//标题:&#123;类型:String,是否必须:true,默认:&#x27;123456&#x27;&#125;</span></span><br><span class="line">  <span class="attr">ps</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">default</span>: <span class="string">&quot;123456&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">Number</span>, <span class="comment">//年龄:Number类型</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将schema对象转化为数据模型</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;user&quot;</span>, userSchema);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserTest</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;usertest&quot;</span>, userSchema);</span><br><span class="line"><span class="comment">//该数据对象与集合相连(&#x27;test1里的集合名&#x27;,schema对象)</span></span><br><span class="line"><span class="comment">//数据库中的集合名会自动以复数形式表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//API文档 -&gt; 模型(mongoose的增删改查) -&gt; 插入方法 Model.insertMany()</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">insertMany</span>(&#123; <span class="attr">us</span>: <span class="string">&quot;123&quot;</span>, <span class="attr">ps</span>: <span class="string">&quot;456&quot;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;插入失败：&quot;</span> + err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>(&#123; <span class="attr">age</span>: <span class="number">12</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询失败：&quot;</span> + err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">remove</span>(&#123; <span class="attr">age</span>: <span class="number">12</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除失败：&quot;</span> + err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="comment">//Model.update(&#x27;更新条件&#x27;,&#x27;更新内容&#x27;,[options],[callback]);</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">update</span>(&#123; <span class="attr">age</span>: <span class="number">20</span> &#125;, &#123; <span class="attr">us</span>: <span class="string">&quot;new123&quot;</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新失败：&quot;</span> + err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="导入导出备份"><a href="#导入导出备份" class="headerlink" title="导入导出备份"></a>导入导出备份</h2><h3 id="备份（-mongodump-）"><a href="#备份（-mongodump-）" class="headerlink" title="备份（ mongodump ）"></a>备份（ mongodump ）</h3><blockquote><p>.bson 方式输出，无法查看</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongodump -h dbhost -d dbname -c cname -o dbdirectory</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dbhost 需要备份的主机</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dbname 需要备份的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cname 需要备份的集合 (备份整个数据库就不需要 -c 了)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dbdirectory 输出存放位置</span></span><br><span class="line">mongodump -h 127.0.0.1:27017 -d test -c table -o /root/mongosave/</span><br><span class="line">mongodump -h 127.0.0.1 --port 27017 -d test -c table -o /root/mongosave/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--auth 开启的 mongo</span></span><br><span class="line">mongodump -h 127.0.0.1:27017 -u admin -p 123456 --authenticationDatabase admin -d test ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份成功后生成两文件 .json 试一下概要信息，.bson(json 的二进制格式) 保存真正的数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="恢复-mongorestore"><a href="#恢复-mongorestore" class="headerlink" title="恢复 ( mongorestore )"></a>恢复 ( mongorestore )</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongorestore -h dbhost ----nsInclude=<span class="string">&quot;数据库名.集合名&quot;</span> --<span class="built_in">dir</span>=dbdirectory</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dbhost 需要备份的主机</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dbdirectory 需要恢复的数据库、或集合的位置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--drop 删除集合中所有数据，完全恢复备份的数据，备份后添加的数据会被删</span></span><br><span class="line">mongorestore -h 127.0.0.1:27017 --nsInclude=&quot;test.table&quot; --dir=/root/mongosave</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">账号密码</span></span><br><span class="line">mongorestore -h 127.0.0.1:27017 -u admin -p 123456 --authenticationDatabase admin --nsInclude=&quot;test.table&quot; --dir=/root/mongosave</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据恢复，会将备份之后删除的添加回来，备份之后添加的默认不动</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="导出-（-mongoexport-）"><a href="#导出-（-mongoexport-）" class="headerlink" title="导出 （ mongoexport ）"></a>导出 （ mongoexport ）</h3><blockquote><p>得到一份可以可以看的 json 数据，普通数据，任何地方都能导入</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongoexport -h dbhost -d dbname -c cname -o dbdirectory/xxxx.json</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dbhost 需要导出的主机</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dbname 需要导出的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cname 需要导出的集合</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dbdirectory 输出存放位置</span></span><br><span class="line">mongoexport  -h 127.0.0.1:27017  -d test -c table -o /root/mongoexport/xx2.json</span><br><span class="line">mongoexport  -h 127.0.0.1:27017  -u admin -p 123456 --authenticationDatabase admin -d test -c table -o /root/mongoexport/xx2.json</span><br></pre></td></tr></table></figure><h3 id="导入-mongoimport"><a href="#导入-mongoimport" class="headerlink" title="导入 ( mongoimport )"></a>导入 ( mongoimport )</h3><blockquote><p>在原有数据追加数据(_id 重复会导致无法导入，没_id 会自动生成_id)，不存在的数据库或集合，导入会自动创建</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -h 127.0.0.1:27017 -d test2 -c tab2 ./mongoexport/xx2.json</span><br><span class="line">mongoimport -h 127.0.0.1:27017 -u admin -p 123456 --authenticationDatabase admin -d test2 -c tab2 ./mongoexport/xx2.json</span><br></pre></td></tr></table></figure><ul><li><h2 id="数据库相关工具-导入mongoimport-h-指明数据库宿主机的-IP-u-指明数据库的用户名-p-指明数据库的密码-d-指明数据库的名字-c-指明-collection-的名字-f-指明要导出那些列-o-指明到要导出的文件名-q-指明导出数据的过滤条件"><a href="#数据库相关工具-导入mongoimport-h-指明数据库宿主机的-IP-u-指明数据库的用户名-p-指明数据库的密码-d-指明数据库的名字-c-指明-collection-的名字-f-指明要导出那些列-o-指明到要导出的文件名-q-指明导出数据的过滤条件" class="headerlink" title="数据库相关工具- 导入mongoimport  - -h : 指明数据库宿主机的 IP  - -u : 指明数据库的用户名  - -p : 指明数据库的密码  - -d : 指明数据库的名字  - -c : 指明 collection 的名字  - -f : 指明要导出那些列  - -o : 指明到要导出的文件名  - -q : 指明导出数据的过滤条件"></a>数据库相关工具<br>- 导入<code>mongoimport</code><br>  - <code>-h</code> : 指明数据库宿主机的 IP<br>  - <code>-u</code> : 指明数据库的用户名<br>  - <code>-p</code> : 指明数据库的密码<br>  - <code>-d</code> : 指明数据库的名字<br>  - <code>-c</code> : 指明 collection 的名字<br>  - <code>-f</code> : 指明要导出那些列<br>  - <code>-o</code> : 指明到要导出的文件名<br>  - <code>-q</code> : 指明导出数据的过滤条件</h2><ul><li><code>mongoexport -d pro-node-lagou -c menus -o D:\lzo-project\lzo-everyday\mongodb-export\menus.dat</code></li><li><code>mongoexport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 -f 字段1，字段2 -q‘&#123;条件导出&#125;’ </code>–csv -o 文件名</li><li>导出<code>mongoexport</code><ul><li><code>-h</code> : 指明数据库宿主机的 IP</li><li><code>-u</code> : 指明数据库的用户名</li><li><code>-p</code> : 指明数据库的密码</li><li><code>-d</code> : 指明数据库的名字</li><li><code>-c</code> : 指明 collection 的名字</li><li><code>-f</code> : 指明要导入那些列</li><li><code>mongoimport -d pro-node-lagou -c menus menus.dat</code></li></ul></li><li>恢复<code>mongorestore</code><ul><li><code>mongorestore D:\lzo-project\lzo-everyday\mongodb-export</code></li></ul></li><li><code>mongofiles</code>保存大文件</li><li><code>mongostat</code>是 mongodb 自带的状态检测工具</li><li><code>mongotop</code>用来跟踪 MongoDB 的实例</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2016/12/10/other/other-markdown/"/>
      <url>/2016/12/10/other/other-markdown/</url>
      
        <content type="html"><![CDATA[<h4 id="16-个-分别代表-16-级标题"><a href="#16-个-分别代表-16-级标题" class="headerlink" title="16 个#分别代表 16 级标题"></a>1<del>6 个#分别代表 1</del>6 级标题</h4><h4 id="前后-创建代码编辑区"><a href="#前后-创建代码编辑区" class="headerlink" title="前后 &#96;&#96;&#96; 创建代码编辑区"></a>前后 &#96;&#96;&#96; 创建代码编辑区</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="一个-标注行头-两个则嵌套"><a href="#一个-标注行头-两个则嵌套" class="headerlink" title="一个 &gt; 标注行头, 两个则嵌套"></a>一个 &gt; 标注行头, 两个则嵌套</h4><blockquote><blockquote><p>尖括号嵌套</p></blockquote></blockquote><hr><h4 id="缩进、换行"><a href="#缩进、换行" class="headerlink" title="缩进、换行"></a>缩进、换行</h4><p>缩进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;或&amp;#8195; //全角</span><br><span class="line">&amp;ensp;或&amp;#8194; //半角</span><br><span class="line">&amp;nbsp;或&amp;#160;  //半角之半角</span><br></pre></td></tr></table></figure><p>&emsp;这是缩进的一句话<br>这是一句话</p><p>换行</p><ul><li>连个空格加回车</li><li>一个回车加回车</li></ul><hr><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>加粗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**Cmd Markdown**</span><br><span class="line">__Cmd Markdown__</span><br></pre></td></tr></table></figure><ul><li>加粗 <strong>Cmd Markdown</strong></li><li>加粗 <strong>Cmd Markdown</strong></li></ul><p>倾斜</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*倾斜*</span><br><span class="line">_倾斜_</span><br></pre></td></tr></table></figure><ul><li><em>倾斜</em></li><li><em>倾斜</em></li></ul><p>斜粗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***斜粗***</span><br><span class="line">___斜粗___</span><br></pre></td></tr></table></figure><ul><li><strong><em>斜粗</em></strong></li><li><strong><em>斜粗</em></strong></li></ul><p>删除线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><ul><li><del>删除线</del></li></ul><p>脚注</p><p>创建脚注格式类似这样 <a href="%E5%AE%9A%E4%B9%89%E5%A5%BD%E7%9A%84%E8%84%9A%E6%B3%A8%E6%96%87%E5%AD%97">^RUNOOB</a>。</p><p>①、②、③、④、⑤、⑥、⑦、⑧、⑨、⑩<br>⑪、⑫、⑬、⑭、⑮、⑯、⑰、⑱、⑲、⑳</p><p>分隔线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><hr><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="* 创建列表"></a>* 创建列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* List1</span><br><span class="line">* List2</span><br><span class="line">* List3</span><br><span class="line">+ List1</span><br><span class="line">+ List2</span><br><span class="line">+ List3</span><br><span class="line">- List1</span><br><span class="line">- List2</span><br><span class="line">- List3</span><br></pre></td></tr></table></figure><ul><li>List1</li><li>List2</li><li>List3</li></ul><ul><li>List1</li><li>List2</li><li>List3</li></ul><ul><li>List1</li><li>List2</li><li>List3</li></ul><h4 id="alt-属性值-图片路径-创建一个图片"><a href="#alt-属性值-图片路径-创建一个图片" class="headerlink" title="! [ alt 属性值 ] (图片路径) &#x2F;&#x2F;创建一个图片"></a>! [ alt 属性值 ] (图片路径) &#x2F;&#x2F;创建一个图片</h4><blockquote><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p></blockquote><h4 id="连接内容-连接地址-“title”-创建一个连接"><a href="#连接内容-连接地址-“title”-创建一个连接" class="headerlink" title="[连接内容] (连接地址 “title”) 创建一个连接"></a>[连接内容] (连接地址 “title”) 创建一个连接</h4><blockquote><p><a href="https://www.baidu.com/" title="TITLE">百度</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">多链接[Google][1]、[Leanote][2]。</span><br><span class="line"></span><br><span class="line">[1]:http://www.google.com</span><br><span class="line">[2]:http://www.leanote.com</span><br></pre></td></tr></table></figure><p>多链接[Google][1]、[Leanote][2]。<br>[1]:<a href="http://www.google.com/">http://www.google.com</a><br>[2]:<a href="http://www.leanote.com/">http://www.leanote.com</a></p><h4 id="i-class-”icon-file-“-i-引用-ico-小图标"><a href="#i-class-”icon-file-“-i-引用-ico-小图标" class="headerlink" title="&lt; i class&#x3D;”icon-file “ &gt; &lt; &#x2F;i &gt; 引用 ico 小图标"></a>&lt; i class&#x3D;”icon-file “ &gt; &lt; &#x2F;i &gt; 引用 ico 小图标</h4><blockquote><p><i class="icon-file"></i></p></blockquote><h4 id="前后一个-添加背景"><a href="#前后一个-添加背景" class="headerlink" title="前后一个 &#96; ,添加背景"></a>前后一个 &#96; ,添加背景</h4><blockquote><p><code>Ctrl+Alt+N</code></p></blockquote><h4 id="x-复选框-前后必须是空行-没有叉叉代表没选中"><a href="#x-复选框-前后必须是空行-没有叉叉代表没选中" class="headerlink" title="- [x] 复选框 前后必须是空行(没有叉叉代表没选中)"></a>- [x] 复选框 前后必须是空行(没有叉叉代表没选中)</h4><ul><li><input disabled="" type="checkbox"> 任务一 未做任务 <code>- 加 空格 加 [ ]</code></li><li><input checked="" disabled="" type="checkbox"> 任务二 已做任务 <code>- 加 空格 加 [x]</code></li></ul><h4 id="绘制表格-—-—-—-控制方向-有这种线的上行代表表头"><a href="#绘制表格-—-—-—-控制方向-有这种线的上行代表表头" class="headerlink" title="绘制表格 | —: | :— |:—:| 控制方向 有这种线的上行代表表头"></a>绘制表格 | —: | :— |:—:| 控制方向 有这种线的上行代表表头</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目        | 价格   |  数量  |</span><br><span class="line">| --------   | -----:  | :----:  |</span><br><span class="line">| 计算机     | \$1600 |   5     |</span><br><span class="line">| 手机        |   \$12   |   12   |</span><br><span class="line">| 管线        |    \$1    |  234  |</span><br></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><hr><p>特性:</p><ul><li>未包含的标签, 可以直接使用 HTML 标签，例如用 HTML &lt;a&gt;标签替代 Markdown 的链接语法</li><li>也支持 HTML 注释</li><li></li></ul><hr><p>编辑软件推荐</p><ul><li><a href="https://typora.io/">typora</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="/2016/12/10/other/other-nvm/"/>
      <url>/2016/12/10/other/other-nvm/</url>
      
        <content type="html"><![CDATA[<p>类似工具<code>n</code>和<code>nvm</code>至支持 linux,<code>nvm-windows</code>就是 win 版的 nvm</p><p>window 的 node 管理器<br><a href="https://github.com/coreybutler/nvm-windows/releases/tag/1.1.7">下载地址</a></p><p>linux 安装后需要将文件追加到 bash 配置文件中<br><code>echo &quot;source /usr/share/nvm/init-vim.sh&quot; &gt;&gt; ~/.zhsrc</code></p><h5 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm list //查找电脑上的node版本</span><br><span class="line">nvm list available //查看网络可以安装的版本</span><br></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置镜像 npm.taobao.org/mirrors/node/   https://registry.npmmirror.com/binary.html ...</span></span><br><span class="line">nvm node_mirror npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror npm.taobao.org/mirrors/npm/</span><br><span class="line"></span><br><span class="line">nvm install &lt;version&gt; # 版本号 如: 12.10.0</span><br><span class="line">nvm alias default v4.3.0 # 设置默认版本</span><br><span class="line">nvm install latest #安装最新版本</span><br><span class="line">nvm install lts #安装最新lts版本</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall &lt;version&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="开启关闭"><a href="#开启关闭" class="headerlink" title="开启关闭"></a>开启关闭</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm off                     //禁用node.js版本管理(不卸载任何东西)</span><br><span class="line">nvm on                      //启用node.js版本管理</span><br></pre></td></tr></table></figure><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nvm ls 列出所有版本</span><br><span class="line">nvm current显示当前版本</span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line">nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line">nvm proxy 查看设置与代理</span><br><span class="line">nvm root [path] 设置和查看root路径</span><br><span class="line">nvm version 查看当前的版本</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注意:<br>切换 node 版本后有时候需要重新 install 项目的依赖才能正常运行<br>全局安装的插件路径都能在当前 nvm node 版本下与 npm config get prefix 指令查看<br>切换版本 npm config get prefix 得到的路径也会一起变化</p><p>暂存</p><p>scoop nvm node 路径 D:\Scoop\persist\nvm-windows\nodejs</p><p>nvm 路径 D:\SCOOP\SHIMS\NVM.EXE</p><h4 id="类似工具-n"><a href="#类似工具-n" class="headerlink" title="类似工具 n"></a>类似工具 n</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grafana</title>
      <link href="/2010/01/01/other/other-grafana/"/>
      <url>/2010/01/01/other/other-grafana/</url>
      
        <content type="html"><![CDATA[<p><a href="https://grafana.com/grafana/download">下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">arch</span>系列 sudo pacman -S grafana</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start grafana.service 启动服务 默认端口3000</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认账号密码admin/admin 第一次需要直接更新新密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件 /etc/grafana.ini</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">grafana-cli 后期安装插件命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码 grafana-cli admin reset-admin-password newpassword</span></span><br><span class="line"></span><br><span class="line">安装成功后相当于建立一个grafana用户</span><br></pre></td></tr></table></figure><blockquote></blockquote><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><blockquote><p>grafana-cli plugins 默认位置 &#x2F;var&#x2F;lib&#x2F;grafana&#x2F;plugins</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grafana-cli plugins install &lt;plugin Id or vis&gt;</span><br><span class="line"></span><br><span class="line">grafana-cli plugins list-remote # 查看可安装的插件列表</span><br><span class="line">grafana-cli plugins ls # 查看已安装插件列表</span><br><span class="line"></span><br><span class="line">安装插件 才会有更多的数据源选择</span><br></pre></td></tr></table></figure><p>服务器 步骤<br>安装启动数据源(mysql mongodb zabbix 等)<br>安装 grafana，并默认通过 3000 端口打开页面<br>grafana 安装插件(数据源相关插件)<br>Data Sources 中添加数据源，并配置第一步准备好的数据源信息关联<br>官网 <a href="https://grafana.com/grafana/dashboards/">https://grafana.com/grafana/dashboards/</a> 查找想要的模板 得到 id</p><p>页面 步骤<br>创建 Folder 自定义一个名称<br>Import 导入模板 &#x3D;&gt; 输入模板上面得到 ID Load 加载<br>选择 Folder<br>最后选择 数据源</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
